<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!--
  Scalable Vector Graphics (SVG) 1.1 (Second Edition)

  $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

  Note: This document is generated from ../master/Overview.html.
  Run "make" from ../master/ to regenerate it.
  -->
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8" /><title>Scalable Vector Graphics (SVG) 1.1 (Second Edition)</title><link rel="stylesheet" type="text/css" media="screen" href="style/svg-style.css" /><link rel="stylesheet" href="http://www.w3.org/StyleSheets/TR/W3C-REC" type="text/css" media="screen" /><style type="text/css">
    .aliceblue { background: rgb(240, 248, 255) }
    .antiquewhite { background: rgb(250, 235, 215) }
    .aqua { background: rgb( 0, 255, 255); }
    .aquamarine { background: rgb(127, 255, 212) }
    .azure { background: rgb(240, 255, 255) }
    .beige { background: rgb(245, 245, 220) }
    .bisque { background: rgb(255, 228, 196) }
    .black { background: rgb( 0, 0, 0) }
    .blanchedalmond { background: rgb(255, 235, 205) }
    .blue { background: rgb( 0, 0, 255) }
    .blueviolet { background: rgb(138, 43, 226) }
    .brown { background: rgb(165, 42, 42) }
    .burlywood { background: rgb(222, 184, 135) }
    .cadetblue { background: rgb( 95, 158, 160) }
    .chartreuse { background: rgb(127, 255, 0) }
    .chocolate { background: rgb(210, 105, 30) }
    .coral { background: rgb(255, 127, 80) }
    .cornflowerblue { background: rgb(100, 149, 237) }
    .cornsilk { background: rgb(255, 248, 220) }
    .crimson { background: rgb(220, 20, 60) }
    .cyan { background: rgb( 0, 255, 255) }
    .darkblue { background: rgb( 0, 0, 139) }
    .darkcyan { background: rgb( 0, 139, 139) }
    .darkgoldenrod { background: rgb(184, 134, 11) }
    .darkgray { background: rgb(169, 169, 169) }
    .darkgreen { background: rgb( 0, 100, 0) }
    .darkgrey { background: rgb(169, 169, 169) }
    .darkkhaki { background: rgb(189, 183, 107) }
    .darkmagenta { background: rgb(139, 0, 139) }
    .darkolivegreen { background: rgb( 85, 107, 47) }
    .darkorange { background: rgb(255, 140, 0) }
    .darkorchid { background: rgb(153, 50, 204) }
    .darkred { background: rgb(139, 0, 0) }
    .darksalmon { background: rgb(233, 150, 122) }
    .darkseagreen { background: rgb(143, 188, 143) }
    .darkslateblue { background: rgb( 72, 61, 139) }
    .darkslategray { background: rgb( 47, 79, 79) }
    .darkslategrey { background: rgb( 47, 79, 79) }
    .darkturquoise { background: rgb( 0, 206, 209) }
    .darkviolet { background: rgb(148, 0, 211) }
    .deeppink { background: rgb(255, 20, 147) }
    .deepskyblue { background: rgb( 0, 191, 255) }
    .dimgray { background: rgb(105, 105, 105) }
    .dimgrey { background: rgb(105, 105, 105) }
    .dodgerblue { background: rgb( 30, 144, 255) }
    .firebrick { background: rgb(178, 34, 34) }
    .floralwhite { background: rgb(255, 250, 240) }
    .forestgreen { background: rgb( 34, 139, 34) }
    .fuchsia { background: rgb(255, 0, 255) }
    .gainsboro { background: rgb(220, 220, 220) }
    .ghostwhite { background: rgb(248, 248, 255) }
    .gold { background: rgb(255, 215, 0) }
    .goldenrod { background: rgb(218, 165, 32) }
    .gray { background: rgb(128, 128, 128) }
    .grey { background: rgb(128, 128, 128) }
    .green { background: rgb( 0, 128, 0) }
    .greenyellow { background: rgb(173, 255, 47) }
    .honeydew { background: rgb(240, 255, 240) }
    .hotpink { background: rgb(255, 105, 180) }
    .indianred { background: rgb(205, 92, 92) }
    .indigo { background: rgb( 75, 0, 130) }
    .ivory { background: rgb(255, 255, 240) }
    .khaki { background: rgb(240, 230, 140) }
    .lavender { background: rgb(230, 230, 250) }
    .lavenderblush { background: rgb(255, 240, 245) }
    .lawngreen { background: rgb(124, 252, 0) }
    .lemonchiffon { background: rgb(255, 250, 205) }
    .lightblue { background: rgb(173, 216, 230) }
    .lightcoral { background: rgb(240, 128, 128) }
    .lightcyan { background: rgb(224, 255, 255) }
    .lightgoldenrodyellow { background: rgb(250, 250, 210) }
    .lightgray { background: rgb(211, 211, 211) }
    .lightgreen { background: rgb(144, 238, 144) }
    .lightgrey { background: rgb(211, 211, 211) }
    .lightpink { background: rgb(255, 182, 193) }
    .lightsalmon { background: rgb(255, 160, 122) }
    .lightseagreen { background: rgb( 32, 178, 170) }
    .lightskyblue { background: rgb(135, 206, 250) }
    .lightslategray { background: rgb(119, 136, 153) }
    .lightslategrey { background: rgb(119, 136, 153) }
    .lightsteelblue { background: rgb(176, 196, 222) }
    .lightyellow { background: rgb(255, 255, 224) }
    .lime { background: rgb( 0, 255, 0) }
    .limegreen { background: rgb( 50, 205, 50) }
    .linen { background: rgb(250, 240, 230) }
    .magenta { background: rgb(255, 0, 255) }
    .maroon { background: rgb(128, 0, 0) }
    .mediumaquamarine { background: rgb(102, 205, 170) }
    .mediumblue { background: rgb( 0, 0, 205) }
    .mediumorchid { background: rgb(186, 85, 211) }
    .mediumpurple { background: rgb(147, 112, 219) }
    .mediumseagreen { background: rgb( 60, 179, 113) }
    .mediumslateblue { background: rgb(123, 104, 238) }
    .mediumspringgreen { background: rgb( 0, 250, 154) }
    .mediumturquoise { background: rgb( 72, 209, 204) }
    .mediumvioletred { background: rgb(199, 21, 133) }
    .midnightblue { background: rgb( 25, 25, 112) }
    .mintcream { background: rgb(245, 255, 250) }
    .mistyrose { background: rgb(255, 228, 225) }
    .moccasin { background: rgb(255, 228, 181) }
    .navajowhite { background: rgb(255, 222, 173) }
    .navy { background: rgb( 0, 0, 128) }
    .oldlace { background: rgb(253, 245, 230) }
    .olive { background: rgb(128, 128, 0) }
    .olivedrab { background: rgb(107, 142, 35) }
    .orange { background: rgb(255, 165, 0) }
    .orangered { background: rgb(255, 69, 0) }
    .orchid { background: rgb(218, 112, 214) }
    .palegoldenrod { background: rgb(238, 232, 170) }
    .palegreen { background: rgb(152, 251, 152) }
    .paleturquoise { background: rgb(175, 238, 238) }
    .palevioletred { background: rgb(219, 112, 147) }
    .papayawhip { background: rgb(255, 239, 213) }
    .peachpuff { background: rgb(255, 218, 185) }
    .peru { background: rgb(205, 133, 63) }
    .pink { background: rgb(255, 192, 203) }
    .plum { background: rgb(221, 160, 221) }
    .powderblue { background: rgb(176, 224, 230) }
    .purple { background: rgb(128, 0, 128) }
    .red { background: rgb(255, 0, 0) }
    .rosybrown { background: rgb(188, 143, 143) }
    .royalblue { background: rgb( 65, 105, 225) }
    .saddlebrown { background: rgb(139, 69, 19) }
    .salmon { background: rgb(250, 128, 114) }
    .sandybrown { background: rgb(244, 164, 96) }
    .seagreen { background: rgb( 46, 139, 87) }
    .seashell { background: rgb(255, 245, 238) }
    .sienna { background: rgb(160, 82, 45) }
    .silver { background: rgb(192, 192, 192) }
    .skyblue { background: rgb(135, 206, 235) }
    .slateblue { background: rgb(106, 90, 205) }
    .slategray { background: rgb(112, 128, 144) }
    .slategrey { background: rgb(112, 128, 144) }
    .snow { background: rgb(255, 250, 250) }
    .springgreen { background: rgb( 0, 255, 127) }
    .steelblue { background: rgb( 70, 130, 180) }
    .tan { background: rgb(210, 180, 140) }
    .teal { background: rgb( 0, 128, 128) }
    .thistle { background: rgb(216, 191, 216) }
    .tomato { background: rgb(255, 99, 71) }
    .turquoise { background: rgb( 64, 224, 208) }
    .violet { background: rgb(238, 130, 238) }
    .wheat { background: rgb(245, 222, 179) }
    .white { background: rgb(255, 255, 255) }
    .whitesmoke { background: rgb(245, 245, 245) }
    .yellow { background: rgb(255, 255, 0) }
    .yellowgreen { background: rgb(154, 205, 50) }
  </style></head><body>

<div class="head">
  <p><a href="http://www.w3.org/"><img height="48" width="72" alt="W3C" src="http://www.w3.org/Icons/w3c_home" /></a></p>
  <h1 id="pagetitle">Scalable Vector Graphics (SVG) 1.1 (Second Edition)</h1>
  <h2 id="pagesubtitle">W3C Recommendation <em>16 August 2011</em></h2>
  <dl><dt>This version:</dt><dd><a href="http://www.w3.org/TR/2011/REC-SVG11-20110816/" class="url">http://www.w3.org/TR/2011/REC-SVG11-20110816/</a></dd><dt>Latest version:</dt><dd><a href="http://www.w3.org/TR/SVG11/" class="url">http://www.w3.org/TR/SVG11/</a></dd><dt>Previous version:</dt><dd><a href="http://www.w3.org/TR/2011/PR-SVG11-20110609/" class="url">http://www.w3.org/TR/2011/PR-SVG11-20110609/</a></dd><dt>Public comments:</dt><dd><a href="mailto:www-svg@w3.org" class="url">www-svg@w3.org</a> (<a href="http://lists.w3.org/Archives/Public/www-svg/">archive</a>)</dd><dt class="top-editors">Editors:</dt><dd>Erik Dahlström, Opera Software &lt;<a href="mailto:ed@opera.com" class="url">ed@opera.com</a>&gt;</dd><dd>Patrick Dengler, Microsoft Corporation &lt;<a href="mailto:patd@microsoft.com" class="url">patd@microsoft.com</a>&gt;</dd><dd>Anthony Grasso, Canon Inc. &lt;<a href="mailto:anthony.grasso@cisra.canon.com.au" class="url">anthony.grasso@cisra.canon.com.au</a>&gt;</dd><dd>Chris Lilley, W3C &lt;<a href="mailto:chris@w3.org" class="url">chris@w3.org</a>&gt;</dd><dd>Cameron McCormack, Mozilla Corporation &lt;<a href="mailto:cam@mcc.id.au" class="url">cam@mcc.id.au</a>&gt;</dd><dd>Doug Schepers, W3C &lt;<a href="mailto:schepers@w3.org" class="url">schepers@w3.org</a>&gt;</dd><dd>Jonathan Watt, Mozilla Corporation &lt;<a href="mailto:jwatt@jwatt.org" class="url">jwatt@jwatt.org</a>&gt;</dd><dd class="top-editors">Jon Ferraiolo, ex Adobe Systems &lt;<a href="mailto:jferrai@us.ibm.com" class="url">jferrai@us.ibm.com</a>&gt; <span class="authornote">(Versions 1.0 and 1.1 First Edition; until 10 May 2006)</span></dd><dd>藤沢 淳 (FUJISAWA Jun), Canon Inc. &lt;<a href="mailto:fujisawa.jun@canon.co.jp" class="url">fujisawa.jun@canon.co.jp</a>&gt; <span class="authornote">(Version 1.1 First Edition)</span></dd><dd>Dean Jackson, ex W3C &lt;<a href="mailto:dean@w3.org" class="url">dean@w3.org</a>&gt; <span class="authornote">(Version 1.1 First Edition; until February 2007)</span></dd></dl>
  <p>Please refer to the <a href="http://www.w3.org/2011/08/REC-SVG11-20110816-errata"><strong>errata</strong></a> for this document, which may include some normative corrections.</p>

  <p>This document is also available in these non-normative formats: a
  <a href="single-page.html">single-page version</a>, a
  <a href="REC-SVG11-20110816.zip">zip archive of HTML</a> (without external dependencies),
  and a <a href="REC-SVG11-20110816.pdf">PDF</a>.
  See also <a href="http://www.w3.org/Graphics/SVG/svg-updates/translations"><strong>translations</strong></a>, noting that the English version of this specification is the only normative version.</p>
  <p class="copyright"><a href="http://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> © 2011 <a href="http://www.w3.org/"><acronym title="World Wide Web Consortium">W3C</acronym></a><sup>®</sup> (<a href="http://www.csail.mit.edu/"><acronym title="Massachusetts Institute of Technology">MIT</acronym></a>, <a href="http://www.ercim.eu/"><acronym title="European Research Consortium for Informatics and Mathematics">ERCIM</acronym></a>, <a href="http://www.keio.ac.jp/">Keio</a>), All Rights Reserved. W3C <a href="http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer">liability</a>, <a href="http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks">trademark</a> and <a href="http://www.w3.org/Consortium/Legal/copyright-documents">document use</a> rules apply.</p>
</div>

<hr />

<h2 id="abstract">Abstract</h2>

<p>This specification defines the features and syntax for Scalable
Vector Graphics (SVG) Version 1.1, a modularized language for describing
two-dimensional vector and mixed vector/raster graphics in XML.</p>

<h2 id="status">Status of this document</h2>

<p><em>This section describes the status of this document at the time of its publication. Other documents may supersede this document. A list of current W3C publications and the latest revision of this technical report can be found in the <a href="http://www.w3.org/TR/">W3C technical reports index</a>  at http://www.w3.org/TR/.</em></p>

<p>This document is the 16 August 2011 SVG 1.1
Second Edition Recommendation.  The Second Edition incorporates a
number of corrections that were published as
<a href="http://www.w3.org/2003/01/REC-SVG11-20030114-errata">errata against the First Edition</a>,
as well as numerous other changes that help make the specification
more readable and unambiguous.  The <a href="#chapter-changes">Changes</a>
appendix lists all of the changes that were made since the 
first Proposed Recommendation publication of the Second Edition.  For all changes made
between the First Edition and the Second Edition, see:</p>

<ul><li><a href="http://www.w3.org/TR/2010/WD-SVG11-20100622/changes.html">Changes between the SVG 1.1 First Edition Recommendation and the first Last Call Working Draft of SVG 1.1 Second Edition</a></li><li><a href="http://www.w3.org/TR/2011/WD-SVG11-20110512/changes.html">Changes between the first and second Last Call Working Drafts of SVG 1.1 Second Edition</a></li><li><a href="http://www.w3.org/TR/2011/PR-SVG11-20110609/changes.html">Changes between the second Last Call Working Draft and the Proposed Recommendation of SVG 1.1 Second Edition</a></li><li><a href="#chapter-changes">Changes between the Proposed Recommendation and this document</a></li></ul>

<p>Comments on this Recommendation are welcome.  Corrections
against the specification will be published as errata,
and subsequently will be incorporated into future editions of SVG 1.1 or into
SVG 2.0.  Comments can be sent to <a href="mailto:www-svg@w3.org" class="url">www-svg@w3.org</a>, the public email
list for issues related to vector graphics on the Web. This list is
<a href="http://lists.w3.org/Archives/Public/www-svg/">archived</a> and
senders must agree to have their message publicly archived from their
first posting. To subscribe send an email to <a href="mailto:www-svg-request@w3.org" class="url">www-svg-request@w3.org</a> with
the word <code>subscribe</code> in the
subject line.</p>

<p>The W3C SVG Working Group has released an expanded 
<a href="http://www.w3.org/Graphics/SVG/Test/20110816/">test suite</a> for SVG 1.1
along with an
<a href="http://www.w3.org/Graphics/SVG/Test/20110816/status/implementation_matrix.html">implementation report</a>.
This test suite will continue to be updated with new tests to improve interoperability even after Recommendation phase.</p>

<p>This document has been produced by the
<a href="http://www.w3.org/Graphics/SVG/WG">W3C SVG Working Group</a> as part of
the <a href="http://www.w3.org/Graphics/Activity">Graphics Activity</a> within
the <a href="http://www.w3.org/Interaction/">W3C Interaction Domain</a>. The
goals of the W3C SVG Working Group are discussed in the
<a href="http://www.w3.org/2007/11/SVG_rechartering/SVG-WG-charter.html">W3C SVG Charter</a>. 
The W3C SVG Working Group maintains a public Web page,
<a href="http://www.w3.org/Graphics/SVG/" class="url">http://www.w3.org/Graphics/SVG/</a>,
that contains further background information. The authors of
this document are the SVG Working Group participants.</p>

<p>This document has been reviewed by W3C Members, by software developers, and by
other W3C groups and interested parties, and is endorsed by the Director as a W3C
Recommendation. It is a stable document and may be used as reference material or
cited from another document. W3C's role in making the Recommendation is to draw
attention to the specification and to promote its widespread deployment. This
enhances the functionality and interoperability of the Web.</p>

<p>This document was produced by a group operating under the
<a href="http://www.w3.org/Consortium/Patent-Policy-20040205/">5 February 2004 W3C Patent Policy</a>. 
W3C maintains a <a rel="disclosure" href="http://www.w3.org/2004/01/pp-impl/19480/status">public list of any patent disclosures</a>
made in connection with the deliverables of the group; that page also includes instructions
for disclosing a patent. An individual who has actual knowledge of a patent which
the individual believes contains <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential">Essential Claim(s)</a>
must disclose the information in accordance with
<a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure">section 6 of the W3C Patent Policy</a>.</p>



<h3 id="AvailableLanguages">Available languages</h3>

<p>The English version of this specification is the only normative version.
However, for translations in other languages see
<a href="http://www.w3.org/Graphics/SVG/svg-updates/translations.html" class="url">http://www.w3.org/Graphics/SVG/svg-updates/translations.html</a>.</p>

<div id="minitoc-section">
<h2 id="minitoc">Table of Contents</h2>

<ul class="toc"><li class="tocline1"><a href="#chapter-expanded-toc">Expanded Table of Contents</a></li></ul><ol class="toc"><li class="tocline1"><a href="#chapter-intro">1 Introduction</a></li><li class="tocline1"><a href="#chapter-concepts">2 Concepts</a></li><li class="tocline1"><a href="#chapter-render">3 Rendering Model</a></li><li class="tocline1"><a href="#chapter-types">4 Basic Data Types and Interfaces</a></li><li class="tocline1"><a href="#chapter-struct">5 Document Structure</a></li><li class="tocline1"><a href="#chapter-styling">6 Styling</a></li><li class="tocline1"><a href="#chapter-coords">7 Coordinate Systems, Transformations and Units</a></li><li class="tocline1"><a href="#chapter-paths">8 Paths</a></li><li class="tocline1"><a href="#chapter-shapes">9 Basic Shapes</a></li><li class="tocline1"><a href="#chapter-text">10 Text</a></li><li class="tocline1"><a href="#chapter-painting">11 Painting: Filling, Stroking and Marker Symbols</a></li><li class="tocline1"><a href="#chapter-color">12 Color</a></li><li class="tocline1"><a href="#chapter-pservers">13 Gradients and Patterns</a></li><li class="tocline1"><a href="#chapter-masking">14 Clipping, Masking and Compositing</a></li><li class="tocline1"><a href="#chapter-filters">15 Filter Effects</a></li><li class="tocline1"><a href="#chapter-interact">16 Interactivity</a></li><li class="tocline1"><a href="#chapter-linking">17 Linking</a></li><li class="tocline1"><a href="#chapter-script">18 Scripting</a></li><li class="tocline1"><a href="#chapter-animate">19 Animation</a></li><li class="tocline1"><a href="#chapter-fonts">20 Fonts</a></li><li class="tocline1"><a href="#chapter-metadata">21 Metadata</a></li><li class="tocline1"><a href="#chapter-backward">22 Backwards Compatibility</a></li><li class="tocline1"><a href="#chapter-extend">23 Extensibility</a></li></ol><ol class="toc"><li class="tocline1"><a href="#chapter-svgdtd">Appendix A: Document Type Definition</a></li><li class="tocline1"><a href="#chapter-svgdom">Appendix B: SVG Document Object Model (DOM)</a></li><li class="tocline1"><a href="#chapter-idl">Appendix C: IDL Definitions</a></li><li class="tocline1"><a href="#chapter-java">Appendix D: Java Language Binding</a></li><li class="tocline1"><a href="#chapter-escript">Appendix E: ECMAScript Language Binding</a></li><li class="tocline1"><a href="#chapter-implnote">Appendix F: Implementation Requirements</a></li><li class="tocline1"><a href="#chapter-conform">Appendix G: Conformance Criteria</a></li><li class="tocline1"><a href="#chapter-access">Appendix H: Accessibility Support</a></li><li class="tocline1"><a href="#chapter-i18n">Appendix I: Internationalization Support</a></li><li class="tocline1"><a href="#chapter-minimize">Appendix J: Minimizing SVG File Sizes</a></li><li class="tocline1"><a href="#chapter-refs">Appendix K: References</a></li><li class="tocline1"><a href="#chapter-eltindex">Appendix L: Element Index</a></li><li class="tocline1"><a href="#chapter-attindex">Appendix M: Attribute Index</a></li><li class="tocline1"><a href="#chapter-propidx">Appendix N: Property Index</a></li><li class="tocline1"><a href="#chapter-feature">Appendix O: Feature Strings</a></li><li class="tocline1"><a href="#chapter-mimereg">Appendix P: Media Type Registration for image/svg+xml</a></li><li class="tocline1"><a href="#chapter-changes">Appendix Q: Changes</a></li></ol>
</div>

<h2 id="Acknowledgments">Acknowledgments</h2>

<p>The SVG Working Group would like to thank the following people for
contributing to this specification by raising issues that resulted
in errata that were folded in to this document:
Tavmjong Bah,
Brian Birtles,
Tolga Capin,
Alex Danilo,
Thomas DeWeese,
Alexey Feldgendler,
Vincent Hardy,
Ian Hickson,
Olaf Hoffmann,
Daniel Holbert,
Oliver Hunt,
Anne van Kesteren,
Takeshi Kurosawa,
Paul Libbrecht,
Robert Longson,
Helder Magalhães,
Robert O’Callahan,
Olli Pettay,
Antoine Quint,
Kalle Raita,
Tim Rowley,
Peter Sorotokin,
Henry S. Thompson,
Jasper van de Gronde,
Mohamed Zergaoui,
Boris Zbarsky.
</p>

<p>In addition, the SVG Working Group would like to acknowledge the
contributions of the editors and authors of
<a href="http://www.w3.org/TR/2001/REC-SVG-20010904/">SVG 1.0</a> and
<a href="http://www.w3.org/TR/2003/REC-SVG11-20030114/">SVG 1.1 (First Edition)</a>,
as much of the text in this document derives from these earlier
versions of the SVG specification.</p>

<p>Finally, the SVG Working Group would like to acknowledge the
great many people outside of the SVG Working Group who help with the
process of developing the SVG specifications. These people are too
numerous to list individually. They include but are not limited to
the early implementers of the SVG 1.0 and 1.1 languages (including
viewers, authoring tools, and server-side transcoders), developers of
SVG content, people who have contributed on the <span class="url">www-svg@w3.org</span> and
<span class="url">svg-developers@yahoogroups.com</span> email lists, other Working Groups at the
W3C, and the W3C Team. SVG 1.1 is truly a cooperative effort between
the SVG Working Group, the rest of the W3C, and the public and benefits
greatly from the pioneering work of early implementers and content
developers, feedback from the public, and help from the W3C team.</p>

<hr class="chapter-divider" />
<div id="chapter-expanded-toc">

<h1> Expanded Table of Contents</h1>

<ul class="toc"><li class="tocline1"><a href="#chapter-expanded-toc">Expanded Table of Contents</a></li></ul><ol class="toc"><li><div class="tocline1"><a href="#chapter-intro">1 Introduction</a></div><ul class="toc">
<li><a href="#intro-AboutSVG">1.1 About SVG</a></li>
<li><a href="#intro-MIMEType">1.2 SVG MIME type, file name extension and Macintosh file
    type</a></li>
<li><a href="#intro-NamespaceAndDTDIdentifiers">1.3 SVG Namespace, Public Identifier and System
    Identifier</a></li>
<li><a href="#intro-W3CCompatibility">1.4 Compatibility with Other Standards Efforts</a></li>
<li><a href="#intro-Terminology">1.5 Terminology</a></li>
<li><a href="#intro-Definitions">1.6 Definitions</a></li></ul></li><li><div class="tocline1"><a href="#chapter-concepts">2 Concepts</a></div><ul class="toc">
<li><a href="#concepts-Intro">2.1 Explaining the name: SVG</a></li>
<li><a href="#concepts-Concepts">2.2 Important SVG concepts</a></li>
<li><a href="#concepts-UsageOptions">2.3 Options for using SVG in Web pages</a></li></ul></li><li><div class="tocline1"><a href="#chapter-render">3 Rendering Model</a></div><ul class="toc">
<li><a href="#render-Introduction">3.1 Introduction</a></li>
<li><a href="#render-PaintersModel">3.2 The painters model</a></li>
<li><a href="#render-RenderingOrder">3.3 Rendering Order</a></li>
<li><a href="#render-Grouping">3.4 How groups are rendered</a></li>
<li><a href="#render-Elements">3.5 How elements are rendered</a></li>
<li><a href="#render-TypesOfGraphicsElements">3.6 Types of graphics elements</a><ul class="toc">
<li><a href="#render-PaintingShapesAndText">3.6.1 Painting shapes and text</a></li>
<li><a href="#render-PaintingRasterImages">3.6.2 Painting raster images</a></li></ul></li>
<li><a href="#render-FilteringPaintRegions">3.7 Filtering painted regions</a></li>
<li><a href="#render-ClippingMaskingObjectOpacity">3.8 Clipping, masking and object opacity</a></li>
<li><a href="#render-ParentCompositing">3.9 Parent Compositing</a></li></ul></li><li><div class="tocline1"><a href="#chapter-types">4 Basic Data Types and Interfaces</a></div><ul class="toc">
<li><a href="#types-syntax">4.1 Syntax</a></li>
<li><a href="#types-BasicDataTypes">4.2 Basic data types</a></li>
<li><a href="#types-Precision">4.3 Real number precision</a></li>
<li><a href="#types-ColorKeywords">4.4 Recognized color keyword names</a></li>
<li><a href="#types-BasicDOMInterfaces">4.5 Basic DOM interfaces</a><ul class="toc">
<li><a href="#types-InterfaceSVGElement">4.5.1 Interface SVGElement</a></li>
<li><a href="#types-InterfaceSVGAnimatedBoolean">4.5.2 Interface SVGAnimatedBoolean</a></li>
<li><a href="#types-InterfaceSVGAnimatedString">4.5.3 Interface SVGAnimatedString</a></li>
<li><a href="#types-InterfaceSVGStringList">4.5.4 Interface SVGStringList</a></li>
<li><a href="#types-InterfaceSVGAnimatedEnumeration">4.5.5 Interface SVGAnimatedEnumeration</a></li>
<li><a href="#types-InterfaceSVGAnimatedInteger">4.5.6 Interface SVGAnimatedInteger</a></li>
<li><a href="#types-InterfaceSVGNumber">4.5.7 Interface SVGNumber</a></li>
<li><a href="#types-InterfaceSVGAnimatedNumber">4.5.8 Interface SVGAnimatedNumber</a></li>
<li><a href="#types-InterfaceSVGNumberList">4.5.9 Interface SVGNumberList</a></li>
<li><a href="#types-InterfaceSVGAnimatedNumberList">4.5.10 Interface SVGAnimatedNumberList</a></li>
<li><a href="#types-InterfaceSVGLength">4.5.11 Interface SVGLength</a></li>
<li><a href="#types-InterfaceSVGAnimatedLength">4.5.12 Interface SVGAnimatedLength</a></li>
<li><a href="#types-InterfaceSVGLengthList">4.5.13 Interface SVGLengthList</a></li>
<li><a href="#types-InterfaceSVGAnimatedLengthList">4.5.14 Interface SVGAnimatedLengthList</a></li>
<li><a href="#types-InterfaceSVGAngle">4.5.15 Interface SVGAngle</a></li>
<li><a href="#types-InterfaceSVGAnimatedAngle">4.5.16 Interface SVGAnimatedAngle</a></li>
<li><a href="#types-InterfaceSVGColor">4.5.17 Interface SVGColor</a></li>
<li><a href="#types-InterfaceSVGICCColor">4.5.18 Interface SVGICCColor</a></li>
<li><a href="#types-InterfaceSVGRect">4.5.19 Interface SVGRect</a></li>
<li><a href="#types-InterfaceSVGAnimatedRect">4.5.20 Interface SVGAnimatedRect</a></li>
<li><a href="#types-InterfaceSVGUnitTypes">4.5.21 Interface SVGUnitTypes</a></li>
<li><a href="#types-InterfaceSVGStylable">4.5.22 Interface SVGStylable</a></li>
<li><a href="#types-InterfaceSVGLocatable">4.5.23 Interface SVGLocatable</a></li>
<li><a href="#types-InterfaceSVGTransformable">4.5.24 Interface SVGTransformable</a></li>
<li><a href="#types-InterfaceSVGTests">4.5.25 Interface SVGTests</a></li>
<li><a href="#types-InterfaceSVGLangSpace">4.5.26 Interface SVGLangSpace</a></li>
<li><a href="#types-InterfaceSVGExternalResourcesRequired">4.5.27 Interface SVGExternalResourcesRequired</a></li>
<li><a href="#types-InterfaceSVGFitToViewBox">4.5.28 Interface SVGFitToViewBox</a></li>
<li><a href="#types-InterfaceSVGZoomAndPan">4.5.29 Interface SVGZoomAndPan</a></li>
<li><a href="#types-InterfaceSVGViewSpec">4.5.30 Interface SVGViewSpec</a></li>
<li><a href="#types-InterfaceSVGURIReference">4.5.31 Interface SVGURIReference</a></li>
<li><a href="#types-InterfaceSVGCSSRule">4.5.32 Interface SVGCSSRule</a></li>
<li><a href="#types-InterfaceSVGRenderingIntent">4.5.33 Interface SVGRenderingIntent</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-struct">5 Document Structure</a></div><ul class="toc">
<li><a href="#struct-NewDocument">5.1 Defining an SVG document fragment: the <span class="element-name">‘svg’</span> element</a><ul class="toc">
<li><a href="#struct-NewDocumentOverview">5.1.1 Overview</a></li>
<li><a href="#struct-SVGElement">5.1.2 The <span class="element-name">‘svg’</span> element</a></li></ul></li>
<li><a href="#struct-Groups">5.2 Grouping: the <span class="element-name">‘g’</span> element</a><ul class="toc">
<li><a href="#struct-GroupsOverview">5.2.1 Overview</a></li>
<li><a href="#struct-GElement">5.2.2 The <span class="element-name">‘g’</span> element</a></li></ul></li>
<li><a href="#struct-Head">5.3 Defining content for reuse, and the <span class="element-name">‘defs’</span> element</a><ul class="toc">
<li><a href="#struct-Overview">5.3.1 Overview</a></li>
<li><a href="#struct-DefsElement">5.3.2 The <span class="element-name">‘defs’</span> element</a></li></ul></li>
<li><a href="#struct-DescriptionAndTitleElements">5.4 The <span class="element-name">‘desc’</span>
and <span class="element-name">‘title’</span> elements</a></li>
<li><a href="#struct-SymbolElement">5.5 The <span class="element-name">‘symbol’</span> element</a></li>
<li><a href="#struct-UseElement">5.6 The <span class="element-name">‘use’</span> element</a></li>
<li><a href="#struct-ImageElement">5.7 The <span class="element-name">‘image’</span> element</a></li>
<li><a href="#struct-ConditionalProcessing">5.8 Conditional processing</a><ul class="toc">
<li><a href="#struct-ConditionalProcessingOverview">5.8.1 Conditional processing overview</a></li>
<li><a href="#struct-SwitchElement">5.8.2 The <span class="element-name">‘switch’</span> element</a></li>
<li><a href="#struct-ConditionalProcessingRequiredFeaturesAttribute">5.8.3 The <span class="attr-name">‘requiredFeatures’</span>
    attribute</a></li>
<li><a href="#struct-ConditionalProcessingRequiredExtensionsAttribute">5.8.4 The <span class="attr-name">‘requiredExtensions’</span>
    attribute</a></li>
<li><a href="#struct-ConditionalProcessingSystemLanguageAttribute">5.8.5 The <span class="attr-name">‘systemLanguage’</span> attribute</a></li>
<li><a href="#struct-ApplicabilityOfTestAttributes">5.8.6 Applicability of test attributes</a></li></ul></li>
<li><a href="#struct-ExternalResourcesRequired">5.9 Specifying whether external resources are required for
    proper rendering</a></li>
<li><a href="#struct-CommonAttributes">5.10 Common attributes</a><ul class="toc">
<li><a href="#struct-Core.attrib">5.10.1 Attributes common to all elements: <span class="attr-name">‘id’</span> and <span class="attr-name">‘xml:base’</span></a></li>
<li><a href="#struct-LangSpaceAttrs">5.10.2 The <span class="attr-name">‘xml:lang’</span> and
    <span class="attr-name">‘xml:space’</span> attributes</a></li></ul></li>
<li><a href="#struct-DOMInterfaces">5.11 DOM interfaces</a><ul class="toc">
<li><a href="#struct-InterfaceSVGDocument">5.11.1 Interface SVGDocument</a></li>
<li><a href="#struct-InterfaceSVGSVGElement">5.11.2 Interface SVGSVGElement</a></li>
<li><a href="#struct-InterfaceSVGGElement">5.11.3 Interface SVGGElement</a></li>
<li><a href="#struct-InterfaceSVGDefsElement">5.11.4 Interface SVGDefsElement</a></li>
<li><a href="#struct-InterfaceSVGDescElement">5.11.5 Interface SVGDescElement</a></li>
<li><a href="#struct-InterfaceSVGTitleElement">5.11.6 Interface SVGTitleElement</a></li>
<li><a href="#struct-InterfaceSVGSymbolElement">5.11.7 Interface SVGSymbolElement</a></li>
<li><a href="#struct-InterfaceSVGUseElement">5.11.8 Interface SVGUseElement</a></li>
<li><a href="#struct-InterfaceSVGElementInstance">5.11.9 Interface SVGElementInstance</a></li>
<li><a href="#struct-InterfaceSVGElementInstanceList">5.11.10 Interface SVGElementInstanceList</a></li>
<li><a href="#struct-InterfaceSVGImageElement">5.11.11 Interface SVGImageElement</a></li>
<li><a href="#struct-InterfaceSVGSwitchElement">5.11.12 Interface SVGSwitchElement</a></li>
<li><a href="#struct-InterfaceGetSVGDocument">5.11.13 Interface GetSVGDocument</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-styling">6 Styling</a></div><ul class="toc">
<li><a href="#styling-SVGStylingProperties">6.1 SVG's styling properties</a></li>
<li><a href="#styling-StylingScenarios">6.2 Usage scenarios for styling</a></li>
<li><a href="#styling-AlternativesForStyling">6.3 Alternative ways to specify styling properties</a></li>
<li><a href="#styling-UsingPresentationAttributes">6.4 Specifying properties using the presentation
    attributes</a></li>
<li><a href="#styling-StylingWithXSL">6.5 Styling with XSL</a></li>
<li><a href="#styling-StylingWithCSS">6.6 Styling with CSS</a></li>
<li><a href="#styling-CaseSensitivity">6.7 Case sensitivity of property names and values</a></li>
<li><a href="#styling-SVGUseOfCSS">6.8 Facilities from CSS and XSL used by SVG</a></li>
<li><a href="#styling-ReferencingExternalStyleSheets">6.9 Referencing external style sheets</a></li>
<li><a href="#styling-StyleElement">6.10 The <span class="element-name">‘style’</span>
    element</a></li>
<li><a href="#styling-ClassAttribute">6.11 The <span class="attr-name">‘class’</span>
    attribute</a></li>
<li><a href="#styling-StyleAttribute">6.12 The <span class="attr-name">‘style’</span>
    attribute</a></li>
<li><a href="#styling-DefaultStyleSheetLanguage">6.13 Specifying the default style sheet language</a></li>
<li><a href="#styling-Inheritance">6.14 Property inheritance</a></li>
<li><a href="#styling-Scope">6.15 The scope/range of styles</a></li>
<li><a href="#styling-UAStyleSheet">6.16 User agent style sheet</a></li>
<li><a href="#styling-AuralStyleSheets">6.17 Aural style sheets</a></li>
<li><a href="#styling-DOMInterfaces">6.18 DOM interfaces</a><ul class="toc">
<li><a href="#styling-InterfaceSVGStyleElement">6.18.1 Interface SVGStyleElement</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-coords">7 Coordinate Systems, Transformations and Units</a></div><ul class="toc">
<li><a href="#coords-Introduction">7.1 Introduction</a></li>
<li><a href="#coords-ViewportSpace">7.2 The initial viewport</a></li>
<li><a href="#coords-InitialCoordinateSystem">7.3 The initial coordinate system</a></li>
<li><a href="#coords-EstablishingANewUserSpace">7.4 Coordinate system transformations</a></li>
<li><a href="#coords-NestedTransformations">7.5 Nested transformations</a></li>
<li><a href="#coords-TransformAttribute">7.6 The <span class="attr-name">‘transform’</span>
    attribute</a></li>
<li><a href="#coords-ViewBoxAttribute">7.7 The <span class="attr-name">‘viewBox’</span>
    attribute</a></li>
<li><a href="#coords-PreserveAspectRatioAttribute">7.8 The <span class="attr-name">‘preserveAspectRatio’</span>
    attribute</a></li>
<li><a href="#coords-EstablishingANewViewport">7.9 Establishing a new viewport</a></li>
<li><a href="#coords-Units">7.10 Units</a></li>
<li><a href="#coords-ObjectBoundingBoxUnits">7.11 Object bounding box units</a></li>
<li><a href="#coords-IntrinsicSizing">7.12 Intrinsic sizing properties of the viewport of SVG content</a></li>
<li><a href="#coords-GeographicCoordinates">7.13 Geographic coordinate systems</a></li>
<li><a href="#coords-SVGGlobalTransformAttribute">7.14 The <span class="attr-name">‘svg:transform’</span> attribute</a></li>
<li><a href="#coords-DOMInterfaces">7.15 DOM interfaces</a><ul class="toc">
<li><a href="#coords-InterfaceSVGPoint">7.15.1 Interface SVGPoint</a></li>
<li><a href="#coords-InterfaceSVGPointList">7.15.2 Interface SVGPointList</a></li>
<li><a href="#coords-InterfaceSVGMatrix">7.15.3 Interface SVGMatrix</a></li>
<li><a href="#coords-InterfaceSVGTransform">7.15.4 Interface SVGTransform</a></li>
<li><a href="#coords-InterfaceSVGTransformList">7.15.5 Interface SVGTransformList</a></li>
<li><a href="#coords-InterfaceSVGAnimatedTransformList">7.15.6 Interface SVGAnimatedTransformList</a></li>
<li><a href="#coords-InterfaceSVGPreserveAspectRatio">7.15.7 Interface SVGPreserveAspectRatio</a></li>
<li><a href="#coords-InterfaceSVGAnimatedPreserveAspectRatio">7.15.8 Interface SVGAnimatedPreserveAspectRatio</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-paths">8 Paths</a></div><ul class="toc">
<li><a href="#paths-Introduction">8.1 Introduction</a></li>
<li><a href="#paths-PathElement">8.2 The <span class="element-name">‘path’</span> element</a></li>
<li><a href="#paths-PathData">8.3 Path data</a><ul class="toc">
<li><a href="#paths-PathDataGeneralInformation">8.3.1 General information about path data</a></li>
<li><a href="#paths-PathDataMovetoCommands">8.3.2 The <strong>"moveto"</strong> commands</a></li>
<li><a href="#paths-PathDataClosePathCommand">8.3.3 The <strong>"closepath"</strong> command</a></li>
<li><a href="#paths-PathDataLinetoCommands">8.3.4 The <strong>"lineto"</strong> commands</a></li>
<li><a href="#paths-PathDataCurveCommands">8.3.5 The curve commands</a></li>
<li><a href="#paths-PathDataCubicBezierCommands">8.3.6 The cubic Bézier curve commands</a></li>
<li><a href="#paths-PathDataQuadraticBezierCommands">8.3.7 The quadratic Bézier curve commands</a></li>
<li><a href="#paths-PathDataEllipticalArcCommands">8.3.8 The elliptical arc curve commands</a></li>
<li><a href="#paths-PathDataBNF">8.3.9 The grammar for path data</a></li></ul></li>
<li><a href="#paths-DistanceAlongAPath">8.4 Distance along a path</a></li>
<li><a href="#paths-DOMInterfaces">8.5 DOM interfaces</a><ul class="toc">
<li><a href="#paths-InterfaceSVGPathSeg">8.5.1 Interface SVGPathSeg</a></li>
<li><a href="#paths-InterfaceSVGPathSegClosePath">8.5.2 Interface SVGPathSegClosePath</a></li>
<li><a href="#paths-InterfaceSVGPathSegMovetoAbs">8.5.3 Interface SVGPathSegMovetoAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegMovetoRel">8.5.4 Interface SVGPathSegMovetoRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegLinetoAbs">8.5.5 Interface SVGPathSegLinetoAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegLinetoRel">8.5.6 Interface SVGPathSegLinetoRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegCurvetoCubicAbs">8.5.7 Interface SVGPathSegCurvetoCubicAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegCurvetoCubicRel">8.5.8 Interface SVGPathSegCurvetoCubicRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegCurvetoQuadraticAbs">8.5.9 Interface SVGPathSegCurvetoQuadraticAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegCurvetoQuadraticRel">8.5.10 Interface SVGPathSegCurvetoQuadraticRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegArcAbs">8.5.11 Interface SVGPathSegArcAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegArcRel">8.5.12 Interface SVGPathSegArcRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegLinetoHorizontalAbs">8.5.13 Interface SVGPathSegLinetoHorizontalAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegLinetoHorizontalRel">8.5.14 Interface SVGPathSegLinetoHorizontalRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegLinetoVerticalAbs">8.5.15 Interface SVGPathSegLinetoVerticalAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegLinetoVerticalRel">8.5.16 Interface SVGPathSegLinetoVerticalRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegCurvetoCubicSmoothAbs">8.5.17 Interface SVGPathSegCurvetoCubicSmoothAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegCurvetoCubicSmoothRel">8.5.18 Interface SVGPathSegCurvetoCubicSmoothRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegCurvetoQuadraticSmoothAbs">8.5.19 Interface SVGPathSegCurvetoQuadraticSmoothAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegCurvetoQuadraticSmoothRel">8.5.20 Interface SVGPathSegCurvetoQuadraticSmoothRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegList">8.5.21 Interface SVGPathSegList</a></li>
<li><a href="#paths-InterfaceSVGAnimatedPathData">8.5.22 Interface SVGAnimatedPathData</a></li>
<li><a href="#paths-InterfaceSVGPathElement">8.5.23 Interface SVGPathElement</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-shapes">9 Basic Shapes</a></div><ul class="toc">
<li><a href="#shapes-Introduction">9.1 Introduction</a></li>
<li><a href="#shapes-RectElement">9.2 The <span class="element-name">‘rect’</span> element</a></li>
<li><a href="#shapes-CircleElement">9.3 The <span class="element-name">‘circle’</span> element</a></li>
<li><a href="#shapes-EllipseElement">9.4 The <span class="element-name">‘ellipse’</span> element</a></li>
<li><a href="#shapes-LineElement">9.5 The <span class="element-name">‘line’</span> element</a></li>
<li><a href="#shapes-PolylineElement">9.6 The <span class="element-name">‘polyline’</span> element</a></li>
<li><a href="#shapes-PolygonElement">9.7 The <span class="element-name">‘polygon’</span> element</a><ul class="toc">
<li><a href="#shapes-PointsBNF">9.7.1 The grammar for points specifications in
<span class="element-name">‘polyline’</span> and
<span class="element-name">‘polygon’</span> elements</a></li></ul></li>
<li><a href="#shapes-DOMInterfaces">9.8 DOM interfaces</a><ul class="toc">
<li><a href="#shapes-InterfaceSVGRectElement">9.8.1 Interface SVGRectElement</a></li>
<li><a href="#shapes-InterfaceSVGCircleElement">9.8.2 Interface SVGCircleElement</a></li>
<li><a href="#shapes-InterfaceSVGEllipseElement">9.8.3 Interface SVGEllipseElement</a></li>
<li><a href="#shapes-InterfaceSVGLineElement">9.8.4 Interface SVGLineElement</a></li>
<li><a href="#shapes-InterfaceSVGAnimatedPoints">9.8.5 Interface SVGAnimatedPoints</a></li>
<li><a href="#shapes-InterfaceSVGPolylineElement">9.8.6 Interface SVGPolylineElement</a></li>
<li><a href="#shapes-InterfaceSVGPolygonElement">9.8.7 Interface SVGPolygonElement</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-text">10 Text</a></div><ul class="toc">
<li><a href="#text-Introduction">10.1 Introduction</a></li>
<li><a href="#text-CharactersAndGlyphs">10.2 Characters and their corresponding glyphs</a></li>
<li><a href="#text-FontsTablesBaselines">10.3 Fonts, font tables and baselines</a></li>
<li><a href="#text-TextElement">10.4 The <span class="element-name">‘text’</span> element</a></li>
<li><a href="#text-TSpanElement">10.5 The <span class="element-name">‘tspan’</span> element</a></li>
<li><a href="#text-TRefElement">10.6 The <span class="element-name">‘tref’</span> element</a></li>
<li><a href="#text-TextLayout">10.7 Text layout</a><ul class="toc">
<li><a href="#text-TextLayoutIntroduction">10.7.1 Text layout introduction</a></li>
<li><a href="#text-SettingInlineProgressionDirection">10.7.2 Setting the inline-progression-direction</a></li>
<li><a href="#text-GlyphOrientation">10.7.3 Glyph orientation within a text run</a></li>
<li><a href="#text-RelationshipWithBiDirectionality">10.7.4 Relationship with bidirectionality</a></li></ul></li>
<li><a href="#text-TextRenderingOrder">10.8 Text rendering order</a></li>
<li><a href="#text-AlignmentProperties">10.9 Alignment properties</a><ul class="toc">
<li><a href="#text-TextAlignmentProperties">10.9.1 Text alignment properties</a></li>
<li><a href="#text-BaselineAlignmentProperties">10.9.2 Baseline alignment properties</a></li></ul></li>
<li><a href="#text-FontPropertiesUsedBySVG">10.10 Font selection properties</a></li>
<li><a href="#text-SpacingProperties">10.11 Spacing properties</a></li>
<li><a href="#text-TextDecorationProperties">10.12 Text decoration</a></li>
<li><a href="#text-TextOnAPath">10.13 Text on a path</a><ul class="toc">
<li><a href="#text-TextOnAPathIntroduction">10.13.1 Introduction to text on a path</a></li>
<li><a href="#text-TextPathElement">10.13.2 The <span class="element-name">‘textPath’</span> element</a></li>
<li><a href="#text-TextpathLayoutRules">10.13.3 Text on a path layout rules</a></li></ul></li>
<li><a href="#text-AlternateGlyphs">10.14 Alternate glyphs</a><ul class="toc">
<li><a href="#text-AltGlyphElement">10.14.1 The <span class="element-name">‘altGlyph’</span> element</a></li>
<li><a href="#text-AlternateGlyphDefinitions">10.14.2 The <span class="element-name">‘altGlyphDef’</span>,
<span class="element-name">‘altGlyphItem’</span> and
<span class="element-name">‘glyphRef’</span> elements</a></li></ul></li>
<li><a href="#text-WhiteSpace">10.15 White space handling</a></li>
<li><a href="#text-TextSelection">10.16 Text selection and clipboard operations</a></li>
<li><a href="#text-DOMInterfaces">10.17 DOM interfaces</a><ul class="toc">
<li><a href="#text-InterfaceSVGTextContentElement">10.17.1 Interface SVGTextContentElement</a></li>
<li><a href="#text-InterfaceSVGTextPositioningElement">10.17.2 Interface SVGTextPositioningElement</a></li>
<li><a href="#text-InterfaceSVGTextElement">10.17.3 Interface SVGTextElement</a></li>
<li><a href="#text-InterfaceSVGTSpanElement">10.17.4 Interface SVGTSpanElement</a></li>
<li><a href="#text-InterfaceSVGTRefElement">10.17.5 Interface SVGTRefElement</a></li>
<li><a href="#text-InterfaceSVGTextPathElement">10.17.6 Interface SVGTextPathElement</a></li>
<li><a href="#text-InterfaceSVGAltGlyphElement">10.17.7 Interface SVGAltGlyphElement</a></li>
<li><a href="#text-InterfaceSVGAltGlyphDefElement">10.17.8 Interface SVGAltGlyphDefElement</a></li>
<li><a href="#text-InterfaceSVGAltGlyphItemElement">10.17.9 Interface SVGAltGlyphItemElement</a></li>
<li><a href="#text-InterfaceSVGGlyphRefElement">10.17.10 Interface SVGGlyphRefElement</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-painting">11 Painting: Filling, Stroking and Marker Symbols</a></div><ul class="toc">
<li><a href="#painting-Introduction">11.1 Introduction</a></li>
<li><a href="#painting-SpecifyingPaint">11.2 Specifying paint</a></li>
<li><a href="#painting-FillProperties">11.3 Fill Properties</a></li>
<li><a href="#painting-StrokeProperties">11.4 Stroke Properties</a></li>
<li><a href="#painting-VisibilityControl">11.5 Controlling visibility</a></li>
<li><a href="#painting-Markers">11.6 Markers</a><ul class="toc">
<li><a href="#painting-MarkersIntroduction">11.6.1 Introduction</a></li>
<li><a href="#painting-MarkerElement">11.6.2 The <span class="element-name">‘marker’</span> element</a></li>
<li><a href="#painting-MarkerProperties">11.6.3 Marker properties</a></li>
<li><a href="#painting-MarkerAlgorithm">11.6.4 Details on how markers are rendered</a></li></ul></li>
<li><a href="#painting-RenderingProperties">11.7 Rendering properties</a><ul class="toc">
<li><a href="#painting-ColorInterpolationProperties">11.7.1 Color interpolation properties:
<span class="prop-name">‘color-interpolation’</span> and
<span class="prop-name">‘color-interpolation-filters’</span></a></li>
<li><a href="#painting-ColorRenderingProperty">11.7.2 The <span class="prop-name">‘color-rendering’</span> property</a></li>
<li><a href="#painting-ShapeRenderingProperty">11.7.3 The <span class="prop-name">‘shape-rendering’</span> property</a></li>
<li><a href="#painting-TextRenderingProperty">11.7.4 The <span class="prop-name">‘text-rendering’</span> property</a></li>
<li><a href="#painting-ImageRenderingProperty">11.7.5 The <span class="prop-name">‘image-rendering’</span> property</a></li></ul></li>
<li><a href="#painting-InheritanceOfPaintingProperties">11.8 Inheritance of painting properties</a></li>
<li><a href="#painting-DOMInterfaces">11.9 DOM interfaces</a><ul class="toc">
<li><a href="#painting-InterfaceSVGPaint">11.9.1 Interface SVGPaint</a></li>
<li><a href="#painting-InterfaceSVGMarkerElement">11.9.2 Interface SVGMarkerElement</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-color">12 Color</a></div><ul class="toc">
<li><a href="#color-ColorIntroduction">12.1 Introduction</a></li>
<li><a href="#color-ColorProperty">12.2 The <span class="prop-name">‘color’</span> property</a></li>
<li><a href="#color-ColorProfileDescriptions">12.3 Color profile descriptions</a><ul class="toc">
<li><a href="#color-ColorProfileDescriptionsOverview">12.3.1 Overview of color profile descriptions</a></li>
<li><a href="#color-ColorProfileAlternatives">12.3.2 Alternative ways of defining a color profile description</a></li>
<li><a href="#color-ColorProfileElement">12.3.3 The <span class="element-name">‘color-profile’</span> element</a></li>
<li><a href="#color-ColorProfileAtRule">12.3.4 The CSS <strong>@color-profile</strong> rule</a></li>
<li><a href="#color-ColorProfileProperty">12.3.5 The <span class="prop-name">‘color-profile’</span> property</a></li></ul></li>
<li><a href="#color-DOMInterfaces">12.4 DOM interfaces</a><ul class="toc">
<li><a href="#color-InterfaceSVGColorProfileElement">12.4.1 Interface SVGColorProfileElement</a></li>
<li><a href="#color-InterfaceSVGColorProfileRule">12.4.2 Interface SVGColorProfileRule</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-pservers">13 Gradients and Patterns</a></div><ul class="toc">
<li><a href="#pservers-Introduction">13.1 Introduction</a></li>
<li><a href="#pservers-Gradients">13.2 Gradients</a><ul class="toc">
<li><a href="#pservers-GradientsIntroduction">13.2.1 Introduction</a></li>
<li><a href="#pservers-LinearGradients">13.2.2 Linear gradients</a></li>
<li><a href="#pservers-RadialGradients">13.2.3 Radial gradients</a></li>
<li><a href="#pservers-GradientStops">13.2.4 Gradient stops</a></li></ul></li>
<li><a href="#pservers-Patterns">13.3 Patterns</a></li>
<li><a href="#pservers-DOMInterfaces">13.4 DOM interfaces</a><ul class="toc">
<li><a href="#pservers-InterfaceSVGGradientElement">13.4.1 Interface SVGGradientElement</a></li>
<li><a href="#pservers-InterfaceSVGLinearGradientElement">13.4.2 Interface SVGLinearGradientElement</a></li>
<li><a href="#pservers-InterfaceSVGRadialGradientElement">13.4.3 Interface SVGRadialGradientElement</a></li>
<li><a href="#pservers-InterfaceSVGStopElement">13.4.4 Interface SVGStopElement</a></li>
<li><a href="#pservers-InterfaceSVGPatternElement">13.4.5 Interface SVGPatternElement</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-masking">14 Clipping, Masking and Compositing</a></div><ul class="toc">
<li><a href="#masking-Introduction">14.1 Introduction</a></li>
<li><a href="#masking-SimpleAlphaBlending">14.2 Simple alpha compositing</a></li>
<li><a href="#masking-ClippingPaths">14.3 Clipping paths</a><ul class="toc">
<li><a href="#masking-ClippingPathsIntro">14.3.1 Introduction</a></li>
<li><a href="#masking-InitialClippingPath">14.3.2 The initial clipping path</a></li>
<li><a href="#masking-OverflowAndClipProperties">14.3.3 The <span class="prop-name">‘overflow’</span>
and <span class="prop-name">‘clip’</span> properties</a></li>
<li><a href="#masking-AutoClipAtViewportNotViewBox">14.3.4 Clip to viewport vs. clip to
<span class="attr-name">‘viewBox’</span></a></li>
<li><a href="#masking-EstablishingANewClippingPath">14.3.5 Establishing a new clipping path: the <span class="element-name">‘clipPath’</span> element</a></li>
<li><a href="#masking-clipPath-geometry">14.3.6 Clipping paths, geometry, and pointer events</a></li></ul></li>
<li><a href="#masking-Masking">14.4 Masking</a></li>
<li><a href="#masking-ObjectAndGroupOpacityProperties">14.5 Object and group opacity: the
<span class="prop-name">‘opacity’</span> property</a></li>
<li><a href="#masking-DOMInterfaces">14.6 DOM interfaces</a><ul class="toc">
<li><a href="#masking-InterfaceSVGClipPathElement">14.6.1 Interface SVGClipPathElement</a></li>
<li><a href="#masking-InterfaceSVGMaskElement">14.6.2 Interface SVGMaskElement</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-filters">15 Filter Effects</a></div><ul class="toc">
<li><a href="#filters-Introduction">15.1 Introduction</a></li>
<li><a href="#filters-AnExample">15.2 An example</a></li>
<li><a href="#filters-FilterElement">15.3 The <span class="element-name">‘filter’</span> element</a></li>
<li><a href="#filters-FilterProperty">15.4 The <span class="prop-name">‘filter’</span>
    property</a></li>
<li><a href="#filters-FilterEffectsRegion">15.5 Filter effects region</a></li>
<li><a href="#filters-AccessingBackgroundImage">15.6 Accessing the background image</a></li>
<li><a href="#filters-FilterPrimitivesOverview">15.7 Filter primitives overview</a><ul class="toc">
<li><a href="#filters-FilterPrimitivesOverviewIntro">15.7.1 Overview</a></li>
<li><a href="#filters-CommonAttributes">15.7.2 Common attributes</a></li>
<li><a href="#filters-FilterPrimitiveSubRegion">15.7.3 Filter primitive subregion</a></li></ul></li>
<li><a href="#filters-LightSourceDefinitions">15.8 Light source elements and properties</a><ul class="toc">
<li><a href="#filters-LightSourceIntro">15.8.1 Introduction</a></li>
<li><a href="#filters-feDistantLightElement">15.8.2 Light source <span class="element-name">‘feDistantLight’</span></a></li>
<li><a href="#filters-fePointLightElement">15.8.3 Light source <span class="element-name">‘fePointLight’</span></a></li>
<li><a href="#filters-feSpotLightElement">15.8.4 Light source <span class="element-name">‘feSpotLight’</span></a></li>
<li><a href="#filters-LightingColorProperty">15.8.5 The <span class="prop-name">‘lighting-color’</span> property</a></li></ul></li>
<li><a href="#filters-feBlendElement">15.9 Filter primitive <span class="element-name">‘feBlend’</span></a></li>
<li><a href="#filters-feColorMatrixElement">15.10 Filter primitive <span class="element-name">‘feColorMatrix’</span></a></li>
<li><a href="#filters-feComponentTransferElement">15.11 Filter primitive <span class="element-name">‘feComponentTransfer’</span></a></li>
<li><a href="#filters-feCompositeElement">15.12 Filter primitive <span class="element-name">‘feComposite’</span></a></li>
<li><a href="#filters-feConvolveMatrixElement">15.13 Filter primitive <span class="element-name">‘feConvolveMatrix’</span></a></li>
<li><a href="#filters-feDiffuseLightingElement">15.14 Filter primitive <span class="element-name">‘feDiffuseLighting’</span></a></li>
<li><a href="#filters-feDisplacementMapElement">15.15 Filter primitive <span class="element-name">‘feDisplacementMap’</span></a></li>
<li><a href="#filters-feFloodElement">15.16 Filter primitive <span class="element-name">‘feFlood’</span></a></li>
<li><a href="#filters-feGaussianBlurElement">15.17 Filter primitive <span class="element-name">‘feGaussianBlur’</span></a></li>
<li><a href="#filters-feImageElement">15.18 Filter primitive <span class="element-name">‘feImage’</span></a></li>
<li><a href="#filters-feMergeElement">15.19 Filter primitive <span class="element-name">‘feMerge’</span></a></li>
<li><a href="#filters-feMorphologyElement">15.20 Filter primitive <span class="element-name">‘feMorphology’</span></a></li>
<li><a href="#filters-feOffsetElement">15.21 Filter primitive <span class="element-name">‘feOffset’</span></a></li>
<li><a href="#filters-feSpecularLightingElement">15.22 Filter primitive <span class="element-name">‘feSpecularLighting’</span></a></li>
<li><a href="#filters-feTileElement">15.23 Filter primitive <span class="element-name">‘feTile’</span></a></li>
<li><a href="#filters-feTurbulenceElement">15.24 Filter primitive <span class="element-name">‘feTurbulence’</span></a></li>
<li><a href="#filters-DOMInterfaces">15.25 DOM interfaces</a><ul class="toc">
<li><a href="#filters-InterfaceSVGFilterElement">15.25.1 Interface SVGFilterElement</a></li>
<li><a href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">15.25.2 Interface SVGFilterPrimitiveStandardAttributes</a></li>
<li><a href="#filters-InterfaceSVGFEBlendElement">15.25.3 Interface SVGFEBlendElement</a></li>
<li><a href="#filters-InterfaceSVGFEColorMatrixElement">15.25.4 Interface SVGFEColorMatrixElement</a></li>
<li><a href="#filters-InterfaceSVGFEComponentTransferElement">15.25.5 Interface SVGFEComponentTransferElement</a></li>
<li><a href="#filters-InterfaceSVGComponentTransferFunctionElement">15.25.6 Interface SVGComponentTransferFunctionElement</a></li>
<li><a href="#filters-InterfaceSVGFEFuncRElement">15.25.7 Interface SVGFEFuncRElement</a></li>
<li><a href="#filters-InterfaceSVGFEFuncGElement">15.25.8 Interface SVGFEFuncGElement</a></li>
<li><a href="#filters-InterfaceSVGFEFuncBElement">15.25.9 Interface SVGFEFuncBElement</a></li>
<li><a href="#filters-InterfaceSVGFEFuncAElement">15.25.10 Interface SVGFEFuncAElement</a></li>
<li><a href="#filters-InterfaceSVGFECompositeElement">15.25.11 Interface SVGFECompositeElement</a></li>
<li><a href="#filters-InterfaceSVGFEConvolveMatrixElement">15.25.12 Interface SVGFEConvolveMatrixElement</a></li>
<li><a href="#filters-InterfaceSVGFEDiffuseLightingElement">15.25.13 Interface SVGFEDiffuseLightingElement</a></li>
<li><a href="#filters-InterfaceSVGFEDistantLightElement">15.25.14 Interface SVGFEDistantLightElement</a></li>
<li><a href="#filters-InterfaceSVGFEPointLightElement">15.25.15 Interface SVGFEPointLightElement</a></li>
<li><a href="#filters-InterfaceSVGFESpotLightElement">15.25.16 Interface SVGFESpotLightElement</a></li>
<li><a href="#filters-InterfaceSVGFEDisplacementMapElement">15.25.17 Interface SVGFEDisplacementMapElement</a></li>
<li><a href="#filters-InterfaceSVGFEFloodElement">15.25.18 Interface SVGFEFloodElement</a></li>
<li><a href="#filters-InterfaceSVGFEGaussianBlurElement">15.25.19 Interface SVGFEGaussianBlurElement</a></li>
<li><a href="#filters-InterfaceSVGFEImageElement">15.25.20 Interface SVGFEImageElement</a></li>
<li><a href="#filters-InterfaceSVGFEMergeElement">15.25.21 Interface SVGFEMergeElement</a></li>
<li><a href="#filters-InterfaceSVGFEMergeNodeElement">15.25.22 Interface SVGFEMergeNodeElement</a></li>
<li><a href="#filters-InterfaceSVGFEMorphologyElement">15.25.23 Interface SVGFEMorphologyElement</a></li>
<li><a href="#filters-InterfaceSVGFEOffsetElement">15.25.24 Interface SVGFEOffsetElement</a></li>
<li><a href="#filters-InterfaceSVGFESpecularLightingElement">15.25.25 Interface SVGFESpecularLightingElement</a></li>
<li><a href="#filters-InterfaceSVGFETileElement">15.25.26 Interface SVGFETileElement</a></li>
<li><a href="#filters-InterfaceSVGFETurbulenceElement">15.25.27 Interface SVGFETurbulenceElement</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-interact">16 Interactivity</a></div><ul class="toc">
<li><a href="#interact-Introduction">16.1 Introduction</a></li>
<li><a href="#interact-SVGEvents">16.2 Complete list of supported events</a></li>
<li><a href="#interact-UIEvents">16.3 User interface events</a></li>
<li><a href="#interact-PointerEvents">16.4 Pointer events</a></li>
<li><a href="#interact-pointer-processing">16.5 Hit-testing and processing order for user interface events</a><ul class="toc">
<li><a href="#interact-hit-testing">16.5.1 Hit-testing</a></li>
<li><a href="#interact-event-processing">16.5.2 Event processing</a></li></ul></li>
<li><a href="#interact-PointerEventsProperty">16.6 The <span class="prop-name">‘pointer-events’</span> property</a></li>
<li><a href="#interact-EnableZoomAndPanControls">16.7 Magnification and panning</a></li>
<li><a href="#interact-Cursors">16.8 Cursors</a><ul class="toc">
<li><a href="#interact-CursorIntro">16.8.1 Introduction to cursors</a></li>
<li><a href="#interact-CursorProperty">16.8.2 The <span class="prop-name">‘cursor’</span> property</a></li>
<li><a href="#interact-CursorElement">16.8.3 The <span class="element-name">‘cursor’</span> element</a></li></ul></li>
<li><a href="#interact-DOMInterfaces">16.9 DOM interfaces</a><ul class="toc">
<li><a href="#interact-InterfaceSVGCursorElement">16.9.1 Interface SVGCursorElement</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-linking">17 Linking</a></div><ul class="toc">
<li><a href="#linking-IRIReference">17.1 References</a><ul class="toc">
<li><a href="#linking-HeadOverview">17.1.1 Overview</a></li>
<li><a href="#linking-IRIandURI">17.1.2 IRIs and URIs</a></li>
<li><a href="#linking-IRIforms">17.1.3 Syntactic forms: IRI and FuncIRI</a></li>
<li><a href="#linking-processingIRI">17.1.4 Processing of IRI references</a></li>
<li><a href="#linking-xlinkRefAttrs">17.1.5 IRI reference attributes</a></li></ul></li>
<li><a href="#linking-Links">17.2 Links out of SVG content: the <span class="element-name">‘a’</span> element</a></li>
<li><a href="#linking-LinksIntoSVG">17.3 Linking into SVG content: IRI fragments and SVG views</a><ul class="toc">
<li><a href="#linking-IntroFragmentsViews">17.3.1 Introduction: IRI fragments and SVG views</a></li>
<li><a href="#linking-SVGFragmentIdentifiers">17.3.2 SVG fragment identifiers</a></li>
<li><a href="#linking-ViewElement">17.3.3 Predefined views: the <span class="element-name">‘view’</span> element</a></li>
<li><a href="#linking-ViewHighlight">17.3.4 Highlighting views</a></li></ul></li>
<li><a href="#linking-DOMInterfaces">17.4 DOM interfaces</a><ul class="toc">
<li><a href="#linking-InterfaceSVGAElement">17.4.1 Interface SVGAElement</a></li>
<li><a href="#linking-InterfaceSVGViewElement">17.4.2 Interface SVGViewElement</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-script">18 Scripting</a></div><ul class="toc">
<li><a href="#script-ScriptingLanguage">18.1 Specifying the scripting language</a><ul class="toc">
<li><a href="#script-DefaultScriptingLanguage">18.1.1 Specifying the default scripting language</a></li>
<li><a href="#script-SpecifiedScriptingLanguage">18.1.2 Local declaration of a scripting language</a></li></ul></li>
<li><a href="#script-ScriptElement">18.2 The <span class="element-name">‘script’</span> element</a></li>
<li><a href="#script-EventHandling">18.3 Event handling</a></li>
<li><a href="#script-EventAttributes">18.4 Event attributes</a><ul class="toc">
<li><a href="#script-LoadEvent">18.4.1 Event attribute for the SVGLoad event</a></li>
<li><a href="#script-GraphicsEvents">18.4.2 Event attributes on graphics and container elements</a></li>
<li><a href="#script-DocumentEvents">18.4.3 Document-level event attributes</a></li>
<li><a href="#script-AnimationEvents">18.4.4 Animation event attributes</a></li></ul></li>
<li><a href="#script-DOMInterfaces">18.5 DOM interfaces</a><ul class="toc">
<li><a href="#script-InterfaceSVGScriptElement">18.5.1 Interface SVGScriptElement</a></li>
<li><a href="#script-InterfaceSVGZoomEvent">18.5.2 Interface SVGZoomEvent</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-animate">19 Animation</a></div><ul class="toc">
<li><a href="#animate-Introduction">19.1 Introduction</a></li>
<li><a href="#animate-AnimationElements">19.2 Animation elements</a><ul class="toc">
<li><a href="#animate-AnimationElementsIntro">19.2.1 Overview</a></li>
<li><a href="#animate-RelationshipToSMILAnimation">19.2.2 Relationship to SMIL Animation</a></li>
<li><a href="#animate-AnimationElementsExample">19.2.3 Animation elements example</a></li>
<li><a href="#animate-TargetElement">19.2.4 Attributes to identify the target element for an animation</a></li>
<li><a href="#animate-TargetAttributes">19.2.5 Attributes to identify the target attribute or property for an animation</a></li>
<li><a href="#animate-Animation.nsexample">19.2.6 Animation with namespaces</a></li>
<li><a href="#animate-complexDistances">19.2.7 Paced animation and complex types</a></li>
<li><a href="#animate-TimingAttributes">19.2.8 Attributes to control the timing of the animation</a><ul class="toc">
<li><a href="#animate-ClockValueSyntax">19.2.8.1 Clock values</a></li></ul></li>
<li><a href="#animate-ValueAttributes">19.2.9 Attributes that define animation values over time</a></li>
<li><a href="#animate-AdditionAttributes">19.2.10 Attributes that control whether animations are additive</a></li>
<li><a href="#animate-Inheritance">19.2.11 Inheritance</a></li>
<li><a href="#animate-AnimateElement">19.2.12 The <span class="element-name">‘animate’</span> element</a></li>
<li><a href="#animate-SetElement">19.2.13 The <span class="element-name">‘set’</span> element</a></li>
<li><a href="#animate-AnimateMotionElement">19.2.14 The <span class="element-name">‘animateMotion’</span> element</a></li>
<li><a href="#animate-AnimateColorElement">19.2.15 The <span class="element-name">‘animateColor’</span> element</a></li>
<li><a href="#animate-AnimateTransformElement">19.2.16 The <span class="element-name">‘animateTransform’</span> element</a></li>
<li><a href="#animate-AnimationAttributesAndProperties">19.2.17 Elements, attributes and properties that can be animated</a></li></ul></li>
<li><a href="#animate-DOMAnimationExample">19.3 Animation using the SVG DOM</a></li>
<li><a href="#animate-DOMInterfaces">19.4 DOM interfaces</a><ul class="toc">
<li><a href="#animate-InterfaceElementTimeControl">19.4.1 Interface ElementTimeControl</a></li>
<li><a href="#animate-InterfaceTimeEvent">19.4.2 Interface TimeEvent</a></li>
<li><a href="#animate-InterfaceSVGAnimationElement">19.4.3 Interface SVGAnimationElement</a></li>
<li><a href="#animate-InterfaceSVGAnimateElement">19.4.4 Interface SVGAnimateElement</a></li>
<li><a href="#animate-InterfaceSVGSetElement">19.4.5 Interface SVGSetElement</a></li>
<li><a href="#animate-InterfaceSVGAnimateMotionElement">19.4.6 Interface SVGAnimateMotionElement</a></li>
<li><a href="#animate-InterfaceSVGMPathElement">19.4.7 Interface SVGMPathElement</a></li>
<li><a href="#animate-InterfaceSVGAnimateColorElement">19.4.8 Interface SVGAnimateColorElement</a></li>
<li><a href="#animate-InterfaceSVGAnimateTransformElement">19.4.9 Interface SVGAnimateTransformElement</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-fonts">20 Fonts</a></div><ul class="toc">
<li><a href="#fonts-Introduction">20.1 Introduction</a></li>
<li><a href="#fonts-SVGFontsOverview">20.2 Overview of SVG fonts</a></li>
<li><a href="#fonts-FontElement">20.3 The <span class="element-name">‘font’</span> element</a></li>
<li><a href="#fonts-GlyphElement">20.4 The <span class="element-name">‘glyph’</span> element</a></li>
<li><a href="#fonts-MissingGlyphElement">20.5 The <span class="element-name">‘missing-glyph’</span> element</a></li>
<li><a href="#fonts-GlyphSelectionRules">20.6 Glyph selection rules</a></li>
<li><a href="#fonts-KernElements">20.7 The <span class="element-name">‘hkern’</span> and <span class="element-name">‘vkern’</span> elements</a></li>
<li><a href="#fonts-FontDescriptions">20.8 Describing a font</a><ul class="toc">
<li><a href="#fonts-FontDescriptionsOverview">20.8.1 Overview of font descriptions</a></li>
<li><a href="#fonts-FontDescriptionsAlternatives">20.8.2 Alternative ways for providing a font description</a></li>
<li><a href="#fonts-FontFaceElement">20.8.3 The <span class="element-name">‘font-face’</span> element</a></li>
<li><a href="#fonts-FontFaceSrcElement">20.8.4 The <span class="element-name">‘font-face-src’</span> element</a></li>
<li><a href="#fonts-FontFaceURIElement">20.8.5 The <span class="element-name">‘font-face-uri’</span> and <span class="element-name">‘font-face-format’</span> elements</a></li>
<li><a href="#fonts-FontFaceNameElement">20.8.6 The <span class="element-name">‘font-face-name’</span> element</a></li></ul></li>
<li><a href="#fonts-DOMInterfaces">20.9 DOM interfaces</a><ul class="toc">
<li><a href="#fonts-InterfaceSVGFontElement">20.9.1 Interface SVGFontElement</a></li>
<li><a href="#fonts-InterfaceSVGGlyphElement">20.9.2 Interface SVGGlyphElement</a></li>
<li><a href="#fonts-InterfaceSVGMissingGlyphElement">20.9.3 Interface SVGMissingGlyphElement</a></li>
<li><a href="#fonts-InterfaceSVGHKernElement">20.9.4 Interface SVGHKernElement</a></li>
<li><a href="#fonts-InterfaceSVGVKernElement">20.9.5 Interface SVGVKernElement</a></li>
<li><a href="#fonts-InterfaceSVGFontFaceElement">20.9.6 Interface SVGFontFaceElement</a></li>
<li><a href="#fonts-InterfaceSVGFontFaceSrcElement">20.9.7 Interface SVGFontFaceSrcElement</a></li>
<li><a href="#fonts-InterfaceSVGFontFaceUriElement">20.9.8 Interface SVGFontFaceUriElement</a></li>
<li><a href="#fonts-InterfaceSVGFontFaceFormatElement">20.9.9 Interface SVGFontFaceFormatElement</a></li>
<li><a href="#fonts-InterfaceSVGFontFaceNameElement">20.9.10 Interface SVGFontFaceNameElement</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-metadata">21 Metadata</a></div><ul class="toc">
<li><a href="#metadata-Introduction">21.1 Introduction</a></li>
<li><a href="#metadata-MetadataElement">21.2 The <span class="element-name">‘metadata’</span> element</a></li>
<li><a href="#metadata-Example">21.3 An example</a></li>
<li><a href="#metadata-DOMInterfaces">21.4 DOM interfaces</a><ul class="toc">
<li><a href="#metadata-InterfaceSVGMetadataElement">21.4.1 Interface SVGMetadataElement</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-backward">22 Backwards Compatibility</a></div></li><li><div class="tocline1"><a href="#chapter-extend">23 Extensibility</a></div><ul class="toc">
<li><a href="#extend-ForeignNamespaces">23.1 Foreign namespaces and private data</a></li>
<li><a href="#extend-EmbeddingForeignObjects">23.2 Embedding foreign object types</a></li>
<li><a href="#extend-ForeignObjectElement">23.3 The <span class="element-name">‘foreignObject’</span> element</a></li>
<li><a href="#extend-AnExample">23.4 An example</a></li>
<li><a href="#extend-PrivateElementsAndAttribute">23.5 Adding private elements and attributes to the DTD</a></li>
<li><a href="#extend-DOMInterfaces">23.6 DOM interfaces</a><ul class="toc">
<li><a href="#extend-InterfaceSVGForeignObjectElement">23.6.1 Interface SVGForeignObjectElement</a></li></ul></li></ul></li></ol><ol class="toc"><li><div class="tocline1"><a href="#chapter-svgdtd">Appendix A: Document Type Definition</a></div><ul class="toc">
<li><a href="#svgdtd-Introduction">A.1 Introduction</a></li>
<li><a href="#svgdtd-Modularization">A.2 Modularization</a><ul class="toc">
<li><a href="#svgdtd-ElementAndAttributeCollections">A.2.1 Element and attribute collections</a></li>
<li><a href="#svgdtd-Profiling">A.2.2 Profiling the SVG specification</a></li>
<li><a href="#svgdtd-PracticalConsiderations">A.2.3 Practical considerations</a></li></ul></li>
<li><a href="#svgdtd-DTD.1">A.3 SVG 1.1 module definitions and DTD implementations</a><ul class="toc">
<li><a href="#svgdtd-DTD.1.1">A.3.1 Modular Framework Module</a></li>
<li><a href="#svgdtd-DTD.1.2">A.3.2 Datatypes Module</a></li>
<li><a href="#svgdtd-DTD.1.3">A.3.3 Qualified Name Module</a></li>
<li><a href="#svgdtd-DTD.1.4">A.3.4 Core Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.5">A.3.5 Container Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.6">A.3.6 Viewport Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.7">A.3.7 Paint Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.8">A.3.8 Basic Paint Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.9">A.3.9 Paint Opacity Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.10">A.3.10 Graphics Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.11">A.3.11 Basic Graphics Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.12">A.3.12 Document Events Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.13">A.3.13 Graphical Element Events Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.14">A.3.14 Animation Events Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.15">A.3.15 XLink Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.16">A.3.16 External Resources Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.17">A.3.17 Structure Module</a></li>
<li><a href="#svgdtd-DTD.1.18">A.3.18 Basic Structure Module</a></li>
<li><a href="#svgdtd-DTD.1.19">A.3.19 Conditional Processing Module</a></li>
<li><a href="#svgdtd-DTD.1.20">A.3.20 Image Module</a></li>
<li><a href="#svgdtd-DTD.1.21">A.3.21 Style Module</a></li>
<li><a href="#svgdtd-DTD.1.22">A.3.22 Shape Module</a></li>
<li><a href="#svgdtd-DTD.1.23">A.3.23 Text Module</a></li>
<li><a href="#svgdtd-DTD.1.24">A.3.24 Basic Text Module</a></li>
<li><a href="#svgdtd-DTD.1.25">A.3.25 Marker Module</a></li>
<li><a href="#svgdtd-DTD.1.26">A.3.26 Color Profile Module</a></li>
<li><a href="#svgdtd-DTD.1.27">A.3.27 Gradient Module</a></li>
<li><a href="#svgdtd-DTD.1.28">A.3.28 Pattern Module</a></li>
<li><a href="#svgdtd-DTD.1.29">A.3.29 Clip Module</a></li>
<li><a href="#svgdtd-DTD.1.30">A.3.30 Basic Clip Module</a></li>
<li><a href="#svgdtd-DTD.1.31">A.3.31 Mask Module</a></li>
<li><a href="#svgdtd-DTD.1.32">A.3.32 Filter Module</a></li>
<li><a href="#svgdtd-DTD.1.33">A.3.33 Basic Filter Module</a></li>
<li><a href="#svgdtd-DTD.1.34">A.3.34 Cursor Module</a></li>
<li><a href="#svgdtd-DTD.1.35">A.3.35 Hyperlinking Module</a></li>
<li><a href="#svgdtd-DTD.1.36">A.3.36 View Module</a></li>
<li><a href="#svgdtd-DTD.1.37">A.3.37 Scripting Module</a></li>
<li><a href="#svgdtd-DTD.1.38">A.3.38 Animation Module</a></li>
<li><a href="#svgdtd-DTD.1.39">A.3.39 Font Module</a></li>
<li><a href="#svgdtd-DTD.1.40">A.3.40 Basic Font Module</a></li>
<li><a href="#svgdtd-DTD.1.41">A.3.41 Extensibility Module</a></li></ul></li>
<li><a href="#svgdtd-DTD.2">A.4 SVG 1.1 Document Type Definition</a><ul class="toc">
<li><a href="#svgdtd-DTD.2.1">A.4.1 SVG 1.1 DTD Driver</a></li>
<li><a href="#svgdtd-DTD.2.2">A.4.2 SVG 1.1 Document Model</a></li>
<li><a href="#svgdtd-DTD.2.3">A.4.3 SVG 1.1 Attribute Collection</a></li></ul></li></ul></li><li><div class="tocline1"><a href="#chapter-svgdom">Appendix B: SVG Document Object Model (DOM)</a></div><ul class="toc">
<li><a href="#svgdom-SVGDOMOverview">B.1 SVG DOM overview</a><ul class="toc">
<li><a href="#svgdom-SVGObjectInitialization">B.1.1 SVG DOM object initialization</a></li></ul></li>
<li><a href="#svgdom-ElementsInTheSVGDOM">B.2 Elements in the SVG DOM</a></li>
<li><a href="#svgdom-SVGDOMNamingConventions">B.3 Naming conventions</a></li>
<li><a href="#svgdom-ExceptionSVGException">B.4 Exception SVGException</a></li>
<li><a href="#svgdom-FeatureStrings">B.5 Feature strings for the <strong>hasFeature</strong> method call</a></li>
<li><a href="#svgdom-RelationshipWithDOM2Events">B.6 Relationship with DOM Level 2 Events</a></li>
<li><a href="#svgdom-RelationshipWithCSSOM">B.7 Relationship with DOM Level 2 CSS</a><ul class="toc">
<li><a href="#svgdom-CSSDOMIntro">B.7.1 Introduction</a></li>
<li><a href="#svgdom-CSSDOMFeaturesNoCSSSupport">B.7.2 User agents that do not support styling with CSS</a></li>
<li><a href="#svgdom-CSSDOMFeaturesWithCSSSupport">B.7.3 User agents that support styling with CSS</a></li>
<li><a href="#svgdom-ExtendedInterfaces">B.7.4 Extended interfaces</a></li></ul></li>
<li><a href="#svgdom-ReadOnlyNodes">B.8 Read only nodes in the DOM</a></li>
<li><a href="#svgdom-InvalidValues">B.9 Invalid values</a></li></ul></li><li><div class="tocline1"><a href="#chapter-idl">Appendix C: IDL Definitions</a></div></li><li><div class="tocline1"><a href="#chapter-java">Appendix D: Java Language Binding</a></div><ul class="toc">
<li><a href="#java-JavaBinding">D.1 The Java language binding</a></li>
<li><a href="#java-UsingSVGWithJava">D.2 Using SVG with the Java language</a></li></ul></li><li><div class="tocline1"><a href="#chapter-escript">Appendix E: ECMAScript Language Binding</a></div><ul class="toc">
<li><a href="#escript-Exceptions">E.1 Exceptions</a></li>
<li><a href="#escript-Constants">E.2 Constants</a></li>
<li><a href="#escript-Types">E.3 Types</a></li>
<li><a href="#escript-Objects">E.4 Objects</a></li></ul></li><li><div class="tocline1"><a href="#chapter-implnote">Appendix F: Implementation Requirements</a></div><ul class="toc">
<li><a href="#implnote-Introduction">F.1 Introduction</a></li>
<li><a href="#implnote-ErrorProcessing">F.2 Error processing</a></li>
<li><a href="#implnote-VersionControl">F.3 Version control</a></li>
<li><a href="#implnote-RangeClamping">F.4 Clamping values which are restricted to a particular range</a></li>
<li><a href="#implnote-PathElementImplementationNotes">F.5 <span class="element-name">‘path’</span> element implementation notes</a></li>
<li><a href="#implnote-ArcImplementationNotes">F.6 Elliptical arc implementation notes</a><ul class="toc">
<li><a href="#implnote-ArcSyntax">F.6.1 Elliptical arc syntax</a></li>
<li><a href="#implnote-ArcOutOfRangeParameters">F.6.2 Out-of-range parameters</a></li>
<li><a href="#implnote-ArcParameterizationAlternatives">F.6.3 Parameterization alternatives</a></li>
<li><a href="#implnote-ArcConversionCenterToEndpoint">F.6.4 Conversion from center to endpoint parameterization</a></li>
<li><a href="#implnote-ArcConversionEndpointToCenter">F.6.5 Conversion from endpoint to center parameterization</a></li>
<li><a href="#implnote-ArcCorrectionOutOfRangeRadii">F.6.6 Correction of out-of-range radii</a></li></ul></li>
<li><a href="#implnote-TextSelectionImplementationNotes">F.7 Text selection implementation notes</a></li>
<li><a href="#implnote-PrintingImplementationNotes">F.8 Printing implementation notes</a></li></ul></li><li><div class="tocline1"><a href="#chapter-conform">Appendix G: Conformance Criteria</a></div><ul class="toc">
<li><a href="#conform-Introduction">G.1 Introduction</a></li>
<li><a href="#conform-ConformingSVGDocuments">G.2 Conforming SVG Document Fragments</a></li>
<li><a href="#conform-ConformingSVGStandAloneFiles">G.3 Conforming SVG Stand-Alone Files</a></li>
<li><a href="#conform-ConformingSVGGenerators">G.4 Conforming SVG Generators</a></li>
<li><a href="#conform-ConformingSVGServers">G.5 Conforming SVG Servers</a></li>
<li><a href="#conform-ConformingSVGDOMSubtree">G.6 Conforming SVG DOM Subtree</a></li>
<li><a href="#conform-ConformingSVGInterpreters">G.7 Conforming SVG Interpreters</a></li>
<li><a href="#conform-ConformingSVGViewers">G.8 Conforming SVG Viewers</a></li></ul></li><li><div class="tocline1"><a href="#chapter-access">Appendix H: Accessibility Support</a></div><ul class="toc">
<li><a href="#access-AccessibilityAndSVG">H.1 WAI Accessibility Guidelines</a></li>
<li><a href="#access-SVGAccessibilityGuidelines">H.2 SVG Content Accessibility Guidelines</a></li></ul></li><li><div class="tocline1"><a href="#chapter-i18n">Appendix I: Internationalization Support</a></div><ul class="toc">
<li><a href="#i18n-Intro">I.1 Introduction</a></li>
<li><a href="#i18n-InternationalizationAndSVG">I.2 Internationalization and SVG</a></li>
<li><a href="#i18n-SVGInternationalizationGuidelines">I.3 SVG Internationalization Guidelines</a></li></ul></li><li><div class="tocline1"><a href="#chapter-minimize">Appendix J: Minimizing SVG File Sizes</a></div></li><li><div class="tocline1"><a href="#chapter-refs">Appendix K: References</a></div><ul class="toc">
<li><a href="#refs-NormativeReferences">K.1 Normative references</a></li>
<li><a href="#refs-InformativeReferences">K.2 Informative references</a></li></ul></li><li><div class="tocline1"><a href="#chapter-eltindex">Appendix L: Element Index</a></div></li><li><div class="tocline1"><a href="#chapter-attindex">Appendix M: Attribute Index</a></div><ul class="toc">
<li><a href="#attindex-RegularAttributes">M.1 Regular attributes</a></li>
<li><a href="#attindex-PresentationAttributes">M.2 Presentation attributes</a></li></ul></li><li><div class="tocline1"><a href="#chapter-propidx">Appendix N: Property Index</a></div></li><li><div class="tocline1"><a href="#chapter-feature">Appendix O: Feature Strings</a></div><ul class="toc">
<li><a href="#feature-Introducation">O.1 Introduction</a></li>
<li><a href="#feature-SVG11FeatureStrings">O.2 SVG 1.1 feature strings</a></li>
<li><a href="#feature-SVG10FeatureStrings">O.3 SVG 1.0 feature strings</a></li></ul></li><li><div class="tocline1"><a href="#chapter-mimereg">Appendix P: Media Type Registration for image/svg+xml</a></div><ul class="toc">
<li><a href="#mimereg-mime-intro">P.1 
Introduction
</a></li>
<li><a href="#mimereg-mime-registration">P.2 
Registration of media type image/svg+xml
</a></li></ul></li><li><div class="tocline1"><a href="#chapter-changes">Appendix Q: Changes</a></div></li></ol>

</div><hr class="chapter-divider" />
<div id="chapter-intro">

<h1>1 Introduction</h1><h2 id="intro-toc">Contents</h2><ul class="toc">
<li><a href="#intro-AboutSVG">1.1 About SVG</a></li>
<li><a href="#intro-MIMEType">1.2 SVG MIME type, file name extension and Macintosh file
    type</a></li>
<li><a href="#intro-NamespaceAndDTDIdentifiers">1.3 SVG Namespace, Public Identifier and System
    Identifier</a></li>
<li><a href="#intro-W3CCompatibility">1.4 Compatibility with Other Standards Efforts</a></li>
<li><a href="#intro-Terminology">1.5 Terminology</a></li>
<li><a href="#intro-Definitions">1.6 Definitions</a></li></ul>

<h2 id="intro-AboutSVG">1.1 About SVG</h2>

    <p>This specification defines the features and syntax for <a href="http://www.w3.org/Graphics/SVG/">Scalable Vector Graphics
    (SVG)</a>.</p>
    <p>SVG is a language for describing two-dimensional graphics in
    XML [<a href="http://www.w3.org/TR/2008/REC-xml-20081126/">XML10</a>]. SVG
    allows for three types of graphic objects: vector graphic
    shapes (e.g., paths consisting of straight lines and curves),
    images and text. Graphical objects can be grouped, styled,
    transformed and composited into previously rendered objects.
    The feature set includes nested transformations, clipping
    paths, alpha masks, filter effects and template objects.</p>
    <p>SVG drawings can be <a href="#chapter-interact">interactive</a>
    and <a href="#chapter-animate">dynamic</a>. <a href="#chapter-animate">Animations</a> can be defined and triggered
    either declaratively (i.e., by embedding SVG animation elements
    in SVG content) or via scripting.</p>
    <p>Sophisticated applications of SVG are possible by use of a
    supplemental scripting language which accesses <a href="#chapter-svgdom">SVG Document Object Model (DOM)</a>, which
    provides complete access to all elements, attributes and
    properties. A rich set of <a href="#interact-SVGEvents">event handlers</a> such as
    <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a> and <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a> can be assigned to any SVG graphical
    object. Because of its <a href="#intro-W3CCompatibility">compatibility and leveraging
    of other Web standards</a>, features like <a href="#chapter-script">scripting</a> can be done on XHTML and SVG
    elements simultaneously within the same Web page.</p>
    <p>SVG is a language for rich graphical content. For
    accessibility reasons, if there is an original source document
    containing higher-level structure and semantics, it is
    recommended that the higher-level information be made available
    somehow, either by making the original source document
    available, or making an alternative version available in an
    alternative format which conveys the higher-level information,
    or by using SVG's facilities to include the higher-level
    information within the SVG content. For suggested techniques in
    achieving greater accessibility, see <a href="#chapter-access">Accessibility</a>.</p>

    <p>SVG 1.1 is a modularization of SVG 1.0 [<a href="#refs-ref-SVG10">SVG10</a>].
    See the <a href="#chapter-svgdtd">Document Type Definition</a> appendix for
    details on how the DTD is structured to allow profiling and composition with
    other XML languages.</p>

    <h2 id="intro-MIMEType">1.2 SVG MIME type, file name extension and Macintosh file
    type</h2>
    <p>The MIME type for SVG is "<tt>image/svg+xml</tt>" (see
    <a href="http://www.ietf.org/rfc/rfc3023.txt"><cite>XML Media Types</cite></a>
    [<a href="#refs-ref-RFC3023">RFC3023</a>]). The
    registration of this MIME type is in progress at the W3C.</p>
    <p>It is recommended that SVG files have the extension
    <code>".svg"</code> (all lowercase) on all platforms. It is
    recommended that <a href="http://www.ietf.org/rfc/rfc1952.txt">gzip-compressed</a>
    [<a href="#refs-ref-RFC1952">RFC1952</a>]
    SVG files have the extension <code>".svgz"</code> (all
    lowercase) on all platforms.</p>
    <p>It is recommended that SVG files stored on Macintosh HFS
    file systems be given a file type of <code>"svg "</code>
    (all lowercase, with a space character as the fourth letter).
    It is recommended that gzip-compressed
    SVG files stored on Macintosh HFS file systems be given a file
    type of <code>"svgz"</code> (all lowercase).</p>
    <h2 id="intro-NamespaceAndDTDIdentifiers">1.3 SVG Namespace, Public Identifier and System
    Identifier</h2>
    <p>The following are the SVG 1.1 namespace, public identifier
    and system identifier:</p>
    <dl><dt id="intro-Namespace">SVG Namespace:</dt><dd>http://www.w3.org/2000/svg</dd><dt id="intro-PublicID">Public Identifier for SVG 1.1:</dt><dd>PUBLIC "-//W3C//DTD SVG 1.1//EN"</dd><dt id="intro-SystemID">System Identifier for the SVG 1.1 Recommendation:</dt><dd>http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd</dd></dl>
    <p>The following is an example <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#sec-prolog-dtd">document
    type declaration</a> for an SVG document:</p>
<pre>
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
         "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
</pre>
    <p>Note that DTD listed in the System Identifier is a
    modularized DTD (i.e. its contents are spread over multiple
    files), which means that a validator may have to fetch the
    multiple modules in order to validate. For that reason,
    there is a single flattened DTD available that corresponds
    to the SVG 1.1 modularized DTD. It can be found at
    <a href="http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-flat.dtd">http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-flat.dtd</a>.</p>

    <p>While a DTD is provided in this specification, the use of DTDs for
    validating XML documents is known to be problematic.  In particular, DTDs
    do not handle namespaces gracefully.  It is <em>not</em> recommended that
    a DOCTYPE declaration be included in SVG documents.</p>

    <h2 id="intro-W3CCompatibility">1.4 Compatibility with Other Standards Efforts</h2>
    <p>SVG leverages and integrates with other W3C specifications
    and standards efforts. By leveraging and conforming to other
    standards, SVG becomes more powerful and makes it easier for
    users to learn how to incorporate SVG into their Web sites.</p>
    <p>The following describes some of the ways in which SVG
    maintains compatibility with, leverages and integrates with
    other W3C efforts:</p>
    <ul><li>SVG is an application of XML and is compatible with the
      <a href="http://www.w3.org/TR/2008/REC-xml-20081126/"><cite>Extensible Markup Language (XML) 1.0</cite></a> Recommendation
      [<a href="#refs-ref-XML10">XML10</a>]</li><li>SVG is compatible with the <a href="http://www.w3.org/TR/2006/REC-xml-names-20060816/"><cite>Namespaces in XML</cite></a> Recommendation
      [<a href="#refs-ref-XML-NS">XML-NS</a>]</li><li>SVG utilizes <a href="http://www.w3.org/TR/2001/REC-xlink-20010627/"><cite>XML Linking Language (XLink)</cite></a>
      [<a href="#refs-ref-XLINK">XLINK</a>] for IRI
      referencing and requires support for base IRI specifications
      defined in <a href="http://www.w3.org/TR/2009/REC-xmlbase-20090128/"><cite>XML Base</cite></a>
      [<a href="#refs-ref-XML-BASE">XML-BASE</a>].</li><li>SVG content can be styled by either CSS (see
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/"><cite>Cascading Style Sheets (CSS) level 2</cite></a>
      [<a href="#refs-ref-CSS2">CSS2</a>]) or XSLT
      (see <a href="http://www.w3.org/TR/1999/REC-xslt-19991116"><cite>XSL Transformations (XSLT) Version 1.0</cite></a>
      [<a href="#refs-ref-XSLT">XSLT</a>] and
      <a href="http://www.w3.org/TR/2007/REC-xslt20-20070123/"><cite>XSL Transformations (XSLT) Version 2.0</cite></a>
      [<a href="#refs-ref-XSLT2">XSLT2</a>]).
      See <a href="#styling-StylingWithCSS">Styling with CSS</a> and
      <a href="#styling-StylingWithXSL">Styling with XSL</a> for details.</li><li>SVG supports relevant properties and approaches common to
      CSS and XSL, plus selected semantics and features of CSS (see
      <a href="#styling-SVGStylingProperties">SVG's styling
      properties</a> and <a href="#styling-SVGUseOfCSS">SVG's
      Use of Cascading Style Sheets</a>).</li><li>External style sheets are referenced using the mechanism
      documented in <a href="http://www.w3.org/1999/06/REC-xml-stylesheet-19990629/"><cite>Associating Style Sheets with XML documents Version 1.0</cite></a>
      [<a href="#refs-ref-XML-SS">XML-SS</a>].</li><li>SVG includes a complete Document Object Model (DOM) and
      conforms to the <a href="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/"><cite>Document Object Model (DOM) Level 1</cite></a>
      Recommendation [<a href="#refs-ref-DOM1">DOM1</a>]. The
      SVG DOM has a high level of compatibility and consistency
      with the HTML DOM that is defined in the DOM Level 1
      specification. Additionally, the SVG DOM supports and
      incorporates many of the facilities described in 
      DOM Level 2, including the CSS object model and event
      handling
      [<a href="#refs-ref-DOM2">DOM2</a>]
      [<a href="#refs-ref-DOM2STYLE">DOM2STYLE</a>]
      [<a href="#refs-ref-DOM2EVENTS">DOM2EVENTS</a>].</li><li>SVG incorporates some features and approaches that are
      part of the <a href="http://www.w3.org/TR/2008/REC-SMIL3-20081201/"><cite>Synchronized Multimedia Integration Language (SMIL) 3.0 Specification</cite></a>
      [<a href="#refs-ref-SMIL">SMIL</a>], including
      the <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> element and the <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a>
      attribute.</li><li>SVG's animation features (see <a href="#chapter-animate">Animation</a>) were developed in
      collaboration with the W3C Synchronized Multimedia (SYMM)
      Working Group, developers of the <a href="http://www.w3.org/TR/2008/REC-SMIL3-20081201/"><cite>Synchronized Multimedia Integration Language (SMIL) 3.0 Specification</cite></a>
      [<a href="#refs-ref-SMIL">SMIL</a>]. SVG's
      animation features incorporate and extend the general-purpose
      XML animation capabilities described in the <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a>
      specification [<a href="#refs-ref-SMILANIM">SMILANIM</a>].</li><li>SVG has been designed to allow SMIL to
      use animated or static SVG content as media components.</li><li>SVG attempts to achieve maximum compatibility with both
      <a href="http://www.w3.org/TR/1999/REC-html401-19991224/"><cite>HTML 4</cite></a> [<a href="#refs-ref-HTML4">HTML4</a>]
      and <a href="http://www.w3.org/TR/2002/REC-xhtml1-20020801/">XHTML™ 1.0</a> [<a href="#refs-ref-XHTML">XHTML</a>]. Many of SVG's
      facilities are modeled directly after HTML, including its use
      of CSS [<a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/">CSS2</a>],
      its approach to event handling, and its approach to its
      Document Object Model [<a href="#refs-ref-DOM2">DOM2</a>].</li><li>SVG is compatible with W3C work on internationalization.
      References (W3C and otherwise) include: [<a href="#refs-ref-UNICODE">UNICODE</a>]
      and [<a href="#refs-ref-CHARMOD">CHARMOD</a>].
      Also, see <a href="#chapter-i18n">Internationalization
      Support</a>.</li><li>SVG is compatible with <a href="http://www.w3.org/WAI/">W3C work on Web Accessibility</a>.
      Also, see <a href="#chapter-access">Accessibility Support</a>.</li></ul>
    <p>In environments which support
    <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/">DOM 2 Core</a>
    [<a href="#refs-ref-DOM2">DOM2</a>] for other
    XML grammars (e.g., XHTML [<a href="#refs-ref-XHTML">XHTML</a>]) and which also
    support SVG and the SVG DOM, a single scripting approach can be
    used simultaneously for both XML documents and SVG graphics, in
    which case interactive and dynamic effects will be possible on
    multiple XML namespaces using the same set of scripts.</p>
    <h2 id="intro-Terminology">1.5 Terminology</h2>
    <p>Within this specification, the key words "MUST", "MUST NOT",
    "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
    "RECOMMENDED", "MAY", and "OPTIONAL" are to be interpreted as
    described in <a href="http://www.ietf.org/rfc/rfc2119.txt"><cite>Key words for use in RFCs to Indicate Requirement Levels</cite></a>
    [<a href="#refs-ref-RFC2119">RFC2119</a>].
    However, for readability, these words do not appear in all
    uppercase letters in this specification.</p>
    <p>At times, this specification recommends good practice for
    authors and user agents. These recommendations are not
    normative and conformance with this specification does not
    depend on their realization. These recommendations contain the
    expression "We recommend ...", "This specification recommends
    ...", or some similar wording.</p>
    <h2 id="intro-Definitions">1.6 Definitions</h2>
    <dl class="definitions"><dt id="intro-TermAnimationElement"><span class="SVG-TermDefine">animation element</span></dt><dd>An animation element is an element that can be used to animate
      the attribute or property value of another element. The following elements
      are animation elements: <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a> and <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>.</dd><dt id="intro-TermAnimationEventAttribute"><span class="SVG-TermDefine">animation event attribute</span></dt><dd>An animation event attribute is an <a href="#intro-TermEventAttribute"><span class="svg-term">event attribute</span></a> that specifies
      script to run for a particular animation-related event.  See
      <a href="#script-AnimationEvents">Animation event attributes</a>.
      The animation event attributes are <a href="#script-OnBeginEventAttribute"><span class="attr-name">‘onbegin’</span></a>, <a href="#script-OnEndEventAttribute"><span class="attr-name">‘onend’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a> and <a href="#script-OnRepeatEventAttribute"><span class="attr-name">‘onrepeat’</span></a>.</dd><dt id="intro-TermBasicShape"><span id="intro-TermBasicShapeElement" class="SVG-TermDefine">basic shape</span></dt><dd>Standard shapes which are predefined in SVG as a
      convenience for common graphical operations. Specifically:
      <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> and <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>.</dd><dt id="intro-TermCanvas"><span class="SVG-TermDefine">canvas</span></dt><dd>A surface onto which graphics elements are drawn, which
      can be real physical media such as a display or paper or an
      abstract surface such as a allocated region of computer
      memory. See the discussion of the <a href="#coords-SVGCanvas">SVG canvas</a> in the chapter on
      <a href="#chapter-coords">Coordinate Systems, Transformations and
      Units</a>.</dd><dt id="intro-TermClippingPath"><span class="SVG-TermDefine">clipping path</span></dt><dd>A combination of <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>
      and <a href="#intro-TermBasicShape">basic shapes</a> which serve as the
      outline of a (in the absence of anti-aliasing) 1-bit mask,
      where everything on the "inside" of the outline is allowed to
      show through but everything on the outside is masked out. See
      <a href="#masking-ClippingPaths">Clipping paths</a>.</dd><dt id="intro-TermContainerElement"><span class="SVG-TermDefine">container element</span></dt><dd>An element which can have graphics elements and other
      container elements as child elements. Specifically:
      <a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>, <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>, <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> and <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>.</dd><dt id="intro-TermConditionalProcessingAttribute"><span class="SVG-TermDefine">conditional processing attribute</span></dt><dd>A conditional processing attribute is one that controls whether
      or not the element on which it appears is processed.  Most elements,
      but not all, may have conditional processing attributes specified
      on them.  See <a href="#struct-ConditionalProcessing">Conditional processing</a>
      for details.  The conditional processing attributes defined in
      SVG 1.1 are <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a> and <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a>.</dd><dt id="intro-TermCoreAttributes"><span class="SVG-TermDefine">core attributes</span></dt><dd>The core attributes are those attributes that can be specified
      on any SVG element.  See <a href="#struct-CommonAttributes">Common attributes</a>.
      The core attributes are <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a> and <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a>.</dd><dt id="intro-TermCurrentInnermostSVGDocumentFragment">
      <span class="SVG-TermDefine">current innermost SVG document
      fragment</span></dt><dd>The XML document sub-tree which starts with the most
      immediate ancestor <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element of a given SVG
      element.</dd><dt id="intro-TermCurrentSVGDocumentFragment"><span class="SVG-TermDefine">current SVG document
      fragment</span></dt><dd>The XML document sub-tree which starts with the outermost
      ancestor <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element of a given SVG
      element, with the requirement that all container elements
      between the outermost <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> and this element are
      all elements in the SVG language.</dd><dt id="intro-TermCurrentTransformationMatrix"><span class="SVG-TermDefine">current transformation matrix
      (<span id="intro-TermCTM">CTM</span>)</span></dt><dd>Transformation matrices define the mathematical mapping
      from one coordinate system into another using a 3x3 matrix
      using the equation <span class="code-fragment">[x' y' 1] = [x
      y 1] * matrix</span>. The <em>current transformation
      matrix</em> (CTM) defines the mapping from the user
      coordinate system into the viewport coordinate system. See <a href="#coords-EstablishingANewUserSpace">Coordinate
      system transformations</a>.</dd><dt id="intro-TermDescriptiveElement"><span class="SVG-TermDefine">descriptive element</span></dt><dd>An element which provides supplementary descriptive information about
      its parent.  Specifically, the following elements are descriptive elements:
      <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a> and <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a>.</dd><dt id="intro-TermDocumentEventAttribute"><span class="SVG-TermDefine">document event attribute</span></dt><dd>A document event attribute is an <a href="#intro-TermEventAttribute"><span class="svg-term">event attribute</span></a> that specifies
      script to run for a particular document-wide event.  See
      <a href="#script-DocumentEvents">Document-level event attributes</a>.
      The document event attributes are <a href="#script-OnAbortEventAttribute"><span class="attr-name">‘onabort’</span></a>, <a href="#script-OnErrorEventAttribute"><span class="attr-name">‘onerror’</span></a>, <a href="#script-OnResizeEventAttribute"><span class="attr-name">‘onresize’</span></a>, <a href="#script-OnScrollEventAttribute"><span class="attr-name">‘onscroll’</span></a>, <a href="#script-OnUnloadEventAttribute"><span class="attr-name">‘onunload’</span></a> and <a href="#script-OnZoomEventAttribute"><span class="attr-name">‘onzoom’</span></a>.</dd><dt id="intro-TermEventAttribute"><span class="SVG-TermDefine">event attribute</span></dt><dd>An event attribute is one that specifies some script to run when
      an event of a certain type is dispatched to the element on which the attribute
      is specified.  See <a href="#script-EventAttributes">Event attributes</a>.</dd><dt id="intro-TermFill"><span class="SVG-TermDefine">fill</span></dt><dd>The operation of <a href="#intro-TermPaint">painting</a> the interior of a <a href="#intro-TermShape">shape</a> or the interior of the
      character glyphs in a text string.</dd><dt id="intro-TermFilterPrimitiveAttributes"><span class="SVG-TermDefine">filter primitive attributes</span></dt><dd>The filter primitive attributes is the set of attributes that are common
      to all <a href="#intro-TermFilterPrimitiveElement"><span class="svg-term">filter primitive elements</span></a>.  They are
      <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a> and <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>.</dd><dt id="intro-TermFilterPrimitiveElement"><span class="SVG-TermDefine">filter primitive element</span></dt><dd>A filter primitive element is one that can be used as a child of a
      <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element to specify a node in the filter graph.
      The following elements are the filter primitive elements defined
      in SVG 1.1:
      <a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a>, <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>, <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a>, <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a> and <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a>.</dd><dt id="intro-TermFont"><span class="SVG-TermDefine">font</span></dt><dd>A font represents an organized collection of <a href="#intro-TermGlyph">glyphs</a> in which the various
      glyph representations will share a common look or styling
      such that, when a string of characters is rendered together,
      the result is highly legible, conveys a particular artistic
      style and provides consistent inter-character alignment and
      spacing.</dd><dt id="intro-TermGlyph"><span class="SVG-TermDefine">glyph</span></dt><dd>A glyph represents a unit of rendered content within a <a href="#intro-TermFont">font</a>. Often, there is a
      one-to-one correspondence between characters to be drawn and
      corresponding glyphs (e.g., often, the character "A" is
      rendered using a single glyph), but other times multiple
      glyphs are used to render a single character (e.g., use of
      accents) or a single glyph can be used to render multiple
      characters (e.g., ligatures). Typically, a glyph is defined
      by one or more <a href="#intro-TermShape">shapes</a> such
      as a <a href="#chapter-paths">path</a>, possibly with additional
      information such as rendering hints that help a font engine
      to produce legible text in small sizes.</dd><dt id="intro-TermGradientElement"><span class="SVG-TermDefine">gradient element</span></dt><dd>A gradient element is one that defines a gradient paint server.
      SVG 1.1 defines the following gradient elements: <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> and <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a>.</dd><dt id="intro-TermGraphicalEventAttribute"><span class="SVG-TermDefine">graphical event attribute</span></dt><dd>A graphical event attribute is an <a href="#intro-TermEventAttribute"><span class="svg-term">event attribute</span></a> that specifies
      script to run for a particular user interaction event.  See
      <a href="#script-GraphicsEvents">Event attributes on graphics and container elements</a>.
      The graphical event attributes are <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a> and <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>.</dd><dt id="intro-TermGraphicsElement"><span class="SVG-TermDefine">graphics element</span></dt><dd>One of the element types that can cause graphics to be
      drawn onto the target canvas. Specifically:
      <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a> and <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>.</dd><dt id="intro-TermGraphicsReferencingElement"><span class="SVG-TermDefine">graphics referencing
      element</span></dt><dd>A graphics element which uses a reference to a different
      document or element as the source of its graphical content.
      Specifically: <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> and <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>.</dd><dt id="intro-TermHitTesting"><span class="SVG-TermDefine">hit-testing</span></dt><dd>The process of determining whether a pointer intersects a given
      <a href="#intro-TermGraphicsElement"><span class="svg-term">graphics element</span></a>.  Hit-testing is used in determining which element
      to dispatch a mouse event to, which might be done in response to the user
      moving the pointing device, or by changes in the position, shape and
      other attributes of elements in the document.  Hit-testing is also known
      as <em>hit detection</em> or <em>picking</em>.  See
      <a href="#interact-pointer-processing">hit-testing and processing
      order for user interface events</a> and the definition of the
      <a href="#interact-PointerEventsProperty"><span class="prop-name">‘pointer-events’</span></a> property.</dd><dt id="intro-TermIRIReference"><span class="SVG-TermDefine">IRI reference</span></dt><dd>
          An IRI reference is an Internationalized Resource Identifier
          with an optional fragment identifier, as defined in
          <a href="http://www.ietf.org/rfc/rfc3987.txt"><cite>Internationalized 
            Resource Identifiers</cite></a>
          [<a href="#refs-ref-RFC3987">RFC3987</a>].
          An IRI reference serves as a reference to a resource or (with a
          fragment identifier) to a secondary resource. See 
          <a href="#struct-Head">References and the <span class="element-name">‘defs’</span> element</a>.
      </dd><dt id="intro-TermLightSourceElement"><span class="SVG-TermDefine">light source element</span></dt><dd>A light source element is one that can specify light source
      information for an <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a> or <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>
      element.  The following light source elements are defined in SVG 1.1:
      <a href="#filters-feDistantLightElement"><span class="element-name">‘feDistantLight’</span></a>, <a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a> and <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a>.</dd><dt id="intro-TermLocalIRIReference"><span class="SVG-TermDefine">local IRI reference</span></dt><dd>An Internationalized Resource Identifier [<a href="#refs-ref-RFC3987">RFC3987</a>] that does
      not include an <span class="code-fragment">&lt;absoluteIRI&gt;</span> or <span class="code-fragment">&lt;relativeIRI&gt;</span> and thus
      represents a reference to an element within the current
      document. See <a href="#struct-Head">References and the
      <span class="element-name">‘defs’</span> element</a>.</dd><dt id="intro-TermMask"><span class="SVG-TermDefine">mask</span></dt><dd>A <a href="#intro-TermContainerElement">container
      element</a> which can contain <a href="#intro-TermGraphicsElement">graphics elements</a>
      or other container elements which define a set of graphics
      that is to be used as a semi-transparent mask for compositing
      foreground objects into the current background. See <a href="#masking-Masking">Masks</a>.</dd><dt id="intro-TermNonLocalIRIReference"><span class="SVG-TermDefine">non-local IRI reference</span></dt><dd>An Internationalized Resource Identifier [<a href="#refs-ref-RFC3987">RFC3987</a>] that
      includes an <span class="code-fragment">&lt;absoluteIRI&gt;</span> or <span class="code-fragment">&lt;relativeIRI&gt;</span> and thus
      (usually) represents a reference to a different document or
      an element within a different document. See <a href="#struct-Head">References and the <span class="element-name">‘defs’</span> element</a>.</dd><dt id="intro-TermOutermostSVGElement">
        <span class="SVG-TermDefine">outermost svg element</span>
      </dt><dd>
        The furthest <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> ancestor element that remains in the
        <a href="#intro-TermCurrentSVGDocumentFragment">current SVG document fragment</a>.
      </dd><dt id="intro-TermPaint"><span class="SVG-TermDefine">paint</span></dt><dd>A paint represents a way of putting color values onto the
      canvas. A paint might consist of both color values and
      associated alpha values which control the blending of colors
      against already existing color values on the canvas. SVG
      supports three types of built-in paint: <a href="#color-ColorIntroduction">color</a>, <a href="#pservers-Gradients">gradients</a> and <a href="#pservers-Patterns">patterns</a>.</dd><dt id="intro-TermPresentationAttribute"><span class="SVG-TermDefine">presentation attribute</span></dt><dd>An XML attribute on an SVG element which specifies a
      value for a given <a href="#intro-TermProperty">property</a> for that element. See <a href="#chapter-styling">Styling</a>. Note that
      although any property may be <em>specified</em> on any element,
      not all properties will <em>apply to</em> (affect the rendering of)
      a given element. The definition of each property states to what set 
      of elements it applies.</dd><dt id="intro-TermProperty"><span class="SVG-TermDefine">property</span></dt><dd>A parameter that helps specify how a document should be
      rendered. A complete list of SVG's properties can be found in
      <a href="#chapter-propidx">Property Index</a>. Properties are
      assigned to elements in the SVG language either by <a href="#intro-TermPresentationAttribute">presentation
      attributes</a> on elements in the SVG language or by using a
      styling language such as CSS [<a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/">CSS2</a>]. See <a href="#chapter-styling">Styling</a>.</dd><dt id="intro-TermRootmostSVGElement"><span class="SVG-TermDefine">rootmost <span class="element-name">‘svg’</span> element</span></dt><dd>
    <p>
      The rootmost
      <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>
      element is the furthest
      <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>
      ancestor element that does not exit an
      <a href="#intro-TermSVGContext"><span class="svg-term">SVG context</span></a>.
      See also
      <a href="#intro-TermSVGDocumentFragment"><span class="svg-term">SVG document fragment</span></a>.
    </p>
  </dd><dt id="intro-TermShape"><span id="intro-TermShapeElement" class="SVG-TermDefine">shape</span></dt><dd>A graphics element that is defined by some combination of
      straight lines and curves. Specifically:
      <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>,
      <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>,
      <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>,
      <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>,
      <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>,
      <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> and
      <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>.</dd><dt id="intro-TermStroke"><span class="SVG-TermDefine">stroke</span></dt><dd>The operation of <a href="#intro-TermPaint">painting</a> the outline of a <a href="#intro-TermShape">shape</a> or the outline of
      character glyphs in a text string.</dd><dt id="intro-TermStructuralElement"><span class="SVG-TermDefine">structural element</span></dt><dd>The structural elements are those which define the primary
      structure of an SVG document.  Specifically, the following
      elements are structural elements:
      <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> and <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>.</dd><dt id="intro-TermSVGCanvas"><span class="SVG-TermDefine">SVG canvas</span></dt><dd>The <a href="#intro-TermCanvas">canvas</a> onto which the SVG
      content is rendered. See the discussion of the <a href="#coords-SVGCanvas">SVG canvas</a> in the chapter on
      <a href="#chapter-coords">Coordinate Systems, Transformations and
      Units</a>.</dd><dt id="intro-TermSVGContext"><span class="SVG-TermDefine">SVG context</span></dt><dd>
    <p>
      An SVG context is a document fragment where all elements within the
      fragment must be subject to processing by an <a href="#intro-TermSVGUserAgent"><span class="svg-term">SVG user agent</span></a> according
      to the rules in this specification.
    </p>
    <p>
      If SVG content is embedded inline within parent XML (such as XHTML),
      the SVG context does not include the ancestors above the
      <a href="#intro-TermRootmostSVGElement"><span class="svg-term">rootmost <span class="element-name">‘svg’</span> element</span></a>.
      If the SVG content contains any
      <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>
      elements which in turn contain non-SVG content, the SVG context does
      not include the contents of the
      <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>
      elements.
    </p>
  </dd><dt id="intro-TermSVGDocumentFragment"> <span class="SVG-TermDefine">SVG document fragment</span></dt><dd>The XML document sub-tree which starts with an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>
       element. An SVG
      document fragment can consist of a stand-alone SVG document,
      or a fragment of a parent XML document enclosed by an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>
      element. When an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element is a descendant
      of another <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element, there are two
      SVG document fragments, one for each <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element. (One SVG
      document fragment is contained within another SVG document
      fragment.)</dd><dt id="intro-TermSVGUserAgent"><span class="SVG-TermDefine">SVG user agent</span></dt><dd>
    An SVG user agent is a <a href="#intro-TermUserAgent"><span class="svg-term">user agent</span></a>
    that is able to retrieve and render SVG content.
  </dd><dt id="intro-TermSVGViewport"><span class="SVG-TermDefine">SVG viewport</span></dt><dd>The <a href="#intro-TermViewport">viewport</a> within the <a href="#intro-TermSVGCanvas">SVG canvas</a> which defines the
      rectangular region into which SVG content is rendered. See
      the discussion of the <a href="#coords-SVGViewport">SVG
      viewport</a> in the chapter on <a href="#chapter-coords">Coordinate Systems, Transformations and
      Units</a>.</dd><dt id="intro-TermTextContentElement"><span class="SVG-TermDefine">text content element</span></dt><dd>A text content element is an SVG element that causes a text string
      to be rendered onto the canvas. The SVG 1.1 text content elements are the
      following: <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> and <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a></dd><dt id="intro-TermTextContentChildElement"><span class="SVG-TermDefine">text content child element</span></dt><dd>A text content child element is a <a href="#intro-TermTextContentElement"><span class="svg-term">text content element</span></a> that is allowed
      as a descendant of another <a href="#intro-TermTextContentElement"><span class="svg-term">text content element</span></a>.  In SVG 1.1,
      the text content child elements are the following:
      <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> and <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a></dd><dt id="intro-TermTextContentBlockElement"><span class="SVG-TermDefine">text content block element</span></dt><dd>
          A text content block element is a
          <a href="#intro-TermTextContentElement"><span class="svg-term">text content element</span></a>
          that serves as a standalone element for a unit of text, and
          which may optionally contain certain child
          <a href="#intro-TermTextContentElement"><span class="svg-term">text content elements</span></a>
          (e.g. <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>).
          
          .
      </dd><dt id="intro-TermTransformation"><span class="SVG-TermDefine">transformation</span></dt><dd>A modification of the <a href="#intro-TermCurrentTransformationMatrix">current
      transformation matrix (CTM)</a> by providing a supplemental
      transformation in the form of a set of simple transformations
      specifications (such as scaling, rotation or translation)
      and/or one or more <a href="#intro-TermTransformationMatrix">transformation matrices</a>.
      See <a href="#coords-EstablishingANewUserSpace">Coordinate
      system transformations</a>.</dd><dt id="intro-TermTransformationMatrix"><span class="SVG-TermDefine">transformation matrix</span></dt><dd>Transformation matrices define the mathematical mapping
      from one coordinate system into another using a 3x3 matrix
      using the equation <span class="code-fragment">[x' y' 1] = [x
      y 1] * matrix</span>. See <a href="#intro-TermCurrentTransformationMatrix">current
      transformation matrix (CTM)</a> and <a href="#coords-EstablishingANewUserSpace">Coordinate
      system transformations</a>.</dd><dt id="intro-TermUserAgent"><span class="SVG-TermDefine">user agent</span></dt><dd><p>The general definition of a user agent is an application
      that retrieves and renders Web content, including text,
      graphics, sounds, video, images, and other content types. A
      user agent may require additional user agents that handle
      some types of content. For instance, a browser may run a
      separate program or plug-in to render sound or video. User
      agents include graphical desktop browsers, multimedia
      players, text browsers, voice browsers, and assistive
      technologies such as screen readers, screen magnifiers,
      speech synthesizers, onscreen keyboards, and voice input
      software.</p>
      <p>A "user agent" may or may not have the ability to retrieve
      and render SVG content; however, an "SVG user agent"
      retrieves and renders SVG content.</p></dd><dt id="intro-TermUserCoordinateSystem"><span class="SVG-TermDefine">user coordinate system</span></dt><dd>In general, a coordinate system defines locations and
      distances on the current <a href="#intro-TermCanvas">canvas</a>.
      The current <span class="SVG-TermDefine">user coordinate
      system</span> is the coordinate system that is currently
      active and which is used to define how coordinates and
      lengths are located and computed, respectively, on the
      current <a href="#intro-TermCanvas">canvas</a>. See <a href="#coords-SVGInitialUserCoordinateSystem">initial
      user coordinate system</a> and <a href="#coords-EstablishingANewUserSpace">Coordinate
      system transformations</a>.</dd><dt id="intro-TermUserSpace"><span class="SVG-TermDefine">user space</span></dt><dd>A synonym for <a href="#intro-TermUserCoordinateSystem">user
      coordinate system</a>.</dd><dt id="intro-TermUserUnits"><span class="SVG-TermDefine">user units</span></dt><dd>A coordinate value or length expressed in user units
      represents a coordinate value or length in the current <a href="#intro-TermUserCoordinateSystem">user coordinate system</a>.
      Thus, 10 user units represents a length of 10 units in the
      current user coordinate system.</dd><dt id="intro-TermViewport"><span class="SVG-TermDefine">viewport</span></dt><dd>A rectangular region within the current <a href="#intro-TermCanvas">canvas</a> onto which <a href="#intro-TermGraphicsElement">graphics elements</a> are to be
      rendered. See the discussion of the <a href="#coords-SVGViewport">SVG viewport</a> in the
      chapter on <a href="#chapter-coords">Coordinate Systems,
      Transformations and Units</a>.</dd><dt id="intro-TermViewportCoordinateSystem"><span class="SVG-TermDefine">viewport coordinate system</span></dt><dd>In general, a coordinate system defines locations and
      distances on the current <a href="#intro-TermCanvas">canvas</a>.
      The <span class="SVG-TermDefine">viewport coordinate
      system</span> is the coordinate system that is active at the
      start of processing of an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element, before
      processing the optional <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute. In the
      case of an SVG document fragment that is embedded within a
      parent document which uses CSS to manage its layout, then the
      viewport coordinate system will have the same orientation and
      lengths as in CSS, with the origin at the top-left on the <a href="#intro-TermViewport">viewport</a>. See <a href="#coords-ViewportSpace">The initial viewport</a> and
      <a href="#coords-EstablishingANewViewport">Establishing a
      new viewport</a>.</dd><dt id="intro-TermViewportSpace"><span class="SVG-TermDefine">viewport space</span></dt><dd>A synonym for <a href="#intro-TermViewportCoordinateSystem">viewport coordinate
      system</a>.</dd><dt id="intro-TermViewportUnits"><span class="SVG-TermDefine">viewport units</span></dt><dd>A coordinate value or length expressed in viewport units
      represents a coordinate value or length in the <a href="#intro-TermViewportCoordinateSystem">viewport coordinate
      system</a>. Thus, 10 viewport units represents a length of 10
      units in the viewport coordinate system.</dd><dt id="intro-TermXLinkAttributes"><span class="SVG-TermDefine">XLink attributes</span></dt><dd>The XLink attributes are the seven attributes defined in
      the <a href="http://www.w3.org/TR/2001/REC-xlink-20010627/">XML Linking Language</a>
      specification [<a href="#refs-ref-XLINK">XLINK</a>], which are used
      on various SVG elements that can reference resources.  The most
      import XLink attribute is <span class="attr-name">‘xlink:href’</span>,
      whose definition can be found on each element that allows it.
      The remaining XLink attributes are <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>,
      <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a> and
      <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>.</dd></dl>
  </div><hr class="chapter-divider" />
<div id="chapter-concepts">

<h1>2 Concepts</h1><h2 id="concepts-toc">Contents</h2><ul class="toc">
<li><a href="#concepts-Intro">2.1 Explaining the name: SVG</a></li>
<li><a href="#concepts-Concepts">2.2 Important SVG concepts</a></li>
<li><a href="#concepts-UsageOptions">2.3 Options for using SVG in Web pages</a></li></ul>

    <h2 id="concepts-Intro">2.1 Explaining the name: SVG</h2>
    <p class="explain">SVG stands for <a href="#concepts-Scalable">S</a>calable <a href="#concepts-Vector">V</a>ector <a href="#concepts-Graphics">G</a>raphics, an <a href="#concepts-XML">XML</a>
    grammar for <a href="#concepts-Stylable">stylable</a> graphics, usable
    as an <a href="#concepts-Namespace">XML namespace</a>.</p>
    <h3 id="concepts-Scalable">Scalable</h3>
    <p>To be scalable means to increase or decrease uniformly. In
    terms of graphics, scalable means not being limited to a
    single, fixed, pixel size. On the Web, scalable means that a
    particular technology can grow to a large number of files, a
    large number of users, a wide variety of applications. SVG,
    being a graphics technology for the Web, is scalable in both
    senses of the word.</p>
    <p>SVG graphics are scalable to different display resolutions,
    so that for example printed output uses the full resolution of
    the printer and can be displayed at the same size on screens of
    different resolutions. The same SVG graphic can be placed at
    different sizes on the same Web page, and re-used at different
    sizes on different pages. SVG graphics can be magnified to see
    fine detail, or to aid those with low vision.</p>
    <p>SVG graphics are scalable because the same SVG content can
    be a stand-alone graphic or can be referenced or included
    inside other SVG graphics, thereby allowing a complex
    illustration to be built up in parts, perhaps by several
    people. The <a href="#concepts-Symbols">symbol</a>, marker and <a href="#concepts-Fonts">font</a> capabilities promote re-use of graphical
    components, maximize the advantages of HTTP caching and avoid
    the need for a centralized registry of approved symbols.</p>
    <h3 id="concepts-Vector">Vector</h3>
    <p>Vector graphics contain geometric objects such as lines and
    curves. This gives greater flexibility compared to raster-only
    formats (such as PNG and JPEG) which have to store information
    for every pixel of the graphic. Typically, vector formats can
    also integrate raster images and can combine them with vector
    information such as clipping paths to produce a complete
    illustration; SVG is no exception.</p>
    <p>Since all modern displays are raster-oriented, the
    difference between raster-only and vector graphics comes down
    to where they are rasterized; client side in the case of vector
    graphics, as opposed to already rasterized on the server. SVG
    gives control over the rasterization process, for example to
    allow anti-aliased artwork without the ugly aliasing typical of
    low quality vector implementations. SVG also provides
    client-side <a href="#concepts-RasterEffects">raster filter effects</a>,
    so that moving to a vector format does not mean the loss of
    popular effects such as soft drop shadows.</p>
    <h3 id="concepts-Graphics">Graphics</h3>
    <p>Most existing XML grammars represent either textual
    information, or represent raw data such as financial
    information. They typically provide only rudimentary graphical
    capabilities, often less capable than the HTML 'img' element.
    SVG fills a gap in the market by providing a rich, structured
    description of vector and mixed vector/raster graphics; it can
    be used stand-alone, or as an <a href="#concepts-Namespace">XML
    namespace</a> with other grammars.</p>
    <h3 id="concepts-XML">XML</h3>
    <p>XML, a for
    structured information exchange, has become extremely popular
    and is both widely and reliably implemented. By being written
    in XML, SVG builds on this strong foundation and gains many
    advantages such as a sound basis for internationalization,
    powerful structuring capability, an object model, and so on. By
    building on existing, cleanly-implemented specifications,
    XML-based grammars are open to implementation without a huge
    reverse engineering effort.</p>
    <h3 id="concepts-Namespace">Namespace</h3>
    <p>It is certainly useful to have a stand-alone, SVG-only
    viewer. But SVG is also intended to be used as one component in
    a multi-namespace XML application. This multiplies the power of
    each of the namespaces used, to allow innovative new content to
    be created. For example, SVG graphics may be included in a
    document which uses any text-oriented XML namespace - including
    XHTML. A scientific document, for example, might also use <a href="http://www.w3.org/TR/2001/REC-MathML2-20010221/">MathML</a> for mathematics
    in the document. The combination of SVG and SMIL leads to
    interesting, time based, graphically rich presentations.</p>
    <p>SVG is a good, general-purpose component for any
    multi-namespace grammar that needs to use graphics.</p>
    <h3 id="concepts-Stylable">Stylable</h3>
    <p>The advantages of style sheets in terms of presentational
    control, flexibility, faster download and improved maintenance
    are now generally accepted, certainly for use with text. SVG
    extends this control to the realm of graphics.</p>
    <p>The combination of scripting, DOM and CSS is often termed
    "Dynamic HTML" and is widely used for animation, interactivity
    and presentational effects. SVG allows the same script-based
    manipulation of the document tree and the style sheet.</p>
    <h2 id="concepts-Concepts">2.2 Important SVG concepts</h2>
    <h3 id="concepts-GraphicalObjects">Graphical Objects</h3>
    <p>With any XML grammar, consideration has to be given to what
    exactly is being modelled. For textual formats, modelling is
    typically at the level of paragraphs and phrases, rather than
    individual nouns, adverbs, or phonemes. Similarly, SVG models
    graphics at the level of graphical objects rather than
    individual points.</p>
    <p>SVG provides a general path element, which can be used to
    create a huge variety of graphical objects, and also provides
    common <a href="#intro-TermBasicShape">basic shapes</a>
    such as rectangles and ellipses. These are convenient for hand
    coding and may be used in the same ways as the more general
    path element. SVG provides fine control over the coordinate
    system in which graphical objects are defined and the
    transformations that will be applied during rendering.</p>
    <h3 id="concepts-Symbols">Symbols</h3>
    <p>It would have been possible to define some standard symbols
    that SVG would provide. But which ones? There would always be
    additional symbols for electronics, cartography, flowcharts,
    etc., that people would need that were not provided until the
    "next version". SVG allows users to create, re-use and share
    their own symbols without requiring a centralized registry.
    Communities of users can create and refine the symbols that
    they need, without having to ask a committee. Designers can be
    sure exactly of the graphical appearance of the symbols they
    use and not have to worry about unsupported symbols.</p>
    <p>Symbols may be used at different sizes and orientations, and
    can be restyled to fit in with the rest of the graphical
    composition.</p>
    <h3 id="concepts-RasterEffects">Raster Effects</h3>
    <p>Many existing Web graphics use the filtering operations
    found in paint packages to create blurs, shadows, lighting
    effects and so on. With the client-side rasterization used with
    vector formats, such effects might be thought impossible. SVG
    allows the declarative specification of filters, either singly
    or in combination, which can be applied on the client side when
    the SVG is rendered. These are specified in such a way that the
    graphics are still scalable and displayable at different
    resolutions.</p>
    <h3 id="concepts-Fonts">Fonts</h3>
    <p>Graphically rich material is often highly dependent on the
    particular font used and the exact spacing of the glyphs. In
    many cases, designers convert text to outlines to avoid any
    font substitution problems. This means that the original text
    is not present and thus searchability and accessibility suffer.
    In response to feedback from designers, SVG includes font
    elements so that both text and graphical appearance are
    preserved.</p>
    <h3 id="concepts-Animation">Animation</h3>
    <p>Animation can be produced via script-based manipulation of
    the document, but scripts are difficult to edit and interchange
    between authoring tools is harder. Again in response to
    feedback from the design community, SVG includes declarative
    animation elements which were designed collaboratively by the
    SVG and SYMM Working Groups. This allows the animated effects
    common in existing Web graphics to be expressed in SVG.</p>
    <h2 id="concepts-UsageOptions">2.3 Options for using SVG in Web pages</h2>
    <p>There are a variety of ways in which SVG content can be
    included within a Web page. Here are some of the options:</p>
    <dl><dt>A stand-alone SVG Web page</dt><dd> In this case, an SVG document (i.e., a Web resource whose
      MIME type is "<tt>image/svg+xml</tt>") is loaded directly
      into a user agent such as a Web browser. The SVG document is
      the Web page that is presented to the user.</dd><dt>Embedding by reference</dt><dd>In this case, a parent Web page references a separately
        stored SVG document and specifies that the given SVG
        document should be embedded as a component of the parent
        Web page. For HTML or XHTML, here are three options: 
        <ul><li>The HTML/XHTML <span class="element-name">‘img’</span> element is the most
          common method for using graphics in HTML pages. For
          faster display, the width and height of the image can be
          given as attributes. One attribute that is required is
          <span class="attr-name">‘alt’</span>, used to give an
          alternate textual string for people browsing with images
          off, or who cannot see the images. The string cannot
          contain any markup. A <span class="attr-name">‘longdesc’</span> attribute lets you
          point to a longer description - often in HTML - which can
          have markup and richer formatting.</li><li>The HTML/XHTML <span class="element-name">‘object’</span> element can contain
          other elements nested within it, unlike <span class="element-name">‘img’</span>, which is empty. This
          means that several different formats can be offered,
          using nested <span class="element-name">‘object’</span>
          elements, with a final textual alternative (including
          markup, links, etc). The outermost element which can be
          displayed will be used.</li><li>The HTML/XHTML <span class="element-name">‘applet’</span> element which can
          invoke a Java applet to view SVG content within the given
          Web page. These applets can do many things, but a common
          task is to use them to display images, particularly ones
          in unusual formats or which need to be presented under
          the control of a program for some other reason.</li></ul>
      </dd><dt>Embedding inline</dt><dd>In this case, SVG content is embedded inline directly within
      the parent Web page. An example is an XHTML Web page with an
      SVG document fragment textually included within the
      XHTML.</dd><dt>External link, using the HTML <span class="element-name">‘a’</span> element</dt><dd>This allows any stand-alone SVG viewer to be used, which can
      (but need not) be a different program to that used to display
      HTML. This option typically is used for unusual image
      formats.</dd><dt>Referenced from a CSS or XSL property</dt><dd>When a user agent supports CSS-styled XML content [<a href="#refs-ref-CSS2">CSS2</a>]
      or XSL [<a href="#refs-ref-XSL">XSL</a>] and the user agent is a <a href="#conform-ConformingSVGViewers">Conforming SVG
      Viewer</a>, then that user agent must support the ability to
      reference SVG resources wherever CSS or XSL properties allow
      for the referencing of raster images, including the ability
      to tile SVG graphics wherever necessary and the ability to
      composite the SVG into the background if it has transparent
      portions. Examples include the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/colors.html#propdef-background-image">
      <span class="prop-name">‘background-image’</span></a> and <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/generate.html#propdef-list-style-image">
      <span class="prop-name">‘list-style-image’</span></a>
      properties ([<a href="#refs-ref-CSS2">CSS2</a>], sections 14.2.1 and 12.6.2)
      that are included in both CSS and XSL.</dd></dl>

</div><hr class="chapter-divider" />
<div id="chapter-render">

<h1>3 Rendering Model</h1><h2 id="render-toc">Contents</h2><ul class="toc">
<li><a href="#render-Introduction">3.1 Introduction</a></li>
<li><a href="#render-PaintersModel">3.2 The painters model</a></li>
<li><a href="#render-RenderingOrder">3.3 Rendering Order</a></li>
<li><a href="#render-Grouping">3.4 How groups are rendered</a></li>
<li><a href="#render-Elements">3.5 How elements are rendered</a></li>
<li><a href="#render-TypesOfGraphicsElements">3.6 Types of graphics elements</a><ul class="toc">
<li><a href="#render-PaintingShapesAndText">3.6.1 Painting shapes and text</a></li>
<li><a href="#render-PaintingRasterImages">3.6.2 Painting raster images</a></li></ul></li>
<li><a href="#render-FilteringPaintRegions">3.7 Filtering painted regions</a></li>
<li><a href="#render-ClippingMaskingObjectOpacity">3.8 Clipping, masking and object opacity</a></li>
<li><a href="#render-ParentCompositing">3.9 Parent Compositing</a></li></ul>

    <h2 id="render-Introduction">3.1 Introduction</h2>
    <p>Implementations of SVG are expected to behave as though they
    implement a rendering (or imaging) model corresponding to the
    one described in this chapter. A real implementation is not
    required to implement the model in this way, but the result on
    any device supported by the implementation shall match that
    described by this model.</p>
    <p>The appendix on <a href="#chapter-conform">conformance
    requirements</a> describes the extent to which an actual
    implementation may deviate from this description. In practice
    an actual implementation will deviate slightly because of
    limitations of the output device (e.g. only a limited range of
    colors might be supported) and because of practical limitations
    in implementing a precise mathematical model (e.g. for
    realistic performance curves are approximated by straight
    lines, the approximation need only be sufficiently precise to
    match the conformance requirements).</p>
    <h2 id="render-PaintersModel">3.2 The painters model</h2>
    <p>SVG uses a "painters model" of rendering. <a href="#intro-TermPaint">Paint</a> is applied in successive
    operations to the output device such that each operation paints
    over some area of the output device. When the area overlaps a
    previously painted area the new paint partially or completely
    obscures the old. When the paint is not completely opaque the
    result on the output device is defined by the (mathematical)
    rules for compositing described under <a href="#masking-SimpleAlphaBlending">Alpha Blending</a>.</p>
    <h2 id="render-RenderingOrder">3.3 Rendering Order</h2>
    <p>Elements in an SVG document fragment have an implicit
    drawing order, with the first elements in the SVG document
    fragment getting "painted" first. Subsequent elements are
    painted on top of previously painted elements.</p>
    <h2 id="render-Grouping">3.4 How groups are rendered</h2>
    <p>Grouping elements such as the <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element (see <a href="#intro-TermContainerElement">container elements</a>)
    have the effect of producing a temporary separate canvas
    initialized to transparent black onto which child elements are
    painted. Upon the completion of the group, any <a href="#render-FilteringPaintRegions">filter effects</a>
    specified for the group are applied to create a modified
    temporary canvas. The modified temporary canvas is composited
    into the background, taking into account any group-level <a href="#masking-Masking">masking</a> and <a href="#masking-OpacityProperty">opacity</a> settings on the
    group.</p>
    
    <h2 id="render-Elements">3.5 How elements are rendered</h2>
    <p>Individual <a href="#intro-TermGraphicsElement">graphics
    elements</a> are rendered as if each graphics element
    represented its own group; thus, the effect is as if a
    temporary separate canvas is created for each graphics element.
    The element is first painted onto the temporary canvas (see <a href="#render-PaintingShapesAndText">Painting shapes and
    text</a> and <a href="#render-PaintingRasterImages">Painting raster
    images</a> below). Then any <a href="#render-FilteringPaintRegions">filter effects</a>
    specified for the graphics element are applied to create a
    modified temporary canvas. The modified temporary canvas is
    then composited into the background, taking into account any <a href="#render-ClippingMaskingObjectOpacity">clipping,
    masking and object opacity</a> settings on the graphics
    element.</p>
    
    <h2 id="render-TypesOfGraphicsElements">3.6 Types of graphics elements</h2>
    <p>SVG supports three fundamental types of <a href="#intro-TermGraphicsElement">graphics elements</a>
    that can be rendered onto the canvas:</p>
    <ul><li><a href="#intro-TermShape">Shapes</a>, which
      represent some combination of straight line and curves</li><li>Text, which represents some combination of character
      glyphs</li><li>Raster images, which represent an array of values that
      specify the paint color and opacity (often termed alpha) at a
      series of points on a rectangular grid. (SVG requires support
      for specified raster image formats under <a href="#chapter-conform">conformance requirements</a>.)</li></ul>
    
    <h3 id="render-PaintingShapesAndText">3.6.1 Painting shapes and text</h3>
    <p>Shapes and text can be <a href="#intro-TermFill">filled</a> (i.e., apply paint to the
    interior of the shape) and <a href="#intro-TermStroke">stroked</a> (i.e., apply paint
    along the outline of the shape). A stroke operation is centered
    on the outline of the object; thus, in effect, half of the
    paint falls on the interior of the shape and half of the paint
    falls outside of the shape.</p>
    <p>For certain types of shapes, <a href="#painting-Markers">marker symbols</a> (which
    themselves can consist of any combination of shapes, text and
    images) can be drawn at selected vertices. Each marker symbol
    is painted as if its graphical content were expanded into the
    SVG document tree just after the shape object which is using
    the given marker symbol. The graphical contents of a marker
    symbol are rendered using the same methods as graphics
    elements. Marker symbols are not applicable to text.</p>
    <p>The fill is painted first, then the stroke, and then the
    marker symbols. The marker symbols are rendered in order along
    the outline of the shape, from the start of the shape to the
    end of the shape.</p>
    <p>Each fill and stroke operation has its own opacity settings;
    thus, you can fill and/or stroke a shape with a
    semi-transparently drawn solid color, with different opacity
    values for the fill and stroke operations.</p>
    <p>The fill and stroke operations are entirely independent
    painting operations; thus, if you both fill and stroke a shape,
    half of the stroke will be painted on top of part of the
    fill.</p>
    <p>SVG supports the following built-in types of paint which can
    be used in fill and stroke operations:</p>
    <ul><li><a href="#color-ColorIntroduction">Solid
      color</a></li><li><a href="#pservers-Gradients">Gradients</a> (linear
      and radial)</li><li><a href="#pservers-Patterns">Patterns</a></li></ul>
    <h3 id="render-PaintingRasterImages">3.6.2 Painting raster images</h3>
    <p>When a raster image is rendered, the original samples are
    "resampled" using standard algorithms to produce samples at the
    positions required on the output device. Resampling
    requirements are discussed under <a href="#chapter-conform">conformance requirements</a>.</p>
    <h2 id="render-FilteringPaintRegions">3.7 Filtering painted regions</h2>
    <p>SVG allows any painting operation to be filtered. (See <a href="#chapter-filters">Filter Effects</a>.)</p>
    <p>In this case the result must be as though the paint
    operations had been applied to an intermediate canvas
    initialized to transparent black, of a size determined by the
    rules given in <a href="#chapter-filters">Filter Effects</a> then
    filtered by the processes defined in <a href="#chapter-filters">Filter Effects</a>.</p>
    <h2 id="render-ClippingMaskingObjectOpacity">3.8 Clipping, masking and object opacity</h2>
    <p>SVG allows any painting operation to be limited to a
    subregion of the output device by clipping and masking. This is
    described in <a href="#chapter-masking">Clipping, Masking and
    Compositing</a>.</p>
    <p>Clipping uses a path to define a region of the output device
    to which paint can be applied. Any painting operation executed
    within the scope of the clipping must be rendered such that
    only those parts of the device that fall within the clipping
    region are affected by the painting operation. A clipping path
    can be thought of as a mask wherein those pixels outside the
    clipping path are black with an alpha value of zero and those
    pixels inside the clipping path are white with an alpha value
    of one. "Within" is defined by the same rules used to determine
    the interior of a path for painting. The clipping path is
    typically anti-aliased on low-resolution devices (see
    <a href="#painting-ShapeRenderingProperty"><span class="prop-name">‘shape-rendering’</span></a>. Clipping is
    described in <a href="#masking-ClippingPaths">Clipping
    paths</a>.</p>
    <p>Masking uses the luminance of the color channels and alpha
    channel in a referenced SVG element to define a supplemental
    set of alpha values which are multiplied to the alpha values
    already present in the graphics to which the mask is applied.
    Masking is described in <a href="#masking-Masking">Masking</a>.</p>
    <p>A supplemental masking operation may also be specified by
    applying a "global" opacity to a set of rendering operations.
    In this case the mask is infinite, with a color of white and an
    alpha channel of the given opacity value. (See the <a href="#masking-OpacityProperty"><span class="prop-name">‘opacity’</span></a>
    property.)</p>
    <p>In all cases the SVG implementation must behave as though
    all painting and filtering is first performed to an
    intermediate canvas which has been initialized to transparent
    black. Then, alpha values on the intermediate canvas are
    multiplied by the implicit alpha values from the clipping path,
    the alpha values from the mask, and the alpha values from the
    <a href="#masking-OpacityProperty"><span class="prop-name">‘opacity’</span></a> property. The resulting
    canvas is composited into the background using <a href="#masking-SimpleAlphaBlending">simple alpha
    blending</a>. Thus if an area of the output device is painted
    with a group opacity of 50% using opaque red paint followed by
    opaque green paint the result is as though it had been painted
    with just 50% opaque green paint. This is because the opaque
    green paint completely obscures the red paint on the
    intermediate canvas before the intermediate as a whole is
    rendered onto the output device.</p>
    <h2 id="render-ParentCompositing">3.9 Parent Compositing</h2>
    <p>SVG document fragments can be semi-opaque. In many
    environments (e.g., Web browsers), the SVG document fragment
    has a final compositing step where the document as a whole is
    blended translucently into the background canvas.</p>

</div><hr class="chapter-divider" />
<div id="chapter-struct">

<h1>5 Document Structure</h1><h2 id="struct-toc">Contents</h2><ul class="toc">
<li><a href="#struct-NewDocument">5.1 Defining an SVG document fragment: the <span class="element-name">‘svg’</span> element</a><ul class="toc">
<li><a href="#struct-NewDocumentOverview">5.1.1 Overview</a></li>
<li><a href="#struct-SVGElement">5.1.2 The <span class="element-name">‘svg’</span> element</a></li></ul></li>
<li><a href="#struct-Groups">5.2 Grouping: the <span class="element-name">‘g’</span> element</a><ul class="toc">
<li><a href="#struct-GroupsOverview">5.2.1 Overview</a></li>
<li><a href="#struct-GElement">5.2.2 The <span class="element-name">‘g’</span> element</a></li></ul></li>
<li><a href="#struct-Head">5.3 Defining content for reuse, and the <span class="element-name">‘defs’</span> element</a><ul class="toc">
<li><a href="#struct-Overview">5.3.1 Overview</a></li>
<li><a href="#struct-DefsElement">5.3.2 The <span class="element-name">‘defs’</span> element</a></li></ul></li>
<li><a href="#struct-DescriptionAndTitleElements">5.4 The <span class="element-name">‘desc’</span>
and <span class="element-name">‘title’</span> elements</a></li>
<li><a href="#struct-SymbolElement">5.5 The <span class="element-name">‘symbol’</span> element</a></li>
<li><a href="#struct-UseElement">5.6 The <span class="element-name">‘use’</span> element</a></li>
<li><a href="#struct-ImageElement">5.7 The <span class="element-name">‘image’</span> element</a></li>
<li><a href="#struct-ConditionalProcessing">5.8 Conditional processing</a><ul class="toc">
<li><a href="#struct-ConditionalProcessingOverview">5.8.1 Conditional processing overview</a></li>
<li><a href="#struct-SwitchElement">5.8.2 The <span class="element-name">‘switch’</span> element</a></li>
<li><a href="#struct-ConditionalProcessingRequiredFeaturesAttribute">5.8.3 The <span class="attr-name">‘requiredFeatures’</span>
    attribute</a></li>
<li><a href="#struct-ConditionalProcessingRequiredExtensionsAttribute">5.8.4 The <span class="attr-name">‘requiredExtensions’</span>
    attribute</a></li>
<li><a href="#struct-ConditionalProcessingSystemLanguageAttribute">5.8.5 The <span class="attr-name">‘systemLanguage’</span> attribute</a></li>
<li><a href="#struct-ApplicabilityOfTestAttributes">5.8.6 Applicability of test attributes</a></li></ul></li>
<li><a href="#struct-ExternalResourcesRequired">5.9 Specifying whether external resources are required for
    proper rendering</a></li>
<li><a href="#struct-CommonAttributes">5.10 Common attributes</a><ul class="toc">
<li><a href="#struct-Core.attrib">5.10.1 Attributes common to all elements: <span class="attr-name">‘id’</span> and <span class="attr-name">‘xml:base’</span></a></li>
<li><a href="#struct-LangSpaceAttrs">5.10.2 The <span class="attr-name">‘xml:lang’</span> and
    <span class="attr-name">‘xml:space’</span> attributes</a></li></ul></li>
<li><a href="#struct-DOMInterfaces">5.11 DOM interfaces</a><ul class="toc">
<li><a href="#struct-InterfaceSVGDocument">5.11.1 Interface SVGDocument</a></li>
<li><a href="#struct-InterfaceSVGSVGElement">5.11.2 Interface SVGSVGElement</a></li>
<li><a href="#struct-InterfaceSVGGElement">5.11.3 Interface SVGGElement</a></li>
<li><a href="#struct-InterfaceSVGDefsElement">5.11.4 Interface SVGDefsElement</a></li>
<li><a href="#struct-InterfaceSVGDescElement">5.11.5 Interface SVGDescElement</a></li>
<li><a href="#struct-InterfaceSVGTitleElement">5.11.6 Interface SVGTitleElement</a></li>
<li><a href="#struct-InterfaceSVGSymbolElement">5.11.7 Interface SVGSymbolElement</a></li>
<li><a href="#struct-InterfaceSVGUseElement">5.11.8 Interface SVGUseElement</a></li>
<li><a href="#struct-InterfaceSVGElementInstance">5.11.9 Interface SVGElementInstance</a></li>
<li><a href="#struct-InterfaceSVGElementInstanceList">5.11.10 Interface SVGElementInstanceList</a></li>
<li><a href="#struct-InterfaceSVGImageElement">5.11.11 Interface SVGImageElement</a></li>
<li><a href="#struct-InterfaceSVGSwitchElement">5.11.12 Interface SVGSwitchElement</a></li>
<li><a href="#struct-InterfaceGetSVGDocument">5.11.13 Interface GetSVGDocument</a></li></ul></li></ul>

<h2 id="struct-NewDocument">5.1 Defining an SVG document fragment: the <span class="element-name">‘svg’</span> element</h2>



<h3 id="struct-NewDocumentOverview">5.1.1 Overview</h3>

<p>An <a href="#intro-TermSVGDocumentFragment"><span class="svg-term">SVG document fragment</span></a> consists of any number of SVG elements
contained within an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.</p>

<p>An SVG document fragment can range from an empty fragment (i.e.,
no content inside of the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element), to a very simple SVG
document fragment containing a single SVG <a href="#intro-TermGraphicsElement"><span class="svg-term">graphics element</span></a>
such as a <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, to a complex, deeply nested collection of
<a href="#intro-TermContainerElement"><span class="svg-term">container elements</span></a> and <a href="#intro-TermGraphicsElement"><span class="svg-term">graphics elements</span></a>.</p>

<p>An SVG document fragment can stand by itself as a self-contained
file or resource, in which case the SVG document fragment is an <a href="#intro-TermSVGDocumentFragment"><span class="svg-term">SVG document</span></a>, or it can be embedded inline as a fragment within a parent
XML document.</p>

<p id="struct-EmbeddedSVGExample">The following example shows simple SVG
content embedded inline as a fragment within a parent XML document.
Note the use of XML namespaces to indicate that the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> and
<a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a> elements belong to the SVG namespace:</p>

<pre class="xml">
&lt;?xml version="1.0" standalone="yes"?&gt;
&lt;parent xmlns="http://example.org"
        xmlns:svg="http://www.w3.org/2000/svg"&gt;
   &lt;!-- parent contents here --&gt;
   &lt;svg:svg width="4cm" height="8cm" version="1.1"&gt;
      &lt;svg:ellipse cx="2cm" cy="4cm" rx="2cm" ry="1cm" /&gt;
   &lt;/svg:svg&gt;
   &lt;!-- ... --&gt;
&lt;/parent&gt;
</pre>

<p>This example shows a slightly more complex (i.e., it contains
multiple rectangles) stand-alone, self-contained SVG document:</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="5cm" height="4cm" version="1.1"
     xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;desc&gt;Four separate rectangles
  &lt;/desc&gt;
    &lt;rect x="0.5cm" y="0.5cm" width="2cm" height="1cm"/&gt;
    &lt;rect x="0.5cm" y="2cm" width="1cm" height="1.5cm"/&gt;
    &lt;rect x="3cm" y="0.5cm" width="1.5cm" height="2cm"/&gt;
    &lt;rect x="3.5cm" y="3cm" width="1cm" height="0.5cm"/&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x=".01cm" y=".01cm" width="4.98cm" height="3.98cm"
        fill="none" stroke="blue" stroke-width=".02cm" /&gt;

&lt;/svg&gt;</pre>

<p><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> elements can appear in the middle of SVG content. This
is the mechanism by which SVG document fragments can be embedded within
other SVG document fragments.</p>

<p>Another use for <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> elements within the middle
of SVG content is to establish a new viewport. (See
<a href="#coords-EstablishingANewViewport">Establishing a new
viewport</a>.)</p>

<p>In all cases, for compliance with the
<a href="http://www.w3.org/TR/2006/REC-xml-names-20060816/"><cite>Namespaces in XML</cite></a> Recommendation
[<a href="#refs-ref-XML-NS">XML-NS</a>], an SVG namespace
declaration must be provided so that all SVG elements are identified
as belonging to the SVG namespace. The following are possible ways to
provide a namespace declaration. An <span class="attr-name">‘xmlns’</span>
attribute without a namespace prefix could be specified on an
<a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element, which means that SVG is the default namespace
for all elements within the scope of the element with the <span class="attr-name">‘xmlns’</span> attribute:</p>

<pre class="xml">
&lt;svg xmlns="http://www.w3.org/2000/svg" …&gt;
  &lt;rect …/&gt;
&lt;/svg&gt;
</pre>

<p>If a namespace prefix is specified on the <span class="attr-name">‘xmlns’</span>
attribute (e.g., <code class="xml">xmlns:svg="http://www.w3.org/2000/svg"</code>),
then the corresponding namespace is not the default namespace, so an
explicit namespace prefix must be assigned to the elements:</p>

<pre class="xml">
&lt;svg:svg xmlns:svg="http://www.w3.org/2000/svg" …&gt;
  &lt;svg:rect …/&gt;
&lt;/svg:svg&gt;
</pre>

<p>Namespace prefixes can be specified on ancestor elements (illustrated
in the <a href="#struct-EmbeddedSVGExample">above example</a>). For more
information, refer to the <a href="http://www.w3.org/TR/2006/REC-xml-names-20060816/"><cite>Namespaces in XML</cite></a> Recommendation
[<a href="#refs-ref-XML-NS">XML-NS</a>].</p>

<h3 id="struct-SVGElement">5.1.2 The <span class="element-name">‘svg’</span> element</h3>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘svg’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermContainerElement">Container element</a>, <a href="#intro-TermStructuralElement">structural element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#intro-TermShapeElement">shape elements</a><span class="expanding"> — <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></span></li><li><a href="#intro-TermStructuralElement">structural elements</a><span class="expanding"> — <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></span></li><li><a href="#intro-TermGradientElement">gradient elements</a><span class="expanding"> — <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></span></li><li><a href="#linking-AElement"><span class="element-name">‘a’</span></a></li><li><a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a></li><li><a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a></li><li><a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a></li><li><a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a></li><li><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></li><li><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></li><li><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></li><li><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></li><li><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></li><li><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></li><li><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></li><li><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></li><li><a href="#script-ScriptElement"><span class="element-name">‘script’</span></a></li><li><a href="#styling-StyleElement"><span class="element-name">‘style’</span></a></li><li><a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a></li><li><a href="#text-TextElement"><span class="element-name">‘text’</span></a></li><li><a href="#linking-ViewElement"><span class="element-name">‘view’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermDocumentEventAttribute">document event attributes</a><span class="expanding"> — <a href="#script-OnUnloadEventAttribute"><span class="attr-name">‘onunload’</span></a>, <a href="#script-OnAbortEventAttribute"><span class="attr-name">‘onabort’</span></a>, <a href="#script-OnErrorEventAttribute"><span class="attr-name">‘onerror’</span></a>, <a href="#script-OnResizeEventAttribute"><span class="attr-name">‘onresize’</span></a>, <a href="#script-OnScrollEventAttribute"><span class="attr-name">‘onscroll’</span></a>, <a href="#script-OnZoomEventAttribute"><span class="attr-name">‘onzoom’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#struct-SVGElementXAttribute"><span class="attr-name">‘x’</span></a></li><li><a href="#struct-SVGElementYAttribute"><span class="attr-name">‘y’</span></a></li><li><a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a></li><li><a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a></li><li><a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a></li><li><a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a></li><li><a href="#interact-ZoomAndPanAttribute"><span class="attr-name">‘zoomAndPan’</span></a></li><li><a href="#struct-SVGElementVersionAttribute"><span class="attr-name">‘version’</span></a></li><li><a href="#struct-SVGElementBaseProfileAttribute"><span class="attr-name">‘baseProfile’</span></a></li><li><a href="#script-ContentScriptTypeAttribute"><span class="attr-name">‘contentScriptType’</span></a></li><li><a href="#styling-ContentStyleTypeAttribute"><span class="attr-name">‘contentStyleType’</span></a></li><li><a href="#struct-SVGElementXAttribute"><span class="attr-name">‘x’</span></a></li><li><a href="#struct-SVGElementYAttribute"><span class="attr-name">‘y’</span></a></li><li><a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a></li><li><a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a></li><li><a href="#struct-SVGElementVersionAttribute"><span class="attr-name">‘version’</span></a></li><li><a href="#struct-SVGElementBaseProfileAttribute"><span class="attr-name">‘baseProfile’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#struct-InterfaceSVGSVGElement">SVGSVGElement</a></li></ul></dd></dl></div>

  

<div class="adef-list">
  <p><em>Attribute definitions:</em></p>
  <dl><dt id="struct-SVGElementVersionAttribute"><span class="adef">version</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>Indicates the SVG language version to which this
    document fragment conforms.<br />
    In <a href="http://www.w3.org/TR/2001/REC-SVG-20010904/">SVG 1.0</a> [<a href="#refs-ref-SVG10">SVG10</a>],
    this attribute was fixed to the value <span class="attr-value">'1.0'</span>.
    For SVG 1.1, the attribute should have the value
    <span class="attr-value">'1.1'</span>.<br />
     <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
    no.</span></dd><dt id="struct-SVGElementBaseProfileAttribute"><span class="adef">baseProfile</span> = profile-name</dt><dd>Describes the minimum SVG language profile that the
    author believes is necessary to correctly render the
    content. The attribute does not specify any processing
    restrictions; It can be considered metadata. For example,
    the value of the attribute could be used by an authoring
    tool to warn the user when they are modifying the document
    beyond the scope of the specified base profile. Each SVG
    profile should define the text that is appropriate for this
    attribute.<br />
     If the attribute is not specified, the effect is as if a
    value of <span class="attr-value">'none'</span> were specified.<br />
     <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
    no.</span></dd><dt id="struct-SVGElementXAttribute"><span class="adef">x</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>(Has no meaning or effect on <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg elements</span></a>.)<br />
     The x-axis coordinate of one corner of the rectangular
    region into which an embedded <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element is placed.<br />
     If the attribute is not specified, the effect is as if a
    value of <span class="attr-value">'0'</span> were specified.<br />
     <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
    yes.</span></dd><dt id="struct-SVGElementYAttribute"><span class="adef">y</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>(Has no meaning or effect on <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg elements</span></a>.)<br />
     The y-axis coordinate of one corner of the rectangular
    region into which an embedded <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element is placed.<br />
     If the attribute is not specified, the effect is as if a
    value of <span class="attr-value">'0'</span> were specified.<br />
     <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
    yes.</span></dd><dt id="struct-SVGElementWidthAttribute"><span class="adef">width</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>For <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg elements</span></a>,
    the intrinsic width of the SVG document fragment.
    For embedded <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>
    elements, the width of the rectangular region into which
    the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element is
    placed.<br />
     A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
    A value of zero disables rendering of the element.<br />
     If the attribute is not specified, the effect is as if a
    value of <span class="attr-value">'100%'</span> were specified.<br />
     <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
    yes.</span></dd><dt id="struct-SVGElementHeightAttribute"><span class="adef">height</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>For <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg elements</span></a>,
    the intrinsic height of the SVG document
    fragment. For embedded <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> elements, the height of
    the rectangular region into which the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element is placed.<br />
     A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
    A value of zero disables rendering of the element.<br />
     If the attribute is not specified, the effect is as if a
    value of <span class="attr-value">'100%'</span> were specified.<br />
     <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
    yes.</span></dd><dt id="struct-SVGElementPreserveAspectRatioAttribute">
      <span class="adef">preserveAspectRatio</span> = "<span class="attr-value"><a href="#coords-PreserveAspectRatioAttribute">[defer] &lt;align&gt; [&lt;meetOrSlice&gt;]</a></span>"
    </dt><dd>
      <p>
        See <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.
      </p>
      <p>
        If the attribute is not specified, then the effect is as if a value of <span class="attr-value">'xMidYMid meet'</span> were specified.
      </p>
      <p><span class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes.</span></p>
    </dd><dt id="struct-SVGElementContentScriptTypeAttribute">
      <span class="adef">contentScriptType</span> = "<span class="attr-value"><a href="#script-ContentScriptTypeAttribute"><em>content-type</em></a></span>"
    </dt><dd>
      <p>
        See <span class="attr"><a href="#script-ContentScriptTypeAttribute">'contentScriptType'</a></span>.
      </p>
    </dd><dt id="struct-SVGElementContentStyleTypeAttribute">
      <span class="adef">contentStyleType</span> = "<span class="attr-value"><a href="#styling-ContentStyleTypeAttribute"><em>content-type</em></a></span>"
    </dt><dd>
      <p>
        See <span class="attr"><a href="#styling-ContentStyleTypeAttribute">'contentStyleType'</a></span>.
      </p>
    </dd><dt id="struct-SVGElementZoomAndPanAttribute">
      <span class="adef">zoomAndPan</span> = "<span class="attr-value"><a href="#interact-ZoomAndPanAttribute">disable | magnify</a></span>"
    </dt><dd>
      <p>
        See <span class="attr"><a href="#interact-ZoomAndPanAttribute">'zoomAndPan'</a></span>.
      </p>
    </dd></dl>
</div>

<p>If an SVG document is likely to be referenced as a component
of another document, the author will often want to include a
<a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute on the <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a> of the
referenced document. This attribute provides a convenient way to design
SVG documents to scale-to-fit into an arbitrary viewport.</p>



<h2 id="struct-Groups">5.2 Grouping: the <span class="element-name">‘g’</span> element</h2>

<h3 id="struct-GroupsOverview">5.2.1 Overview</h3>

<p>The <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element is a <a href="#intro-TermGraphicsElement"><span class="svg-term">container element</span></a> for grouping together
related <a href="#intro-TermGraphicsElement"><span class="svg-term">graphics elements</span></a>.</p>

<p>Grouping constructs, when used in conjunction with the <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>
and <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> elements, provide information about document
structure and semantics. Documents that are rich in structure may be
rendered graphically, as speech, or as braille, and thus promote
<a href="#chapter-access">accessibility</a>.</p>

<p>A group of elements, as well as individual objects, can be given
a name using the <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a> attribute. Named groups are needed for
several purposes such as animation and re-usable objects.</p>

<p>An example:</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg"
     version="1.1" width="5cm" height="5cm"&gt;
  &lt;desc&gt;Two groups, each of two rectangles&lt;/desc&gt;
  &lt;g id="group1" fill="red"&gt;
    &lt;rect x="1cm" y="1cm" width="1cm" height="1cm"/&gt;
    &lt;rect x="3cm" y="1cm" width="1cm" height="1cm"/&gt;
  &lt;/g&gt;
  &lt;g id="group2" fill="blue"&gt;
    &lt;rect x="1cm" y="3cm" width="1cm" height="1cm"/&gt;
    &lt;rect x="3cm" y="3cm" width="1cm" height="1cm"/&gt;
  &lt;/g&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x=".01cm" y=".01cm" width="4.98cm" height="4.98cm"
        fill="none" stroke="blue" stroke-width=".02cm"/&gt;
&lt;/svg&gt;</pre><p class="view-as-svg"><a href="images/struct/grouping01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<p>A <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element can contain other <a href="#struct-GElement"><span class="element-name">‘g’</span></a> elements nested
within it, to an arbitrary depth. Thus, the following is possible:</p>

<pre class="xml">
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg"
     version="1.1" width="4in" height="3in"&gt;
  &lt;desc&gt;Groups can nest&lt;/desc&gt;
  &lt;g&gt;
     &lt;g&gt;
       &lt;g&gt;
       &lt;/g&gt;
     &lt;/g&gt;
   &lt;/g&gt;
&lt;/svg&gt;
</pre>

<p>Any element that is not contained within a <a href="#struct-GElement"><span class="element-name">‘g’</span></a> is treated (at
least conceptually) as if it were in its own group.</p>

<h3 id="struct-GElement">5.2.2 The <span class="element-name">‘g’</span> element</h3>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘g’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermContainerElement">Container element</a>, <a href="#intro-TermStructuralElement">structural element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#intro-TermShapeElement">shape elements</a><span class="expanding"> — <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></span></li><li><a href="#intro-TermStructuralElement">structural elements</a><span class="expanding"> — <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></span></li><li><a href="#intro-TermGradientElement">gradient elements</a><span class="expanding"> — <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></span></li><li><a href="#linking-AElement"><span class="element-name">‘a’</span></a></li><li><a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a></li><li><a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a></li><li><a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a></li><li><a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a></li><li><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></li><li><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></li><li><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></li><li><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></li><li><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></li><li><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></li><li><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></li><li><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></li><li><a href="#script-ScriptElement"><span class="element-name">‘script’</span></a></li><li><a href="#styling-StyleElement"><span class="element-name">‘style’</span></a></li><li><a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a></li><li><a href="#text-TextElement"><span class="element-name">‘text’</span></a></li><li><a href="#linking-ViewElement"><span class="element-name">‘view’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#struct-InterfaceSVGGElement">SVGGElement</a></li></ul></dd></dl></div>

<h2 id="struct-Head">5.3 Defining content for reuse, and the <span class="element-name">‘defs’</span> element</h2>

<h3 id="struct-Overview">5.3.1 Overview</h3>

<p>SVG allows graphical objects to be defined for later reuse.
To do this, it makes extensive use of <a href="#intro-TermIRIReference"><span class="svg-term">IRI references</span></a>
[<a href="#refs-ref-RFC3987">RFC3987</a>] to these other objects.
For example, to fill a rectangle with a linear gradient, you first
define a <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> element and give it an ID, as in:</p>

<pre class="xml">
&lt;linearGradient id="MyGradient"&gt;...&lt;/linearGradient&gt;
</pre>

<p>You then reference the linear gradient as the value of the
<a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> property for the rectangle, as in:</p>

<pre class="xml">
&lt;rect style="fill:url(#MyGradient)"/&gt;
</pre>

<p>Some types of element, such as gradients, will not by themselves produce a graphical result. They can therefore be placed anywhere convenient. However, sometimes it is desired to define a graphical object and prevent it from being directly rendered. it is only there to be referenced elsewhere. To do this, and to allow convenient grouping defined content, SVG provides the <span class="element-name">‘defs’</span> element.</p>

<p>It is recommended that, wherever possible, referenced elements be defined
inside of a <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a> element. Among the elements that are always
referenced: <a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a>, <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>, <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>,
<a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>,
<a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> and
<a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>. Defining these elements inside of a <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a> element
promotes understandability of the SVG content and thus promotes
accessibility.</p>

<h3 id="struct-DefsElement">5.3.2 The <span class="element-name">‘defs’</span> element</h3>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘defs’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermContainerElement">Container element</a>, <a href="#intro-TermStructuralElement">structural element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#intro-TermShapeElement">shape elements</a><span class="expanding"> — <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></span></li><li><a href="#intro-TermStructuralElement">structural elements</a><span class="expanding"> — <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></span></li><li><a href="#intro-TermGradientElement">gradient elements</a><span class="expanding"> — <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></span></li><li><a href="#linking-AElement"><span class="element-name">‘a’</span></a></li><li><a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a></li><li><a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a></li><li><a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a></li><li><a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a></li><li><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></li><li><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></li><li><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></li><li><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></li><li><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></li><li><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></li><li><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></li><li><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></li><li><a href="#script-ScriptElement"><span class="element-name">‘script’</span></a></li><li><a href="#styling-StyleElement"><span class="element-name">‘style’</span></a></li><li><a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a></li><li><a href="#text-TextElement"><span class="element-name">‘text’</span></a></li><li><a href="#linking-ViewElement"><span class="element-name">‘view’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#struct-InterfaceSVGDefsElement">SVGDefsElement</a></li></ul></dd></dl></div>

<p>The <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a> element is a container element for
<a href="#struct-Head">referenced elements</a>. For understandability and
<a href="#chapter-access">accessibility</a> reasons, it is recommended
that, whenever possible, referenced elements be defined inside
of a <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>.</p>

<p>The content model for <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a> is the same as for the
<a href="#struct-GElement"><span class="element-name">‘g’</span></a> element; thus, any element that can be a child of a
<a href="#struct-GElement"><span class="element-name">‘g’</span></a> can also be a child of a <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, and vice versa.</p>

<p>Elements that are descendants of a <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a> are not rendered directly;
they are prevented from becoming part of the rendering tree
just as if the <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a> element were a <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element and the
<a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property were set to <span class="prop-value">none</span>.
Note, however, that the descendants of a <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a> are
always present in the source tree and thus can always be
referenced by other elements; thus, the value of the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a>
property on the <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a> element or any of its descendants does not
prevent those elements from being referenced by other elements.</p>

<p>To provide some SVG user agents with an opportunity to
implement efficient implementations in streaming environments,
creators of SVG content are encouraged to place all elements
which are targets of local IRI references within a <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>
element which is a direct child of one of the ancestors of the
referencing element. For example:</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="8cm" height="3cm"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Local URI references within ancestor's 'defs' element.&lt;/desc&gt;
  &lt;defs&gt;
    &lt;linearGradient id="Gradient01"&gt;
      &lt;stop offset="20%" stop-color="#39F" /&gt;
      &lt;stop offset="90%" stop-color="#F3F" /&gt;
    &lt;/linearGradient&gt;
  &lt;/defs&gt;
  &lt;rect x="1cm" y="1cm" width="6cm" height="1cm" 
        fill="url(#Gradient01)"  /&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x=".01cm" y=".01cm" width="7.98cm" height="2.98cm"
        fill="none" stroke="blue" stroke-width=".02cm" /&gt;

&lt;/svg&gt;</pre><p class="view-as-svg"><a href="images/struct/defs01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<p>In the document above, the linear gradient is defined within
a <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a> element which is the direct child of the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>
element, which in turn is an ancestor of the <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element which
references the linear gradient. Thus, the above document conforms to the
guideline.</p>

<h2 id="struct-DescriptionAndTitleElements">5.4 The <span class="element-name">‘desc’</span>
and <span class="element-name">‘title’</span> elements</h2>

<div id="struct-DescElement">
<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘desc’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermDescriptiveElement">Descriptive element</a></dd><dt>Content model:</dt><dd>
                Any elements or character data.
              </dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#struct-InterfaceSVGDescElement">SVGDescElement</a></li></ul></dd></dl></div>
</div>

<div id="struct-TitleElement">
<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘title’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermDescriptiveElement">Descriptive element</a></dd><dt>Content model:</dt><dd>
                Any elements or character data.
              </dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#struct-InterfaceSVGTitleElement">SVGTitleElement</a></li></ul></dd></dl></div>
</div>

<p>Each <a href="#intro-TermGraphicsElement"><span class="svg-term">container element</span></a> or <a href="#intro-TermGraphicsElement"><span class="svg-term">graphics element</span></a> in an SVG drawing
can supply a <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a> and/or a <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> description string where
the description is text-only. When the current SVG document fragment is
rendered as SVG on visual media, <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a> and <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> elements are
not rendered as part of the graphics. User agents may, however, for example,
display the <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> element as a tooltip, as the pointing device moves
over particular elements. Alternate presentations are possible, both visual and
aural, which display the <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a> and <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> elements but do not
display <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> elements or other <a href="#intro-TermGraphicsElement"><span class="svg-term">graphics elements</span></a>.  This is
readily achieved by using a different (perhaps user) style sheet. For deep
hierarchies, and for following <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element references, it is
sometimes desirable to allow the user to control how deep they drill down into
descriptive text.</p>

<p>In conforming SVG document fragments, any <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> element should be
the first child element of its parent.  Note that those implementations that do
use <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> to display a tooltip often will only do so if the
<a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> is indeed the first child element of its parent.</p>

<p>The following is an example. In typical operation, the SVG user agent would
not render the <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a> and <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> elements but would render the
remaining contents of the <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element.</p>

<pre>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg"
     version="1.1" width="4in" height="3in"&gt;
  &lt;g&gt;
    &lt;title&gt;Company sales by region&lt;/title&gt;
    &lt;desc&gt;
      This is a bar chart which shows 
      company sales by region.
    &lt;/desc&gt;
    &lt;!-- Bar chart defined as vector data --&gt;
  &lt;/g&gt;
&lt;/svg&gt;
</pre>

<p>Description and title elements can contain marked-up text
from other namespaces. Here is an example:</p>

<pre>
&lt;?xml version="1.0" standalone="yes"?&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg"
     version="1.1" width="4in" height="3in"&gt;
  &lt;desc xmlns:mydoc="http://example.org/mydoc"&gt;
    &lt;mydoc:title&gt;This is an example SVG file&lt;/mydoc:title&gt;
    &lt;mydoc:para&gt;The global description uses markup from the 
      &lt;mydoc:emph&gt;mydoc&lt;/mydoc:emph&gt; namespace.&lt;/mydoc:para&gt;
  &lt;/desc&gt;
  &lt;g&gt;
    &lt;!-- the picture goes here --&gt;
  &lt;/g&gt;
&lt;/svg&gt;
</pre>

<p>Authors should always provide a <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> child element to the
<a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a> within a stand-alone SVG document. The
<a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> child element to an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element serves the
purposes of identifying the content of the given SVG document
fragment. Since users often consult documents out of context,
authors should provide context-rich titles. Thus, instead of a
title such as "Introduction", which doesn't provide much
contextual background, authors should supply a title such as
"Introduction to Medieval Bee-Keeping" instead. For reasons of
accessibility, user agents should always make the content of
the <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> child element to the <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>
available to users. The mechanism for doing so depends on the user agent
(e.g., as a caption, spoken).</p>

<p>The DTD definitions of many of SVG's elements (particularly,
container and text elements) place no restriction on the
placement or number of the <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a> and <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> sub-elements.
This flexibility is only present so that there will be a consistent
content model for container elements, because some container
elements in SVG allow for mixed content, and because
<a href="http://www.w3.org/TR/2008/REC-xml-20081126/#sec-mixed-content">the mixed content rules for XML</a>
([<a href="#refs-ref-XML10">XML10</a>], section 3.2.2)
do not permit the desired restrictions. Representations of
future versions of the SVG language might use more expressive
representations than DTDs which allow for more restrictive
mixed content rules. It is strongly recommended that at most
one <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a> and at most one <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> element appear as a
child of any particular element, and that these elements appear
before any other child elements (except possibly
<a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a> elements) or character data content. If user agents need to
choose among multiple <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a> or <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> elements for processing
(e.g., to decide which string to use for a tooltip), the user
agent shall choose the first one.</p>

<h2 id="struct-SymbolElement">5.5 The <span class="element-name">‘symbol’</span> element</h2>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘symbol’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermContainerElement">Container element</a>, <a href="#intro-TermStructuralElement">structural element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#intro-TermShapeElement">shape elements</a><span class="expanding"> — <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></span></li><li><a href="#intro-TermStructuralElement">structural elements</a><span class="expanding"> — <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></span></li><li><a href="#intro-TermGradientElement">gradient elements</a><span class="expanding"> — <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></span></li><li><a href="#linking-AElement"><span class="element-name">‘a’</span></a></li><li><a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a></li><li><a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a></li><li><a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a></li><li><a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a></li><li><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></li><li><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></li><li><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></li><li><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></li><li><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></li><li><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></li><li><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></li><li><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></li><li><a href="#script-ScriptElement"><span class="element-name">‘script’</span></a></li><li><a href="#styling-StyleElement"><span class="element-name">‘style’</span></a></li><li><a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a></li><li><a href="#text-TextElement"><span class="element-name">‘text’</span></a></li><li><a href="#linking-ViewElement"><span class="element-name">‘view’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a></li><li><a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#struct-InterfaceSVGSymbolElement">SVGSymbolElement</a></li></ul></dd></dl></div>

<p>The <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> element is used to define graphical template objects
which can be instantiated by a <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element.</p>

<p>The use of <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> elements for graphics that are used multiple
times in the same document adds structure and semantics. Documents that are rich
in structure may be rendered graphically, as speech, or as
braille, and thus promote <a href="#chapter-access">accessibility</a>.</p>

<p>The key distinctions between a <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> and a <a href="#struct-GElement"><span class="element-name">‘g’</span></a> are:</p>

<ul><li>A <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> element itself is not rendered. Only instances of a
  <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> element (i.e., a reference to a <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> by
  a <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element) are rendered.</li><li>A <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> element has attributes <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> and
  <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> which allow a <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> to scale-to-fit
  within a rectangular viewport defined by the referencing
  <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element.</li></ul>

<p>Closely related to the <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> element are the
<a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> and <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> elements.</p>

<p><a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> elements are never rendered directly; their only usage is
as something that can be referenced using the
<a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element. The <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property does not apply
to the <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> element; thus, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> elements are
not directly rendered even if the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property is set to a
value other than <span class="prop-value">none</span>, and <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>
elements are available for referencing even when the
<a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property on the <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> element or any of its
ancestors is set to <span class="prop-value">none</span>.</p>

<h2 id="struct-UseElement">5.6 The <span class="element-name">‘use’</span> element</h2>



<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘use’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermGraphicsElement">Graphics element</a>, <a href="#intro-TermGraphicsReferencingElement">graphics referencing element</a>, <a href="#intro-TermStructuralElement">structural element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#struct-UseElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></li><li><a href="#struct-UseElementXAttribute"><span class="attr-name">‘x’</span></a></li><li><a href="#struct-UseElementYAttribute"><span class="attr-name">‘y’</span></a></li><li><a href="#struct-UseElementWidthAttribute"><span class="attr-name">‘width’</span></a></li><li><a href="#struct-UseElementHeightAttribute"><span class="attr-name">‘height’</span></a></li><li><a href="#struct-UseElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#struct-InterfaceSVGUseElement">SVGUseElement</a></li></ul></dd></dl></div>

    <p>Any <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#intro-TermGraphicsElement">graphics element</a> or
    other <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> is potentially a
    template object that can be re-used (i.e., "instanced") in the
    SVG document via a <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>
    element. The <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element
    references another element and indicates that the graphical
    contents of that element is included/drawn at that given point
    in the document.</p>
    <p>Unlike <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element cannot reference
    entire files.</p>
    <p>The <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element has
    optional attributes <a href="#struct-UseElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#struct-UseElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#struct-UseElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#struct-UseElementHeightAttribute"><span class="attr-name">‘height’</span></a> which are used to map the
    graphical contents of the referenced element onto a rectangular
    region within the current coordinate system.</p>
    <p>The effect of a <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>
    element is as if the contents of the referenced element were
    deeply cloned into a separate non-exposed DOM tree which had
    the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element as its
    parent and all of the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>
    element's ancestors as its higher-level ancestors. Because the
    cloned DOM tree is non-exposed, the SVG Document Object Model
    (DOM) only contains the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>
    element and its attributes. The SVG DOM does not show the
    referenced element's contents as children of <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element.</p>
    <p>For user agents that support <a href="#styling-StylingWithCSS">Styling with CSS</a>, the
    conceptual deep cloning of the referenced element into a
    non-exposed DOM tree also copies any property values resulting
    from <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html">the CSS cascade</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], chapter 6)
    on the referenced element and its contents. CSS2 selectors can
    be applied to the original (i.e., referenced) elements because
    they are part of the formal document structure. CSS2 selectors
    cannot be applied to the (conceptually) cloned DOM tree because
    its contents are not part of the formal document structure.</p>
    <p>Property inheritance, however, works as if the referenced
    element had been textually included as a deeply cloned child of
    the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element. The
    referenced element inherits properties from the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element and the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element's ancestors. An
    instance of a referenced element does not inherit properties
    from the referenced element's original parents.</p>
    <p>If event attributes are assigned to referenced elements,
    then the actual target for the event will be the
    <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> object
    within the "instance tree" corresponding to the given
    referenced element.</p>
    <p>The event handling for the non-exposed tree works as if the
    referenced element had been textually included as a deeply
    cloned child of the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>
    element, except that events are dispatched to the <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> objects. The
    event's target and currentTarget attributes are set to the
    <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> that
    corresponds to the target and current target elements in the
    referenced subtree. An event propagates through the exposed and
    non-exposed portions of the tree in the same manner as it would
    in the regular document tree: first going from the root element
    to the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element and then
    through non-exposed tree elements in the capture phase,
    followed by the target phase at the target of the event, then
    bubbling back through non-exposed tree to the use element and
    then back through regular tree to the root element in bubbling
    phase.</p>
    <p>An element and all its corresponding <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> objects
    share an event listener list. The currentTarget attribute of
    the event can be used to determine through which object an
    event listener was invoked.</p>
    <p>The behavior of the <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> property conforms to
    this model of property inheritance. Thus, specifying <span class="prop-value">'visibility:hidden'</span> on a <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element does not guarantee
    that the referenced content will not be rendered. If the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element specifies <span class="prop-value">'visibility:hidden'</span> and the element
    it references specifies <span class="prop-value">'visibility:hidden'</span> or <span class="prop-value">'visibility:inherit'</span>, then that one
    element will be hidden. However, if the referenced element
    instead specifies <span class="prop-value">'visibility:visible'</span>, then that
    element will be visible even if the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element specifies <span class="prop-value">'visibility:hidden'</span>.</p>
    <p>Animations on a referenced element will cause the instances
    to also be animated.</p>
    <p>A <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element has the
    same visual effect as if the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element were replaced by the
    following generated content:</p>
    <ul><li><strong>If the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>
      element references a <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>
      element</strong>:<br />
      <br />
       In the generated content, the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> will be replaced by <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, where all attributes
      from the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element
      except for <a href="#struct-UseElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#struct-UseElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#struct-UseElementWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#struct-UseElementHeightAttribute"><span class="attr-name">‘height’</span></a> and <a href="#struct-UseElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> are transferred to
      the generated <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element. An additional
      transformation <span class="attr-value">translate(x,y)</span>
      is appended to the end (i.e., right-side) of the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute on the
      generated <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, where <span class="attr-value">x</span> and <span class="attr-value">y</span> represent the values of the <a href="#struct-UseElementXAttribute"><span class="attr-name">‘x’</span></a> and <a href="#struct-UseElementYAttribute"><span class="attr-name">‘y’</span></a> attributes on the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element. The referenced <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> and its contents are
      deep-cloned into the generated tree, with the exception that
      the <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> is replaced by an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>. This generated <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> will always have
      explicit values for attributes <a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a>. If attributes <a href="#struct-UseElementWidthAttribute"><span class="attr-name">‘width’</span></a> and/or <a href="#struct-UseElementHeightAttribute"><span class="attr-name">‘height’</span></a> are provided on the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element, then these
      attributes will be transferred to the generated <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>. If attributes <a href="#struct-UseElementWidthAttribute"><span class="attr-name">‘width’</span></a> and/or <a href="#struct-UseElementHeightAttribute"><span class="attr-name">‘height’</span></a> are not specified, the
      generated <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element will use values
      of <span class="attr-value">'100%'</span> for these attributes.<br />
      <br />
      </li><li><strong>If the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>
      element references an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element:</strong><br />
      <br />
       In the generated content, the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> will be replaced by <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, where all attributes
      from the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element
      except for <a href="#struct-UseElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#struct-UseElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#struct-UseElementWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#struct-UseElementHeightAttribute"><span class="attr-name">‘height’</span></a> and <a href="#struct-UseElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> are transferred to
      the generated <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element. An additional
      transformation <span class="attr-value">translate(x,y)</span>
      is appended to the end (i.e., right-side) of the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute on the
      generated <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, where <span class="attr-value">x</span> and <span class="attr-value">y</span> represent the values of the <a href="#struct-UseElementXAttribute"><span class="attr-name">‘x’</span></a> and <a href="#struct-UseElementYAttribute"><span class="attr-name">‘y’</span></a> attributes on the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element. The referenced <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> and its contents are
      deep-cloned into the generated tree. If attributes <a href="#struct-UseElementWidthAttribute"><span class="attr-name">‘width’</span></a> and/or <a href="#struct-UseElementHeightAttribute"><span class="attr-name">‘height’</span></a> are provided on the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element, then these values
      will override the corresponding attributes on the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> in the generated
      tree.<br />
      <br />
      </li><li><strong>Otherwise:</strong><br />
      <br />
       In the generated content, the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> will be replaced by <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, where all attributes
      from the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element
      except for <a href="#struct-UseElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#struct-UseElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#struct-UseElementWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#struct-UseElementHeightAttribute"><span class="attr-name">‘height’</span></a> and <a href="#struct-UseElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> are transferred to
      the generated <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element. An additional
      transformation <span class="attr-value">translate(x,y)</span>
      is appended to the end (i.e., right-side) of the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute on the
      generated <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, where <span class="attr-value">x</span> and <span class="attr-value">y</span> represent the values of the <a href="#struct-UseElementXAttribute"><span class="attr-name">‘x’</span></a> and <a href="#struct-UseElementYAttribute"><span class="attr-name">‘y’</span></a> attributes on the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element. The referenced
      object and its contents are deep-cloned into the generated
      tree.</li></ul>
    <p>For user agents that support <a href="#styling-StylingWithCSS">Styling with CSS</a>, the
    generated <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element carries along with
    it the "cascaded" property values on the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element which result from
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html">the CSS cascade</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], chapter 6).
    Additionally, the copy (deep clone) of the referenced resource
    carries along with it the "cascaded" property values resulting
    from the CSS cascade on the original (i.e., referenced)
    elements. Thus, the result of various CSS selectors in
    combination with the <a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a> and <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attributes are, in effect,
    replaced by the functional equivalent of a <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attribute in the generated
    content which conveys the "cascaded" property values.</p>

<p><span class="example-ref">Example Use01</span> below has a
simple <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> on a <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="10cm" height="3cm" viewBox="0 0 100 30" version="1.1"
     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;desc&gt;Example Use01 - Simple case of 'use' on a 'rect'&lt;/desc&gt;
  &lt;defs&gt;
    &lt;rect id="MyRect" width="60" height="10"/&gt;
  &lt;/defs&gt;
  &lt;rect x=".1" y=".1" width="99.8" height="29.8"
        fill="none" stroke="blue" stroke-width=".2" /&gt;
  &lt;use x="20" y="10" xlink:href="#MyRect" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example Use01</caption><tr><td><img alt="Example Use01 — Simple case of 'use' on a 'rect'" src="images/struct/Use01.png" /></td></tr></table><p class="view-as-svg"><a href="images/struct/Use01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<p>The visual effect would be equivalent to the following document:</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="10cm" height="3cm" viewBox="0 0 100 30"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example Use01-GeneratedContent - Simple case of 'use' on a 'rect'&lt;/desc&gt;
  &lt;!-- 'defs' section left out --&gt;

  &lt;rect x=".1" y=".1" width="99.8" height="29.8"
        fill="none" stroke="blue" stroke-width=".2" /&gt;

  &lt;!-- Start of generated content. Replaces 'use' --&gt;
  &lt;g transform="translate(20,10)"&gt;
    &lt;rect width="60" height="10"/&gt;
  &lt;/g&gt;
  &lt;!-- End of generated content --&gt;

&lt;/svg&gt;</pre><p class="view-as-svg"><a href="images/struct/Use01-GeneratedContent.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<p><span class="example-ref">Example Use02</span> below has a
<a href="#struct-UseElement"><span class="element-name">‘use’</span></a> on a <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="10cm" height="3cm" viewBox="0 0 100 30" version="1.1"
     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;desc&gt;Example Use02 - 'use' on a 'symbol'&lt;/desc&gt;
  &lt;defs&gt;
    &lt;symbol id="MySymbol" viewBox="0 0 20 20"&gt;
      &lt;desc&gt;MySymbol - four rectangles in a grid&lt;/desc&gt;
      &lt;rect x="1" y="1" width="8" height="8"/&gt;
      &lt;rect x="11" y="1" width="8" height="8"/&gt;
      &lt;rect x="1" y="11" width="8" height="8"/&gt;
      &lt;rect x="11" y="11" width="8" height="8"/&gt;
    &lt;/symbol&gt;
  &lt;/defs&gt;
  &lt;rect x=".1" y=".1" width="99.8" height="29.8"
        fill="none" stroke="blue" stroke-width=".2" /&gt;
  &lt;use x="45" y="10" width="10" height="10" 
       xlink:href="#MySymbol" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example Use02</caption><tr><td><img alt="Example Use02 — 'use' on a 'symbol'" src="images/struct/Use02.png" /></td></tr></table><p class="view-as-svg"><a href="images/struct/Use02.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<p>The visual effect would be equivalent to the following document:</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="10cm" height="3cm" viewBox="0 0 100 30"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example Use02-GeneratedContent - 'use' on a 'symbol'&lt;/desc&gt;

  &lt;!-- 'defs' section left out --&gt;

  &lt;rect x=".1" y=".1" width="99.8" height="29.8"
        fill="none" stroke="blue" stroke-width=".2" /&gt;

  &lt;!-- Start of generated content. Replaces 'use' --&gt;
  &lt;g transform="translate(45, 10)" &gt;
    &lt;!-- Start of referenced 'symbol'. 'symbol' replaced by 'svg',
         with x,y,width,height=0,0,100%,100% --&gt;
    &lt;svg width="10" height="10" 
         viewBox="0 0 20 20"&gt;
      &lt;rect x="1" y="1" width="8" height="8"/&gt;
      &lt;rect x="11" y="1" width="8" height="8"/&gt;
      &lt;rect x="1" y="11" width="8" height="8"/&gt;
      &lt;rect x="11" y="11" width="8" height="8"/&gt;
    &lt;/svg&gt;
    &lt;!-- End of referenced symbol --&gt;
  &lt;/g&gt;
  &lt;!-- End of generated content --&gt;

&lt;/svg&gt;</pre><p class="view-as-svg"><a href="images/struct/Use02-GeneratedContent.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<p><span class="example-ref">Example Use03</span> illustrates
what happens when a <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> has
a <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="10cm" height="3cm" viewBox="0 0 100 30" version="1.1"
     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;desc&gt;Example Use03 - 'use' with a 'transform' attribute&lt;/desc&gt;
  &lt;defs&gt;
    &lt;rect id="MyRect" x="0" y="0" width="60" height="10"/&gt;
  &lt;/defs&gt;
  &lt;rect x=".1" y=".1" width="99.8" height="29.8"
        fill="none" stroke="blue" stroke-width=".2" /&gt;
  &lt;use xlink:href="#MyRect"
       transform="translate(20,2.5) rotate(10)" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example Use03</caption><tr><td><img alt="Example Use03 — 'use' with a 'transform' attribute" src="images/struct/Use03.png" /></td></tr></table><p class="view-as-svg"><a href="images/struct/Use03.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<p>The visual effect would be equivalent to the following document:</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="10cm" height="3cm" viewBox="0 0 100 30"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example Use03-GeneratedContent - 'use' with a 'transform' attribute&lt;/desc&gt;

  &lt;!-- 'defs' section left out --&gt;

  &lt;rect x=".1" y=".1" width="99.8" height="29.8"
        fill="none" stroke="blue" stroke-width=".2" /&gt;

  &lt;!-- Start of generated content. Replaces 'use' --&gt;
  &lt;g transform="translate(20,2.5) rotate(10)"&gt;
    &lt;rect x="0" y="0" width="60" height="10"/&gt;
  &lt;/g&gt;
  &lt;!-- End of generated content --&gt;

&lt;/svg&gt;</pre><p class="view-as-svg"><a href="images/struct/Use03-GeneratedContent.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<p><span class="example-ref">Example Use04</span> illustrates a
<a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element with various
methods of applying CSS styling.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="3cm" viewBox="0 0 1200 300" version="1.1"
     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;desc&gt;Example Use04 - 'use' with CSS styling&lt;/desc&gt;
  &lt;defs style=" /* rule 9 */ stroke-miterlimit: 10" &gt;
    &lt;path id="MyPath" d="M300 50 L900 50 L900 250 L300 250"
                     class="MyPathClass"
                     style=" /* rule 10 */ stroke-dasharray:300,100" /&gt;
  &lt;/defs&gt;
  &lt;style type="text/css"&gt;
    &lt;![CDATA[
      /* rule 1 */ #MyUse { fill: blue }
      /* rule 2 */ #MyPath { stroke: red }
      /* rule 3 */ use { fill-opacity: .5 }
      /* rule 4 */ path { stroke-opacity: .5 }
      /* rule 5 */ .MyUseClass { stroke-linecap: round }
      /* rule 6 */ .MyPathClass { stroke-linejoin: bevel }
      /* rule 7 */ use &gt; path { shape-rendering: optimizeQuality }
      /* rule 8 */ g &gt; path { visibility: hidden }
    ]]&gt;
  &lt;/style&gt;

  &lt;rect x="0" y="0" width="1200" height="300"
         style="fill:none; stroke:blue; stroke-width:3"/&gt;
  &lt;g style=" /* rule 11 */ stroke-width:40"&gt;
    &lt;use id="MyUse" xlink:href="#MyPath" 
         class="MyUseClass"
         style="/* rule 12 */ stroke-dashoffset:50" /&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example Use04</caption><tr><td><img alt="Example Use04 — 'use' with CSS styling" src="images/struct/Use04.png" /></td></tr></table><p class="view-as-svg"><a href="images/struct/Use04.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<p>The visual effect would be equivalent to the following
document. Observe that some of the style rules above apply to
the generated content (i.e., rules 1-6, 10-12), whereas others
do not (i.e., rules 7-9). The rules which do not affect the
generated content are:</p>

<ul><li>Rules 7 and 8: CSS selectors only apply to the formal
  document tree, not on the generated tree; thus, these
  selectors will not yield a match.</li><li>Rule 9: The generated tree only inherits from the
  ancestors of the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>
  element and does not inherit from the ancestors of the
  referenced element; thus, this rule does not affect the
  generated content.</li></ul>

<p>In the generated content below, the selectors that yield a
match have been transferred into inline <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attributes for
illustrative purposes.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="3cm" viewBox="0 0 1200 300"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example Use04-GeneratedContent - 'use' with a 'transform' attribute&lt;/desc&gt;

  &lt;!-- 'style' and 'defs' sections left out --&gt;

  &lt;rect x="0" y="0" width="1200" height="300"
         style="fill:none; stroke:blue; stroke-width:3"/&gt;
  &lt;g style="/* rule 11 */ stroke-width:40"&gt;

    &lt;!-- Start of generated content. Replaces 'use' --&gt;
    &lt;g style="/* rule 1 */ fill:blue;
                 /* rule 3 */ fill-opacity:.5;
                 /* rule 5 */ stroke-linecap:round;
                 /* rule 12 */ stroke-dashoffset:50" &gt;
      &lt;path d="M300 50 L900 50 L900 250 L300 250"
            style="/* rule 2 */ stroke:red; 
                   /* rule 4 */ stroke-opacity:.5; 
                   /* rule 6 */ stroke-linejoin: bevel; 
                   /* rule 10 */ stroke-dasharray:300,100" /&gt;
    &lt;/g&gt; 
    &lt;!-- End of generated content --&gt;

  &lt;/g&gt;
&lt;/svg&gt;</pre><p class="view-as-svg"><a href="images/struct/Use04-GeneratedContent.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<p>When a <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> references
another element which is another <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> or whose content contains a
<a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element, then the deep
cloning approach described above is recursive. However, a set
of references that directly or indirectly reference a element
to create a circular dependency is an error, as described in <a href="#struct-Head">References and the <span class="element-name">‘defs’</span> element</a>.</p>

<div class="adef-list">
  <p><em>Attribute definitions:</em></p>
  <dl><dt id="struct-UseElementXAttribute"><span class="adef">x</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The x-axis coordinate of one corner of the rectangular
    region into which the referenced element is placed.<br />
     If the attribute is not specified, the effect is as if a
    value of "0" were specified.<br />
     <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
    yes.</span></dd><dt id="struct-UseElementYAttribute"><span class="adef">y</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The y-axis coordinate of one corner of the rectangular
    region into which the referenced element is placed.<br />
     If the attribute is not specified, the effect is as if a
    value of "0" were specified.<br />
     <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
    yes.</span></dd><dt id="struct-UseElementWidthAttribute"><span class="adef">width</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>The width of the rectangular region into which the
    referenced element is placed. A negative value is an error
    (see <a href="#implnote-ErrorProcessing">Error
    processing</a>). A value of zero disables rendering of this
    element.<br />
     <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
    yes.</span></dd><dt id="struct-UseElementHeightAttribute"><span class="adef">height</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>The height of the rectangular region into which the
    referenced element is placed. A negative value is an error
    (see <a href="#implnote-ErrorProcessing">Error
    processing</a>). A value of zero disables rendering of this
    element.<br />
     <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
    yes.</span></dd><dt id="struct-UseElementHrefAttribute"><span class="adef">xlink:href</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span>"</dt><dd>A <a href="#linking-IRIReference">IRI
    reference</a> to an element/fragment within an SVG
    document.<br />
     <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
    yes.</span></dd></dl>
</div>



<h2 id="struct-ImageElement">5.7 The <span class="element-name">‘image’</span> element</h2>



<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘image’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermGraphicsElement">Graphics element</a>, <a href="#intro-TermGraphicsReferencingElement">graphics referencing element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#struct-ImageElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a></li><li><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></li><li><a href="#struct-ImageElementXAttribute"><span class="attr-name">‘x’</span></a></li><li><a href="#struct-ImageElementYAttribute"><span class="attr-name">‘y’</span></a></li><li><a href="#struct-ImageElementWidthAttribute"><span class="attr-name">‘width’</span></a></li><li><a href="#struct-ImageElementHeightAttribute"><span class="attr-name">‘height’</span></a></li><li><a href="#struct-ImageElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#struct-InterfaceSVGImageElement">SVGImageElement</a></li></ul></dd></dl></div>

    <p>The <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element
    indicates that the contents of a complete file are to be
    rendered into a given rectangle within the current user
    coordinate system. The <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element can refer to raster
    image files such as PNG or JPEG or to files with MIME type of
    "image/svg+xml". <a href="#conform-ConformingSVGViewers">Conforming SVG
    viewers</a> need to support at least PNG, JPEG and SVG format
    files.</p>
    <p>The result of processing an <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> is always a four-channel
    RGBA result. When an <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>
    element references a raster image file such as PNG or JPEG
    files which only has three channels (RGB), then the effect is
    as if the object were converted into a 4-channel RGBA image
    with the alpha channel uniformly set to 1. For a single-channel
    raster image, the effect is as if the object were converted
    into a 4-channel RGBA image, where the single channel from the
    referenced object is used to compute the three color channels
    and the alpha channel is uniformly set to 1.</p>
    <p>An <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element
    establishes a new viewport for the referenced file as described
    in <a href="#coords-EstablishingANewViewport">Establishing
    a new viewport</a>.  The bounds for the new viewport are
    defined by attributes <a href="#struct-ImageElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#struct-ImageElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#struct-ImageElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#struct-ImageElementHeightAttribute"><span class="attr-name">‘height’</span></a>. The placement and scaling
    of the referenced image are controlled by the <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> attribute on
    the <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element.</p>
    <p>When an <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element
    references an SVG image, the <a href="#masking-ClipProperty"><span class="prop-name">‘clip’</span></a> and <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> properties on the root element in
    the referenced SVG image are ignored (in the same manner as the
    <a href="#struct-ImageElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#struct-ImageElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#struct-ImageElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#struct-ImageElementHeightAttribute"><span class="attr-name">‘height’</span></a> attributes are ignored). Unless the value of
    <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> on the <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element starts with 'defer', 
    the <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> attribute on the root element in
    the referenced SVG image is also ignored (see <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>
    for details).
    
    Instead, the <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> attribute on
    the referencing <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>
    element defines how the SVG image content is fitted into the
    viewport and the <a href="#masking-ClipProperty"><span class="prop-name">‘clip’</span></a> and <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> properties on the <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element define how the SVG
    image content is clipped (or not) relative to the viewport.</p>
    <p>The value of the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute to use when
    evaluating the <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> attribute is
    defined by the referenced content. For content that clearly
    identifies a viewBox (e.g. an SVG file with the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute on the
    <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>) that value should be used. For most
    raster content (PNG, JPEG) the bounds of the image should be
    used (i.e. the <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>
    element has an implicit <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> of <span class="attr-value">'0 0 raster-image-width
    raster-image-height'</span>). Where no value is readily available
    (e.g. an SVG file with no <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute on the
    <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>) the <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> attribute is
    ignored, and only the translation due to the <a href="#struct-ImageElementXAttribute"><span class="attr-name">‘x’</span></a> &amp; <a href="#struct-ImageElementYAttribute"><span class="attr-name">‘y’</span></a> attributes of the viewport is
    used to display the content.</p>
    <p>For example, if the image element referenced a PNG or JPEG
    and <span class="attr-value">preserveAspectRatio="xMinYMin
    meet"</span>, then the aspect ratio of the raster would be
    preserved (which means that the scale factor from image's
    coordinates to current user space coordinates would be the same
    for both X and Y), the raster would be sized as large as
    possible while ensuring that the entire raster fits within the
    viewport, and the top/left of the raster would be aligned with
    the top/left of the viewport as defined by the attributes <a href="#struct-ImageElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#struct-ImageElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#struct-ImageElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#struct-ImageElementHeightAttribute"><span class="attr-name">‘height’</span></a> on the <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element.  If the value
    of <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> was <span class="attr-value">'none'</span>
    then aspect ratio of the image would not be preserved. The
    image would be fitted such that the top/left corner of the
    raster exactly aligns with coordinate (<a href="#struct-ImageElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#struct-ImageElementYAttribute"><span class="attr-name">‘y’</span></a>) and the bottom/right corner of
    the raster exactly aligns with coordinate (<a href="#struct-ImageElementXAttribute"><span class="attr-name">‘x’</span></a>+<a href="#struct-ImageElementWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#struct-ImageElementYAttribute"><span class="attr-name">‘y’</span></a>+<a href="#struct-ImageElementHeightAttribute"><span class="attr-name">‘height’</span></a>).</p>

    <p>The resource referenced by the <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element represents a
    separate document which generates its own parse tree and
    document object model (if the resource is XML). Thus, there is
    no inheritance of properties into the image.</p>
    <p>Unlike <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>, the <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element cannot reference
    elements within an SVG file.</p>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="struct-ImageElementXAttribute"><span class="adef">x</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The x-axis coordinate of one corner of the rectangular
        region into which the referenced document is placed.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'0'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="struct-ImageElementYAttribute"><span class="adef">y</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The y-axis coordinate of one corner of the rectangular
        region into which the referenced document is placed.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'0'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="struct-ImageElementWidthAttribute"><span class="adef">width</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>The width of the rectangular region into which the
        referenced document is placed.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables rendering of the element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="struct-ImageElementHeightAttribute"><span class="adef">height</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>The height of the rectangular region into which the
        referenced document is placed.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables rendering of the element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="struct-ImageElementHrefAttribute"><span class="adef">xlink:href</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span>"</dt><dd>A <a href="#linking-IRIReference">IRI
        reference</a>.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="struct-ImageElementPreserveAspectRatioAttribute">
          <span class="adef">preserveAspectRatio</span> = "<span class="attr-value"><a href="#coords-PreserveAspectRatioAttribute">[defer] &lt;align&gt; [&lt;meetOrSlice&gt;]</a></span>"
        </dt><dd>
          <p>
            See <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.
          </p>
          <p>
            If attribute <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> is not specified, then the effect is as if a value of <span class="attr-value">xMidYMid meet</span> were specified.
          </p>
          <p><span class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes.</span></p>
        </dd></dl>
    </div>

    <p>An example:</p>
<pre>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="4in" height="3in" version="1.1"
     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;desc&gt;This graphic links to an external image
  &lt;/desc&gt;
  &lt;image x="200" y="200" width="100px" height="100px"
         xlink:href="myimage.png"&gt;
    &lt;title&gt;My image&lt;/title&gt;
  &lt;/image&gt;
&lt;/svg&gt;
</pre>



    <h2 id="struct-ConditionalProcessing">5.8 Conditional processing</h2>

    
    <h3 id="struct-ConditionalProcessingOverview">5.8.1 Conditional processing overview</h3>
    <p>SVG contains a <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> element along with
    attributes <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a> and <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a> to provide an
    ability to specify alternate viewing depending on the
    capabilities of a given user agent or the user's language.</p>
    <p>Attributes <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a> and <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a> act as tests and
    return either true or false results. The <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> renders the first of
    its children for which all of these attributes test true. If
    the given attribute is not specified, then a true value is
    assumed.</p>
    <p>Similar to the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property, conditional processing
    attributes only affect the direct rendering of elements and do
    not prevent elements from being successfully referenced by
    other elements (such as via a <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>).</p>
    <p>In consequence:</p>
    <ul><li><a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a> and <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a> attributes affect
      <a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, and <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements.</li><li><a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a> and <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a> attributes will
      have no effect on <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>,
      <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>, and <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> elements.</li><li><a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a> and <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a> attributes do not
      apply to the <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, and
      <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a> elements because
      they are not part of the rendering tree.</li><li><a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a> and <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a> attributes affect
      <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, and <a href="#animate-SetElement"><span class="element-name">‘set’</span></a> elements. If the
      conditional statement on these animation elements fails, the
      animation will never be triggered.</li></ul>

<h3 id="struct-SwitchElement">5.8.2 The <span class="element-name">‘switch’</span> element</h3>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘switch’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermContainerElement">Container element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#intro-TermShapeElement">shape elements</a><span class="expanding"> — <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></span></li><li><a href="#linking-AElement"><span class="element-name">‘a’</span></a></li><li><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></li><li><a href="#struct-GElement"><span class="element-name">‘g’</span></a></li><li><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></li><li><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></li><li><a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a></li><li><a href="#text-TextElement"><span class="element-name">‘text’</span></a></li><li><a href="#struct-UseElement"><span class="element-name">‘use’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#struct-InterfaceSVGSwitchElement">SVGSwitchElement</a></li></ul></dd></dl></div>

<p>The <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> element evaluates
the <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a> and
<a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a> attributes on its direct child elements in
order, and then processes and renders the first child for which these
attributes evaluate to true. All others will be bypassed and therefore
not rendered. If the child element is a container element such as a
<a href="#struct-GElement"><span class="element-name">‘g’</span></a>, then the entire subtree is either processed/rendered or
bypassed/not rendered.</p>

<p>Note that the values of properties <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> and
<a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> have no effect on <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> element
processing. In particular, setting <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> to
<span class="prop-value">none</span> on a child of a <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> element
has no effect on true/false testing associated with <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>
element processing.</p>

<p>For more information and an example, see
<a href="#extend-ForeignObjectElement">Embedding foreign
object types</a>.</p>

    <h3 id="struct-ConditionalProcessingRequiredFeaturesAttribute">5.8.3 The <span class="attr-name">‘requiredFeatures’</span>
    attribute</h3>
    <div class="adef-list">
      <p>Definition of <span class="adef">requiredFeatures</span>:</p>
      <dl><dt id="struct-RequiredFeaturesAttribute"><span class="adef">requiredFeatures</span> =
        <em>list-of-features</em></dt><dd>The value is a list of feature strings, with the
        individual values separated by white space. Determines
        whether all of the named <em>features</em> are supported by
        the user agent. Only feature strings defined in the <a href="#chapter-feature">Feature String</a> appendix are
        allowed. If all of the given features are supported, then
        the attribute evaluates to true; otherwise, the current
        element and its children are skipped and thus will not be
        rendered.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd></dl>
    </div>
    <p>If the attribute is not present, then its implicit return
    value is "true". If a null string or empty string value is
    given to attribute <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, the attribute
    returns "false".</p>
    <p><a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a> is often
    used in conjunction with the <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> element. If the <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a> is used in other
    situations, then it represents a simple switch on the given
    element whether to render the element or not.</p>
    <h3 id="struct-ConditionalProcessingRequiredExtensionsAttribute">5.8.4 The <span class="attr-name">‘requiredExtensions’</span>
    attribute</h3>
    <p>The <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>
    attribute defines a list of required language extensions.
    Language extensions are capabilities within a user agent that
    go beyond the feature set defined in this specification. Each
    extension is identified by an <a href="#linking-IRIReference">IRI reference</a>.</p>
    <div class="adef-list">
      <p>Definition of <span class="adef">requiredExtensions</span>:</p>
      <dl><dt id="struct-RequiredExtensionsAttribute"><span class="adef">requiredExtensions</span> =
        <em>list-of-extensions</em></dt><dd>The value is a list of <a href="#linking-IRIReference">IRI reference</a>s which
        identify the required extensions, with the individual
        values separated by white space. Determines whether all of
        the named <em>extensions</em> are supported by the user
        agent. If all of the given extensions are supported, then
        the attribute evaluates to true; otherwise, the current
        element and its children are skipped and thus will not be
        rendered.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd></dl>
    </div>
    <p>If a given <a href="#linking-IRIReference">IRI
    reference</a> contains white space within itself, that white
    space must be escaped.</p>
    <p>If the attribute is not present, then its implicit return
    value is "true". If a null string or empty string value is
    given to attribute <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, the attribute
    returns "false".</p>
    <p><a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a> is often
    used in conjunction with the <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> element. If the <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a> is used in other
    situations, then it represents a simple switch on the given
    element whether to render the element or not.</p>
    <p>The IRI names for the extension should include versioning
    information, such as "http://example.org/SVGExtensionXYZ/1.0",
    so that script writers can distinguish between different
    versions of a given extension.</p>

    <h3 id="struct-ConditionalProcessingSystemLanguageAttribute">5.8.5 The <span class="attr-name">‘systemLanguage’</span> attribute</h3>
    <p id="struct-SystemLanguageAttribute">The attribute value is a comma-separated list of language
    names as defined in <a href="http://www.ietf.org/rfc/bcp/bcp47.txt">BCP 47</a>
    [<a href="#refs-ref-BCP47">BCP47</a>].</p>
    <p>Evaluates to "true" if one of the languages indicated by
    user preferences exactly equals one of the languages given in
    the value of this parameter, or if one of the languages
    indicated by user preferences exactly equals a prefix of one of
    the languages given in the value of this parameter such that
    the first tag character following the prefix is "-".</p>
    <p>Evaluates to "false" otherwise.</p>
    <p>Note: This use of a prefix matching rule does not imply that
    language tags are assigned to languages in such a way that it
    is always true that if a user understands a language with a
    certain tag, then this user will also understand all languages
    with tags for which this tag is a prefix.</p>
    <p>The prefix rule simply allows the use of prefix tags if this
    is the case.</p>
    <p>Implementation note: When making the choice of linguistic
    preference available to the user, implementers should take into
    account the fact that users are not familiar with the details
    of language matching as described above, and should provide
    appropriate guidance. As an example, users may assume that on
    selecting "en-gb", they will be served any kind of English
    document if British English is not available. The user
    interface for setting user preferences should guide the user to
    add "en" to get the best matching behavior.</p>
    <p>Multiple languages MAY be listed for content that is
    intended for multiple audiences. For example, content that is
    presented simultaneously in the original Maori and English
    versions, would call for:</p>
    <center>
      <code>&lt;text systemLanguage="mi, en"&gt;&lt;!-- content
      goes here --&gt;&lt;/text&gt;</code>
    </center>
    <p>However, just because multiple languages are present within
    the object on which the <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a> test
    attribute is placed, this does not mean that it is intended for
    multiple linguistic audiences. An example would be a beginner's
    language primer, such as "A First Lesson in Latin," which is
    clearly intended to be used by an English-literate audience. In
    this case, the <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a> test attribute
    should only include "en".</p>
    <p>Authoring note: Authors should realize that if several
    alternative language objects are enclosed in a <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, and none of them
    matches, this may lead to situations where no content is
    displayed. It is thus recommended to include a "catch-all"
    choice at the end of such a <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> which is acceptable in
    all cases.</p>
    <p>For the <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a>
    attribute: <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: no.</span></p>
    <p>If the attribute is not present, then its implicit return
    value is "true". If a null string or empty string value is
    given to attribute <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a>, the attribute returns
    "false".</p>
    <p><a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a> is often used
    in conjunction with the <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> element. If the <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a> is used in other
    situations, then it represents a simple switch on the given
    element whether to render the element or not.</p>

    <h3 id="struct-ApplicabilityOfTestAttributes">5.8.6 Applicability of test attributes</h3>
    <p>The following list describes the applicability of the test
    attributes to the elements that do not directly produce
    rendering.</p>
    <ul><li>the test attributes do not effect the
      <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>, <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>, <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>,
      <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> and <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> elements. The
      test attributes on a referenced element do not affect the
      rendering of the referencing element.</li><li>the test attributes do not effect the <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, and <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a> elements as they are not
      part of the rendering tree.</li><li>an animation element (<a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a> and <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>) will never be triggered if
      it has a test attribute that evaluates to false.</li></ul>

    <h2 id="struct-ExternalResourcesRequired">5.9 Specifying whether external resources are required for
    proper rendering</h2>
    <p>Documents often reference and use the contents of other
    files (and other Web resources) as part of their rendering. In
    some cases, authors want to specify that particular resources
    are required for a document to be considered correct.</p>
    <p>Attribute <a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a> is available
    on all container elements and to all elements which potentially
    can reference external resources. It specifies whether
    referenced resources that are not part of the current document
    are required for proper rendering of the given container
    element or graphics element.</p>
    <div class="adef-list">
      <p>Attribute definition:</p>
      <dl><dt id="struct-ExternalResourcesRequiredAttribute"><span class="adef">externalResourcesRequired</span> =
        "<span class="attr-value">false | true</span>"</dt><dd>
          <dl><dt><span class="attr-value">false</span></dt><dd>(The default value.) Indicates that resources
            external to the current document are optional. Document
            rendering can proceed even if external resources are
            unavailable to the current element and its
            descendants.</dd><dt><span class="attr-value">true</span></dt><dd>Indicates that resources external to the current
            document are required. If an external resource is not
            available, progressive rendering is suspended, the
            document's <a href="#interact-LoadEvent">SVGLoad</a> event is not
            fired and the animation timeline does not begin until
            that resource and all other required resources become
            available, have been parsed and are ready to be
            rendered. If a timeout event occurs on a required
            resource, then the document goes into an error state
            (see <a href="#implnote-ErrorProcessing">Error
            processing</a>). The document remains in an error state
            until all required resources become available.</dd></dl>
        </dd></dl>
    </div>
    <p>This attribute applies to all types of resource references,
    including style sheets, color profiles (see <a href="#color-ColorProfileDescriptions">Color profile
    descriptions</a>) and fonts specified by an <a href="#intro-TermIRIReference">IRI reference</a> using a <a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a> element or a CSS
    @font-face specification. In particular, if an element sets
    <span class="attr-value">externalResourcesRequired="true"</span>,
    then all style sheets must be available since any style sheet
    might affect the rendering of that element.</p>
    <p>Attribute <a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a> is not
    inheritable (from a sense of attribute value inheritance), but
    if set on a container element, its value will apply to all
    elements within the container.</p>
    <p>Because setting <span class="attr-value">externalResourcesRequired="true"</span> on a
    container element will have the effect of disabling progressive
    display of the contents of that container, if that container
    includes elements that reference external resources, tools that generate
    SVG content are cautioned against simply setting <span class="attr-value">externalResourcesRequired="true"</span> on
    the <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a> on a universal
    basis. Instead, it is better to specify <span class="attr-value">externalResourcesRequired="true"</span> on
    those particular graphics elements or container elements which
    specifically need the availability of external resources in order to
    render properly.</p>
    <p>For <a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a>: <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: no.</span></p>

    <h2 id="struct-CommonAttributes">5.10 Common attributes</h2>

    <h3 id="struct-Core.attrib">5.10.1 Attributes common to all elements: <span class="attr-name">‘id’</span> and <span class="attr-name">‘xml:base’</span></h3>
    <p>The <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a> and <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a> attributes are available on
    all SVG elements:</p>
    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="struct-IDAttribute"><span class="adef">id</span> = "<span class="attr-value">name</span>"</dt><dd>Standard XML attribute for assigning a unique
        <em>name</em> to an element. Refer to the <a href="http://www.w3.org/TR/2008/REC-xml-20081126/"><cite>Extensible
        Markup Language (XML) 1.0</cite></a> Recommendation [<a href="#refs-ref-XML10">XML10</a>].<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="struct-XMLBaseAttribute"><span class="adef">xml:base</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span>"</dt><dd>Specifies a base IRI other than the base IRI of the
        document or external entity. Refer to the <a href="http://www.w3.org/TR/2009/REC-xmlbase-20090128/"><cite>XML Base</cite></a>
        specification [<a href="#refs-ref-XML-BASE">XML-BASE</a>].<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd></dl>
    </div>

    <h3 id="struct-LangSpaceAttrs">5.10.2 The <span class="attr-name">‘xml:lang’</span> and
    <span class="attr-name">‘xml:space’</span> attributes</h3>
    Elements that might contain character data content have
    attributes <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a> and <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a>.

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="struct-XMLLangAttribute"><span class="adef">xml:lang</span> = "<span class="attr-value">languageID</span>"</dt><dd>Standard XML attribute to specify the language (e.g.,
        English) used in the contents and attribute values of
        particular elements. Refer to the <a href="http://www.w3.org/TR/2008/REC-xml-20081126/"><cite>Extensible Markup
        Language (XML) 1.0</cite></a> Recommendation [<a href="#refs-ref-XML10">XML10</a>].<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="struct-XMLSpaceAttribute"> <span class="adef">xml:space</span> = "<span class="attr-value">{default | preserve}</span>"</dt><dd>Standard XML attribute to specify whether white space
        is preserved in character data. The only possible values
        are <span class="attr-value">'default'</span> and <span class="attr-value">'preserve'</span>. Refer to the
        <a href="http://www.w3.org/TR/2008/REC-xml-20081126/"><cite>Extensible Markup Language (XML) 1.0</cite></a>
	Recommendation [<a href="#refs-ref-XML10">XML10</a>] and to the
        discussion <a href="#text-WhiteSpace">white space
        handling</a> in SVG.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd></dl>
    </div>

<h2 id="struct-DOMInterfaces">5.11 DOM interfaces</h2>

<h3 id="struct-InterfaceSVGDocument">5.11.1 Interface SVGDocument</h3>


 <p>When an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element is embedded inline as
 a component of a document from another namespace, such as when an
 <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element is embedded inline within an
 XHTML document [<a href="#refs-ref-XHTML">XHTML</a>], then an
 <a class="idlinterface" href="#struct-InterfaceSVGDocument">SVGDocument</a> object will not exist; instead, the root object in
 the document object hierarchy will be a Document object of a different
 type, such as an HTMLDocument object.</p>

 <p>However, an <a class="idlinterface" href="#struct-InterfaceSVGDocument">SVGDocument</a> object will indeed exist when the
 root element of the XML document hierarchy is an
 <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element, such as when viewing a stand-alone SVG file (i.e., a
 file with MIME type "image/svg+xml"). In this case, the <a class="idlinterface" href="#struct-InterfaceSVGDocument">SVGDocument</a>
 object will be the root object of the document object model hierarchy.</p>

 <p>In the case where an SVG document is embedded by reference,
 such as when an XHTML document has an <span class="element-name">‘object’</span>
 element whose <span class="attr-name">‘href’</span> attribute references an SVG
 document (i.e., a document whose MIME type is "image/svg+xml"
 and whose root element is thus an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element), there will exist
 two distinct DOM hierarchies. The first DOM hierarchy will be for the
 referencing document (e.g., an XHTML document). The second DOM hierarchy
 will be for the referenced SVG document.  In this second DOM hierarchy, the
 root object of the document object model hierarchy is an
 <a class="idlinterface" href="#struct-InterfaceSVGDocument">SVGDocument</a> object.</p>

 <p>The <a class="idlinterface" href="#struct-InterfaceSVGDocument">SVGDocument</a> interface contains a similar list of attributes
 and methods to the HTMLDocument interface described in the
 <a href="http://www.w3.org/TR/REC-DOM-Level-1/level-one-html.html">Document
 Object Model (HTML) Level 1</a> chapter of the
 [<a href="#refs-ref-DOM1">DOM1</a>] specification.</p>
<pre class="idl">interface <b>SVGDocument</b> : <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#i-Document">Document</a>,
                        <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-DocumentEvent">DocumentEvent</a> {
  readonly attribute DOMString <a href="#struct-__svg__SVGDocument__title">title</a>;
  readonly attribute DOMString <a href="#struct-__svg__SVGDocument__referrer">referrer</a>;
  readonly attribute DOMString <a href="#struct-__svg__SVGDocument__domain">domain</a>;
  readonly attribute DOMString <a href="#struct-__svg__SVGDocument__URL">URL</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGSVGElement">SVGSVGElement</a> <a href="#struct-__svg__SVGDocument__rootElement">rootElement</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="struct-__svg__SVGDocument__title" class="attribute first-child"><b>title</b><span class="idl-type-parenthetical"> (readonly DOMString)</span></dt><dd class="attribute"><div>
 The title of a document as specified by the <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> sub-element of
 the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> root element (i.e.,
 <span class="code-fragment">&lt;svg&gt;&lt;title&gt;Here is the title&lt;/title&gt;...&lt;/svg&gt;</span>)
</div></dd>
<dt id="struct-__svg__SVGDocument__referrer" class="attribute"><b>referrer</b><span class="idl-type-parenthetical"> (readonly DOMString)</span></dt><dd class="attribute"><div>
 Returns the URI of the page that linked to this page. The value is an
 empty string if the user navigated to the page directly (not through a
 link, but, for example, via a bookmark).
</div></dd>
<dt id="struct-__svg__SVGDocument__domain" class="attribute"><b>domain</b><span class="idl-type-parenthetical"> (readonly DOMString)</span></dt><dd class="attribute"><div>
 The domain name of the server that served the document, or a null string
 if the server cannot be identified by a domain name.
</div></dd>
<dt id="struct-__svg__SVGDocument__URL" class="attribute"><b>URL</b><span class="idl-type-parenthetical"> (readonly DOMString)</span></dt><dd class="attribute"><div>
 The complete URI of the document.
</div></dd>
<dt id="struct-__svg__SVGDocument__rootElement" class="attribute"><b>rootElement</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#struct-InterfaceSVGSVGElement">SVGSVGElement</a>)</span></dt><dd class="attribute"><div>
 The root <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> in the document hierarchy.
</div></dd></dl></dd></dl>

<h3 id="struct-InterfaceSVGSVGElement">5.11.2 Interface SVGSVGElement</h3>



 <p>A key interface definition is the <a class="idlinterface" href="#struct-InterfaceSVGSVGElement">SVGSVGElement</a> interface,
 which is the interface that corresponds to the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element. This
 interface contains various miscellaneous commonly-used utility
 methods, such as matrix operations and the ability to control the
 time of redraw on visual rendering devices.</p>

 <p><a class="idlinterface" href="#struct-InterfaceSVGSVGElement">SVGSVGElement</a> extends <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-ViewCSS">ViewCSS</a> and <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-DocumentCSS">DocumentCSS</a> to
 provide access to the computed values of properties and the override style
 sheet as described in <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/"><cite>DOM Level 2 Style</cite></a>
 [<a href="#refs-ref-DOM2STYLE">DOM2STYLE</a>].</p>
<pre class="idl">interface <b>SVGSVGElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGLocatable">SVGLocatable</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGFitToViewBox">SVGFitToViewBox</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGZoomAndPan">SVGZoomAndPan</a>,
                          <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-DocumentEvent">DocumentEvent</a>,
                          <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-ViewCSS">ViewCSS</a>,
                          <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-DocumentCSS">DocumentCSS</a> {

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGSVGElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGSVGElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGSVGElement__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGSVGElement__height">height</a>;
           attribute DOMString <a href="#struct-__svg__SVGSVGElement__contentScriptType">contentScriptType</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
           attribute DOMString <a href="#struct-__svg__SVGSVGElement__contentStyleType">contentStyleType</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <a href="#struct-__svg__SVGSVGElement__viewport">viewport</a>;
  readonly attribute float <a href="#struct-__svg__SVGSVGElement__pixelUnitToMillimeterX">pixelUnitToMillimeterX</a>;
  readonly attribute float <a href="#struct-__svg__SVGSVGElement__pixelUnitToMillimeterY">pixelUnitToMillimeterY</a>;
  readonly attribute float <a href="#struct-__svg__SVGSVGElement__screenPixelToMillimeterX">screenPixelToMillimeterX</a>;
  readonly attribute float <a href="#struct-__svg__SVGSVGElement__screenPixelToMillimeterY">screenPixelToMillimeterY</a>;
  readonly attribute boolean <a href="#struct-__svg__SVGSVGElement__useCurrentView">useCurrentView</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGViewSpec">SVGViewSpec</a> <a href="#struct-__svg__SVGSVGElement__currentView">currentView</a>;
           attribute float <a href="#struct-__svg__SVGSVGElement__currentScale">currentScale</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#struct-__svg__SVGSVGElement__currentTranslate">currentTranslate</a>;

  unsigned long <a href="#struct-__svg__SVGSVGElement__suspendRedraw">suspendRedraw</a>(in unsigned long maxWaitMilliseconds);
  void <a href="#struct-__svg__SVGSVGElement__unsuspendRedraw">unsuspendRedraw</a>(in unsigned long suspendHandleID);
  void <a href="#struct-__svg__SVGSVGElement__unsuspendRedrawAll">unsuspendRedrawAll</a>();
  void <a href="#struct-__svg__SVGSVGElement__forceRedraw">forceRedraw</a>();
  void <a href="#struct-__svg__SVGSVGElement__pauseAnimations">pauseAnimations</a>();
  void <a href="#struct-__svg__SVGSVGElement__unpauseAnimations">unpauseAnimations</a>();
  boolean <a href="#struct-__svg__SVGSVGElement__animationsPaused">animationsPaused</a>();
  float <a href="#struct-__svg__SVGSVGElement__getCurrentTime">getCurrentTime</a>();
  void <a href="#struct-__svg__SVGSVGElement__setCurrentTime">setCurrentTime</a>(in float seconds);
  <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-536297177">NodeList</a> <a href="#struct-__svg__SVGSVGElement__getIntersectionList">getIntersectionList</a>(in <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> rect, in <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> referenceElement);
  <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-536297177">NodeList</a> <a href="#struct-__svg__SVGSVGElement__getEnclosureList">getEnclosureList</a>(in <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> rect, in <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> referenceElement);
  boolean <a href="#struct-__svg__SVGSVGElement__checkIntersection">checkIntersection</a>(in <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> element, in <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> rect);
  boolean <a href="#struct-__svg__SVGSVGElement__checkEnclosure">checkEnclosure</a>(in <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> element, in <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> rect);
  void <a href="#struct-__svg__SVGSVGElement__deselectAll">deselectAll</a>();
  <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <a href="#struct-__svg__SVGSVGElement__createSVGNumber">createSVGNumber</a>();
  <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#struct-__svg__SVGSVGElement__createSVGLength">createSVGLength</a>();
  <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> <a href="#struct-__svg__SVGSVGElement__createSVGAngle">createSVGAngle</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#struct-__svg__SVGSVGElement__createSVGPoint">createSVGPoint</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#struct-__svg__SVGSVGElement__createSVGMatrix">createSVGMatrix</a>();
  <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <a href="#struct-__svg__SVGSVGElement__createSVGRect">createSVGRect</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#struct-__svg__SVGSVGElement__createSVGTransform">createSVGTransform</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#struct-__svg__SVGSVGElement__createSVGTransformFromMatrix">createSVGTransformFromMatrix</a>(in <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> matrix);
  <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-745549614">Element</a> <a href="#struct-__svg__SVGSVGElement__getElementById">getElementById</a>(in DOMString elementId);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="struct-__svg__SVGSVGElement__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-SVGElementXAttribute"><span class="attr-name">‘x’</span></a> on the given <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.
</div></dd>
<dt id="struct-__svg__SVGSVGElement__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-SVGElementYAttribute"><span class="attr-name">‘y’</span></a> on the given <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.
</div></dd>
<dt id="struct-__svg__SVGSVGElement__width" class="attribute"><b>width</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a> on the given <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>
 element.
</div></dd>
<dt id="struct-__svg__SVGSVGElement__height" class="attribute"><b>height</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a> on the given <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>
 element.
</div></dd>
<dt id="struct-__svg__SVGSVGElement__contentScriptType" class="attribute"><b>contentScriptType</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#script-ContentScriptTypeAttribute"><span class="attr-name">‘contentScriptType’</span></a> on the given
 <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt to
   change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__contentStyleType" class="attribute"><b>contentStyleType</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#styling-ContentStyleTypeAttribute"><span class="attr-name">‘contentStyleType’</span></a> on the given
 <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt to
   change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__viewport" class="attribute"><b>viewport</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a>)</span></dt><dd class="attribute"><div>
 <p>The position and size of the viewport (implicit or explicit) that
 corresponds to this <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element. When the user agent is actually
 rendering the content, then the position and size values represent the
 actual values when rendering. The position and size values are unitless
 values in the coordinate system of the parent element. If no parent element
 exists (i.e., <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element represents the root of the document
 tree), if this SVG document is embedded as part of another document (e.g.,
 via the HTML <span class="element-name">‘object’</span> element), then the
 position and size are unitless values in the coordinate system of the parent
 document. (If the parent uses CSS or XSL layout, then unitless values
 represent pixel units for the current CSS or XSL viewport, as described in
 the CSS2 specification.) If the parent element does not have a coordinate
 system, then the user agent should provide reasonable default values for
 this attribute.</p>

 <p>The <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> object is <a href="#types-ReadOnlyRect">read only</a>.</p>
</div></dd>
<dt id="struct-__svg__SVGSVGElement__pixelUnitToMillimeterX" class="attribute"><b>pixelUnitToMillimeterX</b><span class="idl-type-parenthetical"> (readonly float)</span></dt><dd class="attribute"><div>
 Size of a pixel units (as defined by CSS2) along the x-axis of
 the viewport, which represents a unit somewhere in the range
 of 70dpi to 120dpi, and, on systems that support this, might
 actually match the characteristics of the target medium. On
 systems where it is impossible to know the size of a pixel, a
 suitable default pixel size is provided.
</div></dd>
<dt id="struct-__svg__SVGSVGElement__pixelUnitToMillimeterY" class="attribute"><b>pixelUnitToMillimeterY</b><span class="idl-type-parenthetical"> (readonly float)</span></dt><dd class="attribute"><div>
 Corresponding size of a pixel unit along the y-axis of the viewport.
</div></dd>
<dt id="struct-__svg__SVGSVGElement__screenPixelToMillimeterX" class="attribute"><b>screenPixelToMillimeterX</b><span class="idl-type-parenthetical"> (readonly float)</span></dt><dd class="attribute"><div>
 User interface (UI) events in DOM Level 2 indicate the screen
 positions at which the given UI event occurred. When the user
 agent actually knows the physical size of a "screen unit", this
 attribute will express that information; otherwise, user agents
 will provide a suitable default value such as .28mm.
</div></dd>
<dt id="struct-__svg__SVGSVGElement__screenPixelToMillimeterY" class="attribute"><b>screenPixelToMillimeterY</b><span class="idl-type-parenthetical"> (readonly float)</span></dt><dd class="attribute"><div>
 Corresponding size of a screen pixel along the y-axis of the viewport.
</div></dd>
<dt id="struct-__svg__SVGSVGElement__useCurrentView" class="attribute"><b>useCurrentView</b><span class="idl-type-parenthetical"> (readonly boolean)</span></dt><dd class="attribute"><div>
 The initial view (i.e., before magnification and panning) of 
 the current innermost SVG document fragment can be either the 
 "standard" view (i.e., based on attributes on the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> 
 element such as <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>) or to a "custom" view (i.e., a
 hyperlink into a particular <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a> or other element - see 
 <a href="#linking-LinksIntoSVG">Linking into SVG content:
 IRI fragments and SVG views</a>). If the initial view is the
 "standard" view, then this attribute is false. If the initial
 view is a "custom" view, then this attribute is true.
</div></dd>
<dt id="struct-__svg__SVGSVGElement__currentView" class="attribute"><b>currentView</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGViewSpec">SVGViewSpec</a>)</span></dt><dd class="attribute"><div>
 <p>The definition of the initial view (i.e., before magnification
 and panning) of the current innermost SVG document fragment. The
 meaning depends on the situation:</p>
 <ul>
   <li>
     If the initial view was a "standard" view, then: 
     <ul>
       <li>the values for <a class="idlattr" href="#types-__svg__SVGFitToViewBox__viewBox">viewBox</a>,
       <a class="idlattr" href="#types-__svg__SVGFitToViewBox__preserveAspectRatio">preserveAspectRatio</a> and
       <a class="idlattr" href="#types-__svg__SVGZoomAndPan__zoomAndPan">zoomAndPan</a> within <a class="idlattr" href="#struct-__svg__SVGSVGElement__currentView">currentView</a>
       will match the values for the corresponding DOM attributes
       that are on SVGSVGElement directly</li>

       <li>the values for <a class="idlattr" href="#types-__svg__SVGViewSpec__transform">transform</a> and
       <a class="idlattr" href="#types-__svg__SVGViewSpec__viewTarget">viewTarget</a> within <a class="idlattr" href="#struct-__svg__SVGSVGElement__currentView">currentView</a>
       will be null</li>
     </ul>
   </li>
   <li>
     If the initial view was a link into a <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a> element, then: 
     <ul>
       <li>the values for <a class="idlattr" href="#types-__svg__SVGFitToViewBox__viewBox">viewBox</a>,
       <a class="idlattr" href="#types-__svg__SVGFitToViewBox__preserveAspectRatio">preserveAspectRatio</a> and
       <a class="idlattr" href="#types-__svg__SVGZoomAndPan__zoomAndPan">zoomAndPan</a> within <a class="idlattr" href="#struct-__svg__SVGSVGElement__currentView">currentView</a>
       will correspond to the corresponding attributes for the
       given <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a> element</li>

       <li>the values for <a class="idlattr" href="#types-__svg__SVGViewSpec__transform">transform</a> and
       <a class="idlattr" href="#types-__svg__SVGViewSpec__viewTarget">viewTarget</a> within <a class="idlattr" href="#struct-__svg__SVGSVGElement__currentView">currentView</a>
       will be null</li>
     </ul>
   </li>
   <li>
     If the initial view was a link into another element (i.e.,
     other than a <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a>), then:
     <ul>
       <li>the values for <a class="idlattr" href="#types-__svg__SVGFitToViewBox__viewBox">viewBox</a>,
       <a class="idlattr" href="#types-__svg__SVGFitToViewBox__preserveAspectRatio">preserveAspectRatio</a> and
       <a class="idlattr" href="#types-__svg__SVGZoomAndPan__zoomAndPan">zoomAndPan</a> within <a class="idlattr" href="#struct-__svg__SVGSVGElement__currentView">currentView</a>
       will match the values for the corresponding DOM attributes
       that are on SVGSVGElement directly for the closest ancestor
       <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element</li>

       <li>the values for <a class="idlattr" href="#types-__svg__SVGViewSpec__transform">transform</a> within
       <a class="idlattr" href="#struct-__svg__SVGSVGElement__currentView">currentView</a> will be null</li>

       <li>the <a class="idlattr" href="#types-__svg__SVGViewSpec__viewTarget">viewTarget</a> within
       <a class="idlattr" href="#struct-__svg__SVGSVGElement__currentView">currentView</a> will represent the target of the
       link</li>
     </ul>
   </li>
   <li>
     If the initial view was a link into the SVG document fragment
     using an SVG view specification fragment identifier (i.e.,
     #svgView(...)), then:
     <ul>
       <li>the values for <a class="idlattr" href="#types-__svg__SVGFitToViewBox__viewBox">viewBox</a>,
       <a class="idlattr" href="#types-__svg__SVGFitToViewBox__preserveAspectRatio">preserveAspectRatio</a>,
       <a class="idlattr" href="#types-__svg__SVGZoomAndPan__zoomAndPan">zoomAndPan</a>,
       <a class="idlattr" href="#types-__svg__SVGViewSpec__transform">transform</a> and
       <a class="idlattr" href="#types-__svg__SVGViewSpec__viewTarget">viewTarget</a> within <a class="idlattr" href="#struct-__svg__SVGSVGElement__currentView">currentView</a>
       will correspond to the values from the SVG view
       specification fragment identifier</li>
     </ul>
   </li>
 </ul>

 <p>The object itself and its contents are both read only.</p>
</div></dd>
<dt id="struct-__svg__SVGSVGElement__currentScale" class="attribute"><b>currentScale</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 On an <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>, this attribute indicates the
 current scale factor
 relative to the initial view to take into account user
 magnification and panning operations, as described under
 <a href="#interact-ZoomAndPanAttribute">Magnification
 and panning</a>. DOM attributes <a class="idlattr" href="#struct-__svg__SVGSVGElement__currentScale">currentScale</a> and
 <a class="idlattr" href="#struct-__svg__SVGSVGElement__currentTranslate">currentTranslate</a>
 are equivalent to the 2x3 matrix [a b c d e f] =
 [currentScale 0 0 currentScale currentTranslate.x currentTranslate.y].
 If "magnification" is enabled (i.e., <span class="attr-value">zoomAndPan="magnify"</span>),
 then the effect is as if an extra transformation were placed at the
 outermost level on the SVG document fragment (i.e., outside the
 <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>).
 <p>When accessed on an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element that is not an
 <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>, it is undefined what behavior
 this attribute has.</p>
</div></dd>
<dt id="struct-__svg__SVGSVGElement__currentTranslate" class="attribute"><b>currentTranslate</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a>)</span></dt><dd class="attribute"><div>
 On an <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>, the corresponding translation factor
 that takes into account user "magnification".
 <p>When accessed on an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element that is not an
 <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>, it is undefined what behavior
 this attribute has.</p>
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="struct-__svg__SVGSVGElement__suspendRedraw" class="operation first-child">unsigned long <b>suspendRedraw</b>(in unsigned long <var>maxWaitMilliseconds</var>)</dt><dd class="operation"><div>
 Takes a time-out value which indicates that redraw shall not occur until:
 <ol>
   <li>the corresponding unsuspendRedraw() call has been made,</li>
   <li>an unsuspendRedrawAll() call has been made, or</li>
   <li>its timer has timed out.</li>
 </ol>
 <p>In environments that do not support interactivity (e.g., print media),
 then redraw shall not be suspended.
 Calls to suspendRedraw() and unsuspendRedraw() should, but need not be,
 made in balanced pairs.</p>
 <p>To suspend redraw actions as a collection of SVG DOM changes occur,
 precede the changes to the SVG DOM with a method call similar to:</p>
 <pre>suspendHandleID = suspendRedraw(maxWaitMilliseconds);</pre>
 <p>and follow the changes with a method call similar to:</p>
 <pre>unsuspendRedraw(suspendHandleID);</pre>
 <p>Note that multiple suspendRedraw calls can be used at once and that
 each such method call is treated independently of the other suspendRedraw
 method calls.</p>

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>maxWaitMilliseconds</var></div> <div> The amount of time in milliseconds
   to hold off before redrawing the device. Values greater than 60 seconds
   will be truncated down to 60 seconds.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A number which acts as a unique identifier for the given
   suspendRedraw() call. This value must be passed as the parameter to the
   corresponding unsuspendRedraw() method call.
</div></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__unsuspendRedraw" class="operation">void <b>unsuspendRedraw</b>(in unsigned long <var>suspendHandleID</var>)</dt><dd class="operation"><div>
 Cancels a specified suspendRedraw() by providing a unique
 suspend handle ID that was returned by a previous suspendRedraw() call.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>suspendHandleID</var></div> <div> A number which acts as a unique identifier for 
   the desired suspendRedraw() call. The number supplied must be a value 
   returned from a previous call to suspendRedraw(). If an invalid
   handle ID value is provided then the request to unsuspendRedraw() is
   silently ignored.
</div></li></ol></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__unsuspendRedrawAll" class="operation">void <b>unsuspendRedrawAll</b>()</dt><dd class="operation"><div>
 Cancels all currently active suspendRedraw() method calls. This method
 is most useful at the very end of a set of SVG DOM calls to ensure that
 all pending suspendRedraw() method calls have been cancelled. 
</div></dd>
<dt id="struct-__svg__SVGSVGElement__forceRedraw" class="operation">void <b>forceRedraw</b>()</dt><dd class="operation"><div>
 In rendering environments supporting interactivity, forces the user agent
 to immediately redraw all regions of the viewport that require updating. 
</div></dd>
<dt id="struct-__svg__SVGSVGElement__pauseAnimations" class="operation">void <b>pauseAnimations</b>()</dt><dd class="operation"><div>
 Suspends (i.e., pauses) all currently running animations that are defined
 within the SVG document fragment corresponding to this <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>
 element, causing the animation clock corresponding to this document
 fragment to stand still until it is unpaused.
</div></dd>
<dt id="struct-__svg__SVGSVGElement__unpauseAnimations" class="operation">void <b>unpauseAnimations</b>()</dt><dd class="operation"><div>
 Unsuspends (i.e., unpauses) currently running animations that are defined
 within the SVG document fragment, causing the animation clock to continue
 from the time at which it was suspended.
</div></dd>
<dt id="struct-__svg__SVGSVGElement__animationsPaused" class="operation">boolean <b>animationsPaused</b>()</dt><dd class="operation"><div>
 Returns true if this SVG document fragment is in a paused state.

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> Boolean indicating whether this SVG document fragment is in a
   paused state.
</div></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__getCurrentTime" class="operation">float <b>getCurrentTime</b>()</dt><dd class="operation"><div>
 Returns the current time in seconds relative to the start time for the
 current SVG document fragment.

 If <span class="dom-method-name">getCurrentTime</span> is called before
 the document timeline has begun (for example, by script running in a
 <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a>  element before the document's
 <a href="#interact-LoadEvent">SVGLoad</a> event is dispatched),
 then 0 is returned. 

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> The current time in seconds, or 0 if the document timeline has not yet begun.
</div></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__setCurrentTime" class="operation">void <b>setCurrentTime</b>(in float <var>seconds</var>)</dt><dd class="operation"><div>
 Adjusts the clock for this SVG document fragment, establishing a new
 current time.

 If <span class="dom-method-name">setCurrentTime</span> is called
 before the document timeline has begun (for example, by script running
 in a <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a> element before the document's
 <a href="#interact-LoadEvent">SVGLoad</a> event is dispatched),
 then the value of <var>seconds</var> in the last invocation of the method
 gives the time that the document will seek to once the document
 timeline has begun.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>seconds</var></div> <div> The new current time in seconds relative to the start
   time for the current SVG document fragment.
</div></li></ol></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__getIntersectionList" class="operation"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-536297177">NodeList</a> <b>getIntersectionList</b>(in <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <var>rect</var>, in <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <var>referenceElement</var>)</dt><dd class="operation"><div>
 Returns the list of graphics elements whose rendered content intersects
 the supplied rectangle. Each candidate graphics element is to
 be considered a match only if the same graphics element can be a 
 <a href="#interact-PointerEventsProperty">target of pointer events</a> 
 as defined in <a href="#interact-PointerEventsProperty"><span class="prop-name">‘pointer-events’</span></a> processing.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <var>rect</var></div> <div> The test rectangle. The values are in the <a href="#coords-InitialCoordinateSystem"><span class="svg-term">initial coordinate system</span></a> for the current <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.
</div></li><li class="parameter"><div><a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <var>referenceElement</var></div> <div> If not null, then any intersected element that 
   doesn't have the referenceElement as ancestor must not be included 
   in the returned NodeList.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A list of Elements whose content intersects the supplied
   rectangle.  This <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-536297177">NodeList</a> must be implemented identically to
   the <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-536297177">NodeList</a> interface as defined in DOM Level 2 Core
   ([<a href="#refs-ref-DOM2">DOM2</a>], section 1.2) with the
   exception that the interface is not
   <a href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#td-live">live</a>.
</div></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__getEnclosureList" class="operation"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-536297177">NodeList</a> <b>getEnclosureList</b>(in <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <var>rect</var>, in <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <var>referenceElement</var>)</dt><dd class="operation"><div>
 Returns the list of graphics elements whose rendered content is entirely
 contained within the supplied rectangle. Each candidate graphics element is to
 be considered a match only if the same graphics element can be a 
 <a href="#interact-PointerEventsProperty">target of pointer events</a> 
 as defined in <a href="#interact-PointerEventsProperty"><span class="prop-name">‘pointer-events’</span></a> processing.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <var>rect</var></div> <div> The test rectangle. The values are in the <a href="#coords-InitialCoordinateSystem"><span class="svg-term">initial coordinate system</span></a> for the current <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.
</div></li><li class="parameter"><div><a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <var>referenceElement</var></div> <div> If not null, then any intersected element that 
   doesn't have the referenceElement as ancestor must not be included 
   in the returned NodeList.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A list of Elements whose content is enclosed by the supplied
   rectangle.  This <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-536297177">NodeList</a> must be implemented identically to
   the <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-536297177">NodeList</a> interface as defined in DOM Level 2 Core
   ([<a href="#refs-ref-DOM2">DOM2</a>], section 1.2) with the
   exception that the interface is not
   <a href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#td-live">live</a>.
</div></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__checkIntersection" class="operation">boolean <b>checkIntersection</b>(in <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <var>element</var>, in <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <var>rect</var>)</dt><dd class="operation"><div>
 Returns true if the rendered content of the given element intersects the
 supplied rectangle. Each candidate graphics element is to
 be considered a match only if the same graphics element can be a 
 <a href="#interact-PointerEventsProperty">target of pointer events</a> 
 as defined in <a href="#interact-PointerEventsProperty"><span class="prop-name">‘pointer-events’</span></a> processing.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <var>element</var></div> <div> The element on which to perform the given test.
</div></li><li class="parameter"><div><a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <var>rect</var></div> <div> The test rectangle. The values are in the <a href="#coords-InitialCoordinateSystem"><span class="svg-term">initial coordinate system</span></a> for the current <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> True or false, depending on whether the given element intersects
   the supplied rectangle.
</div></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__checkEnclosure" class="operation">boolean <b>checkEnclosure</b>(in <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <var>element</var>, in <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <var>rect</var>)</dt><dd class="operation"><div>
 Returns true if the rendered content of the given element is entirely
 contained within the supplied rectangle. Each candidate graphics element is to
 be considered a match only if the same graphics element can be a 
 <a href="#interact-PointerEventsProperty">target of pointer events</a> 
 as defined in <a href="#interact-PointerEventsProperty"><span class="prop-name">‘pointer-events’</span></a> processing.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <var>element</var></div> <div> The element on which to perform the given test.
</div></li><li class="parameter"><div><a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <var>rect</var></div> <div> The test rectangle. The values are in the <a href="#coords-InitialCoordinateSystem"><span class="svg-term">initial coordinate system</span></a> for the current <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> True or false, depending on whether the given element is enclosed
   by the supplied rectangle.
</div></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__deselectAll" class="operation">void <b>deselectAll</b>()</dt><dd class="operation"><div>
 Unselects any selected objects, including any selections of text strings
 and type-in bars.
</div></dd>
<dt id="struct-__svg__SVGSVGElement__createSVGNumber" class="operation"><a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <b>createSVGNumber</b>()</dt><dd class="operation"><div>
 Creates an <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> object outside of any document trees. The
 object is initialized to a value of zero.

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> An <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> object.
</div></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__createSVGLength" class="operation"><a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <b>createSVGLength</b>()</dt><dd class="operation"><div>
 Creates an <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> object outside of any document trees. The
 object is initialized to the value of 0 user units. 

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> An <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> object.
</div></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__createSVGAngle" class="operation"><a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> <b>createSVGAngle</b>()</dt><dd class="operation"><div>
 Creates an <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> object outside of any document trees. The
 object is initialized to the value 0 degrees (unitless). 

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> An <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> object.
</div></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__createSVGPoint" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <b>createSVGPoint</b>()</dt><dd class="operation"><div>
 Creates an <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> object outside of any document trees. The
 object is initialized to the point (0,0) in the user coordinate system.

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> An <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> object.
</div></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__createSVGMatrix" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <b>createSVGMatrix</b>()</dt><dd class="operation"><div>
 Creates an <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> object outside of any document trees. The
 object is initialized to the identity matrix.

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> An <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> object.
</div></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__createSVGRect" class="operation"><a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <b>createSVGRect</b>()</dt><dd class="operation"><div>
 Creates an <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> object outside of any document trees. The
 object is initialized such that all values are set to 0 user units.

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> An <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> object.
</div></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__createSVGTransform" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <b>createSVGTransform</b>()</dt><dd class="operation"><div>
 Creates an <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> object outside of any document trees. The
 object is initialized to an identity matrix transform
 (SVG_TRANSFORM_MATRIX).

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> An <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> object.
</div></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__createSVGTransformFromMatrix" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <b>createSVGTransformFromMatrix</b>(in <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <var>matrix</var>)</dt><dd class="operation"><div>
 <p>
 Creates an <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> object outside of any document trees. The
 object is initialized to the given matrix transform (i.e.,
 SVG_TRANSFORM_MATRIX).  The values from the parameter <var>matrix</var>
 are copied, the <var>matrix</var> parameter is not adopted as
 <a class="idlattr" href="#coords-__svg__SVGTransform__matrix">SVGTransform::matrix</a>.
 </p>

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <var>matrix</var></div> <div> The transform matrix.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> An <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> object.
</div></dd></dl></dd>
<dt id="struct-__svg__SVGSVGElement__getElementById" class="operation"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-745549614">Element</a> <b>getElementById</b>(in DOMString <var>elementId</var>)</dt><dd class="operation"><div>
 Searches this SVG document fragment (i.e., the search is restricted to a
 subset of the document tree) for an Element whose id is given by
 <var>elementId</var>. If an Element is found, that Element is returned. If
 no such element exists, returns null. Behavior is not defined if more
 than one element has this id.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>DOMString <var>elementId</var></div> <div> The unique id value for an element.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The matching element.
</div></dd></dl></dd></dl></dd></dl>


<h3 id="struct-InterfaceSVGGElement">5.11.3 Interface SVGGElement</h3>



 The <a class="idlinterface" href="#struct-InterfaceSVGSVGElement">SVGSVGElement</a> interface corresponds to the <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element.
<pre class="idl">interface <b>SVGGElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
};</pre>


<h3 id="struct-InterfaceSVGDefsElement">5.11.4 Interface SVGDefsElement</h3>



 The <a class="idlinterface" href="#struct-InterfaceSVGDefsElement">SVGDefsElement</a> interface corresponds to the <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>
 element.
<pre class="idl">interface <b>SVGDefsElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
};</pre>


<h3 id="struct-InterfaceSVGDescElement">5.11.5 Interface SVGDescElement</h3>



 The <a class="idlinterface" href="#struct-InterfaceSVGDescElement">SVGDescElement</a> interface corresponds to the <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>
 element.
<pre class="idl">interface <b>SVGDescElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
};</pre>


<h3 id="struct-InterfaceSVGTitleElement">5.11.6 Interface SVGTitleElement</h3>



 The <a class="idlinterface" href="#struct-InterfaceSVGTitleElement">SVGTitleElement</a> interface corresponds to the <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a>
 element.
<pre class="idl">interface <b>SVGTitleElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
};</pre>


<h3 id="struct-InterfaceSVGSymbolElement">5.11.7 Interface SVGSymbolElement</h3>



 The <a class="idlinterface" href="#struct-InterfaceSVGSymbolElement">SVGSymbolElement</a> interface corresponds to the <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>
 element.
<pre class="idl">interface <b>SVGSymbolElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGFitToViewBox">SVGFitToViewBox</a> {
};</pre>


<h3 id="struct-InterfaceSVGUseElement">5.11.8 Interface SVGUseElement</h3>



 The <a class="idlinterface" href="#struct-InterfaceSVGUseElement">SVGUseElement</a> interface corresponds to the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element.
<pre class="idl">interface <b>SVGUseElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGUseElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGUseElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGUseElement__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGUseElement__height">height</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <a href="#struct-__svg__SVGUseElement__instanceRoot">instanceRoot</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <a href="#struct-__svg__SVGUseElement__animatedInstanceRoot">animatedInstanceRoot</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="struct-__svg__SVGUseElement__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-UseElementXAttribute"><span class="attr-name">‘x’</span></a> on the given <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element.
</div></dd>
<dt id="struct-__svg__SVGUseElement__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-UseElementYAttribute"><span class="attr-name">‘y’</span></a> on the given <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element.
</div></dd>
<dt id="struct-__svg__SVGUseElement__width" class="attribute"><b>width</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-UseElementWidthAttribute"><span class="attr-name">‘width’</span></a> on the given <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>
 element.
</div></dd>
<dt id="struct-__svg__SVGUseElement__height" class="attribute"><b>height</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-UseElementHeightAttribute"><span class="attr-name">‘height’</span></a> on the given <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>
 element.
</div></dd>
<dt id="struct-__svg__SVGUseElement__instanceRoot" class="attribute"><b>instanceRoot</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a>)</span></dt><dd class="attribute"><div>
 The root of the "instance tree".  See description of
 <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> for a discussion on the instance tree.
</div></dd>
<dt id="struct-__svg__SVGUseElement__animatedInstanceRoot" class="attribute"><b>animatedInstanceRoot</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a>)</span></dt><dd class="attribute"><div>
 If the <a href="#struct-UseElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> attribute is being animated, contains the current
 animated root of the "instance tree".  If the <a href="#struct-UseElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> attribute
 is not currently being animated, contains the same value as
 <a class="idlattr" href="#struct-__svg__SVGUseElement__instanceRoot">instanceRoot</a>.  See description of <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a>
 for a discussion on the instance tree.
</div></dd></dl></dd></dl>


<h3 id="struct-InterfaceSVGElementInstance">5.11.9 Interface SVGElementInstance</h3>


 <p>For each <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element, the SVG DOM maintains a shadow tree (the
 "instance tree") of objects of type <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a>. An
 <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> represents a single node in the instance tree.
 The root object in the instance tree is pointed to by the
 <a class="idlattr" href="#struct-__svg__SVGUseElement__instanceRoot">instanceRoot</a> attribute on the
 <a class="idlinterface" href="#struct-InterfaceSVGUseElement">SVGUseElement</a> object for the corresponding <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element.</p>

 <p>If the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element references a simple graphics element such as
 a <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, then there is only a single <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a>
 object, and the <a class="idlattr" href="#struct-__svg__SVGElementInstance__correspondingElement">correspondingElement</a> attribute on this
 <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> object is the <a class="idlinterface" href="#shapes-InterfaceSVGRectElement">SVGRectElement</a> that
 corresponds to the referenced <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element.</p>

 <p>If the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element references a <a href="#struct-GElement"><span class="element-name">‘g’</span></a> which contains two
 <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> elements, then the instance tree contains three
 <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> objects, a root <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> object
 whose <a class="idlattr" href="#struct-__svg__SVGElementInstance__correspondingElement">correspondingElement</a> is the <a class="idlinterface" href="#struct-InterfaceSVGGElement">SVGGElement</a> object for the
 <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, and then two child <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> objects, each of
 which has its <a class="idlattr" href="#struct-__svg__SVGElementInstance__correspondingElement">correspondingElement</a> that is an <a class="idlinterface" href="#shapes-InterfaceSVGRectElement">SVGRectElement</a>
 object.</p>

 <p>If the referenced object is itself a <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>, or if there are
 <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> subelements within the referenced object, the instance tree
 will contain recursive expansion of the indirect references to form a
 complete tree. For example, if a <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element references a
 <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, and the <a href="#struct-GElement"><span class="element-name">‘g’</span></a> itself contains a <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>, and that
 <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> references a <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, then the instance tree for the
 original (outermost) <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> will consist of a hierarchy of
 <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> objects, as follows:</p>

<pre>SVGElementInstance #1 (parentNode=null, firstChild=#2, correspondingElement is the 'g')
  SVGElementInstance #2 (parentNode=#1, firstChild=#3, correspondingElement is the other 'use')
    SVGElementInstance #3 (parentNode=#2, firstChild=null, correspondingElement is the 'rect')
</pre>
<pre class="idl">interface <b>SVGElementInstance</b> : <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget">EventTarget</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <a href="#struct-__svg__SVGElementInstance__correspondingElement">correspondingElement</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGUseElement">SVGUseElement</a> <a href="#struct-__svg__SVGElementInstance__correspondingUseElement">correspondingUseElement</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <a href="#struct-__svg__SVGElementInstance__parentNode">parentNode</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGElementInstanceList">SVGElementInstanceList</a> <a href="#struct-__svg__SVGElementInstance__childNodes">childNodes</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <a href="#struct-__svg__SVGElementInstance__firstChild">firstChild</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <a href="#struct-__svg__SVGElementInstance__lastChild">lastChild</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <a href="#struct-__svg__SVGElementInstance__previousSibling">previousSibling</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <a href="#struct-__svg__SVGElementInstance__nextSibling">nextSibling</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="struct-__svg__SVGElementInstance__correspondingElement" class="attribute first-child"><b>correspondingElement</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>)</span></dt><dd class="attribute"><div>
 The corresponding element to which this object is an instance. For
 example, if a <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element references a <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element,
 then an <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> is created, with its
 <a class="idlattr" href="#struct-__svg__SVGElementInstance__correspondingElement">correspondingElement</a> being the <a class="idlinterface" href="#shapes-InterfaceSVGRectElement">SVGRectElement</a> object
 for the <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element.
</div></dd>
<dt id="struct-__svg__SVGElementInstance__correspondingUseElement" class="attribute"><b>correspondingUseElement</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#struct-InterfaceSVGUseElement">SVGUseElement</a>)</span></dt><dd class="attribute"><div>
 The corresponding <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element to which this
 <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> object belongs. When <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> elements are
 nested (e.g., a <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> references another <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> which
 references a graphics element such as a <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>), then the
 <a class="idlattr" href="#struct-__svg__SVGElementInstance__correspondingUseElement">correspondingUseElement</a> is the outermost <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> (i.e., the
 one which indirectly references the <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, not the one with the
 direct reference).
</div></dd>
<dt id="struct-__svg__SVGElementInstance__parentNode" class="attribute"><b>parentNode</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a>)</span></dt><dd class="attribute"><div>
 The parent of this <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> within the instance tree.
 All <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> objects have a parent except the
 <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> which corresponds to the element which was
 directly referenced by the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element, in which case
 <a class="idlattr" href="#struct-__svg__SVGElementInstance__parentNode">parentNode</a> is null.
</div></dd>
<dt id="struct-__svg__SVGElementInstance__childNodes" class="attribute"><b>childNodes</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#struct-InterfaceSVGElementInstanceList">SVGElementInstanceList</a>)</span></dt><dd class="attribute"><div>
 An <a class="idlinterface" href="#struct-InterfaceSVGElementInstanceList">SVGElementInstanceList</a> that contains all children of this
 <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> within the instance tree. If there are no
 children, this is an <a class="idlinterface" href="#struct-InterfaceSVGElementInstanceList">SVGElementInstanceList</a> containing no entries
 (i.e., an empty list).
</div></dd>
<dt id="struct-__svg__SVGElementInstance__firstChild" class="attribute"><b>firstChild</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a>)</span></dt><dd class="attribute"><div>
 The first child of this <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> within the instance
 tree. If there is no such <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a>, this returns null.
</div></dd>
<dt id="struct-__svg__SVGElementInstance__lastChild" class="attribute"><b>lastChild</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a>)</span></dt><dd class="attribute"><div>
 The last child of this <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> within the instance
 tree. If there is no such <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a>, this returns null.
</div></dd>
<dt id="struct-__svg__SVGElementInstance__previousSibling" class="attribute"><b>previousSibling</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a>)</span></dt><dd class="attribute"><div>
 The <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> immediately preceding this
 <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a>. If there is no such <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a>,
 this returns null.
</div></dd>
<dt id="struct-__svg__SVGElementInstance__nextSibling" class="attribute"><b>nextSibling</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a>)</span></dt><dd class="attribute"><div>
 The <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> immediately following this
 <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a>. If there is no such <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a>,
 this returns null.
</div></dd></dl></dd></dl>

<h3 id="struct-InterfaceSVGElementInstanceList">5.11.10 Interface SVGElementInstanceList</h3>


 The <a class="idlinterface" href="#struct-InterfaceSVGElementInstanceList">SVGElementInstanceList</a> interface provides the abstraction of an
 ordered collection of <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> objects, without defining
 or constraining how this collection is implemented.
<pre class="idl">interface <b>SVGElementInstanceList</b> {

  readonly attribute unsigned long <a href="#struct-__svg__SVGElementInstanceList__length">length</a>;

  <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <a href="#struct-__svg__SVGElementInstanceList__item">item</a>(in unsigned long index);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="struct-__svg__SVGElementInstanceList__length" class="attribute first-child"><b>length</b><span class="idl-type-parenthetical"> (readonly unsigned long)</span></dt><dd class="attribute"><div>
 The number of <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> objects in the list. The range
 of valid child indices is 0 to <a class="idlattr" href="#struct-__svg__SVGElementInstanceList__length">length</a>-1 inclusive.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="struct-__svg__SVGElementInstanceList__item" class="operation first-child"><a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <b>item</b>(in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Returns the <var>index</var>th item in the collection. If
 <var>index</var> is greater than or equal to the number of nodes in the
 list, this returns null.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>index</var></div> <div> Index into the collection.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> object at the <var>index</var>th
   position in the <a class="idlinterface" href="#struct-InterfaceSVGElementInstanceList">SVGElementInstanceList</a>, or null if that is not
   a valid index.
</div></dd></dl></dd></dl></dd></dl>

<h3 id="struct-InterfaceSVGImageElement">5.11.11 Interface SVGImageElement</h3>



 The <a class="idlinterface" href="#struct-InterfaceSVGImageElement">SVGImageElement</a> interface corresponds to the <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>
 element.
<pre class="idl">interface <b>SVGImageElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGImageElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGImageElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGImageElement__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGImageElement__height">height</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGAnimatedPreserveAspectRatio">SVGAnimatedPreserveAspectRatio</a> <a href="#struct-__svg__SVGImageElement__preserveAspectRatio">preserveAspectRatio</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="struct-__svg__SVGImageElement__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-ImageElementXAttribute"><span class="attr-name">‘x’</span></a> on the given <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element.
</div></dd>
<dt id="struct-__svg__SVGImageElement__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-ImageElementYAttribute"><span class="attr-name">‘y’</span></a> on the given <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element.
</div></dd>
<dt id="struct-__svg__SVGImageElement__width" class="attribute"><b>width</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-ImageElementWidthAttribute"><span class="attr-name">‘width’</span></a> on the given <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element.
</div></dd>
<dt id="struct-__svg__SVGImageElement__height" class="attribute"><b>height</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-ImageElementHeightAttribute"><span class="attr-name">‘height’</span></a> on the given <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element.
</div></dd>
<dt id="struct-__svg__SVGImageElement__preserveAspectRatio" class="attribute"><b>preserveAspectRatio</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGAnimatedPreserveAspectRatio">SVGAnimatedPreserveAspectRatio</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> on the given <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element.
</div></dd></dl></dd></dl>


<h3 id="struct-InterfaceSVGSwitchElement">5.11.12 Interface SVGSwitchElement</h3>



 The <a class="idlinterface" href="#struct-InterfaceSVGSwitchElement">SVGSwitchElement</a> interface corresponds to the <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>
 element.
<pre class="idl">interface <b>SVGSwitchElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
};</pre>


<h3 id="struct-InterfaceGetSVGDocument">5.11.13 Interface GetSVGDocument</h3>


 <p>This interface provides access to an SVG document embedded by reference
 in another DOM-based language. The expectation is that the interface is
 implemented on DOM objects that allow such SVG document references, such as
 the DOM <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-745549614">Element</a> object that corresponds to an HTML
 <span class="element-name">‘object’</span> element. Such DOM objects are
 often also required to implement the <a class="idlinterface" href="">EmbeddingElement</a> defined in the
 Window specification [<a href="#refs-ref-WINDOW">WINDOW</a>].</p>

 <p>This interface is deprecated and may be dropped from future versions of
 the SVG specification. Authors are suggested to use the
 <code>contentDocument</code> attribute on the <a class="idlinterface" href="">EmbeddingElement</a>
 interface to obtain a referenced SVG document, if that interface is
 available.</p>
<pre class="idl">interface <b>GetSVGDocument</b> {
  <a class="idlinterface" href="#struct-InterfaceSVGDocument">SVGDocument</a> <a href="#struct-__svg__GetSVGDocument__getSVGDocument">getSVGDocument</a>();
};</pre><dl class="interface"><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="struct-__svg__GetSVGDocument__getSVGDocument" class="operation first-child"><a class="idlinterface" href="#struct-InterfaceSVGDocument">SVGDocument</a> <b>getSVGDocument</b>()</dt><dd class="operation"><div>
 <p> This method must return the <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#i-Document">Document</a> object embedded content
 in an embedding element, or null if there is no document.</p>

 <p>Note that this is equivalent to fetching the value of the
 <code>EmbeddingElement::contentDocument</code> attribute of the embedding
 element, if the <a class="idlinterface" href="">EmbeddingElement</a> interface is also implemented.
 The author is advised to check that the document element of the returned
 <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#i-Document">Document</a> is indeed an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element instead of assuming
 that that will always be the case.</p>

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> The <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#i-Document">Document</a> object for the referenced document, or null
   if there is no document.
</div></dd></dl></dd></dl></dd></dl>

</div><hr class="chapter-divider" />
<div id="chapter-types">

<h1>4 Basic Data Types and Interfaces</h1><h2 id="types-toc">Contents</h2><ul class="toc">
<li><a href="#types-syntax">4.1 Syntax</a></li>
<li><a href="#types-BasicDataTypes">4.2 Basic data types</a></li>
<li><a href="#types-Precision">4.3 Real number precision</a></li>
<li><a href="#types-ColorKeywords">4.4 Recognized color keyword names</a></li>
<li><a href="#types-BasicDOMInterfaces">4.5 Basic DOM interfaces</a><ul class="toc">
<li><a href="#types-InterfaceSVGElement">4.5.1 Interface SVGElement</a></li>
<li><a href="#types-InterfaceSVGAnimatedBoolean">4.5.2 Interface SVGAnimatedBoolean</a></li>
<li><a href="#types-InterfaceSVGAnimatedString">4.5.3 Interface SVGAnimatedString</a></li>
<li><a href="#types-InterfaceSVGStringList">4.5.4 Interface SVGStringList</a></li>
<li><a href="#types-InterfaceSVGAnimatedEnumeration">4.5.5 Interface SVGAnimatedEnumeration</a></li>
<li><a href="#types-InterfaceSVGAnimatedInteger">4.5.6 Interface SVGAnimatedInteger</a></li>
<li><a href="#types-InterfaceSVGNumber">4.5.7 Interface SVGNumber</a></li>
<li><a href="#types-InterfaceSVGAnimatedNumber">4.5.8 Interface SVGAnimatedNumber</a></li>
<li><a href="#types-InterfaceSVGNumberList">4.5.9 Interface SVGNumberList</a></li>
<li><a href="#types-InterfaceSVGAnimatedNumberList">4.5.10 Interface SVGAnimatedNumberList</a></li>
<li><a href="#types-InterfaceSVGLength">4.5.11 Interface SVGLength</a></li>
<li><a href="#types-InterfaceSVGAnimatedLength">4.5.12 Interface SVGAnimatedLength</a></li>
<li><a href="#types-InterfaceSVGLengthList">4.5.13 Interface SVGLengthList</a></li>
<li><a href="#types-InterfaceSVGAnimatedLengthList">4.5.14 Interface SVGAnimatedLengthList</a></li>
<li><a href="#types-InterfaceSVGAngle">4.5.15 Interface SVGAngle</a></li>
<li><a href="#types-InterfaceSVGAnimatedAngle">4.5.16 Interface SVGAnimatedAngle</a></li>
<li><a href="#types-InterfaceSVGColor">4.5.17 Interface SVGColor</a></li>
<li><a href="#types-InterfaceSVGICCColor">4.5.18 Interface SVGICCColor</a></li>
<li><a href="#types-InterfaceSVGRect">4.5.19 Interface SVGRect</a></li>
<li><a href="#types-InterfaceSVGAnimatedRect">4.5.20 Interface SVGAnimatedRect</a></li>
<li><a href="#types-InterfaceSVGUnitTypes">4.5.21 Interface SVGUnitTypes</a></li>
<li><a href="#types-InterfaceSVGStylable">4.5.22 Interface SVGStylable</a></li>
<li><a href="#types-InterfaceSVGLocatable">4.5.23 Interface SVGLocatable</a></li>
<li><a href="#types-InterfaceSVGTransformable">4.5.24 Interface SVGTransformable</a></li>
<li><a href="#types-InterfaceSVGTests">4.5.25 Interface SVGTests</a></li>
<li><a href="#types-InterfaceSVGLangSpace">4.5.26 Interface SVGLangSpace</a></li>
<li><a href="#types-InterfaceSVGExternalResourcesRequired">4.5.27 Interface SVGExternalResourcesRequired</a></li>
<li><a href="#types-InterfaceSVGFitToViewBox">4.5.28 Interface SVGFitToViewBox</a></li>
<li><a href="#types-InterfaceSVGZoomAndPan">4.5.29 Interface SVGZoomAndPan</a></li>
<li><a href="#types-InterfaceSVGViewSpec">4.5.30 Interface SVGViewSpec</a></li>
<li><a href="#types-InterfaceSVGURIReference">4.5.31 Interface SVGURIReference</a></li>
<li><a href="#types-InterfaceSVGCSSRule">4.5.32 Interface SVGCSSRule</a></li>
<li><a href="#types-InterfaceSVGRenderingIntent">4.5.33 Interface SVGRenderingIntent</a></li></ul></li></ul>

<h2 id="types-syntax">4.1 Syntax</h2>

  <p>The EBNF grammar is as used in the <a href="http://www.w3.org/TR/REC-xml/#sec-notation">XML specification</a>,
  with the addition of <strong>~</strong>, a <em>case-insensitive literal</em>: characters in the ASCII range (only) are declared to be case-insensitive. For example, ~"Hello" will match (H|h)(e|e)(l|L)(l|L)(o|O). This makes the productions much easier to read.</p>
  <table><tr><td>?</td><td>optional, zero or one</td></tr><tr><td>+</td><td>one or more</td></tr><tr><td>*</td><td>zero or more</td></tr><tr><td>|</td><td>alternation</td></tr><tr><td>"string"</td><td>literal</td></tr><tr><td>~"string"</td><td>case-insensitive literal</td></tr><tr><td>[]</td><td>a character range</td></tr><tr><td>[^]</td><td>excluded character range</td></tr><tr><td>()</td><td>grouping</td></tr></table>

<h2 id="types-BasicDataTypes">4.2 Basic data types</h2>

<p>This section defines a number of common data types used in the definitions
of SVG properties and attributes.  Some data types that are not referenced by
multiple properties and attributes are defined inline in subsequent chapters.</p>
  
  <p>Note that, as noted below, the specification of some types is different for CSS property values in style sheets (in the <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attribute,
    <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a> element or an external style sheet) than it is for for XML attribute values (including <a href="#intro-TermPresentationAttribute"><span class="svg-term">presentation attribute</span></a>s). This is due to restrictions in the CSS grammar. For example, scientific notation is allowed in attributes, including presentation attributes, but not in style sheets.</p>

<dl class="definitions"><dt id="types-DataTypeAngle"><span class="SVG-Term">&lt;angle&gt;</span></dt><dd>
    <p>Angles are specified in one of two ways depending upon whether
    they are used in CSS <a href="#intro-TermProperty"><span class="svg-term">property</span></a> syntax or SVG <a href="#intro-TermPresentationAttribute"><span class="svg-term">presentation attribute</span></a>
    syntax:</p>
    <ul><li>
	<p>When an &lt;angle&gt; is used in a style sheet or with a
	<a href="#intro-TermProperty"><span class="svg-term">property</span></a> in a <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attribute, the
	syntax must match the following pattern:</p>
	<pre class="grammar"><span id="types-Angle">angle</span> ::= <a href="#types-DataTypeNumber">number</a> (~"deg" | ~"grad" | ~"rad")?</pre>
	<p>where <span class="prop-value">deg</span> indicates degrees,
	<span class="prop-value">grad</span> indicates grads and
	<span class="prop-value">rad</span> indicates radians.
	The unit identifier may be in lower (recommended) or upper case.</p>
	<p>For properties defined in CSS2
	[<a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/">CSS2</a>],
	an angle unit identifier must be provided (for non-zero
	values).  For SVG-specific <a href="#intro-TermProperty"><span class="svg-term">properties</span></a> the angle unit
	identifier is optional.  If a unit is not provided, the angle
	value is assumed to be in degrees.</p>
      </li><li>
	<p>When an &lt;angle&gt; is used in an SVG <a href="#intro-TermPresentationAttribute"><span class="svg-term">presentation attribute</span></a>,
	the syntax must match the following pattern:</p>
	<pre class="grammar">angle ::= <a href="#types-DataTypeNumber">number</a> ("deg" | "grad" | "rad")?</pre>
	<p>The unit identifier, if present, must be in lower case; if
	not present, the angle value is assumed to be in degrees.</p>
      </li></ul>
    <p>In the SVG DOM, &lt;angle&gt; values are represented using
      <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> or <a class="idlinterface" href="#types-InterfaceSVGAnimatedAngle">SVGAnimatedAngle</a> objects.</p>
  </dd><dt id="types-DataTypeAnything"><span class="SVG-Term">&lt;anything&gt;</span></dt><dd>
    <p>The basic type &lt;anything&gt; is a sequence of zero or more characters.
    Specifically:</p>
    <pre class="grammar"><span id="types-Anything">anything</span> ::= <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#NT-Char">Char</a>*</pre>
    <p>where <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#NT-Char">Char</a> is the
    production for a character, as defined in XML 1.0
    ([<a href="#refs-ref-XML10">XML10</a>], section 2.2).</p>
  </dd><dt id="types-DataTypeColor"><span class="SVG-Term">&lt;color&gt;</span></dt><dd>
    <p>The basic type &lt;color&gt; is a CSS2 compatible specification for a
      color in the sRGB color space [<a href="#refs-ref-SRGB">SRGB</a>].
      &lt;color&gt; applies to SVG's use of the <a href="#color-ColorProperty"><span class="prop-name">‘color’</span></a> property and
      is a component of the definitions of properties <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>,
      <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>, <a href="#pservers-StopColorProperty"><span class="prop-name">‘stop-color’</span></a>, <a href="#filters-FloodColorProperty"><span class="prop-name">‘flood-color’</span></a> and
      <a href="#filters-LightingColorProperty"><span class="prop-name">‘lighting-color’</span></a>, which also offer optional ICC-based color
      specifications.</p>
    <p>SVG supports all of the syntax alternatives for &lt;color&gt; defined in
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#value-def-color">CSS2
        syntax and basic data types</a> ([<a href="#refs-ref-CSS2">CSS2</a>],
      section 4.3.6), with the exception that SVG allows an expanded list of
      <a href="#types-ColorKeywords">recognized color keywords names</a>.</p>
    <p>A &lt;color&gt; is either a keyword (see
      <a href="#types-ColorKeywords">Recognized color keyword names</a>) or a
      numerical RGB specification.</p>
    <p>In addition to these color keywords, users may specify
      keywords that correspond to the colors used by objects in the
      user's environment. The normative definition of these
      keywords is found in
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/ui.html#system-colors">User preferences
        for colors</a> ([<a href="#refs-ref-CSS2">CSS2</a>], section 18.2).</p>
    <p>The format of an RGB value in hexadecimal notation is a "#"
      immediately followed by either three or six hexadecimal
      characters. The three-digit RGB notation (#rgb) is converted
      into six-digit form (#rrggbb) by replicating digits, not by
      adding zeros. For example, <span class="attr-value">#fb0</span>
      expands to <span class="attr-value">#ffbb00</span>. This
      ensures that white (<span class="attr-value">#ffffff</span>) can be
      specified with the short notation (<span class="attr-value">#fff</span>)
      and removes any dependencies on the color depth of the display. 
      
      The format of an RGB value in the
      functional notation is an RGB start-function  followed by a comma-separated
      list of three numerical values (either three integer values
      or three percentage values) followed by ")". 
      An RGB start-function is the case-insensitive string "rgb(", for example "RGB(" or "rGb(".
      For compatibility, the all-lowercase form "rgb(" is preferred.
      
      The integer
      value 255 corresponds to 100%, and to F or FF in the
      hexadecimal notation: <span class="attr-value">rgb(255,255,255)</span>
      = <span class="attr-value">rgb(100%,100%,100%)</span>
      = <span class="attr-value">#FFF</span>. White space characters are allowed
      around the numerical values. All RGB colors are specified in the sRGB
      color space [<a href="#refs-ref-SRGB">SRGB</a>]. Using
      sRGB provides an unambiguous and objectively measurable definition
      of the color, which can be related to international standards
      (see [<a href="#refs-ref-COLORIMETRY">COLORIMETRY</a>]).</p>
    <pre class="grammar"><span id="types-Color">color</span>    ::= "#" <a href="#types-HexDigit">hexdigit</a> <a href="#types-HexDigit">hexdigit</a> <a href="#types-HexDigit">hexdigit</a> (<a href="#types-HexDigit">hexdigit</a> <a href="#types-HexDigit">hexdigit</a> <a href="#types-HexDigit">hexdigit</a>)?
             | "rgb(" <a href="#types-WSP">wsp</a>* <a href="#types-Integer">integer</a> <a href="#types-Comma">comma</a> <a href="#types-Integer">integer</a> <a href="#types-Comma">comma</a> <a href="#types-Integer">integer</a> <a href="#types-WSP">wsp</a>* ")"
             | "rgb(" <a href="#types-WSP">wsp</a>* <a href="#types-Integer">integer</a> "%" <a href="#types-Comma">comma</a> <a href="#types-Integer">integer</a> "%" <a href="#types-Comma">comma</a> <a href="#types-Integer">integer</a> "%" <a href="#types-WSP">wsp</a>* ")"
             | <var>color-keyword</var>
<span id="types-HexDigit">hexdigit</span> ::= [0-9A-Fa-f]
<span id="types-Comma">comma</span>    ::= <a href="#types-WSP">wsp</a>* "," <a href="#types-WSP">wsp</a>*
    </pre>
    <p>where <var>color-keyword</var> matches (case insensitively) one of the
      color keywords listed in <a href="#types-ColorKeywords">Recognized color keyword names</a>
      below, or one of the system color keywords listed in
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/ui.html#system-colors">User preferences
        for colors</a> ([<a href="#refs-ref-CSS2">CSS2</a>], section 18.2).</p>
    <p>The corresponding SVG DOM interface definitions for
      &lt;color&gt; are defined in
      <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html">Document Object Model CSS</a>;
      in particular, see <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-RGBColor">RGBColor</a>
      ([<a href="#refs-ref-DOM2STYLE">DOM2STYLE</a>], section 2.2).
      SVG's extension to color, including the ability to specify ICC-based colors,
      are represented using DOM interface <a class="idlinterface" href="#types-InterfaceSVGColor">SVGColor</a>.</p>
  </dd><dt id="types-DataTypeCoordinate"><span class="SVG-Term">&lt;coordinate&gt;</span></dt><dd>
    <p>A &lt;coordinate&gt; is a length in the user coordinate system that is
      the given distance from the origin of the user coordinate system along the
      relevant axis (the x-axis for X coordinates, the y-axis for Y
      coordinates).  Its syntax is the same as that for
      <a href="#types-DataTypeLength">&lt;length&gt;</a>.</p>
    <pre>coordinate ::= <a href="#types-Length">length</a></pre>
    <p>Within the SVG DOM, a &lt;coordinate&gt; is represented as
      an <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> or an <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>.</p>
  </dd><dt id="types-DataTypeFrequency"><span class="SVG-Term">&lt;frequency&gt;</span></dt><dd>
    <p>Frequency values are used with aural properties. As defined in
      CSS2, a frequency value is a &lt;number&gt; immediately followed
      by a frequency unit identifier.  The frequency unit identifiers
      are:</p>
    <ul><li><span class="attr-value">Hz</span>: Hertz</li><li><span class="attr-value">kHz</span>: kilo Hertz</li></ul>
    <p>Frequency values may not be negative.</p>
    <p>In the SVG DOM, &lt;frequency&gt; values are represented
      using the <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSPrimitiveValue">CSSPrimitiveValue</a>
      interface defined in <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html">Document Object Model CSS</a>
      ([<a href="#refs-ref-DOM2STYLE">DOM2STYLE</a>], section 2.2).</p>
  </dd><dt id="types-DataTypeFuncIRI"><span class="SVG-Term">&lt;FuncIRI&gt;</span></dt><dd>Functional notation for an <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a>: "url(" <a href="#types-DataTypeIRI">&lt;IRI&gt;</a> ")".
  </dd><dt id="types-DataTypeICCColor"><span class="SVG-Term">&lt;icccolor&gt;</span></dt><dd>
    <p>An &lt;icccolor&gt; is an ICC color specification.  In SVG 1.1,
    an ICC color specification is given by a name, which references
    a <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a> element, and one or more color component
    values.  The grammar is as follows:</p>
    <pre class="grammar"><span id="types-ICCColor">icccolor</span> ::= "icc-color(" <a href="#types-Name">name</a> (<a href="#types-CommaWSP">comma-wsp</a> <a href="#types-Number">number</a>)+ ")"
name     ::= [^,()#x20#x9#xD#xA] /* any char except ",", "(", ")" or wsp */</pre>
    <p>The corresponding SVG DOM interface for &lt;icccolor&gt; is
    <a class="idlinterface" href="#types-InterfaceSVGICCColor">SVGICCColor</a>.</p>
  </dd><dt id="types-DataTypeInteger"><span class="SVG-Term">&lt;integer&gt;</span></dt><dd>
    <p>An &lt;integer&gt; is specified as an optional sign character ("+" or
    "-") followed by one or more digits "0" to "9":</p>
    <pre class="grammar"><span id="types-Integer">integer</span> ::= [+-]? [0-9]+</pre>
    <p>If the sign character is not present, the number is non-negative.</p>
    <p>Unless stated otherwise for a particular attribute or
    <a href="#intro-TermProperty"><span class="svg-term">property</span></a>, the range for an &lt;integer&gt; encompasses (at a
    minimum) -2147483648 to 2147483647.</p>
    <p>Within the SVG DOM, an &lt;integer&gt; is represented as a
    <span class="DOMInterfaceName">long</span> or an
    <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a>.</p>
  </dd><dt id="types-DataTypeIRI"><span class="SVG-Term">&lt;IRI&gt;</span></dt><dd>
    <p>
      An Internationalized Resource Identifier (see <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a>).
      For the specification of <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> references in SVG, see
      <a href="#linking-IRIReference">IRI references</a>.
    </p>
  </dd><dt id="types-DataTypeLength"><span class="SVG-Term">&lt;length&gt;</span></dt><dd>

    <p>A length is a distance measurement, given as a number along with a unit
    which may be optional. Lengths are specified in one of two ways depending
    upon whether they are used in CSS <a href="#intro-TermProperty"><span class="svg-term">property</span></a> syntax or SVG
    <a href="#intro-TermPresentationAttribute"><span class="svg-term">presentation attribute</span></a> syntax:</p>
    <ul><li>
      <p>When a &lt;length&gt; is used in a style sheet or with a
      <a href="#intro-TermProperty"><span class="svg-term">property</span></a> in a <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attribute, the
      syntax must match the following pattern:</p>
      <pre class="grammar"><span id="types-Length">length</span> ::= <a href="#types-DataTypeNumber">number</a> (~"em" | ~"ex" | ~"px" | ~"in" | ~"cm" | ~"mm" | ~"pt" | ~"pc")?</pre>
      <p><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#length-units">See
      the CSS2 specification</a> for the meanings of the unit
      identifiers. The unit identifier may be in lower (recommended)
      or upper case.</p>

      <p>For properties defined in CSS2
      [<a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/">CSS2</a>],
      a length unit identifier must be provided (for non-zero values).
      For SVG-specific <a href="#intro-TermProperty"><span class="svg-term">properties</span></a>, the length unit identifier
      is optional.  If a unit is not provided, the length value
      represents a distance in the current user coordinate system.</p>
     </li><li>
      <p>When a &lt;length&gt; is used in an SVG <a href="#intro-TermPresentationAttribute"><span class="svg-term">presentation attribute</span></a>,
      the syntax must match the following pattern:</p>
      <pre class="grammar">length ::= <a href="#types-DataTypeNumber">number</a> ("em" | "ex" | "px" | "in" | "cm" | "mm" | "pt" | "pc" | "%")?</pre>
      <p>The unit identifier, if present, must be in lower case; if
      not present, the length value represents a distance in the
      current user coordinate system.</p>

      <p>Note that the non-property &lt;length&gt; definition also
      allows a percentage unit identifier.  The meaning of a
      percentage length value depends on the attribute for which the
      percentage length value has been specified. Two common cases
      are: (a) when a percentage length value represents a percentage
      of the viewport width or height (refer to <a href="#coords-Units">the section that discusses units in
      general</a>), and (b) when a percentage length value represents
      a percentage of the bounding box width or height on a given
      object (refer to <a href="#coords-ObjectBoundingBox">the
      section that describes object bounding box units</a>).</p>

     </li></ul>

    <p>In the SVG DOM, &lt;length&gt; values are represented using
      <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> or <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> objects.</p>
  </dd><dt id="types-DataTypeListOfFamilyNames"><span class="SVG-Term">&lt;list-of-family-names&gt;</span></dt><dd>
    <p>
      A &lt;list-of-family-names&gt; is a list of font family names using the same syntax
      as the <a href="#text-FontFamilyProperty"><span class="prop-name">‘font-family’</span></a>
      property, excluding the &lt;generic-family&gt; and <span class="attr-value">'inherit'</span>
      values.
    </p>
  </dd><dt id="types-DataTypeListOfStrings"><span class="SVG-Term">&lt;list-of-strings&gt;</span></dt><dd>
    <p>
      A &lt;list-of-strings&gt; consists of a separated sequence of &lt;string&gt;s.
      String lists are white space-separated, where white space is defined as one or more of the
      following consecutive characters: "space" (U+0020), "tab" (U+0009), "line feed" (U+000A) and
      "carriage return" (U+000D).
    </p>
    <p>
      The following is an EBNF grammar describing the &lt;list-of-strings&gt;
      syntax:
    </p>
<pre>
list-of-strings ::= string
                    | string wsp list-of-strings
string          ::= [^#x9#xA#xD#x20]*
wsp             ::= [#x9#xA#xD#x20]+
</pre>
  </dd><dt id="types-DataTypeList">
    <span id="types-DataTypeListOfIRI">
      <span id="types-DataTypeNumbers">
        <span id="types-DataTypeCoordinates">
          <span id="types-DataTypeLengths">
            <span class="SVG-Term">&lt;list-of-<var>T</var>s&gt;</span>
          </span>
        </span>  
      </span>
    </span>
  </dt><dd>
    <p>(Where <var>T</var> is a type other than
      &lt;string&gt; and
      &lt;family-name&gt;.)
       A list consists of a
    separated sequence of values. Unless explicitly described
    differently, lists within SVG's XML attributes can be either
    comma-separated, with optional white space before or after the comma,
    or white space-separated.</p>
    <p>White space in lists is defined as one or more of the
    following consecutive characters: "space" (U+0020), "tab" (U+0009),
    "line feed" (U+000A), "carriage return" (U+000D)
    and "form-feed" (U+000C).</p>
    <p>The following is a template for an EBNF grammar describing the
    &lt;list-of-<var>T</var>s&gt; syntax:</p>
    <pre class="grammar"><span id="types-ListOfTs">list-of-<var>T</var>s</span> ::= <var>T</var>
               | <var>T</var> <a href="#types-CommaWSP">comma-wsp</a> <a href="#types-ListOfTs">list-of-<var>T</var>s</a>
<span id="types-CommaWSP">comma-wsp</span>  ::= (<a href="#types-WSP">wsp</a>+ ","? <a href="#types-WSP">wsp</a>*) | ("," <a href="#types-WSP">wsp</a>*)
<span id="types-WSP">wsp</span>        ::= (#x20 | #x9 | #xD | #xA)</pre>
    <p>Within the SVG DOM, values of a &lt;list-of-<var>T</var>s&gt;
    type are represented by an interface specific for the
    particular type <var>T</var>.  For example, a &lt;list-of-lengths&gt;
    is represented in the SVG DOM using an <a class="idlinterface" href="#types-InterfaceSVGLengthList">SVGLengthList</a>
    or <a class="idlinterface" href="#types-InterfaceSVGAnimatedLengthList">SVGAnimatedLengthList</a> object.</p>
  </dd><dt id="types-DataTypeName"><span class="SVG-Term">&lt;name&gt;</span></dt><dd>
    <p>A name, which is a string where a few characters of syntactic significance are disallowed.</p>
    <pre class="grammar"><span id="types-Name">name</span>  ::= [^,()#x20#x9#xD#xA] /* any char except ",", "(", ")" or wsp */</pre></dd><dt id="types-DataTypeNumber"><span class="SVG-Term">&lt;number&gt;</span></dt><dd>
    <p>Real numbers are specified in one of two ways.  When used in a style sheet,
    a &lt;number&gt; is defined as follows:</p>
    <pre class="grammar"><span id="types-Number">number</span> ::= <a href="#types-Integer">integer</a>
           | [+-]? [0-9]* "." [0-9]+</pre>
    <p>This syntax is the same as the definition in CSS
      ([<a href="#refs-ref-CSS2">CSS2</a>], section 4.3.1).</p>
    <p>When used in an SVG attribute,
    a &lt;number&gt; is defined differently, to allow numbers with large magnitudes
    to be specified more concisely:</p>
    <pre class="grammar">number ::= <a href="#types-Integer">integer</a> ([Ee] <a href="#types-DataTypeInteger">integer</a>)?
           | [+-]? [0-9]* "." [0-9]+ ([Ee] <a href="#types-DataTypeInteger">integer</a>)?</pre>
    <p>Within the SVG DOM, a &lt;number&gt; is represented as a
      <span class="DOMInterfaceName">float</span>, <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> or a
      <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>.</p>
  </dd><dt id="types-DataTypeNumberOptionalNumber"><span class="SVG-Term">&lt;number-optional-number&gt;</span></dt><dd>
    <p>A pair of <a href="#types-DataTypeNumber">&lt;number&gt;</a>s, where the second
    <a href="#types-DataTypeNumber">&lt;number&gt;</a> is optional.</p>
    <pre class="grammar">
number-optional-number ::= <a href="#types-DataTypeNumber">number</a>
                           | <a href="#types-DataTypeNumber">number</a> <a href="#types-CommaWSP">comma-wsp</a> <a href="#types-DataTypeNumber">number</a></pre>
    <p>In the SVG DOM, a &lt;number-optional-number&gt; is represented
    using a pair of <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a> or <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>
    objects.</p>
  </dd><dt id="types-DataTypePaint"><span class="SVG-Term">&lt;paint&gt;</span></dt><dd>
    <p>The values for properties <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> and <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>
    are specifications of the type of paint to use when filling or stroking
    a given graphics element. The available options and syntax for
    &lt;paint&gt; are described in
    <a href="#painting-SpecifyingPaint">Specifying paint</a>.</p>
    <p>Within the SVG DOM, &lt;paint&gt; values are represented using
    <a class="idlinterface" href="#painting-InterfaceSVGPaint">SVGPaint</a> objects.</p>
  </dd><dt id="types-DataTypePercentage"><span class="SVG-Term">&lt;percentage&gt;</span></dt><dd>
    <p>Percentages are specified as a number followed by a "%" character:</p>
    <pre class="grammar"><span id="types-Percentage">percentage</span> ::= <a href="#types-Number">number</a> "%"</pre>
    <p>Note that the definition of <a href="#types-Number">&lt;number&gt;</a> depends
    on whether the percentage is specified in a style sheet or in an
    attribute that is not also a <a href="#intro-TermPresentationAttribute"><span class="svg-term">presentation attribute</span></a>.</p>
    <p>Percentage values are always relative to another value, for example a
    length. Each attribute or <a href="#intro-TermProperty"><span class="svg-term">property</span></a> that allows percentages also
    defines the reference distance measurement to which the percentage
    refers.</p>
    <p>Within the SVG DOM, a &lt;percentage&gt; is
    represented using an <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> or <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>
    object.</p>
  </dd><dt id="types-DataTypeTime"><span class="SVG-Term">&lt;time&gt;</span></dt><dd>
    <p>A time value is a &lt;number&gt; immediately followed by a time unit
      identifier. The time unit identifiers are: </p>
    <ul><li><span class="attr-value">ms</span>: milliseconds</li><li><span class="attr-value">s</span>: seconds</li></ul>
    <p>In the SVG DOM, &lt;time&gt; values are represented
      using the <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSPrimitiveValue">CSSPrimitiveValue</a>
      interface defined in <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html">Document Object Model CSS</a>
      ([<a href="#refs-ref-DOM2STYLE">DOM2STYLE</a>], section 2.2).</p>
  </dd><dt id="types-DataTypeTransformList"><span class="SVG-Term">&lt;transform-list&gt;</span></dt><dd>
    <p>A &lt;transform-list&gt; is used to specify a list of coordinate system
    transformations.  A detailed description of the possible values for a
    &lt;transform-list&gt; is given in
    <a href="#coords-TransformAttribute">Modifying the User Coordinate
      System: the transform attribute</a>.</p>
    <p>Within the SVG DOM, a &lt;transform-list&gt; value is represented using
    an <a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a> or <a class="idlinterface" href="#coords-InterfaceSVGAnimatedTransformList">SVGAnimatedTransformList</a>
    object.</p>
  </dd><dt id="types-DataTypeXML-Name"><span class="SVG-Term">&lt;XML-Name&gt;</span></dt><dd>
    <p>
      An XML name, as defined by the
      <a href="http://www.w3.org/TR/2006/REC-xml-20060816/#NT-Name">Name</a>
      production in
      <a href="http://www.w3.org/TR/2006/REC-xml-20060816/"><cite>Extensible Markup Language (XML) 1.0</cite></a> ([<a href="#refs-ref-XML10">XML10</a>], section 2.3).
    </p>
  </dd></dl>

<h2 id="types-Precision">4.3 Real number precision</h2>

<p>Unless stated otherwise for a particular attribute or <a href="#intro-TermProperty"><span class="svg-term">property</span></a>, a
<a href="#types-DataTypeNumber">&lt;number&gt;</a> has the capacity
for at least a single-precision floating point number and has a range (at a
minimum) of -3.4e+38F to +3.4e+38F.</p>

<p>It is recommended that higher precision floating point
storage and computation be performed on operations such as
coordinate system transformations to provide the best
possible precision and to prevent round-off errors.</p>

<p><a href="#conform-ConformingHighQualitySVGViewers">Conforming
High-Quality SVG Viewers</a> are required to use at least double-precision
floating point for intermediate calculations on certain numerical operations.</p>

    <h2 id="types-ColorKeywords">4.4 Recognized color keyword names</h2>
    <p>The following is the list of recognized color keywords that
    can be used as a keyword value for data type <a href="#types-DataTypeColor">&lt;color&gt;</a>:</p>
    <table class="color-keywords" summary="color keywords"><tr><td>
          <table summary="color keywords part 1"><tr><td><div class="colorpatch aliceblue"></div></td><td><span class="prop-value">aliceblue</span></td><td><span class="color-keyword-value">rgb(240, 248, 255)</span></td></tr><tr><td><div class="colorpatch antiquewhite"></div></td><td><span class="prop-value">antiquewhite</span></td><td><span class="color-keyword-value">rgb(250, 235, 215)</span></td></tr><tr><td><div class="colorpatch aqua"></div></td><td><span class="prop-value">aqua</span></td><td><span class="color-keyword-value">rgb( 0, 255, 255)</span></td></tr><tr><td><div class="colorpatch aquamarine"></div></td><td><span class="prop-value">aquamarine</span></td><td><span class="color-keyword-value">rgb(127, 255, 212)</span></td></tr><tr><td><div class="colorpatch azure"></div></td><td><span class="prop-value">azure</span></td><td><span class="color-keyword-value">rgb(240, 255, 255)</span></td></tr><tr><td><div class="colorpatch beige"></div></td><td><span class="prop-value">beige</span></td><td><span class="color-keyword-value">rgb(245, 245, 220)</span></td></tr><tr><td><div class="colorpatch bisque"></div></td><td><span class="prop-value">bisque</span></td><td><span class="color-keyword-value">rgb(255, 228, 196)</span></td></tr><tr><td><div class="colorpatch black"></div></td><td><span class="prop-value">black</span></td><td><span class="color-keyword-value">rgb( 0, 0, 0)</span></td></tr><tr><td><div class="colorpatch blanchedalmond"></div></td><td><span class="prop-value">blanchedalmond</span></td><td><span class="color-keyword-value">rgb(255, 235, 205)</span></td></tr><tr><td><div class="colorpatch blue"></div></td><td><span class="prop-value">blue</span></td><td><span class="color-keyword-value">rgb( 0, 0, 255)</span></td></tr><tr><td><div class="colorpatch blueviolet"></div></td><td><span class="prop-value">blueviolet</span></td><td><span class="color-keyword-value">rgb(138, 43, 226)</span></td></tr><tr><td><div class="colorpatch brown"></div></td><td><span class="prop-value">brown</span></td><td><span class="color-keyword-value">rgb(165, 42, 42)</span></td></tr><tr><td><div class="colorpatch burlywood"></div></td><td><span class="prop-value">burlywood</span></td><td><span class="color-keyword-value">rgb(222, 184, 135)</span></td></tr><tr><td><div class="colorpatch cadetblue"></div></td><td><span class="prop-value">cadetblue</span></td><td><span class="color-keyword-value">rgb( 95, 158, 160)</span></td></tr><tr><td><div class="colorpatch chartreuse"></div></td><td><span class="prop-value">chartreuse</span></td><td><span class="color-keyword-value">rgb(127, 255, 0)</span></td></tr><tr><td><div class="colorpatch chocolate"></div></td><td><span class="prop-value">chocolate</span></td><td><span class="color-keyword-value">rgb(210, 105, 30)</span></td></tr><tr><td><div class="colorpatch coral"></div></td><td><span class="prop-value">coral</span></td><td><span class="color-keyword-value">rgb(255, 127, 80)</span></td></tr><tr><td><div class="colorpatch cornflowerblue"></div></td><td><span class="prop-value">cornflowerblue</span></td><td><span class="color-keyword-value">rgb(100, 149, 237)</span></td></tr><tr><td><div class="colorpatch cornsilk"></div></td><td><span class="prop-value">cornsilk</span></td><td><span class="color-keyword-value">rgb(255, 248, 220)</span></td></tr><tr><td><div class="colorpatch crimson"></div></td><td><span class="prop-value">crimson</span></td><td><span class="color-keyword-value">rgb(220, 20, 60)</span></td></tr><tr><td><div class="colorpatch cyan"></div></td><td><span class="prop-value">cyan</span></td><td><span class="color-keyword-value">rgb( 0, 255, 255)</span></td></tr><tr><td><div class="colorpatch darkblue"></div></td><td><span class="prop-value">darkblue</span></td><td><span class="color-keyword-value">rgb( 0, 0, 139)</span></td></tr><tr><td><div class="colorpatch darkcyan"></div></td><td><span class="prop-value">darkcyan</span></td><td><span class="color-keyword-value">rgb( 0, 139, 139)</span></td></tr><tr><td><div class="colorpatch darkgoldenrod"></div></td><td><span class="prop-value">darkgoldenrod</span></td><td><span class="color-keyword-value">rgb(184, 134, 11)</span></td></tr><tr><td><div class="colorpatch darkgray"></div></td><td><span class="prop-value">darkgray</span></td><td><span class="color-keyword-value">rgb(169, 169, 169)</span></td></tr><tr><td><div class="colorpatch darkgreen"></div></td><td><span class="prop-value">darkgreen</span></td><td><span class="color-keyword-value">rgb( 0, 100, 0)</span></td></tr><tr><td><div class="colorpatch darkgrey"></div></td><td><span class="prop-value">darkgrey</span></td><td><span class="color-keyword-value">rgb(169, 169, 169)</span></td></tr><tr><td><div class="colorpatch darkkhaki"></div></td><td><span class="prop-value">darkkhaki</span></td><td><span class="color-keyword-value">rgb(189, 183, 107)</span></td></tr><tr><td><div class="colorpatch darkmagenta"></div></td><td><span class="prop-value">darkmagenta</span></td><td><span class="color-keyword-value">rgb(139, 0, 139)</span></td></tr><tr><td><div class="colorpatch darkolivegreen"></div></td><td><span class="prop-value">darkolivegreen</span></td><td><span class="color-keyword-value">rgb( 85, 107, 47)</span></td></tr><tr><td><div class="colorpatch darkorange"></div></td><td><span class="prop-value">darkorange</span></td><td><span class="color-keyword-value">rgb(255, 140, 0)</span></td></tr><tr><td><div class="colorpatch darkorchid"></div></td><td><span class="prop-value">darkorchid</span></td><td><span class="color-keyword-value">rgb(153, 50, 204)</span></td></tr><tr><td><div class="colorpatch darkred"></div></td><td><span class="prop-value">darkred</span></td><td><span class="color-keyword-value">rgb(139, 0, 0)</span></td></tr><tr><td><div class="colorpatch darksalmon"></div></td><td><span class="prop-value">darksalmon</span></td><td><span class="color-keyword-value">rgb(233, 150, 122)</span></td></tr><tr><td><div class="colorpatch darkseagreen"></div></td><td><span class="prop-value">darkseagreen</span></td><td><span class="color-keyword-value">rgb(143, 188, 143)</span></td></tr><tr><td><div class="colorpatch darkslateblue"></div></td><td><span class="prop-value">darkslateblue</span></td><td><span class="color-keyword-value">rgb( 72, 61, 139)</span></td></tr><tr><td><div class="colorpatch darkslategray"></div></td><td><span class="prop-value">darkslategray</span></td><td><span class="color-keyword-value">rgb( 47, 79, 79)</span></td></tr><tr><td><div class="colorpatch darkslategrey"></div></td><td><span class="prop-value">darkslategrey</span></td><td><span class="color-keyword-value">rgb( 47, 79, 79)</span></td></tr><tr><td><div class="colorpatch darkturquoise"></div></td><td><span class="prop-value">darkturquoise</span></td><td><span class="color-keyword-value">rgb( 0, 206, 209)</span></td></tr><tr><td><div class="colorpatch darkviolet"></div></td><td><span class="prop-value">darkviolet</span></td><td><span class="color-keyword-value">rgb(148, 0, 211)</span></td></tr><tr><td><div class="colorpatch deeppink"></div></td><td><span class="prop-value">deeppink</span></td><td><span class="color-keyword-value">rgb(255, 20, 147)</span></td></tr><tr><td><div class="colorpatch deepskyblue"></div></td><td><span class="prop-value">deepskyblue</span></td><td><span class="color-keyword-value">rgb( 0, 191, 255)</span></td></tr><tr><td><div class="colorpatch dimgray"></div></td><td><span class="prop-value">dimgray</span></td><td><span class="color-keyword-value">rgb(105, 105, 105)</span></td></tr><tr><td><div class="colorpatch dimgrey"></div></td><td><span class="prop-value">dimgrey</span></td><td><span class="color-keyword-value">rgb(105, 105, 105)</span></td></tr><tr><td><div class="colorpatch dodgerblue"></div></td><td><span class="prop-value">dodgerblue</span></td><td><span class="color-keyword-value">rgb( 30, 144, 255)</span></td></tr><tr><td><div class="colorpatch firebrick"></div></td><td><span class="prop-value">firebrick</span></td><td><span class="color-keyword-value">rgb(178, 34, 34)</span></td></tr><tr><td><div class="colorpatch floralwhite"></div></td><td><span class="prop-value">floralwhite</span></td><td><span class="color-keyword-value">rgb(255, 250, 240)</span></td></tr><tr><td><div class="colorpatch forestgreen"></div></td><td><span class="prop-value">forestgreen</span></td><td><span class="color-keyword-value">rgb( 34, 139, 34)</span></td></tr><tr><td><div class="colorpatch fuchsia"></div></td><td><span class="prop-value">fuchsia</span></td><td><span class="color-keyword-value">rgb(255, 0, 255)</span></td></tr><tr><td><div class="colorpatch gainsboro"></div></td><td><span class="prop-value">gainsboro</span></td><td><span class="color-keyword-value">rgb(220, 220, 220)</span></td></tr><tr><td><div class="colorpatch ghostwhite"></div></td><td><span class="prop-value">ghostwhite</span></td><td><span class="color-keyword-value">rgb(248, 248, 255)</span></td></tr><tr><td><div class="colorpatch gold"></div></td><td><span class="prop-value">gold</span></td><td><span class="color-keyword-value">rgb(255, 215, 0)</span></td></tr><tr><td><div class="colorpatch goldenrod"></div></td><td><span class="prop-value">goldenrod</span></td><td><span class="color-keyword-value">rgb(218, 165, 32)</span></td></tr><tr><td><div class="colorpatch gray"></div></td><td><span class="prop-value">gray</span></td><td><span class="color-keyword-value">rgb(128, 128, 128)</span></td></tr><tr><td><div class="colorpatch grey"></div></td><td><span class="prop-value">grey</span></td><td><span class="color-keyword-value">rgb(128, 128, 128)</span></td></tr><tr><td><div class="colorpatch green"></div></td><td><span class="prop-value">green</span></td><td><span class="color-keyword-value">rgb( 0, 128, 0)</span></td></tr><tr><td><div class="colorpatch greenyellow"></div></td><td><span class="prop-value">greenyellow</span></td><td><span class="color-keyword-value">rgb(173, 255, 47)</span></td></tr><tr><td><div class="colorpatch honeydew"></div></td><td><span class="prop-value">honeydew</span></td><td><span class="color-keyword-value">rgb(240, 255, 240)</span></td></tr><tr><td><div class="colorpatch hotpink"></div></td><td><span class="prop-value">hotpink</span></td><td><span class="color-keyword-value">rgb(255, 105, 180)</span></td></tr><tr><td><div class="colorpatch indianred"></div></td><td><span class="prop-value">indianred</span></td><td><span class="color-keyword-value">rgb(205, 92, 92)</span></td></tr><tr><td><div class="colorpatch indigo"></div></td><td><span class="prop-value">indigo</span></td><td><span class="color-keyword-value">rgb( 75, 0, 130)</span></td></tr><tr><td><div class="colorpatch ivory"></div></td><td><span class="prop-value">ivory</span></td><td><span class="color-keyword-value">rgb(255, 255, 240)</span></td></tr><tr><td><div class="colorpatch khaki"></div></td><td><span class="prop-value">khaki</span></td><td><span class="color-keyword-value">rgb(240, 230, 140)</span></td></tr><tr><td><div class="colorpatch lavender"></div></td><td><span class="prop-value">lavender</span></td><td><span class="color-keyword-value">rgb(230, 230, 250)</span></td></tr><tr><td><div class="colorpatch lavenderblush"></div></td><td><span class="prop-value">lavenderblush</span></td><td><span class="color-keyword-value">rgb(255, 240, 245)</span></td></tr><tr><td><div class="colorpatch lawngreen"></div></td><td><span class="prop-value">lawngreen</span></td><td><span class="color-keyword-value">rgb(124, 252, 0)</span></td></tr><tr><td><div class="colorpatch lemonchiffon"></div></td><td><span class="prop-value">lemonchiffon</span></td><td><span class="color-keyword-value">rgb(255, 250, 205)</span></td></tr><tr><td><div class="colorpatch lightblue"></div></td><td><span class="prop-value">lightblue</span></td><td><span class="color-keyword-value">rgb(173, 216, 230)</span></td></tr><tr><td><div class="colorpatch lightcoral"></div></td><td><span class="prop-value">lightcoral</span></td><td><span class="color-keyword-value">rgb(240, 128, 128)</span></td></tr><tr><td><div class="colorpatch lightcyan"></div></td><td><span class="prop-value">lightcyan</span></td><td><span class="color-keyword-value">rgb(224, 255, 255)</span></td></tr><tr><td><div class="colorpatch lightgoldenrodyellow"></div></td><td><span class="prop-value">lightgoldenrodyellow</span></td><td><span class="color-keyword-value">rgb(250, 250, 210)</span></td></tr><tr><td><div class="colorpatch lightgray"></div></td><td><span class="prop-value">lightgray</span></td><td><span class="color-keyword-value">rgb(211, 211, 211)</span></td></tr><tr><td><div class="colorpatch lightgreen"></div></td><td><span class="prop-value">lightgreen</span></td><td><span class="color-keyword-value">rgb(144, 238, 144)</span></td></tr><tr><td><div class="colorpatch lightgrey"></div></td><td><span class="prop-value">lightgrey</span></td><td><span class="color-keyword-value">rgb(211, 211, 211)</span></td></tr></table>
        </td><td>    </td><td>
          <table summary="color keywords part 2"><tr><td><div class="colorpatch lightpink"></div></td><td><span class="prop-value">lightpink</span></td><td><span class="color-keyword-value">rgb(255, 182, 193)</span></td></tr><tr><td><div class="colorpatch lightsalmon"></div></td><td><span class="prop-value">lightsalmon</span></td><td><span class="color-keyword-value">rgb(255, 160, 122)</span></td></tr><tr><td><div class="colorpatch lightseagreen"></div></td><td><span class="prop-value">lightseagreen</span></td><td><span class="color-keyword-value">rgb( 32, 178, 170)</span></td></tr><tr><td><div class="colorpatch lightskyblue"></div></td><td><span class="prop-value">lightskyblue</span></td><td><span class="color-keyword-value">rgb(135, 206, 250)</span></td></tr><tr><td><div class="colorpatch lightslategray"></div></td><td><span class="prop-value">lightslategray</span></td><td><span class="color-keyword-value">rgb(119, 136, 153)</span></td></tr><tr><td><div class="colorpatch lightslategrey"></div></td><td><span class="prop-value">lightslategrey</span></td><td><span class="color-keyword-value">rgb(119, 136, 153)</span></td></tr><tr><td><div class="colorpatch lightsteelblue"></div></td><td><span class="prop-value">lightsteelblue</span></td><td><span class="color-keyword-value">rgb(176, 196, 222)</span></td></tr><tr><td><div class="colorpatch lightyellow"></div></td><td><span class="prop-value">lightyellow</span></td><td><span class="color-keyword-value">rgb(255, 255, 224)</span></td></tr><tr><td><div class="colorpatch lime"></div></td><td><span class="prop-value">lime</span></td><td><span class="color-keyword-value">rgb( 0, 255, 0)</span></td></tr><tr><td><div class="colorpatch limegreen"></div></td><td><span class="prop-value">limegreen</span></td><td><span class="color-keyword-value">rgb( 50, 205, 50)</span></td></tr><tr><td><div class="colorpatch linen"></div></td><td><span class="prop-value">linen</span></td><td><span class="color-keyword-value">rgb(250, 240, 230)</span></td></tr><tr><td><div class="colorpatch magenta"></div></td><td><span class="prop-value">magenta</span></td><td><span class="color-keyword-value">rgb(255, 0, 255)</span></td></tr><tr><td><div class="colorpatch maroon"></div></td><td><span class="prop-value">maroon</span></td><td><span class="color-keyword-value">rgb(128, 0, 0)</span></td></tr><tr><td><div class="colorpatch mediumaquamarine"></div></td><td><span class="prop-value">mediumaquamarine</span></td><td><span class="color-keyword-value">rgb(102, 205, 170)</span></td></tr><tr><td><div class="colorpatch mediumblue"></div></td><td><span class="prop-value">mediumblue</span></td><td><span class="color-keyword-value">rgb( 0, 0, 205)</span></td></tr><tr><td><div class="colorpatch mediumorchid"></div></td><td><span class="prop-value">mediumorchid</span></td><td><span class="color-keyword-value">rgb(186, 85, 211)</span></td></tr><tr><td><div class="colorpatch mediumpurple"></div></td><td><span class="prop-value">mediumpurple</span></td><td><span class="color-keyword-value">rgb(147, 112, 219)</span></td></tr><tr><td><div class="colorpatch mediumseagreen"></div></td><td><span class="prop-value">mediumseagreen</span></td><td><span class="color-keyword-value">rgb( 60, 179, 113)</span></td></tr><tr><td><div class="colorpatch mediumslateblue"></div></td><td><span class="prop-value">mediumslateblue</span></td><td><span class="color-keyword-value">rgb(123, 104, 238)</span></td></tr><tr><td><div class="colorpatch mediumspringgreen"></div></td><td><span class="prop-value">mediumspringgreen</span></td><td><span class="color-keyword-value">rgb( 0, 250, 154)</span></td></tr><tr><td><div class="colorpatch mediumturquoise"></div></td><td><span class="prop-value">mediumturquoise</span></td><td><span class="color-keyword-value">rgb( 72, 209, 204)</span></td></tr><tr><td><div class="colorpatch mediumvioletred"></div></td><td><span class="prop-value">mediumvioletred</span></td><td><span class="color-keyword-value">rgb(199, 21, 133)</span></td></tr><tr><td><div class="colorpatch midnightblue"></div></td><td><span class="prop-value">midnightblue</span></td><td><span class="color-keyword-value">rgb( 25, 25, 112)</span></td></tr><tr><td><div class="colorpatch mintcream"></div></td><td><span class="prop-value">mintcream</span></td><td><span class="color-keyword-value">rgb(245, 255, 250)</span></td></tr><tr><td><div class="colorpatch mistyrose"></div></td><td><span class="prop-value">mistyrose</span></td><td><span class="color-keyword-value">rgb(255, 228, 225)</span></td></tr><tr><td><div class="colorpatch moccasin"></div></td><td><span class="prop-value">moccasin</span></td><td><span class="color-keyword-value">rgb(255, 228, 181)</span></td></tr><tr><td><div class="colorpatch navajowhite"></div></td><td><span class="prop-value">navajowhite</span></td><td><span class="color-keyword-value">rgb(255, 222, 173)</span></td></tr><tr><td><div class="colorpatch navy"></div></td><td><span class="prop-value">navy</span></td><td><span class="color-keyword-value">rgb( 0, 0, 128)</span></td></tr><tr><td><div class="colorpatch oldlace"></div></td><td><span class="prop-value">oldlace</span></td><td><span class="color-keyword-value">rgb(253, 245, 230)</span></td></tr><tr><td><div class="colorpatch olive"></div></td><td><span class="prop-value">olive</span></td><td><span class="color-keyword-value">rgb(128, 128, 0)</span></td></tr><tr><td><div class="colorpatch olivedrab"></div></td><td><span class="prop-value">olivedrab</span></td><td><span class="color-keyword-value">rgb(107, 142, 35)</span></td></tr><tr><td><div class="colorpatch orange"></div></td><td><span class="prop-value">orange</span></td><td><span class="color-keyword-value">rgb(255, 165, 0)</span></td></tr><tr><td><div class="colorpatch orangered"></div></td><td><span class="prop-value">orangered</span></td><td><span class="color-keyword-value">rgb(255, 69, 0)</span></td></tr><tr><td><div class="colorpatch orchid"></div></td><td><span class="prop-value">orchid</span></td><td><span class="color-keyword-value">rgb(218, 112, 214)</span></td></tr><tr><td><div class="colorpatch palegoldenrod"></div></td><td><span class="prop-value">palegoldenrod</span></td><td><span class="color-keyword-value">rgb(238, 232, 170)</span></td></tr><tr><td><div class="colorpatch palegreen"></div></td><td><span class="prop-value">palegreen</span></td><td><span class="color-keyword-value">rgb(152, 251, 152)</span></td></tr><tr><td><div class="colorpatch paleturquoise"></div></td><td><span class="prop-value">paleturquoise</span></td><td><span class="color-keyword-value">rgb(175, 238, 238)</span></td></tr><tr><td><div class="colorpatch palevioletred"></div></td><td><span class="prop-value">palevioletred</span></td><td><span class="color-keyword-value">rgb(219, 112, 147)</span></td></tr><tr><td><div class="colorpatch papayawhip"></div></td><td><span class="prop-value">papayawhip</span></td><td><span class="color-keyword-value">rgb(255, 239, 213)</span></td></tr><tr><td><div class="colorpatch peachpuff"></div></td><td><span class="prop-value">peachpuff</span></td><td><span class="color-keyword-value">rgb(255, 218, 185)</span></td></tr><tr><td><div class="colorpatch peru"></div></td><td><span class="prop-value">peru</span></td><td><span class="color-keyword-value">rgb(205, 133, 63)</span></td></tr><tr><td><div class="colorpatch pink"></div></td><td><span class="prop-value">pink</span></td><td><span class="color-keyword-value">rgb(255, 192, 203)</span></td></tr><tr><td><div class="colorpatch plum"></div></td><td><span class="prop-value">plum</span></td><td><span class="color-keyword-value">rgb(221, 160, 221)</span></td></tr><tr><td><div class="colorpatch powderblue"></div></td><td><span class="prop-value">powderblue</span></td><td><span class="color-keyword-value">rgb(176, 224, 230)</span></td></tr><tr><td><div class="colorpatch purple"></div></td><td><span class="prop-value">purple</span></td><td><span class="color-keyword-value">rgb(128, 0, 128)</span></td></tr><tr><td><div class="colorpatch red"></div></td><td><span class="prop-value">red</span></td><td><span class="color-keyword-value">rgb(255, 0, 0)</span></td></tr><tr><td><div class="colorpatch rosybrown"></div></td><td><span class="prop-value">rosybrown</span></td><td><span class="color-keyword-value">rgb(188, 143, 143)</span></td></tr><tr><td><div class="colorpatch royalblue"></div></td><td><span class="prop-value">royalblue</span></td><td><span class="color-keyword-value">rgb( 65, 105, 225)</span></td></tr><tr><td><div class="colorpatch saddlebrown"></div></td><td><span class="prop-value">saddlebrown</span></td><td><span class="color-keyword-value">rgb(139, 69, 19)</span></td></tr><tr><td><div class="colorpatch salmon"></div></td><td><span class="prop-value">salmon</span></td><td><span class="color-keyword-value">rgb(250, 128, 114)</span></td></tr><tr><td><div class="colorpatch sandybrown"></div></td><td><span class="prop-value">sandybrown</span></td><td><span class="color-keyword-value">rgb(244, 164, 96)</span></td></tr><tr><td><div class="colorpatch seagreen"></div></td><td><span class="prop-value">seagreen</span></td><td><span class="color-keyword-value">rgb( 46, 139, 87)</span></td></tr><tr><td><div class="colorpatch seashell"></div></td><td><span class="prop-value">seashell</span></td><td><span class="color-keyword-value">rgb(255, 245, 238)</span></td></tr><tr><td><div class="colorpatch sienna"></div></td><td><span class="prop-value">sienna</span></td><td><span class="color-keyword-value">rgb(160, 82, 45)</span></td></tr><tr><td><div class="colorpatch silver"></div></td><td><span class="prop-value">silver</span></td><td><span class="color-keyword-value">rgb(192, 192, 192)</span></td></tr><tr><td><div class="colorpatch skyblue"></div></td><td><span class="prop-value">skyblue</span></td><td><span class="color-keyword-value">rgb(135, 206, 235)</span></td></tr><tr><td><div class="colorpatch slateblue"></div></td><td><span class="prop-value">slateblue</span></td><td><span class="color-keyword-value">rgb(106, 90, 205)</span></td></tr><tr><td><div class="colorpatch slategray"></div></td><td><span class="prop-value">slategray</span></td><td><span class="color-keyword-value">rgb(112, 128, 144)</span></td></tr><tr><td><div class="colorpatch slategrey"></div></td><td><span class="prop-value">slategrey</span></td><td><span class="color-keyword-value">rgb(112, 128, 144)</span></td></tr><tr><td><div class="colorpatch snow"></div></td><td><span class="prop-value">snow</span></td><td><span class="color-keyword-value">rgb(255, 250, 250)</span></td></tr><tr><td><div class="colorpatch springgreen"></div></td><td><span class="prop-value">springgreen</span></td><td><span class="color-keyword-value">rgb( 0, 255, 127)</span></td></tr><tr><td><div class="colorpatch steelblue"></div></td><td><span class="prop-value">steelblue</span></td><td><span class="color-keyword-value">rgb( 70, 130, 180)</span></td></tr><tr><td><div class="colorpatch tan"></div>
              </td><td><span class="prop-value">tan</span></td><td><span class="color-keyword-value">rgb(210, 180, 140)</span></td></tr><tr><td><div class="colorpatch teal"></div></td><td><span class="prop-value">teal</span></td><td><span class="color-keyword-value">rgb( 0, 128, 128)</span></td></tr><tr><td><div class="colorpatch thistle"></div></td><td><span class="prop-value">thistle</span></td><td><span class="color-keyword-value">rgb(216, 191, 216)</span></td></tr><tr><td><div class="colorpatch tomato"></div></td><td><span class="prop-value">tomato</span></td><td><span class="color-keyword-value">rgb(255, 99, 71)</span></td></tr><tr><td><div class="colorpatch turquoise"></div></td><td><span class="prop-value">turquoise</span></td><td><span class="color-keyword-value">rgb( 64, 224, 208)</span></td></tr><tr><td><div class="colorpatch violet"></div></td><td><span class="prop-value">violet</span></td><td><span class="color-keyword-value">rgb(238, 130, 238)</span></td></tr><tr><td><div class="colorpatch wheat"></div></td><td><span class="prop-value">wheat</span></td><td><span class="color-keyword-value">rgb(245, 222, 179)</span></td></tr><tr><td><div class="colorpatch white"></div></td><td><span class="prop-value">white</span></td><td><span class="color-keyword-value">rgb(255, 255, 255)</span></td></tr><tr><td><div class="colorpatch whitesmoke"></div>
              </td><td><span class="prop-value">whitesmoke</span></td><td><span class="color-keyword-value">rgb(245, 245, 245)</span></td></tr><tr><td><div class="colorpatch yellow"></div>
              </td><td><span class="prop-value">yellow</span></td><td><span class="color-keyword-value">rgb(255, 255, 0)</span></td></tr><tr><td><div class="colorpatch yellowgreen"></div>
              </td><td><span class="prop-value">yellowgreen</span></td><td><span class="color-keyword-value">rgb(154, 205, 50)</span></td></tr><tr><td></td><td><span class="prop-value"> </span></td><td> </td></tr></table>
        </td></tr></table>

<h2 id="types-BasicDOMInterfaces">4.5 Basic DOM interfaces</h2>

<h3 id="types-InterfaceSVGElement">4.5.1 Interface SVGElement</h3>


 All of the SVG DOM interfaces that correspond directly to elements in the
 SVG language (such as the <a class="idlinterface" href="#paths-InterfaceSVGPathElement">SVGPathElement</a> interface for the
 <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element) derive from the <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> interface.
<pre class="idl">interface <b>SVGElement</b> : <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-745549614">Element</a> {
           attribute DOMString <a href="#types-__svg__SVGElement__id">id</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
           attribute DOMString <a href="#types-__svg__SVGElement__xmlbase">xmlbase</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGSVGElement">SVGSVGElement</a> <a href="#types-__svg__SVGElement__ownerSVGElement">ownerSVGElement</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <a href="#types-__svg__SVGElement__viewportElement">viewportElement</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGElement__id" class="attribute first-child"><b>id</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 The value of the <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a> attribute on the given element, or the
 empty string if <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a> is not present.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGElement__xmlbase" class="attribute"><b>xmlbase</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a> on the given element.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGElement__ownerSVGElement" class="attribute"><b>ownerSVGElement</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#struct-InterfaceSVGSVGElement">SVGSVGElement</a>)</span></dt><dd class="attribute"><div>
 The nearest ancestor <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element. Null if the given element is
 the <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>.
</div></dd>
<dt id="types-__svg__SVGElement__viewportElement" class="attribute"><b>viewportElement</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>)</span></dt><dd class="attribute"><div>
 The element which established the current viewport. Often, the nearest
 ancestor <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element. Null if the given element is the
 <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGAnimatedBoolean">4.5.2 Interface SVGAnimatedBoolean</h3>


 Used for attributes of type boolean which can be animated.
<pre class="idl">interface <b>SVGAnimatedBoolean</b> {
           attribute boolean <a href="#types-__svg__SVGAnimatedBoolean__baseVal">baseVal</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  readonly attribute boolean <a href="#types-__svg__SVGAnimatedBoolean__animVal">animVal</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGAnimatedBoolean__baseVal" class="attribute first-child"><b>baseVal</b><span class="idl-type-parenthetical"> (boolean)</span></dt><dd class="attribute"><div>
 The base value of the given attribute before applying any animations.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an
   attempt to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGAnimatedBoolean__animVal" class="attribute"><b>animVal</b><span class="idl-type-parenthetical"> (readonly boolean)</span></dt><dd class="attribute"><div>
 If the given attribute or property is being animated, contains the
 current animated value of the attribute or property. If the given
 attribute or property is not currently being animated, contains the
 same value as <a class="idlattr" href="#types-__svg__SVGAnimatedBoolean__baseVal">baseVal</a>.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGAnimatedString">4.5.3 Interface SVGAnimatedString</h3>


 Used for attributes of type DOMString which can be animated.
<pre class="idl">interface <b>SVGAnimatedString</b> {
           attribute DOMString <a href="#types-__svg__SVGAnimatedString__baseVal">baseVal</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  readonly attribute DOMString <a href="#types-__svg__SVGAnimatedString__animVal">animVal</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGAnimatedString__baseVal" class="attribute first-child"><b>baseVal</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 The base value of the given attribute before applying any animations.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an
   attempt to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGAnimatedString__animVal" class="attribute"><b>animVal</b><span class="idl-type-parenthetical"> (readonly DOMString)</span></dt><dd class="attribute"><div>
 If the given attribute or property is being animated, contains the
 current animated value of the attribute or property. If the given
 attribute or property is not currently being animated, contains the
 same value as <a class="idlattr" href="#types-__svg__SVGAnimatedString__baseVal">baseVal</a>.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGStringList">4.5.4 Interface SVGStringList</h3>


 <p>This interface defines a list of DOMString values.</p>

 <p><a class="idlinterface" href="#types-InterfaceSVGStringList">SVGStringList</a> has the same attributes and methods as other
 SVGxxxList interfaces. Implementers may consider using a single base class
 to implement the various SVGxxxList interfaces.</p>
<pre class="idl">interface <b>SVGStringList</b> {

  readonly attribute unsigned long <a href="#types-__svg__SVGStringList__numberOfItems">numberOfItems</a>;

  void <a href="#types-__svg__SVGStringList__clear">clear</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  DOMString <a href="#types-__svg__SVGStringList__initialize">initialize</a>(in DOMString newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  DOMString <a href="#types-__svg__SVGStringList__getItem">getItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  DOMString <a href="#types-__svg__SVGStringList__insertItemBefore">insertItemBefore</a>(in DOMString newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  DOMString <a href="#types-__svg__SVGStringList__replaceItem">replaceItem</a>(in DOMString newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  DOMString <a href="#types-__svg__SVGStringList__removeItem">removeItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  DOMString <a href="#types-__svg__SVGStringList__appendItem">appendItem</a>(in DOMString newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGStringList__numberOfItems" class="attribute first-child"><b>numberOfItems</b><span class="idl-type-parenthetical"> (readonly unsigned long)</span></dt><dd class="attribute"><div>
 The number of items in the list.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGStringList__clear" class="operation first-child">void <b>clear</b>()</dt><dd class="operation"><div>
 Clears all existing current items from the list, with the result being
 an empty list.

</div><dl class="operation"><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGStringList__initialize" class="operation">DOMString <b>initialize</b>(in DOMString <var>newItem</var>)</dt><dd class="operation"><div>
 Clears all existing current items from the list and re-initializes the
 list to hold the single item specified by the parameter.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>DOMString <var>newItem</var></div> <div> The item which should become the only member of the list.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The item being inserted into the list.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGStringList__getItem" class="operation">DOMString <b>getItem</b>(in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Returns the specified item from the list.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>index</var></div> <div> The index of the item from the list which is to be
   returned.  The first item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The selected item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#types-__svg__SVGStringList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGStringList__insertItemBefore" class="operation">DOMString <b>insertItemBefore</b>(in DOMString <var>newItem</var>, in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Inserts a new item into the list at the specified position. The first
 item is number 0.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>DOMString <var>newItem</var></div> <div> The item which is to be inserted into the list.
</div></li><li class="parameter"><div>unsigned long <var>index</var></div> <div> The index of the item before which the new item is to be
   inserted. The first item is number 0.  If the index is equal to 0,
   then the new item is inserted at the front of the list. If the index
   is greater than or equal to <a class="idlattr" href="#types-__svg__SVGStringList__numberOfItems">numberOfItems</a>, then the new item is
   appended to the end of the list.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGStringList__replaceItem" class="operation">DOMString <b>replaceItem</b>(in DOMString <var>newItem</var>, in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Replaces an existing item in the list with a new item.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>DOMString <var>newItem</var></div> <div> The item which is to be inserted into the list.
</div></li><li class="parameter"><div>unsigned long <var>index</var></div> <div> The index of the item which is to be replaced. The first
   item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#types-__svg__SVGStringList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGStringList__removeItem" class="operation">DOMString <b>removeItem</b>(in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Removes an existing item from the list.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>index</var></div> <div> The index of the item which is to be removed. The first
   item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The removed item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#types-__svg__SVGStringList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGStringList__appendItem" class="operation">DOMString <b>appendItem</b>(in DOMString <var>newItem</var>)</dt><dd class="operation"><div>
 Inserts a new item at the end of the list.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>DOMString <var>newItem</var></div> <div> The item which is to be inserted. The first item is
   number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGAnimatedEnumeration">4.5.5 Interface SVGAnimatedEnumeration</h3>


 Used for attributes whose value must be a constant from a particular
 enumeration and which can be animated.
<pre class="idl">interface <b>SVGAnimatedEnumeration</b> {
           attribute unsigned short <a href="#types-__svg__SVGAnimatedEnumeration__baseVal">baseVal</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  readonly attribute unsigned short <a href="#types-__svg__SVGAnimatedEnumeration__animVal">animVal</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGAnimatedEnumeration__baseVal" class="attribute first-child"><b>baseVal</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="attribute"><div>
 The base value of the given attribute before applying any animations.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an
   attempt to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGAnimatedEnumeration__animVal" class="attribute"><b>animVal</b><span class="idl-type-parenthetical"> (readonly unsigned short)</span></dt><dd class="attribute"><div>
 If the given attribute or property is being animated, contains the
 current animated value of the attribute or property. If the given
 attribute or property is not currently being animated, contains the
 same value as <a class="idlattr" href="#types-__svg__SVGAnimatedEnumeration__baseVal">baseVal</a>.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGAnimatedInteger">4.5.6 Interface SVGAnimatedInteger</h3>


 Used for attributes of basic type
 <a href="#types-DataTypeInteger">&lt;integer&gt;</a> which can be
 animated.
<pre class="idl">interface <b>SVGAnimatedInteger</b> {
           attribute long <a href="#types-__svg__SVGAnimatedInteger__baseVal">baseVal</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  readonly attribute long <a href="#types-__svg__SVGAnimatedInteger__animVal">animVal</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGAnimatedInteger__baseVal" class="attribute first-child"><b>baseVal</b><span class="idl-type-parenthetical"> (long)</span></dt><dd class="attribute"><div>
 The base value of the given attribute before applying any animations.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an
   attempt to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGAnimatedInteger__animVal" class="attribute"><b>animVal</b><span class="idl-type-parenthetical"> (readonly long)</span></dt><dd class="attribute"><div>
 If the given attribute or property is being animated, contains the
 current animated value of the attribute or property. If the given
 attribute or property is not currently being animated, contains the
 same value as <a class="idlattr" href="#types-__svg__SVGAnimatedInteger__baseVal">baseVal</a>.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGNumber">4.5.7 Interface SVGNumber</h3>


 Used for attributes of basic type
 <a href="#types-DataTypeNumber">&lt;number&gt;</a>.
<pre class="idl">interface <b>SVGNumber</b> {
  attribute float <a href="#types-__svg__SVGNumber__value">value</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGNumber__value" class="attribute first-child"><b>value</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The value of the given attribute.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an
   attempt to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGAnimatedNumber">4.5.8 Interface SVGAnimatedNumber</h3>


 Used for attributes of basic type
 <a href="#types-DataTypeNumber">&lt;number&gt;</a> which can be
 animated.
<pre class="idl">interface <b>SVGAnimatedNumber</b> {
           attribute float <a href="#types-__svg__SVGAnimatedNumber__baseVal">baseVal</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  readonly attribute float <a href="#types-__svg__SVGAnimatedNumber__animVal">animVal</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGAnimatedNumber__baseVal" class="attribute first-child"><b>baseVal</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The base value of the given attribute before applying any animations.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an
   attempt to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGAnimatedNumber__animVal" class="attribute"><b>animVal</b><span class="idl-type-parenthetical"> (readonly float)</span></dt><dd class="attribute"><div>
 If the given attribute or property is being animated, contains the
 current animated value of the attribute or property. If the given
 attribute or property is not currently being animated, contains the
 same value as <a class="idlattr" href="#types-__svg__SVGAnimatedNumber__baseVal">baseVal</a>.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGNumberList">4.5.9 Interface SVGNumberList</h3>


 <p>This interface defines a list of SVGNumber objects.</p>

 <p><a class="idlinterface" href="#types-InterfaceSVGNumberList">SVGNumberList</a> has the same attributes and methods as other
 SVGxxxList interfaces. Implementers may consider using a single base class
 to implement the various SVGxxxList interfaces.</p>

 <p id="types-ReadOnlyNumberList">An <a class="idlinterface" href="#types-InterfaceSVGNumberList">SVGNumberList</a> object can be designated as <em>read only</em>,
 which means that attempts to modify the object will result in an exception
 being thrown, as described below.</p>
<pre class="idl">interface <b>SVGNumberList</b> {

  readonly attribute unsigned long <a href="#types-__svg__SVGNumberList__numberOfItems">numberOfItems</a>;

  void <a href="#types-__svg__SVGNumberList__clear">clear</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <a href="#types-__svg__SVGNumberList__initialize">initialize</a>(in <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <a href="#types-__svg__SVGNumberList__getItem">getItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <a href="#types-__svg__SVGNumberList__insertItemBefore">insertItemBefore</a>(in <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <a href="#types-__svg__SVGNumberList__replaceItem">replaceItem</a>(in <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <a href="#types-__svg__SVGNumberList__removeItem">removeItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <a href="#types-__svg__SVGNumberList__appendItem">appendItem</a>(in <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGNumberList__numberOfItems" class="attribute first-child"><b>numberOfItems</b><span class="idl-type-parenthetical"> (readonly unsigned long)</span></dt><dd class="attribute"><div>
 The number of items in the list.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGNumberList__clear" class="operation first-child">void <b>clear</b>()</dt><dd class="operation"><div>
 Clears all existing current items from the list, with the result being
 an empty list.

</div><dl class="operation"><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyNumberList">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGNumberList__initialize" class="operation"><a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <b>initialize</b>(in <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <var>newItem</var>)</dt><dd class="operation"><div>
 Clears all existing current items from the list and re-initializes the
 list to hold the single item specified by the parameter.  If the inserted
 item is already in a list, it is removed from its previous list before
 it is inserted into this list.  The inserted item is the item itself and
 not a copy. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <var>newItem</var></div> <div> The item which should become the only member of the list.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The item being inserted into the list.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyNumberList">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGNumberList__getItem" class="operation"><a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <b>getItem</b>(in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Returns the specified item from the list.  The returned item is the
 item itself and not a copy.  Any changes made to the item are
 immediately reflected in the list.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>index</var></div> <div> The index of the item from the list which is to be
   returned.  The first item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The selected item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#types-__svg__SVGNumberList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGNumberList__insertItemBefore" class="operation"><a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <b>insertItemBefore</b>(in <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <var>newItem</var>, in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Inserts a new item into the list at the specified position. The first
 item is number 0. If <var>newItem</var> is already in a list, it is
 removed from its previous list before it is inserted into this list.
 The inserted item is the item itself and not a copy. If the item is
 already in this list, note that the index of the item to insert
 before is <i>before</i> the removal of the item.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <var>newItem</var></div> <div> The item which is to be inserted into the list.
</div></li><li class="parameter"><div>unsigned long <var>index</var></div> <div> The index of the item before which the new item is to be
   inserted. The first item is number 0.  If the index is equal to 0,
   then the new item is inserted at the front of the list. If the index
   is greater than or equal to <a class="idlattr" href="#types-__svg__SVGNumberList__numberOfItems">numberOfItems</a>, then the new item is
   appended to the end of the list.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyNumberList">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGNumberList__replaceItem" class="operation"><a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <b>replaceItem</b>(in <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <var>newItem</var>, in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Replaces an existing item in the list with a new item. If
 <var>newItem</var> is already in a list, it is removed from its
 previous list before it is inserted into this list.  The inserted item
 is the item itself and not a copy.  If the item is already in this
 list, note that the index of the item to replace is <i>before</i>
 the removal of the item.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <var>newItem</var></div> <div> The item which is to be inserted into the list.
</div></li><li class="parameter"><div>unsigned long <var>index</var></div> <div> The index of the item which is to be replaced. The first
   item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyNumberList">read only</a>.
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#types-__svg__SVGNumberList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGNumberList__removeItem" class="operation"><a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <b>removeItem</b>(in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Removes an existing item from the list.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>index</var></div> <div> The index of the item which is to be removed. The first
   item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The removed item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#types-__svg__SVGNumberList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGNumberList__appendItem" class="operation"><a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <b>appendItem</b>(in <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <var>newItem</var>)</dt><dd class="operation"><div>
 Inserts a new item at the end of the list. If <var>newItem</var> is
 already in a list, it is removed from its previous list before it is
 inserted into this list.  The inserted item is the item itself and
 not a copy.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <var>newItem</var></div> <div> The item which is to be inserted. The first item is
   number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGAnimatedNumberList">4.5.10 Interface SVGAnimatedNumberList</h3>


 Used for attributes which take a list of numbers and which can be animated.
<pre class="idl">interface <b>SVGAnimatedNumberList</b> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGNumberList">SVGNumberList</a> <a href="#types-__svg__SVGAnimatedNumberList__baseVal">baseVal</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGNumberList">SVGNumberList</a> <a href="#types-__svg__SVGAnimatedNumberList__animVal">animVal</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGAnimatedNumberList__baseVal" class="attribute first-child"><b>baseVal</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGNumberList">SVGNumberList</a>)</span></dt><dd class="attribute"><div>
 The base value of the given attribute before applying any animations.
</div></dd>
<dt id="types-__svg__SVGAnimatedNumberList__animVal" class="attribute"><b>animVal</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGNumberList">SVGNumberList</a>)</span></dt><dd class="attribute"><div>
 A <a href="#types-ReadOnlyNumberList">read only</a> <a class="idlinterface" href="#types-InterfaceSVGNumberList">SVGNumberList</a> representing the current animated value of
 the given attribute.  If the given attribute is not currently being
 animated, then the <a class="idlinterface" href="#types-InterfaceSVGNumberList">SVGNumberList</a> will have the same contents
 as <a class="idlattr" href="#types-__svg__SVGAnimatedNumberList__baseVal">baseVal</a>.  The object referenced by <a class="idlattr" href="#types-__svg__SVGAnimatedNumberList__animVal">animVal</a> will always
 be distinct from the one referenced by <a class="idlattr" href="#types-__svg__SVGAnimatedNumberList__baseVal">baseVal</a>, even when
 the attribute is not animated.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGLength">4.5.11 Interface SVGLength</h3>


 <p>The <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> interface corresponds to the
 <a href="#types-DataTypeLength">&lt;length&gt;</a> basic data type.</p>

 <p id="types-ReadOnlyLength">An <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> object can be designated as <em>read only</em>,
 which means that attempts to modify the object will result in an exception
 being thrown, as described below.</p>
<pre class="idl">interface <b>SVGLength</b> {

  // Length Unit Types
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_UNKNOWN">SVG_LENGTHTYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_NUMBER">SVG_LENGTHTYPE_NUMBER</a> = 1;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_PERCENTAGE">SVG_LENGTHTYPE_PERCENTAGE</a> = 2;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_EMS">SVG_LENGTHTYPE_EMS</a> = 3;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_EXS">SVG_LENGTHTYPE_EXS</a> = 4;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_PX">SVG_LENGTHTYPE_PX</a> = 5;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_CM">SVG_LENGTHTYPE_CM</a> = 6;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_MM">SVG_LENGTHTYPE_MM</a> = 7;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_IN">SVG_LENGTHTYPE_IN</a> = 8;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_PT">SVG_LENGTHTYPE_PT</a> = 9;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_PC">SVG_LENGTHTYPE_PC</a> = 10;

  readonly attribute unsigned short <a href="#types-__svg__SVGLength__unitType">unitType</a>;
           attribute float <a href="#types-__svg__SVGLength__value">value</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
           attribute float <a href="#types-__svg__SVGLength__valueInSpecifiedUnits">valueInSpecifiedUnits</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
           attribute DOMString <a href="#types-__svg__SVGLength__valueAsString">valueAsString</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);

  void <a href="#types-__svg__SVGLength__newValueSpecifiedUnits">newValueSpecifiedUnits</a>(in unsigned short unitType, in float valueInSpecifiedUnits) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  void <a href="#types-__svg__SVGLength__convertToSpecifiedUnits">convertToSpecifiedUnits</a>(in unsigned short unitType) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Length Unit Types”:</dt><dd><dl class="constants">
<dt id="types-__svg__SVGLength__SVG_LENGTHTYPE_UNKNOWN" class="constant first-child"><b>SVG_LENGTHTYPE_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The unit type is not one of predefined unit types. It is invalid to
 attempt to define a new value of this type or to attempt to switch an
 existing value to this type.

</div></dd>
<dt id="types-__svg__SVGLength__SVG_LENGTHTYPE_NUMBER" class="constant"><b>SVG_LENGTHTYPE_NUMBER</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 No unit type was provided (i.e., a unitless value was specified), which
 indicates a value in user units.

</div></dd>
<dt id="types-__svg__SVGLength__SVG_LENGTHTYPE_PERCENTAGE" class="constant"><b>SVG_LENGTHTYPE_PERCENTAGE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A percentage value was specified.

</div></dd>
<dt id="types-__svg__SVGLength__SVG_LENGTHTYPE_EMS" class="constant"><b>SVG_LENGTHTYPE_EMS</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A value was specified using the em units defined in CSS2.

</div></dd>
<dt id="types-__svg__SVGLength__SVG_LENGTHTYPE_EXS" class="constant"><b>SVG_LENGTHTYPE_EXS</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A value was specified using the ex units defined in CSS2.

</div></dd>
<dt id="types-__svg__SVGLength__SVG_LENGTHTYPE_PX" class="constant"><b>SVG_LENGTHTYPE_PX</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A value was specified using the px units defined in CSS2.

</div></dd>
<dt id="types-__svg__SVGLength__SVG_LENGTHTYPE_CM" class="constant"><b>SVG_LENGTHTYPE_CM</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A value was specified using the cm units defined in CSS2.

</div></dd>
<dt id="types-__svg__SVGLength__SVG_LENGTHTYPE_MM" class="constant"><b>SVG_LENGTHTYPE_MM</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A value was specified using the mm units defined in CSS2.

</div></dd>
<dt id="types-__svg__SVGLength__SVG_LENGTHTYPE_IN" class="constant"><b>SVG_LENGTHTYPE_IN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A value was specified using the in units defined in CSS2.

</div></dd>
<dt id="types-__svg__SVGLength__SVG_LENGTHTYPE_PT" class="constant"><b>SVG_LENGTHTYPE_PT</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A value was specified using the pt units defined in CSS2.

</div></dd>
<dt id="types-__svg__SVGLength__SVG_LENGTHTYPE_PC" class="constant"><b>SVG_LENGTHTYPE_PC</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A value was specified using the pc units defined in CSS2.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGLength__unitType" class="attribute first-child"><b>unitType</b><span class="idl-type-parenthetical"> (readonly unsigned short)</span></dt><dd class="attribute"><div>
 The type of the value as specified by one of the SVG_LENGTHTYPE_*
 constants defined on this interface.
</div></dd>
<dt id="types-__svg__SVGLength__value" class="attribute"><b>value</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The value as a floating point value, in user units. Setting this
 attribute will cause <a class="idlattr" href="#types-__svg__SVGLength__valueInSpecifiedUnits">valueInSpecifiedUnits</a> and
 <a class="idlattr" href="#types-__svg__SVGLength__valueAsString">valueAsString</a> to be updated automatically to reflect this setting.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the length
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyLength">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGLength__valueInSpecifiedUnits" class="attribute"><b>valueInSpecifiedUnits</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The value as a floating point value, in the units expressed by
 <a class="idlattr" href="#types-__svg__SVGLength__unitType">unitType</a>. Setting this attribute will cause <a class="idlattr" href="#types-__svg__SVGLength__value">value</a> and
 <a class="idlattr" href="#types-__svg__SVGLength__valueAsString">valueAsString</a> to be updated automatically to reflect this setting. 

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the length
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyLength">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGLength__valueAsString" class="attribute"><b>valueAsString</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 The value as a string value, in the units expressed by <a class="idlattr" href="#types-__svg__SVGLength__unitType">unitType</a>.
 Setting this attribute will cause <a class="idlattr" href="#types-__svg__SVGLength__value">value</a>, 
 <a class="idlattr" href="#types-__svg__SVGLength__valueInSpecifiedUnits">valueInSpecifiedUnits</a> and <a class="idlattr" href="#types-__svg__SVGLength__unitType">unitType</a> 
 to be updated automatically to reflect this
 setting. 

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code SYNTAX_ERR</dt><dd class="exception"> Raised if the assigned string cannot 
   be parsed as a valid <a href="#types-DataTypeLength">&lt;length&gt;</a>.
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the length
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyLength">read only</a>.
</dd></dl></dd></dl></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGLength__newValueSpecifiedUnits" class="operation first-child">void <b>newValueSpecifiedUnits</b>(in unsigned short <var>unitType</var>, in float <var>valueInSpecifiedUnits</var>)</dt><dd class="operation"><div>
 Reset the value as a number with an associated <a class="idlattr" href="#types-__svg__SVGLength__unitType">unitType</a>, thereby
 replacing the values for all of the attributes on the object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned short <var>unitType</var></div> <div> The unit type for the value (e.g., <a class="idlattr" href="#types-__svg__SVGLength__SVG_LENGTHTYPE_MM">SVG_LENGTHTYPE_MM</a>).
</div></li><li class="parameter"><div>float <var>valueInSpecifiedUnits</var></div> <div> The new value.
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NOT_SUPPORTED_ERR</dt><dd class="exception"> Raised if unitType is SVG_LENGTHTYPE_UNKNOWN 
   or not a valid unit type constant (one of the other SVG_LENGTHTYPE_* constants 
   defined on this interface).
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the length
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyLength">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGLength__convertToSpecifiedUnits" class="operation">void <b>convertToSpecifiedUnits</b>(in unsigned short <var>unitType</var>)</dt><dd class="operation"><div>
 Preserve the same underlying stored value, but reset the stored unit
 identifier to the given <var>unitType</var>. Object attributes
 <a class="idlattr" href="#types-__svg__SVGLength__unitType">unitType</a>, <a class="idlattr" href="#types-__svg__SVGLength__valueInSpecifiedUnits">valueInSpecifiedUnits</a> and <a class="idlattr" href="#types-__svg__SVGLength__valueAsString">valueAsString</a>
 might be modified as a result of this method. For example, if the
 original value were "0.5cm" and the method was invoked to convert to
 millimeters, then the <a class="idlattr" href="#types-__svg__SVGLength__unitType">unitType</a> would be changed to
 <a class="idlattr" href="#types-__svg__SVGLength__SVG_LENGTHTYPE_MM">SVG_LENGTHTYPE_MM</a>, <a class="idlattr" href="#types-__svg__SVGLength__valueInSpecifiedUnits">valueInSpecifiedUnits</a> would be changed
 to the numeric value 5 and <a class="idlattr" href="#types-__svg__SVGLength__valueAsString">valueAsString</a> would be changed to
 "5mm".

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned short <var>unitType</var></div> <div> The unit type to switch to (e.g., <a class="idlattr" href="#types-__svg__SVGLength__SVG_LENGTHTYPE_MM">SVG_LENGTHTYPE_MM</a>).
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NOT_SUPPORTED_ERR</dt><dd class="exception"> Raised if unitType is SVG_LENGTHTYPE_UNKNOWN 
   or not a valid unit type constant (one of the other SVG_LENGTHTYPE_* constants 
   defined on this interface).
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the length
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyLength">read only</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGAnimatedLength">4.5.12 Interface SVGAnimatedLength</h3>


 Used for attributes of basic type
 <a href="#types-DataTypeLength">&lt;length&gt;</a> which can be
 animated.
<pre class="idl">interface <b>SVGAnimatedLength</b> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#types-__svg__SVGAnimatedLength__baseVal">baseVal</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#types-__svg__SVGAnimatedLength__animVal">animVal</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGAnimatedLength__baseVal" class="attribute first-child"><b>baseVal</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a>)</span></dt><dd class="attribute"><div>
 The base value of the given attribute before applying any animations.
</div></dd>
<dt id="types-__svg__SVGAnimatedLength__animVal" class="attribute"><b>animVal</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a>)</span></dt><dd class="attribute"><div>
 A <a href="#types-ReadOnlyLength">read only</a> <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> representing the current animated value of
 the given attribute.  If the given attribute is not currently being
 animated, then the <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> will have the same contents
 as <a class="idlattr" href="#types-__svg__SVGAnimatedLength__baseVal">baseVal</a>.  The object referenced by <a class="idlattr" href="#types-__svg__SVGAnimatedLength__animVal">animVal</a> will always
 be distinct from the one referenced by <a class="idlattr" href="#types-__svg__SVGAnimatedLength__baseVal">baseVal</a>, even when
 the attribute is not animated.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGLengthList">4.5.13 Interface SVGLengthList</h3>


 <p>This interface defines a list of SVGLength objects.</p>

 <p><a class="idlinterface" href="#types-InterfaceSVGLengthList">SVGLengthList</a> has the same attributes and methods as other
 SVGxxxList interfaces. Implementers may consider using a single base class
 to implement the various SVGxxxList interfaces.</p>

 <p id="types-ReadOnlyLengthList">An <a class="idlinterface" href="#types-InterfaceSVGLengthList">SVGLengthList</a> object can be designated as <em>read only</em>,
 which means that attempts to modify the object will result in an exception
 being thrown, as described below.</p>
<pre class="idl">interface <b>SVGLengthList</b> {

  readonly attribute unsigned long <a href="#types-__svg__SVGLengthList__numberOfItems">numberOfItems</a>;

  void <a href="#types-__svg__SVGLengthList__clear">clear</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#types-__svg__SVGLengthList__initialize">initialize</a>(in <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#types-__svg__SVGLengthList__getItem">getItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#types-__svg__SVGLengthList__insertItemBefore">insertItemBefore</a>(in <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#types-__svg__SVGLengthList__replaceItem">replaceItem</a>(in <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#types-__svg__SVGLengthList__removeItem">removeItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#types-__svg__SVGLengthList__appendItem">appendItem</a>(in <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGLengthList__numberOfItems" class="attribute first-child"><b>numberOfItems</b><span class="idl-type-parenthetical"> (readonly unsigned long)</span></dt><dd class="attribute"><div>
 The number of items in the list.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGLengthList__clear" class="operation first-child">void <b>clear</b>()</dt><dd class="operation"><div>
 Clears all existing current items from the list, with the result being
 an empty list.

</div><dl class="operation"><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyLengthList">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGLengthList__initialize" class="operation"><a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <b>initialize</b>(in <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <var>newItem</var>)</dt><dd class="operation"><div>
 Clears all existing current items from the list and re-initializes the
 list to hold the single item specified by the parameter.  If the inserted
 item is already in a list, it is removed from its previous list before
 it is inserted into this list.  The inserted item is the item itself and
 not a copy. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <var>newItem</var></div> <div> The item which should become the only member of the list.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The item being inserted into the list.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyLengthList">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGLengthList__getItem" class="operation"><a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <b>getItem</b>(in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Returns the specified item from the list.  The returned item is the
 item itself and not a copy.  Any changes made to the item are
 immediately reflected in the list.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>index</var></div> <div> The index of the item from the list which is to be
   returned.  The first item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The selected item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyLengthList">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGLengthList__insertItemBefore" class="operation"><a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <b>insertItemBefore</b>(in <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <var>newItem</var>, in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Inserts a new item into the list at the specified position. The first
 item is number 0. If <var>newItem</var> is already in a list, it is
 removed from its previous list before it is inserted into this list.
 The inserted item is the item itself and not a copy. If the item is
 already in this list, note that the index of the item to insert
 before is <i>before</i> the removal of the item.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <var>newItem</var></div> <div> The item which is to be inserted into the list.
</div></li><li class="parameter"><div>unsigned long <var>index</var></div> <div> The index of the item before which the new item is to be
   inserted. The first item is number 0.  If the index is equal to 0,
   then the new item is inserted at the front of the list. If the index
   is greater than or equal to <a class="idlattr" href="#types-__svg__SVGLengthList__numberOfItems">numberOfItems</a>, then the new item is
   appended to the end of the list.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyLengthList">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGLengthList__replaceItem" class="operation"><a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <b>replaceItem</b>(in <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <var>newItem</var>, in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Replaces an existing item in the list with a new item. If
 <var>newItem</var> is already in a list, it is removed from its
 previous list before it is inserted into this list.  The inserted item
 is the item itself and not a copy.  If the item is already in this
 list, note that the index of the item to replace is <i>before</i>
 the removal of the item.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <var>newItem</var></div> <div> The item which is to be inserted into the list.
</div></li><li class="parameter"><div>unsigned long <var>index</var></div> <div> The index of the item which is to be replaced. The first
   item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyLengthList">read only</a>.
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#types-__svg__SVGLengthList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGLengthList__removeItem" class="operation"><a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <b>removeItem</b>(in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Removes an existing item from the list.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>index</var></div> <div> The index of the item which is to be removed. The first
   item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The removed item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyLengthList">read only</a>.
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#types-__svg__SVGLengthList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGLengthList__appendItem" class="operation"><a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <b>appendItem</b>(in <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <var>newItem</var>)</dt><dd class="operation"><div>
 Inserts a new item at the end of the list. If <var>newItem</var> is
 already in a list, it is removed from its previous list before it is
 inserted into this list.  The inserted item is the item itself and
 not a copy.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <var>newItem</var></div> <div> The item which is to be inserted. The first item is
   number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyLengthList">read only</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGAnimatedLengthList">4.5.14 Interface SVGAnimatedLengthList</h3>


 Used for attributes of type <a class="idlinterface" href="#types-InterfaceSVGLengthList">SVGLengthList</a> which can be animated.
<pre class="idl">interface <b>SVGAnimatedLengthList</b> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGLengthList">SVGLengthList</a> <a href="#types-__svg__SVGAnimatedLengthList__baseVal">baseVal</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGLengthList">SVGLengthList</a> <a href="#types-__svg__SVGAnimatedLengthList__animVal">animVal</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGAnimatedLengthList__baseVal" class="attribute first-child"><b>baseVal</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGLengthList">SVGLengthList</a>)</span></dt><dd class="attribute"><div>
 The base value of the given attribute before applying any animations.
</div></dd>
<dt id="types-__svg__SVGAnimatedLengthList__animVal" class="attribute"><b>animVal</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGLengthList">SVGLengthList</a>)</span></dt><dd class="attribute"><div>
 A <a href="#types-ReadOnlyLengthList">read only</a> <a class="idlinterface" href="#types-InterfaceSVGLengthList">SVGLengthList</a> representing the current animated value of
 the given attribute.  If the given attribute is not currently being
 animated, then the <a class="idlinterface" href="#types-InterfaceSVGLengthList">SVGLengthList</a> will have the same contents
 as <a class="idlattr" href="#types-__svg__SVGAnimatedLengthList__baseVal">baseVal</a>.  The object referenced by <a class="idlattr" href="#types-__svg__SVGAnimatedLengthList__animVal">animVal</a> will always
 be distinct from the one referenced by <a class="idlattr" href="#types-__svg__SVGAnimatedLengthList__baseVal">baseVal</a>, even when
 the attribute is not animated.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGAngle">4.5.15 Interface SVGAngle</h3>


 <p>The <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> interface corresponds to the
 <a href="#types-DataTypeAngle">&lt;angle&gt;</a> basic data type.</p>

 <p id="types-ReadOnlyAngle">An <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> object can be designated as <em>read only</em>,
 which means that attempts to modify the object will result in an exception
 being thrown, as described below.</p>
<pre class="idl">interface <b>SVGAngle</b> {

  // Angle Unit Types
  const unsigned short <a href="#types-__svg__SVGAngle__SVG_ANGLETYPE_UNKNOWN">SVG_ANGLETYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#types-__svg__SVGAngle__SVG_ANGLETYPE_UNSPECIFIED">SVG_ANGLETYPE_UNSPECIFIED</a> = 1;
  const unsigned short <a href="#types-__svg__SVGAngle__SVG_ANGLETYPE_DEG">SVG_ANGLETYPE_DEG</a> = 2;
  const unsigned short <a href="#types-__svg__SVGAngle__SVG_ANGLETYPE_RAD">SVG_ANGLETYPE_RAD</a> = 3;
  const unsigned short <a href="#types-__svg__SVGAngle__SVG_ANGLETYPE_GRAD">SVG_ANGLETYPE_GRAD</a> = 4;

  readonly attribute unsigned short <a href="#types-__svg__SVGAngle__unitType">unitType</a>;
           attribute float <a href="#types-__svg__SVGAngle__value">value</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
           attribute float <a href="#types-__svg__SVGAngle__valueInSpecifiedUnits">valueInSpecifiedUnits</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
           attribute DOMString <a href="#types-__svg__SVGAngle__valueAsString">valueAsString</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);

  void <a href="#types-__svg__SVGAngle__newValueSpecifiedUnits">newValueSpecifiedUnits</a>(in unsigned short unitType, in float valueInSpecifiedUnits) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  void <a href="#types-__svg__SVGAngle__convertToSpecifiedUnits">convertToSpecifiedUnits</a>(in unsigned short unitType) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Angle Unit Types”:</dt><dd><dl class="constants">
<dt id="types-__svg__SVGAngle__SVG_ANGLETYPE_UNKNOWN" class="constant first-child"><b>SVG_ANGLETYPE_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The unit type is not one of predefined unit types. It is invalid to
 attempt to define a new value of this type or to attempt to switch an
 existing value to this type.

</div></dd>
<dt id="types-__svg__SVGAngle__SVG_ANGLETYPE_UNSPECIFIED" class="constant"><b>SVG_ANGLETYPE_UNSPECIFIED</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 No unit type was provided (i.e., a unitless value was specified). For
 angles, a unitless value is treated the same as if degrees were
 specified.

</div></dd>
<dt id="types-__svg__SVGAngle__SVG_ANGLETYPE_DEG" class="constant"><b>SVG_ANGLETYPE_DEG</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The unit type was explicitly set to degrees.

</div></dd>
<dt id="types-__svg__SVGAngle__SVG_ANGLETYPE_RAD" class="constant"><b>SVG_ANGLETYPE_RAD</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The unit type is radians.

</div></dd>
<dt id="types-__svg__SVGAngle__SVG_ANGLETYPE_GRAD" class="constant"><b>SVG_ANGLETYPE_GRAD</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The unit type is radians.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGAngle__unitType" class="attribute first-child"><b>unitType</b><span class="idl-type-parenthetical"> (readonly unsigned short)</span></dt><dd class="attribute"><div>
 The type of the value as specified by one of the SVG_ANGLETYPE_*
 constants defined on this interface.
</div></dd>
<dt id="types-__svg__SVGAngle__value" class="attribute"><b>value</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The angle value as a floating point value, in degrees. Setting this
 attribute will cause <a class="idlattr" href="#types-__svg__SVGAngle__valueInSpecifiedUnits">valueInSpecifiedUnits</a> and
 <a class="idlattr" href="#types-__svg__SVGAngle__valueAsString">valueAsString</a> to be updated automatically to reflect this setting. 

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the angle
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyAngle">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGAngle__valueInSpecifiedUnits" class="attribute"><b>valueInSpecifiedUnits</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The angle value as a floating point value, in the units expressed by
 <a class="idlattr" href="#types-__svg__SVGAngle__unitType">unitType</a>. Setting this attribute will cause <a class="idlattr" href="#types-__svg__SVGAngle__value">value</a> and
 <a class="idlattr" href="#types-__svg__SVGAngle__valueAsString">valueAsString</a> to be updated automatically to reflect this setting. 

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the angle
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyAngle">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGAngle__valueAsString" class="attribute"><b>valueAsString</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 The angle value as a string value, in the units expressed by
 <a class="idlattr" href="#types-__svg__SVGAngle__unitType">unitType</a>. Setting this attribute will cause <a class="idlattr" href="#types-__svg__SVGAngle__value">value</a>,
 <a class="idlattr" href="#types-__svg__SVGAngle__valueInSpecifiedUnits">valueInSpecifiedUnits</a> and <a class="idlattr" href="#types-__svg__SVGAngle__unitType">unitType</a>
 to be updated automatically to reflect
 this setting. 

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code SYNTAX_ERR</dt><dd class="exception"> Raised if the assigned string cannot 
   be parsed as a valid <a href="#types-DataTypeAngle">&lt;angle&gt;</a>.
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the angle
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyAngle">read only</a>.
</dd></dl></dd></dl></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGAngle__newValueSpecifiedUnits" class="operation first-child">void <b>newValueSpecifiedUnits</b>(in unsigned short <var>unitType</var>, in float <var>valueInSpecifiedUnits</var>)</dt><dd class="operation"><div>
 Reset the value as a number with an associated <a class="idlattr" href="#types-__svg__SVGAngle__unitType">unitType</a>, thereby
 replacing the values for all of the attributes on the object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned short <var>unitType</var></div> <div> The unit type for the value (e.g., <a class="idlattr" href="#types-__svg__SVGAngle__SVG_ANGLETYPE_DEG">SVG_ANGLETYPE_DEG</a>).
</div></li><li class="parameter"><div>float <var>valueInSpecifiedUnits</var></div> <div> The angle value.
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NOT_SUPPORTED_ERR</dt><dd class="exception"> Raised if unitType is SVG_ANGLETYPE_UNKNOWN 
   or not a valid unit type constant (one of the other SVG_ANGLETYPE_* constants 
   defined on this interface).
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the angle
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyAngle">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGAngle__convertToSpecifiedUnits" class="operation">void <b>convertToSpecifiedUnits</b>(in unsigned short <var>unitType</var>)</dt><dd class="operation"><div>
 Preserve the same underlying stored value, but reset the stored unit
 identifier to the given <var>unitType</var>. Object attributes
 <a class="idlattr" href="#types-__svg__SVGAngle__unitType">unitType</a>, <a class="idlattr" href="#types-__svg__SVGAngle__valueInSpecifiedUnits">valueInSpecifiedUnits</a> and <a class="idlattr" href="#types-__svg__SVGAngle__valueAsString">valueAsString</a>
 might be modified as a result of this method. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned short <var>unitType</var></div> <div> The unit type to switch to (e.g., <a class="idlattr" href="#types-__svg__SVGAngle__SVG_ANGLETYPE_DEG">SVG_ANGLETYPE_DEG</a>).
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NOT_SUPPORTED_ERR</dt><dd class="exception"> Raised if unitType is SVG_ANGLETYPE_UNKNOWN 
   or not a valid unit type constant (one of the other SVG_ANGLETYPE_* constants 
   defined on this interface).
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the angle
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyAngle">read only</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGAnimatedAngle">4.5.16 Interface SVGAnimatedAngle</h3>


 Used for attributes of basic data type <a href="#types-DataTypeAngle">&lt;angle&gt;</a>
 that can be animated.
<pre class="idl">interface <b>SVGAnimatedAngle</b> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> <a href="#types-__svg__SVGAnimatedAngle__baseVal">baseVal</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> <a href="#types-__svg__SVGAnimatedAngle__animVal">animVal</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGAnimatedAngle__baseVal" class="attribute first-child"><b>baseVal</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a>)</span></dt><dd class="attribute"><div>
 The base value of the given attribute before applying any animations.
</div></dd>
<dt id="types-__svg__SVGAnimatedAngle__animVal" class="attribute"><b>animVal</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a>)</span></dt><dd class="attribute"><div>
 A <a href="#types-ReadOnlyAngle">read only</a> <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> representing the current animated value of
 the given attribute.  If the given attribute is not currently being
 animated, then the <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> will have the same contents
 as <a class="idlattr" href="#types-__svg__SVGAnimatedAngle__baseVal">baseVal</a>.  The object referenced by <a class="idlattr" href="#types-__svg__SVGAnimatedAngle__animVal">animVal</a> will always
 be distinct from the one referenced by <a class="idlattr" href="#types-__svg__SVGAnimatedAngle__baseVal">baseVal</a>, even when
 the attribute is not animated.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGColor">4.5.17 Interface SVGColor</h3>


 <p>The <a class="idlinterface" href="#types-InterfaceSVGColor">SVGColor</a> interface corresponds to color value definition for
 properties <a href="#pservers-StopColorProperty"><span class="prop-name">‘stop-color’</span></a>, <a href="#filters-FloodColorProperty"><span class="prop-name">‘flood-color’</span></a> and
 <a href="#filters-LightingColorProperty"><span class="prop-name">‘lighting-color’</span></a> and is a base class for interface <a class="idlinterface" href="#painting-InterfaceSVGPaint">SVGPaint</a>.
 It incorporates SVG's extended notion of color, which incorporates
 ICC-based color specifications.</p>

 <p>Interface <a class="idlinterface" href="#types-InterfaceSVGColor">SVGColor</a> does <em>not</em> correspond to the
 <a href="#types-DataTypeColor">&lt;color&gt;</a> basic data type. For
 the <a href="#types-DataTypeColor">&lt;color&gt;</a> basic data type,
 the applicable DOM interfaces are defined in
 <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/">DOM Level 2 Style</a>;
 in particular, see the <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-RGBColor">RGBColor</a> interface
 ([<a href="#refs-ref-DOM2STYLE">DOM2STYLE</a>], section 2.2).</p>

 <p>Note: The <a class="idlinterface" href="#types-InterfaceSVGColor">SVGColor</a> interface is deprecated, and may be dropped 
 from future versions of the SVG specification.</p>
<pre class="idl">interface <b>SVGColor</b> : <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a> {

  // Color Types
  const unsigned short <a href="#types-__svg__SVGColor__SVG_COLORTYPE_UNKNOWN">SVG_COLORTYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#types-__svg__SVGColor__SVG_COLORTYPE_RGBCOLOR">SVG_COLORTYPE_RGBCOLOR</a> = 1;
  const unsigned short <a href="#types-__svg__SVGColor__SVG_COLORTYPE_RGBCOLOR_ICCCOLOR">SVG_COLORTYPE_RGBCOLOR_ICCCOLOR</a> = 2;
  const unsigned short <a href="#types-__svg__SVGColor__SVG_COLORTYPE_CURRENTCOLOR">SVG_COLORTYPE_CURRENTCOLOR</a> = 3;

  readonly attribute unsigned short <a href="#types-__svg__SVGColor__colorType">colorType</a>;
  readonly attribute <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-RGBColor">RGBColor</a> <a href="#types-__svg__SVGColor__rgbColor">rgbColor</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGICCColor">SVGICCColor</a> <a href="#types-__svg__SVGColor__iccColor">iccColor</a>;

  void <a href="#types-__svg__SVGColor__setRGBColor">setRGBColor</a>(in DOMString rgbColor) raises(<a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>);
  void <a href="#types-__svg__SVGColor__setRGBColorICCColor">setRGBColorICCColor</a>(in DOMString rgbColor, in DOMString iccColor) raises(<a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>);
  void <a href="#types-__svg__SVGColor__setColor">setColor</a>(in unsigned short colorType, in DOMString rgbColor, in DOMString iccColor) raises(<a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>);
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Color Types”:</dt><dd><dl class="constants">
<dt id="types-__svg__SVGColor__SVG_COLORTYPE_UNKNOWN" class="constant first-child"><b>SVG_COLORTYPE_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The color type is not one of predefined types. It is invalid to attempt
 to define a new value of this type or to attempt to switch an existing
 value to this type.

</div></dd>
<dt id="types-__svg__SVGColor__SVG_COLORTYPE_RGBCOLOR" class="constant"><b>SVG_COLORTYPE_RGBCOLOR</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 An sRGB color has been specified without an alternative ICC color
 specification.

</div></dd>
<dt id="types-__svg__SVGColor__SVG_COLORTYPE_RGBCOLOR_ICCCOLOR" class="constant"><b>SVG_COLORTYPE_RGBCOLOR_ICCCOLOR</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 An sRGB color has been specified along with an alternative ICC color
 specification.

</div></dd>
<dt id="types-__svg__SVGColor__SVG_COLORTYPE_CURRENTCOLOR" class="constant"><b>SVG_COLORTYPE_CURRENTCOLOR</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to when keyword <span class="attr-value">currentColor</span>
 has been specified.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGColor__colorType" class="attribute first-child"><b>colorType</b><span class="idl-type-parenthetical"> (readonly unsigned short)</span></dt><dd class="attribute"><div>
 The type of the value as specified by one of the SVG_COLORTYPE_*
 constants defined on this interface.
</div></dd>
<dt id="types-__svg__SVGColor__rgbColor" class="attribute"><b>rgbColor</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-RGBColor">RGBColor</a>)</span></dt><dd class="attribute"><div>
 The color specified in the sRGB color space.
</div></dd>
<dt id="types-__svg__SVGColor__iccColor" class="attribute"><b>iccColor</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGICCColor">SVGICCColor</a>)</span></dt><dd class="attribute"><div>
 The alternate ICC color specification.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGColor__setRGBColor" class="operation first-child">void <b>setRGBColor</b>(in DOMString <var>rgbColor</var>)</dt><dd class="operation"><div>
 Modifies the color value to be the specified sRGB color without an
 alternate ICC color specification.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>DOMString <var>rgbColor</var></div> <div> A string that matches <a href="#types-DataTypeColor">&lt;color&gt;</a>,
   which specifies the new sRGB color value.
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>, code SVG_INVALID_VALUE_ERR</dt><dd class="exception"> Raised if <var>rgbColor</var>
   does not match <a href="#types-DataTypeColor">&lt;color&gt;</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGColor__setRGBColorICCColor" class="operation">void <b>setRGBColorICCColor</b>(in DOMString <var>rgbColor</var>, in DOMString <var>iccColor</var>)</dt><dd class="operation"><div>
 Modifies the color value to be the specified sRGB color with an
 alternate ICC color specification.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>DOMString <var>rgbColor</var></div> <div> A string that matches <a href="#types-DataTypeColor">&lt;color&gt;</a>,
   which specifies the new sRGB color value.
</div></li><li class="parameter"><div>DOMString <var>iccColor</var></div> <div> A string that matches <a href="#types-DataTypeICCColor">&lt;icccolor&gt;</a>,
   which specifies the alternate ICC color specification.
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>, code SVG_INVALID_VALUE_ERR</dt><dd class="exception"> Raised if <var>rgbColor</var>
   does not match <a href="#types-DataTypeColor">&lt;color&gt;</a>
   or if <var>iccColor</var> does not match
   <a href="#types-DataTypeICCColor">&lt;icccolor&gt;</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGColor__setColor" class="operation">void <b>setColor</b>(in unsigned short <var>colorType</var>, in DOMString <var>rgbColor</var>, in DOMString <var>iccColor</var>)</dt><dd class="operation"><div>
 Sets the color value as specified by the parameters. If
 <var>colorType</var> requires an <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-RGBColor">RGBColor</a>, then
 <var>rgbColor</var> must be a string that matches
 <a href="#types-DataTypeColor">&lt;color&gt;</a>;
 otherwise, <var>rgbColor</var>. must be null. If <var>colorType</var>
 requires an <a class="idlinterface" href="#types-InterfaceSVGICCColor">SVGICCColor</a>, then <var>iccColor</var> must be a string
 that matches <a href="#types-DataTypeICCColor">&lt;icccolor&gt;</a>;
 otherwise, <var>iccColor</var> must be null. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned short <var>colorType</var></div> <div> One of the defined constants for <a class="idlattr" href="#types-__svg__SVGColor__colorType">colorType</a>.
</div></li><li class="parameter"><div>DOMString <var>rgbColor</var></div> <div> The specification of an sRGB color, or null.
</div></li><li class="parameter"><div>DOMString <var>iccColor</var></div> <div> The specification of an ICC color, or null.
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>, code SVG_INVALID_VALUE_ERR</dt><dd class="exception"> Raised if one of the
   parameters has an invalid value.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGICCColor">4.5.18 Interface SVGICCColor</h3>


 <p>The <a class="idlinterface" href="#types-InterfaceSVGICCColor">SVGICCColor</a> interface expresses an ICC-based color
 specification.</p>

 <p>Note: The <a class="idlinterface" href="#types-InterfaceSVGICCColor">SVGICCColor</a> interface is deprecated, and may be dropped 
 from future versions of the SVG specification.</p>
<pre class="idl">interface <b>SVGICCColor</b> {
           attribute DOMString <a href="#types-__svg__SVGICCColor__colorProfile">colorProfile</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGNumberList">SVGNumberList</a> <a href="#types-__svg__SVGICCColor__colors">colors</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGICCColor__colorProfile" class="attribute first-child"><b>colorProfile</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 The name of the color profile, which is the first parameter of an ICC
 color specification.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGICCColor__colors" class="attribute"><b>colors</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGNumberList">SVGNumberList</a>)</span></dt><dd class="attribute"><div>
 The list of color values that define this ICC color. Each color value
 is an arbitrary floating point number.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGRect">4.5.19 Interface SVGRect</h3>


 <p>Represents rectangular geometry.  Rectangles are defined as consisting
 of a (x,y) coordinate pair identifying a minimum X value, a minimum Y
 value, and a width and height, which are usually constrained to be
 non-negative.</p>

 <p id="types-ReadOnlyRect">An <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> object can be designated as <em>read only</em>,
 which means that attempts to modify the object will result in an exception
 being thrown, as described below.</p>
<pre class="idl">interface <b>SVGRect</b> {
  attribute float <a href="#types-__svg__SVGRect__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#types-__svg__SVGRect__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#types-__svg__SVGRect__width">width</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#types-__svg__SVGRect__height">height</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGRect__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The <var>x</var> coordinate of the rectangle, in user units. 

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the rectangle
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyRect">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGRect__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The <var>y</var> coordinate of the rectangle, in user units. 

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the rectangle
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyRect">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGRect__width" class="attribute"><b>width</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The <var>width</var> coordinate of the rectangle, in user units. 

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the rectangle
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyRect">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGRect__height" class="attribute"><b>height</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The <var>height</var> coordinate of the rectangle, in user units. 

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the rectangle
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#types-ReadOnlyRect">read only</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGAnimatedRect">4.5.20 Interface SVGAnimatedRect</h3>


 Used for attributes of type <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> which can be animated.
<pre class="idl">interface <b>SVGAnimatedRect</b> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <a href="#types-__svg__SVGAnimatedRect__baseVal">baseVal</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <a href="#types-__svg__SVGAnimatedRect__animVal">animVal</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGAnimatedRect__baseVal" class="attribute first-child"><b>baseVal</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a>)</span></dt><dd class="attribute"><div>
 The base value of the given attribute before applying any animations.
</div></dd>
<dt id="types-__svg__SVGAnimatedRect__animVal" class="attribute"><b>animVal</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a>)</span></dt><dd class="attribute"><div>
 A <a href="#types-ReadOnlyRect">read only</a> <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> representing the current animated value of
 the given attribute.  If the given attribute is not currently being
 animated, then the <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> will have the same contents
 as <a class="idlattr" href="#types-__svg__SVGAnimatedRect__baseVal">baseVal</a>.  The object referenced by <a class="idlattr" href="#types-__svg__SVGAnimatedRect__animVal">animVal</a> will always
 be distinct from the one referenced by <a class="idlattr" href="#types-__svg__SVGAnimatedRect__baseVal">baseVal</a>, even when
 the attribute is not animated.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGUnitTypes">4.5.21 Interface SVGUnitTypes</h3>


 The <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a> interface defines a commonly used set of constants
 and is a base interface used by <a class="idlinterface" href="#pservers-InterfaceSVGGradientElement">SVGGradientElement</a>,
 <a class="idlinterface" href="#pservers-InterfaceSVGPatternElement">SVGPatternElement</a>, <a class="idlinterface" href="#masking-InterfaceSVGClipPathElement">SVGClipPathElement</a>, <a class="idlinterface" href="#masking-InterfaceSVGMaskElement">SVGMaskElement</a>
 and <a class="idlinterface" href="#filters-InterfaceSVGFilterElement">SVGFilterElement</a>.
<pre class="idl">interface <b>SVGUnitTypes</b> {
  // Unit Types
  const unsigned short <a href="#types-__svg__SVGUnitTypes__SVG_UNIT_TYPE_UNKNOWN">SVG_UNIT_TYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#types-__svg__SVGUnitTypes__SVG_UNIT_TYPE_USERSPACEONUSE">SVG_UNIT_TYPE_USERSPACEONUSE</a> = 1;
  const unsigned short <a href="#types-__svg__SVGUnitTypes__SVG_UNIT_TYPE_OBJECTBOUNDINGBOX">SVG_UNIT_TYPE_OBJECTBOUNDINGBOX</a> = 2;
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Unit Types”:</dt><dd><dl class="constants">
<dt id="types-__svg__SVGUnitTypes__SVG_UNIT_TYPE_UNKNOWN" class="constant first-child"><b>SVG_UNIT_TYPE_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The type is not one of predefined types. It is invalid to attempt to
 define a new value of this type or to attempt to switch an existing
 value to this type.

</div></dd>
<dt id="types-__svg__SVGUnitTypes__SVG_UNIT_TYPE_USERSPACEONUSE" class="constant"><b>SVG_UNIT_TYPE_USERSPACEONUSE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'userSpaceOnUse'</span>.

</div></dd>
<dt id="types-__svg__SVGUnitTypes__SVG_UNIT_TYPE_OBJECTBOUNDINGBOX" class="constant"><b>SVG_UNIT_TYPE_OBJECTBOUNDINGBOX</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'objectBoundingBox'</span>.

</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGStylable">4.5.22 Interface SVGStylable</h3>


 The <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> interface is implemented on all objects
 corresponding to SVG elements that can have <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a>,
 <a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a> and <a href="#intro-TermPresentationAttribute"><span class="svg-term">presentation attributes</span></a> specified on them.  It
 is thus an ancestor interface for many of the interfaces defined in this
 specification.
<pre class="idl">interface <b>SVGStylable</b> {

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#types-__svg__SVGStylable__className">className</a>;
  readonly attribute <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSStyleDeclaration">CSSStyleDeclaration</a> <a href="#types-__svg__SVGStylable__style">style</a>;

  <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a> <a href="#types-__svg__SVGStylable__getPresentationAttribute">getPresentationAttribute</a>(in DOMString name);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGStylable__className" class="attribute first-child"><b>className</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a> on the given element.
</div></dd>
<dt id="types-__svg__SVGStylable__style" class="attribute"><b>style</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSStyleDeclaration">CSSStyleDeclaration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> on the given element. If the
 user agent does not support <a href="#styling-StylingWithCSS">styling
   with CSS</a>, then this attribute must always have the value of null.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGStylable__getPresentationAttribute" class="operation first-child"><a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a> <b>getPresentationAttribute</b>(in DOMString <var>name</var>)</dt><dd class="operation"><div>
 Returns the base (i.e., static) value of a given <a href="#intro-TermPresentationAttribute"><span class="svg-term">presentation attribute</span></a> as an object of type <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a>. The returned object
 is live; changes to the objects represent immediate changes to the
 objects to which the <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a> is attached.

 <p>Note: The <code>getPresentationAttribute</code> method is deprecated, 
 and may be dropped from future versions of the SVG specification.</p>

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>DOMString <var>name</var></div> <div> The name of the presentation attribute whose value is to be
   returned.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The static/base value of the given <a href="#intro-TermPresentationAttribute"><span class="svg-term">presentation attribute</span></a>
   as a <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a>, or null if the given attribute does not have a
   specified value.
</div></dd></dl></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGLocatable">4.5.23 Interface SVGLocatable</h3>


 Interface <a class="idlinterface" href="#types-InterfaceSVGLocatable">SVGLocatable</a> is for all elements which either have a
 <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute or don't have a <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute
 but whose content can have a bounding box in current user space.
<pre class="idl">interface <b>SVGLocatable</b> {

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <a href="#types-__svg__SVGLocatable__nearestViewportElement">nearestViewportElement</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <a href="#types-__svg__SVGLocatable__farthestViewportElement">farthestViewportElement</a>;

  <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <a href="#types-__svg__SVGLocatable__getBBox">getBBox</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#types-__svg__SVGLocatable__getCTM">getCTM</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#types-__svg__SVGLocatable__getScreenCTM">getScreenCTM</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#types-__svg__SVGLocatable__getTransformToElement">getTransformToElement</a>(in <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> element) raises(<a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGLocatable__nearestViewportElement" class="attribute first-child"><b>nearestViewportElement</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>)</span></dt><dd class="attribute"><div>
 The element which established the current viewport. Often, the nearest
 ancestor <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element. Null if the current element is the
 <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>.
</div></dd>
<dt id="types-__svg__SVGLocatable__farthestViewportElement" class="attribute"><b>farthestViewportElement</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>)</span></dt><dd class="attribute"><div>
 The farthest ancestor <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element. Null if the current element
 is the <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGLocatable__getBBox" class="operation first-child"><a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <b>getBBox</b>()</dt><dd class="operation"><div>
 Returns the tight bounding box in current user space (i.e., after
 application of the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute, if any) on the
 geometry of all contained graphics elements, exclusive of stroking, clipping, masking and
 filter effects). Note that getBBox must return the actual bounding box
 at the time the method was called, even in case the element has not
 yet been rendered. 

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> An <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> object that defines the bounding box.
</div></dd></dl></dd>
<dt id="types-__svg__SVGLocatable__getCTM" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <b>getCTM</b>()</dt><dd class="operation"><div>
 Returns the transformation matrix from current user units (i.e., after
 application of the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute, if any) to the viewport
 coordinate system for the <a class="idlattr" href="#types-__svg__SVGLocatable__nearestViewportElement">nearestViewportElement</a>. 

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> An <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> object that defines the CTM.
</div></dd></dl></dd>
<dt id="types-__svg__SVGLocatable__getScreenCTM" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <b>getScreenCTM</b>()</dt><dd class="operation"><div>
 Returns the transformation matrix from current user units (i.e., after
 application of the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute, if any) to the parent
 user agent's notice of a "pixel". For display devices, ideally this
 represents a physical screen pixel. For other devices or environments
 where physical pixel sizes are not known, then an algorithm similar to
 the CSS2 definition of a "pixel" can be used instead.  Note that null 
 is returned if this element is not hooked into the document tree. This 
 method would have been more aptly named as <code>getClientCTM</code>, 
 but the name <code>getScreenCTM</code> is kept for historical reasons.

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> An <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> object that defines the given
   transformation matrix.
</div></dd></dl></dd>
<dt id="types-__svg__SVGLocatable__getTransformToElement" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <b>getTransformToElement</b>(in <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <var>element</var>)</dt><dd class="operation"><div>
 Returns the transformation matrix from the user coordinate system on the
 current element (after application of the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute,
 if any) to the user coordinate system on parameter <var>element</var>
 (after application of its <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute, if any). 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <var>element</var></div> <div> The target element.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> An <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> object that defines the transformation.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>, code SVG_MATRIX_NOT_INVERTABLE</dt><dd class="exception"> Raised if the currently
   defined transformation matrices make it impossible to compute the
   given matrix (e.g., because one of the transformations is singular). 
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGTransformable">4.5.24 Interface SVGTransformable</h3>


 Interface <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> contains properties and methods that
 apply to all elements which have attribute <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a>.
<pre class="idl">interface <b>SVGTransformable</b> : <a class="idlinterface" href="#types-InterfaceSVGLocatable">SVGLocatable</a> {
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGAnimatedTransformList">SVGAnimatedTransformList</a> <a href="#types-__svg__SVGTransformable__transform">transform</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGTransformable__transform" class="attribute first-child"><b>transform</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGAnimatedTransformList">SVGAnimatedTransformList</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> on the given element.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGTests">4.5.25 Interface SVGTests</h3>


 Interface <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a> defines an interface which applies to all
 elements which have attributes <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>,
 <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a> and <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a>.
<pre class="idl">interface <b>SVGTests</b> {

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGStringList">SVGStringList</a> <a href="#types-__svg__SVGTests__requiredFeatures">requiredFeatures</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGStringList">SVGStringList</a> <a href="#types-__svg__SVGTests__requiredExtensions">requiredExtensions</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGStringList">SVGStringList</a> <a href="#types-__svg__SVGTests__systemLanguage">systemLanguage</a>;

  boolean <a href="#types-__svg__SVGTests__hasExtension">hasExtension</a>(in DOMString extension);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGTests__requiredFeatures" class="attribute first-child"><b>requiredFeatures</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGStringList">SVGStringList</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a> on the given element.
</div></dd>
<dt id="types-__svg__SVGTests__requiredExtensions" class="attribute"><b>requiredExtensions</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGStringList">SVGStringList</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a> on the given element.
</div></dd>
<dt id="types-__svg__SVGTests__systemLanguage" class="attribute"><b>systemLanguage</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGStringList">SVGStringList</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a> on the given element.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGTests__hasExtension" class="operation first-child">boolean <b>hasExtension</b>(in DOMString <var>extension</var>)</dt><dd class="operation"><div>
 Returns true if the user agent supports the given extension, specified
 by a URI.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>DOMString <var>extension</var></div> <div> The name of the extension, expressed as a URI.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> True or false, depending on whether the given extension is
   supported.
</div></dd></dl></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGLangSpace">4.5.26 Interface SVGLangSpace</h3>


 Interface <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a> defines an interface which applies to all
 elements which have attributes <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a> and <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a>.
<pre class="idl">interface <b>SVGLangSpace</b> {
  attribute DOMString <a href="#types-__svg__SVGLangSpace__xmllang">xmllang</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute DOMString <a href="#types-__svg__SVGLangSpace__xmlspace">xmlspace</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGLangSpace__xmllang" class="attribute first-child"><b>xmllang</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a> on the given element.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an
   attempt to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>. 
</dd></dl></dd></dl></dd>
<dt id="types-__svg__SVGLangSpace__xmlspace" class="attribute"><b>xmlspace</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a> on the given element.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an
   attempt to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>. 
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGExternalResourcesRequired">4.5.27 Interface SVGExternalResourcesRequired</h3>


 Interface <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a> defines an interface which
 applies to all elements where this element or one of its descendants can
 reference an external resource.
<pre class="idl">interface <b>SVGExternalResourcesRequired</b> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedBoolean">SVGAnimatedBoolean</a> <a href="#types-__svg__SVGExternalResourcesRequired__externalResourcesRequired">externalResourcesRequired</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGExternalResourcesRequired__externalResourcesRequired" class="attribute first-child"><b>externalResourcesRequired</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedBoolean">SVGAnimatedBoolean</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a> on the given
 element. Note that the SVG DOM defines the attribute
 <a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a> as being of type
 <a class="idlinterface" href="#types-InterfaceSVGAnimatedBoolean">SVGAnimatedBoolean</a>, whereas the SVG language definition says that
 <a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a> is not animated. Because the SVG
 language definition states that <a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a>
 cannot be animated, the <a class="idlattr" href="#types-__svg__SVGAnimatedBoolean__animVal">animVal</a> will always be
 the same as the <a class="idlattr" href="#types-__svg__SVGAnimatedBoolean__baseVal">baseVal</a>.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGFitToViewBox">4.5.28 Interface SVGFitToViewBox</h3>


 Interface <a class="idlinterface" href="#types-InterfaceSVGFitToViewBox">SVGFitToViewBox</a> defines DOM attributes that apply to
 elements which have XML attributes <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> and
 <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.
<pre class="idl">interface <b>SVGFitToViewBox</b> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedRect">SVGAnimatedRect</a> <a href="#types-__svg__SVGFitToViewBox__viewBox">viewBox</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGAnimatedPreserveAspectRatio">SVGAnimatedPreserveAspectRatio</a> <a href="#types-__svg__SVGFitToViewBox__preserveAspectRatio">preserveAspectRatio</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGFitToViewBox__viewBox" class="attribute first-child"><b>viewBox</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedRect">SVGAnimatedRect</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> on the given element.
</div></dd>
<dt id="types-__svg__SVGFitToViewBox__preserveAspectRatio" class="attribute"><b>preserveAspectRatio</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGAnimatedPreserveAspectRatio">SVGAnimatedPreserveAspectRatio</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> on the given element.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGZoomAndPan">4.5.29 Interface SVGZoomAndPan</h3>


 The <a class="idlinterface" href="#types-InterfaceSVGZoomAndPan">SVGZoomAndPan</a> interface defines attribute <a class="idlattr" href="#types-__svg__SVGZoomAndPan__zoomAndPan">zoomAndPan</a> and
 associated constants. 
<pre class="idl">interface <b>SVGZoomAndPan</b> {

  // Zoom and Pan Types
  const unsigned short <a href="#types-__svg__SVGZoomAndPan__SVG_ZOOMANDPAN_UNKNOWN">SVG_ZOOMANDPAN_UNKNOWN</a> = 0;
  const unsigned short <a href="#types-__svg__SVGZoomAndPan__SVG_ZOOMANDPAN_DISABLE">SVG_ZOOMANDPAN_DISABLE</a> = 1;
  const unsigned short <a href="#types-__svg__SVGZoomAndPan__SVG_ZOOMANDPAN_MAGNIFY">SVG_ZOOMANDPAN_MAGNIFY</a> = 2;

  attribute unsigned short <a href="#types-__svg__SVGZoomAndPan__zoomAndPan">zoomAndPan</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Zoom and Pan Types”:</dt><dd><dl class="constants">
<dt id="types-__svg__SVGZoomAndPan__SVG_ZOOMANDPAN_UNKNOWN" class="constant first-child"><b>SVG_ZOOMANDPAN_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The enumeration was set to a value that is not one of predefined types.
 It is invalid to attempt to define a new value of this type or to
 attempt to switch an existing value to this type.

</div></dd>
<dt id="types-__svg__SVGZoomAndPan__SVG_ZOOMANDPAN_DISABLE" class="constant"><b>SVG_ZOOMANDPAN_DISABLE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'disable'</span>.

</div></dd>
<dt id="types-__svg__SVGZoomAndPan__SVG_ZOOMANDPAN_MAGNIFY" class="constant"><b>SVG_ZOOMANDPAN_MAGNIFY</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'magnify'</span>.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGZoomAndPan__zoomAndPan" class="attribute first-child"><b>zoomAndPan</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#interact-ZoomAndPanAttribute"><span class="attr-name">‘zoomAndPan’</span></a> on the given element. The
 value must be one of the SVG_ZOOMANDPAN_* constants defined on this
 interface.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an
   attempt to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>. 
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGViewSpec">4.5.30 Interface SVGViewSpec</h3>


 The interface corresponds to an SVG View Specification.
<pre class="idl">interface <b>SVGViewSpec</b> : <a class="idlinterface" href="#types-InterfaceSVGZoomAndPan">SVGZoomAndPan</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGFitToViewBox">SVGFitToViewBox</a> {
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a> <a href="#types-__svg__SVGViewSpec__transform">transform</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <a href="#types-__svg__SVGViewSpec__viewTarget">viewTarget</a>;
  readonly attribute DOMString <a href="#types-__svg__SVGViewSpec__viewBoxString">viewBoxString</a>;
  readonly attribute DOMString <a href="#types-__svg__SVGViewSpec__preserveAspectRatioString">preserveAspectRatioString</a>;
  readonly attribute DOMString <a href="#types-__svg__SVGViewSpec__transformString">transformString</a>;
  readonly attribute DOMString <a href="#types-__svg__SVGViewSpec__viewTargetString">viewTargetString</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGViewSpec__transform" class="attribute first-child"><b>transform</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a>)</span></dt><dd class="attribute"><div>
 Corresponds to the transform setting on the SVG View Specification.
</div></dd>
<dt id="types-__svg__SVGViewSpec__viewTarget" class="attribute"><b>viewTarget</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>)</span></dt><dd class="attribute"><div>
 Corresponds to the viewTarget setting on the SVG View Specification.
</div></dd>
<dt id="types-__svg__SVGViewSpec__viewBoxString" class="attribute"><b>viewBoxString</b><span class="idl-type-parenthetical"> (readonly DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to the viewBox setting on the SVG View Specification.
</div></dd>
<dt id="types-__svg__SVGViewSpec__preserveAspectRatioString" class="attribute"><b>preserveAspectRatioString</b><span class="idl-type-parenthetical"> (readonly DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to the preserveAspectRatio setting on the SVG View Specification.
</div></dd>
<dt id="types-__svg__SVGViewSpec__transformString" class="attribute"><b>transformString</b><span class="idl-type-parenthetical"> (readonly DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to the transform setting on the SVG View Specification.
</div></dd>
<dt id="types-__svg__SVGViewSpec__viewTargetString" class="attribute"><b>viewTargetString</b><span class="idl-type-parenthetical"> (readonly DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to the viewTarget setting on the SVG View Specification.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGURIReference">4.5.31 Interface SVGURIReference</h3>


 Interface <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a> defines an interface which applies to all
 elements which have the collection of XLink attributes, such as
 <span class="attr-name">‘xlink:href’</span>, which define a URI reference.
<pre class="idl">interface <b>SVGURIReference</b> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#types-__svg__SVGURIReference__href">href</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="types-__svg__SVGURIReference__href" class="attribute first-child"><b>href</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <span class="attr-name">‘xlink:href’</span> on
 the given element.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGCSSRule">4.5.32 Interface SVGCSSRule</h3>


 <p>SVG extends interface <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSRule">CSSRule</a> with interface <a class="idlinterface" href="#types-InterfaceSVGCSSRule">SVGCSSRule</a>
 by adding an <a class="idlinterface" href="#color-InterfaceSVGColorProfileRule">SVGColorProfileRule</a> rule to allow for specification of
 ICC-based color.</p>

 <p>It is likely that this extension will become part of a future version of
 CSS and DOM.</p>
<pre class="idl">interface <b>SVGCSSRule</b> : <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSRule">CSSRule</a> {
  const unsigned short <a href="#types-__svg__SVGCSSRule__COLOR_PROFILE_RULE">COLOR_PROFILE_RULE</a> = 7;
};</pre><dl class="interface"><dt class="constants-header">Constants:</dt><dd><dl class="constants">
<dt id="types-__svg__SVGCSSRule__COLOR_PROFILE_RULE" class="constant first-child"><b>COLOR_PROFILE_RULE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The rule is an <a href="http://www.w3.org/TR/SVG/color.html#InterfaceSVGColorProfileRule">@color-profile</a>.
</div></dd></dl></dd></dl>

<h3 id="types-InterfaceSVGRenderingIntent">4.5.33 Interface SVGRenderingIntent</h3>


 The <a class="idlinterface" href="#types-InterfaceSVGRenderingIntent">SVGRenderingIntent</a> interface defines the enumerated list of
 possible values for <a href="#color-ColorProfileElementRenderingIntentAttribute"><span class="attr-name">‘rendering-intent’</span></a> attributes or descriptors.
<pre class="idl">interface <b>SVGRenderingIntent</b> {
  // Rendering Intent Types
  const unsigned short <a href="#types-__svg__SVGRenderingIntent__RENDERING_INTENT_UNKNOWN">RENDERING_INTENT_UNKNOWN</a> = 0;
  const unsigned short <a href="#types-__svg__SVGRenderingIntent__RENDERING_INTENT_AUTO">RENDERING_INTENT_AUTO</a> = 1;
  const unsigned short <a href="#types-__svg__SVGRenderingIntent__RENDERING_INTENT_PERCEPTUAL">RENDERING_INTENT_PERCEPTUAL</a> = 2;
  const unsigned short <a href="#types-__svg__SVGRenderingIntent__RENDERING_INTENT_RELATIVE_COLORIMETRIC">RENDERING_INTENT_RELATIVE_COLORIMETRIC</a> = 3;
  const unsigned short <a href="#types-__svg__SVGRenderingIntent__RENDERING_INTENT_SATURATION">RENDERING_INTENT_SATURATION</a> = 4;
  const unsigned short <a href="#types-__svg__SVGRenderingIntent__RENDERING_INTENT_ABSOLUTE_COLORIMETRIC">RENDERING_INTENT_ABSOLUTE_COLORIMETRIC</a> = 5;
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Rendering Intent Types”:</dt><dd><dl class="constants">
<dt id="types-__svg__SVGRenderingIntent__RENDERING_INTENT_UNKNOWN" class="constant first-child"><b>RENDERING_INTENT_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The type is not one of predefined types. It is invalid to attempt to
 define a new value of this type or to attempt to switch an existing value
 to this type.

</div></dd>
<dt id="types-__svg__SVGRenderingIntent__RENDERING_INTENT_AUTO" class="constant"><b>RENDERING_INTENT_AUTO</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a value of <span class="attr-value">'auto'</span>.

</div></dd>
<dt id="types-__svg__SVGRenderingIntent__RENDERING_INTENT_PERCEPTUAL" class="constant"><b>RENDERING_INTENT_PERCEPTUAL</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a value of <span class="attr-value">'perceptual'</span>.

</div></dd>
<dt id="types-__svg__SVGRenderingIntent__RENDERING_INTENT_RELATIVE_COLORIMETRIC" class="constant"><b>RENDERING_INTENT_RELATIVE_COLORIMETRIC</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a value of <span class="attr-value">'relative-colorimetric'</span>.

</div></dd>
<dt id="types-__svg__SVGRenderingIntent__RENDERING_INTENT_SATURATION" class="constant"><b>RENDERING_INTENT_SATURATION</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a value of <span class="attr-value">'saturation'</span>.

</div></dd>
<dt id="types-__svg__SVGRenderingIntent__RENDERING_INTENT_ABSOLUTE_COLORIMETRIC" class="constant"><b>RENDERING_INTENT_ABSOLUTE_COLORIMETRIC</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a value of <span class="attr-value">'absolute-colorimetric'</span>.

</div></dd></dl></dd></dl>

</div><hr class="chapter-divider" />
<div id="chapter-styling">

<h1>6 Styling</h1><h2 id="styling-toc">Contents</h2><ul class="toc">
<li><a href="#styling-SVGStylingProperties">6.1 SVG's styling properties</a></li>
<li><a href="#styling-StylingScenarios">6.2 Usage scenarios for styling</a></li>
<li><a href="#styling-AlternativesForStyling">6.3 Alternative ways to specify styling properties</a></li>
<li><a href="#styling-UsingPresentationAttributes">6.4 Specifying properties using the presentation
    attributes</a></li>
<li><a href="#styling-StylingWithXSL">6.5 Styling with XSL</a></li>
<li><a href="#styling-StylingWithCSS">6.6 Styling with CSS</a></li>
<li><a href="#styling-CaseSensitivity">6.7 Case sensitivity of property names and values</a></li>
<li><a href="#styling-SVGUseOfCSS">6.8 Facilities from CSS and XSL used by SVG</a></li>
<li><a href="#styling-ReferencingExternalStyleSheets">6.9 Referencing external style sheets</a></li>
<li><a href="#styling-StyleElement">6.10 The <span class="element-name">‘style’</span>
    element</a></li>
<li><a href="#styling-ClassAttribute">6.11 The <span class="attr-name">‘class’</span>
    attribute</a></li>
<li><a href="#styling-StyleAttribute">6.12 The <span class="attr-name">‘style’</span>
    attribute</a></li>
<li><a href="#styling-DefaultStyleSheetLanguage">6.13 Specifying the default style sheet language</a></li>
<li><a href="#styling-Inheritance">6.14 Property inheritance</a></li>
<li><a href="#styling-Scope">6.15 The scope/range of styles</a></li>
<li><a href="#styling-UAStyleSheet">6.16 User agent style sheet</a></li>
<li><a href="#styling-AuralStyleSheets">6.17 Aural style sheets</a></li>
<li><a href="#styling-DOMInterfaces">6.18 DOM interfaces</a><ul class="toc">
<li><a href="#styling-InterfaceSVGStyleElement">6.18.1 Interface SVGStyleElement</a></li></ul></li></ul>

    <h2 id="styling-SVGStylingProperties">6.1 SVG's styling properties</h2>
    <p>SVG uses <span class="SVG-Term">styling properties</span> to
    describe many of its document parameters. Styling properties
    define how the graphics elements in the SVG content are to be
    rendered. SVG uses styling properties for the following:</p>
    <ul><li>Parameters which are clearly visual in nature and thus
      lend themselves to styling. Examples include all attributes
      that define how an object is "painted," such as fill and
      stroke colors, linewidths and dash styles.</li><li>Parameters having to do with text styling such as font
      family and size.</li><li>Parameters which impact the way that graphical elements
      are rendered, such as specifying clipping paths, masks,
      arrowheads, markers and filter effects.</li></ul>
    <p>SVG shares many of its styling properties with CSS
    [<a href="#refs-ref-CSS2">CSS2</a>] and XSL
    [<a href="#refs-ref-XSL">XSL</a>]. Except for any
    additional SVG-specific rules explicitly mentioned in this
    specification, the normative definition of properties that are
    shared with CSS and XSL is the definition of the property from
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/">the CSS2 specification</a>
    [<a href="#refs-ref-CSS2">CSS2</a>].</p>

    <p id="styling-PropertiesFromCSS2">The following properties are shared between CSS2 and SVG.
    Most of these properties are also defined in XSL:</p>
    <ul><li>
        <a href="#text-FontPropertiesUsedBySVG">Font
        properties</a>: 
        <ul><li><a href="#text-FontProperty"><span class="prop-name">‘font’</span></a></li><li><a href="#text-FontFamilyProperty"><span class="prop-name">‘font-family’</span></a></li><li><a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a></li><li><a href="#text-FontSizeAdjustProperty"><span class="prop-name">‘font-size-adjust’</span></a></li><li><a href="#text-FontStretchProperty"><span class="prop-name">‘font-stretch’</span></a></li><li><a href="#text-FontStyleProperty"><span class="prop-name">‘font-style’</span></a></li><li><a href="#text-FontVariantProperty"><span class="prop-name">‘font-variant’</span></a></li><li><a href="#text-FontWeightProperty"><span class="prop-name">‘font-weight’</span></a></li></ul>
      </li><li>
        Text properties: 
        <ul><li><a href="#text-DirectionProperty"><span class="prop-name">‘direction’</span></a></li><li><a href="#text-LetterSpacingProperty"><span class="prop-name">‘letter-spacing’</span></a></li><li><a href="#text-TextDecorationProperty"><span class="prop-name">‘text-decoration’</span></a></li><li><a href="#text-UnicodeBidiProperty"><span class="prop-name">‘unicode-bidi’</span></a></li><li><a href="#text-WordSpacingProperty"><span class="prop-name">‘word-spacing’</span></a></li></ul>
      </li><li>
        Other properties for visual media: 
        <ul><li><a href="#masking-ClipProperty"><span class="prop-name">‘clip’</span></a>, only applicable to <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>.</li><li><a href="#color-ColorProperty"><span class="prop-name">‘color’</span></a>, used to provide a potential indirect value
          (<span class="prop-value">currentColor</span>) for the
          <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>,
          <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>,
          <a href="#pservers-StopColorProperty"><span class="prop-name">‘stop-color’</span></a>,
          <a href="#filters-FloodColorProperty"><span class="prop-name">‘flood-color’</span></a> and
          <a href="#filters-LightingColorProperty"><span class="prop-name">‘lighting-color’</span></a>
          properties.
          (The SVG properties which support color allow a color
          specification which is extended from CSS2 to accommodate
          color definitions in arbitrary color spaces. See <a href="#color-ColorProfileDescriptions">Color profile
          descriptions</a>.)</li><li><a href="#interact-CursorProperty"><span class="prop-name">‘cursor’</span></a></li><li><a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a></li><li><a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a>, only applicable to
          <a href="#coords-ElementsThatEstablishViewports">elements which establish a new viewport</a>.</li><li><a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a></li></ul>
      </li></ul>
    <p>The following SVG properties are not defined in CSS2. The
    complete normative definitions for these properties are found in
    this specification:</p>
    <ul><li>
        <a href="#chapter-masking">Clipping, Masking and
        Compositing</a> properties: 
        <ul><li><a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a></li><li><a href="#masking-ClipRuleProperty"><span class="prop-name">‘clip-rule’</span></a></li><li><a href="#masking-MaskProperty"><span class="prop-name">‘mask’</span></a></li><li><a href="#masking-OpacityProperty"><span class="prop-name">‘opacity’</span></a></li></ul>
      </li><li>
        <a href="#chapter-filters">Filter Effects</a> properties: 
        <ul><li><a href="#filters-EnableBackgroundProperty"><span class="prop-name">‘enable-background’</span></a></li><li><a href="#filters-FilterProperty"><span class="prop-name">‘filter’</span></a></li><li><a href="#filters-FloodColorProperty"><span class="prop-name">‘flood-color’</span></a></li><li><a href="#filters-FloodOpacityProperty"><span class="prop-name">‘flood-opacity’</span></a></li><li><a href="#filters-LightingColorProperty"><span class="prop-name">‘lighting-color’</span></a></li></ul>
      </li><li>
        <a href="#pservers-Gradients">Gradient</a> properties: 
        <ul><li><a href="#pservers-StopColorProperty"><span class="prop-name">‘stop-color’</span></a></li><li><a href="#pservers-StopOpacityProperty"><span class="prop-name">‘stop-opacity’</span></a></li></ul>
      </li><li>
        <a href="#chapter-interact">Interactivity</a> properties: 
        <ul><li><a href="#interact-PointerEventsProperty"><span class="prop-name">‘pointer-events’</span></a></li></ul>
      </li><li>
        <a href="#chapter-color">Color</a> and <a href="#chapter-painting">Painting</a> properties: 
        <ul><li><a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a></li><li><a href="#painting-ColorInterpolationFiltersProperty"><span class="prop-name">‘color-interpolation-filters’</span></a></li><li><a href="#color-ColorProfileProperty"><span class="prop-name">‘color-profile’</span></a></li><li><a href="#painting-ColorRenderingProperty"><span class="prop-name">‘color-rendering’</span></a></li><li><a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a></li><li><a href="#painting-FillOpacityProperty"><span class="prop-name">‘fill-opacity’</span></a></li><li><a href="#painting-FillRuleProperty"><span class="prop-name">‘fill-rule’</span></a></li><li><a href="#painting-ImageRenderingProperty"><span class="prop-name">‘image-rendering’</span></a></li><li><a href="#painting-MarkerProperty"><span class="prop-name">‘marker’</span></a></li><li><a href="#painting-MarkerEndProperty"><span class="prop-name">‘marker-end’</span></a></li><li><a href="#painting-MarkerMidProperty"><span class="prop-name">‘marker-mid’</span></a></li><li><a href="#painting-MarkerStartProperty"><span class="prop-name">‘marker-start’</span></a></li><li><a href="#painting-ShapeRenderingProperty"><span class="prop-name">‘shape-rendering’</span></a></li><li><a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a></li><li><a href="#painting-StrokeDasharrayProperty"><span class="prop-name">‘stroke-dasharray’</span></a></li><li><a href="#painting-StrokeDashoffsetProperty"><span class="prop-name">‘stroke-dashoffset’</span></a></li><li><a href="#painting-StrokeLinecapProperty"><span class="prop-name">‘stroke-linecap’</span></a></li><li><a href="#painting-StrokeLinejoinProperty"><span class="prop-name">‘stroke-linejoin’</span></a></li><li><a href="#painting-StrokeMiterlimitProperty"><span class="prop-name">‘stroke-miterlimit’</span></a></li><li><a href="#painting-StrokeOpacityProperty"><span class="prop-name">‘stroke-opacity’</span></a></li><li><a href="#painting-StrokeWidthProperty"><span class="prop-name">‘stroke-width’</span></a></li><li><a href="#painting-TextRenderingProperty"><span class="prop-name">‘text-rendering’</span></a></li></ul>
      </li><li>
        <a href="#chapter-text">Text</a> properties: 
        <ul><li><a href="#text-AlignmentBaselineProperty"><span class="prop-name">‘alignment-baseline’</span></a></li><li><a href="#text-BaselineShiftProperty"><span class="prop-name">‘baseline-shift’</span></a></li><li><a href="#text-DominantBaselineProperty"><span class="prop-name">‘dominant-baseline’</span></a></li><li><a href="#text-GlyphOrientationHorizontalProperty"><span class="prop-name">‘glyph-orientation-horizontal’</span></a></li><li><a href="#text-GlyphOrientationVerticalProperty"><span class="prop-name">‘glyph-orientation-vertical’</span></a></li><li><a href="#text-KerningProperty"><span class="prop-name">‘kerning’</span></a></li><li><a href="#text-TextAnchorProperty"><span class="prop-name">‘text-anchor’</span></a></li><li><a href="#text-WritingModeProperty"><span class="prop-name">‘writing-mode’</span></a></li></ul>
      </li></ul>
    <p>A table that lists and summarizes the styling properties can
    be found in the <a href="#chapter-propidx">Property Index</a>.</p>

    <h2 id="styling-StylingScenarios">6.2 Usage scenarios for styling</h2>
    <p>SVG has many usage scenarios, each with different needs.
    Here are three common usage scenarios:</p>
    <ol><li>
        <p><strong>SVG content used as an exchange format (style
        sheet language-independent)</strong>:</p>
        <p>In some usage scenarios, reliable interoperability of
        SVG content across software tools is the main goal. Since
        support for a particular style sheet language is not
        guaranteed across all implementations, it is a requirement
        that SVG content can be fully specified without the use of
        a style sheet language.</p>
      </li><li>
        <p><strong>SVG content generated as the output from XSLT</strong>:</p>
        <p>XSLT offers the ability to take a stream of arbitrary
        XML content as input, apply potentially complex
        transformations, and then generate SVG content as output
        [<a href="#refs-ref-XSLT">XSLT</a>].
        XSLT can be used to transform XML data extracted from
        databases into an SVG graphical representation of that
        data. It is a requirement that fully specified SVG content
        can be generated from XSLT.</p>
      </li><li>
        <p><strong>SVG content styled with CSS</strong>:</p>
        <p>CSS is a widely implemented declarative language for
        assigning styling properties to XML content, including SVG
        [<a href="#refs-ref-CSS2">CSS2</a>].
        It represents a combination of features, simplicity and
        compactness that makes it very suitable for many
        applications of SVG. It is a requirement that CSS styling
        can be applied to SVG content.</p>
      </li></ol>

    <h2 id="styling-AlternativesForStyling">6.3 Alternative ways to specify styling properties</h2>
    <p>Styling properties can be assigned to SVG elements in the
    following two ways:</p>
    <ul><li id="styling-StylingUsingPresentationAttributes">
        <p><strong>Presentation attributes</strong></p>
        <p>Styling properties can be assigned using SVG's <span class="SVG-Term">presentation attributes</span>. For each
        styling property defined in this specification, there is a
        corresponding XML presentation attribute available on all
        relevant SVG elements. Detailed information on the
        presentation attributes can be found in <a href="#styling-UsingPresentationAttributes">Specifying
        properties using the presentation attributes</a>.</p>
        <p>The presentation attributes are style sheet language
        independent and thus are applicable to usage scenario 1
        above (i.e., tool interoperability). Because it is
        straightforward to assign values to XML attributes from
        XSLT, the presentation attributes are well-suited to usage
        scenario 2 above (i.e., SVG generation from XSLT). (See <a href="#styling-StylingWithXSL">Styling with XSL</a>
        below.)</p>
        <p><a href="#conform-ConformingSVGInterpreters">Conforming
        SVG Interpreters</a> and <a href="#conform-ConformingSVGViewers">Conforming SVG
        Viewers</a> are required to support SVG's presentation
        attributes.</p>
      </li><li id="styling-StylingUsingCSSStylesheets">
        <p><strong>CSS Stylesheets</strong></p>
        <p>To support usage scenario 3 above, SVG content can be
        styled with CSS. For more information, see <a href="#styling-StylingWithCSS">Styling with
        CSS</a>.</p>
        <p><a href="#conform-ConformingSVGInterpreters">Conforming
        SVG Interpreters</a> and <a href="#conform-ConformingSVGViewers">Conforming SVG
        Viewers</a> that support CSS styling of generic (i.e.,
        text-based) XML content are required to also support CSS styling
        of SVG content.</p>
      </li></ul>

    <h2 id="styling-UsingPresentationAttributes">6.4 Specifying properties using the presentation
    attributes</h2>
    <p>For each styling property defined in this specification (see
    <a href="#chapter-propidx">Property Index</a>), there is a
    corresponding XML attribute (the <span class="SVG-Term">presentation attribute</span>) with the same
    name that is available on all relevant SVG elements. For
    example, SVG has a <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> property that defines how
    to paint the interior of a shape. There is a corresponding
    presentation attribute with the same name (i.e., <span class="attr-name">‘fill’</span>) that can be used to specify a
    value for the <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> property on a given
    element.</p>
    <p>The following example shows how the <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> and
    <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> properties can be specified on a <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> using the
    <span class="attr-name">‘fill’</span> and
    <span class="attr-name">‘stroke’</span> presentation attributes. The
    rectangle will be filled with red and outlined with blue:</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1"
     width="10cm" height="5cm" viewBox="0 0 1000 500"&gt;
  &lt;rect x="200" y="100" width="600" height="300" 
        fill="red" stroke="blue" stroke-width="3"/&gt;
&lt;/svg&gt;</pre><p class="view-as-svg"><a href="images/styling/PresentationAttributes.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p>The presentation attributes offer the following
    advantages:</p>
    <ul><li><strong>Broad support</strong>. All versions of <a href="#conform-ConformingSVGInterpreters">Conforming SVG
      Interpreters</a> and <a href="#conform-ConformingSVGViewers">Conforming SVG
      Viewers</a> are required to support the presentation
      attributes.</li><li><strong>Simplicity</strong>. Styling properties can be
      attached to elements by simply providing a value for the
      presentation attribute on the proper elements.</li><li><strong>Restyling</strong>. SVG content that uses the
      presentation attributes is highly compatible with downstream
      processing using XSLT [<a href="#refs-ref-XSLT">XSLT</a>] [<a href="#refs-ref-XSLT2">XSLT2</a>] or supplemental
      styling by adding CSS style rules to override some of the
      presentation attributes.</li><li><strong>Convenient generation using XSLT</strong>. In some
      cases, XSLT can be used to generate fully styled SVG content.
      The presentation attributes are compatible with convenient
      generation of SVG from XSLT.</li></ul>
    <p>In some situations, SVG content that uses the presentation
    attributes has potential limitations versus SVG content that is
    styled with a style sheet language such as CSS (see <a href="#styling-StylingWithCSS">Styling with CSS</a>). In
    other situations, such as when an XSLT style sheet generates
    SVG content from semantically rich XML source files, the
    limitations below may not apply. Depending on the situation,
    some of the following potential limitations may or may not
    apply to the presentation attributes:</p>
    <ul><li><strong>Styling attached to content</strong>. The
      presentation attributes are attached directly to particular
      elements, thereby diminishing potential advantages that comes
      from abstracting styling from content, such as the ability to
      restyle documents for different uses and environments.</li><li><strong>Flattened data model</strong>. In and of
      themselves, the presentation attributes do not offer the
      higher level abstractions that you get with a styling system,
      such as the ability to define named collections of properties
      which are applied to particular categories of elements. The
      result is that, in many cases, important higher level
      semantic information can be lost, potentially making document
      reuse and restyling more difficult.</li><li><strong>Potential increase in file size</strong>. Many
      types of graphics use similar styling properties across
      multiple elements. For example, a company organization chart
      might assign one collection of styling properties to the
      boxes around temporary workers (e.g., dashed outlines, red
      fill), and a different collection of styling properties to
      permanent workers (e.g., solid outlines, blue fill). Styling
      systems such as CSS allow collections of properties to be
      defined once in a file. With the styling attributes, it might
      be necessary to specify presentation attributes on each
      different element.</li><li><strong>Potential difficulty when embedded into a
      CSS-styled parent document</strong>. When SVG content is
      embedded in other XML, and the desire is to style all aspects
      of the compound document with CSS, use of the presentation
      attributes might introduce complexity and difficulty. In this
      case, it is sometimes easier if the SVG content does not use
      the presentation attributes and instead is styled using CSS
      facilities.</li></ul>
    <p>For user agents that support CSS, the presentation
    attributes must be translated to corresponding CSS style rules
    according to rules described in
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#q12">Precedence of non-CSS presentational hints</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 6.4.4),
    with the additional
    clarification that the presentation attributes are conceptually
    inserted into a new author style sheet which is the first in
    the author style sheet collection. The presentation attributes
    thus will participate in the CSS2 cascade
    as if they were replaced by corresponding CSS style
    rules placed at the start of the author style sheet with a
    specificity of zero. In general, this means that the
    presentation attributes have lower priority than other CSS
    style rules specified in author style sheets or <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a>
    attributes.</p>
    <p>User agents that do not support CSS must ignore any CSS
    style rules defined in CSS style sheets and <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a>
     attributes. In this case,
    the CSS cascade does not apply. (Inheritance of properties,
    however, does apply. See <a href="#styling-Inheritance">Property inheritance</a>.)</p>
    <p>An <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#important-rules"><span class="prop-value">!important</span> declaration</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 6.4.2) within a presentation attribute definition is an invalid value.</p>
    <p>Animation of presentation attributes is equivalent to
    animating the corresponding property. Thus, the same effect
    occurs from animating the presentation attribute with
    <span class="attr-value">attributeType="XML"</span>
    as occurs with animating the corresponding property with
    <span class="attr-value">attributeType="CSS"</span> (see
    <a href="#animate-AttributeTypeAttribute"><span class="attr-name">‘attributeType’</span></a>).</p>
    
    <h2 id="styling-StylingWithXSL">6.5 Styling with XSL</h2>
    <p>XSL style sheets [<a href="#refs-ref-XSLT">XSLT</a>] [<a href="#refs-ref-XSLT2">XSLT2</a>] define how to
    transform XML content into something else, usually other XML.
    When XSLT is used in conjunction with SVG, sometimes SVG
    content will serve as both input and output for XSL style
    sheets. Other times, XSL style sheets will take non-SVG content
    as input and generate SVG content as output.</p>
    <p>The following example uses an external XSL style sheet to
    transform SVG content into modified SVG content (see <a href="#styling-ReferencingExternalStyleSheets">Referencing
    external style sheets</a>). The style sheet sets the
    <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> and <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> properties on all
    rectangles to red and blue, respectively:</p>
<pre>
<strong>mystyle.xsl</strong>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:svg="http://www.w3.org/2000/svg"&gt;
  &lt;xsl:output
    method="xml"
    encoding="utf-8"
    doctype-public="-//W3C//DTD SVG 1.1//EN"
    doctype-system="http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"/&gt;
  &lt;!-- Add version to topmost 'svg' element --&gt;
  &lt;xsl:template match="/svg:svg"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:copy-of select="@*"/&gt;
      &lt;xsl:attribute name="version"&gt;1.1&lt;/xsl:attribute&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
  &lt;!-- Add styling to all 'rect' elements --&gt;
  &lt;xsl:template match="svg:rect"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:copy-of select="@*"/&gt;
      &lt;xsl:attribute name="fill"&gt;red&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="stroke"&gt;blue&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="stroke-width"&gt;3&lt;/xsl:attribute&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;

<strong>SVG file to be transformed by mystyle.xsl</strong>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;?xml-stylesheet href="mystyle.xsl" type="application/xml"?&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg"
     width="10cm" height="5cm"&gt;
  &lt;rect x="2cm" y="1cm" width="6cm" height="3cm"/&gt;
&lt;/svg&gt;

<strong>SVG content after applying mystyle.xsl</strong>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
      "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg"
     width="10cm" height="5cm" version="1.1"&gt;
  &lt;rect x="2cm" y="1cm" width="6cm" height="3cm" fill="red" stroke="blue" stroke-width="3"/&gt;
&lt;/svg&gt;
</pre>

    <h2 id="styling-StylingWithCSS">6.6 Styling with CSS</h2>
    <p>SVG implementations that support CSS are required to support
    the following:</p>
    <ul><li>External CSS style sheets referenced from the current
      document (see <a href="#styling-ReferencingExternalStyleSheets">Referencing
      external style sheets</a>)</li><li>Internal CSS style sheets (i.e., style sheets embedded
      within the current document, such as within an SVG <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a> element)</li><li>Inline style (i.e., CSS property declarations within a <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attribute on a particular
      SVG element)</li></ul>
    <p>The following example shows the use of an external CSS style
    sheet to set the <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> and <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> properties on all
    rectangles to red and blue, respectively:</p>
<pre>
<strong>mystyle.css</strong>
rect {
  fill: red;
  stroke: blue;
  stroke-width: 3
}

<strong>SVG file referencing mystyle.css</strong>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;?xml-stylesheet href="mystyle.css" type="text/css"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1"
     width="10cm" height="5cm" viewBox="0 0 1000 500"&gt;
  &lt;rect x="200" y="100" width="600" height="300"/&gt;
&lt;/svg&gt;
</pre>
    <p class="view-as-svg"><a href="images/styling/ExternalCSSStyleSheet.svg">View this
    example as SVG (SVG-enabled browsers only)</a><br />
      </p>

    <p id="styling-StyleElementExample">CSS style sheets can be embedded within SVG content inside
    of a <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a> element. The following
    example uses an internal CSS style sheet to achieve the same
    result as the previous example:</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1"
     width="10cm" height="5cm" viewBox="0 0 1000 500"&gt;
  &lt;defs&gt;
    &lt;style type="text/css"&gt;&lt;![CDATA[
      rect {
        fill: red;
        stroke: blue;
        stroke-width: 3
      }
    ]]&gt;&lt;/style&gt;
  &lt;/defs&gt;
  &lt;rect x="200" y="100" width="600" height="300"/&gt;
&lt;/svg&gt;</pre><p class="view-as-svg"><a href="images/styling/InternalCSSStyleSheet.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p>Note how the CSS style sheet is placed within a <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#sec-cdata-sect"><code>CDATA</code></a>
    construct (i.e., <code>&lt;![CDATA[ ... ]]&gt;</code>). Placing
    internal CSS style sheets within <code>CDATA</code> blocks is
    sometimes necessary since CSS style sheets can include
    characters, such as "&gt;", which conflict with XML parsers.
    Even if a given style sheet does not use characters that
    conflict with XML parsing, it is highly recommended that
    internal style sheets be placed inside <code>CDATA</code>
    blocks.</p>
    <p>Implementations that support CSS are also required to
    support CSS inline style. Similar to the <a href="http://www.w3.org/TR/1999/REC-html401-19991224/present/styles.html#h-14.2.2"><span class="attr-name">‘style’</span></a> attribute in HTML, CSS
    inline style can be declared within a <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attribute in SVG by
    specifying a semicolon-separated list of property declarations,
    where each property declaration has the form "name: value".
    Note that property declarations inside the <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a>
    attribute must follow CSS style rules, see
    <a href="#styling-StyleAttribute">The 'style' attribute</a>.</p>

    
    <p id="styling-StyleAttributeExample">The following example shows how the
    <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> and <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> properties can be specified
    on a <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> using the <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attribute. Just like the
    previous example, the rectangle will be filled with red and
    outlined with blue:</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1"
     width="10cm" height="5cm" viewBox="0 0 1000 500"&gt;
  &lt;rect x="200" y="100" width="600" height="300" 
        style="fill: red; stroke: blue; stroke-width: 3"/&gt;
&lt;/svg&gt;</pre><p class="view-as-svg"><a href="images/styling/StyleAttribute.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p>In an SVG user agent that supports CSS style sheets, the
    following facilities from CSS2 must be supported:</p>
    <ul><li>CSS2 <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/selector.html">selectors</a>
      within style sheets ([<a href="#refs-ref-CSS2">CSS2</a>], chapter 5).
      Because SVG is intended to be used as one component in a
      multiple namespace XML application and CSS2 is not namespace
      aware, type selectors will only match against the local part
      of the element's qualified name.</li><li><a href="http://www.w3.org/1999/06/REC-xml-stylesheet-19990629/">External CSS style sheets</a>
      [<a href="#refs-ref-XML-SS">XML-SS</a>], CSS
      style sheets within <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a> elements and CSS
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#q8">declaration
      blocks</a> ([<a href="#refs-ref-CSS2">CSS2</a>], section 4.1.7)
      within <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attributes attached to
      specific SVG elements.</li><li>CSS2 rules for <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html">assigning
      property values, cascading and inheritance</a>
      ([<a href="#refs-ref-CSS2">CSS2</a>], chapter 6).</li><li><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">@font-face</a>,
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#at-media-rule">@media</a>,
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#at-import">@import</a>
      and <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#x66">@charset</a>
      rules within style sheets
      ([<a href="#refs-ref-CSS2">CSS2</a>], sections 15.3.1, 7.2.1, 6.3 and 4.4).</li><li>CSS2's <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/selector.html#dynamic-pseudo-classes">dynamic pseudo-classes</a>
      :hover, :active and :focus and <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/selector.html#q15">pseudo-classes</a>
      :first-child, :visited, :link and :lang
      ([<a href="#refs-ref-CSS2">CSS2</a>], section 5.11).
      The remaining CSS2 pseudo-classes, including those having to do with
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/generate.html">generated content</a>
      ([<a href="#refs-ref-CSS2">CSS2</a>], chapter 12),
      are not part of the SVG language definition.
      An SVG element gains focus when it is selected. See <a href="#text-TextSelection">Text selection</a>.</li><li>For the purposes of aural media, SVG represents a
      CSS-stylable XML grammar. In user agents that support aural
      style sheets,
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html">CSS aural style properties</a> can be applied
      as defined in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], chapter 19). (See
      <a href="#styling-AuralStyleSheets">Aural style sheets</a>.)</li><li>CSS style sheets defined within a <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a>
      element can be immediate character data content of the <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a>
      element or can be embedded within a
      <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#sec-cdata-sect">CDATA section</a>
      ([<a href="#refs-ref-XML10">XML10</a>], section 2.7).</li></ul>
    <p>SVG defines an <a href="#color-ColorProfileAtRule">@color-profile</a>
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#at-rules">at-rule</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 4.1.6)
    for defining color profiles so that ICC color profiles can be
    applied to CSS-styled SVG content.</p>
    <p>Note the following about relative URIs and external CSS
    style sheets: The CSS2 specification
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#uri">says</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 4.3.4)
    that relative URIs (as defined in <a href="http://www.ietf.org/rfc/rfc2396.txt"><cite>Uniform Resource Identifiers (URI): Generic Syntax</cite></a>
    [<a href="#refs-ref-RFC3986">RFC3986</a>]) within
    style sheets are resolved such that the base URI is that of the
    style sheet, not that of the referencing document.</p>
    
    <h2 id="styling-CaseSensitivity">6.7 Case sensitivity of property names and values</h2>
    <p>Property declarations via <a href="#intro-TermPresentationAttribute">presentation
    attributes</a> are expressed in XML [<a href="http://www.w3.org/TR/2008/REC-xml-20081126/">XML10</a>], which is
    case-sensitive. CSS property declarations specified either in
    CSS style sheets or in a <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attribute, on the other
    hand, are <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#q4">generally case-insensitive with some exceptions</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 4.1.3).</p>
    <p>Because presentation attributes are expressed as XML
    attributes, presentation attributes are case-sensitive and must
    match the exact name as specified in the <a href="#chapter-svgdtd">DTD</a>
    (see the <code>SVG.Presentation.attrib</code> entity in the DTD,
    which expands to all of the presentation attributes).
    When using a presentation attribute to specify a value for the
    <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> property, the presentation attribute must be
    be specified as <span class="attr-value">fill="…"</span> and not
    <span class="attr-value">fill="…"</span> or <span class="attr-value">Fill="…"</span>. Keyword
    values, such as <span class="attr-value">italic</span> in
    <span class="attr-value">font-style="italic"</span>,
    are also case-sensitive and must be specified using the exact
    case used in the specification which defines the given keyword.
    For example, the keyword <span class="attr-value">sRGB</span>
    must have lowercase "s" and uppercase "RGB".</p>
    <p>Property declarations within CSS style sheets or in a
    <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attribute must only conform to CSS rules, which are generally
    more lenient with regard to case sensitivity. However, to
    promote consistency across the different ways for expressing
    styling properties, it is strongly recommended that authors use
    the exact property names (usually, lowercase letters and
    hyphens) as defined in the relevant specification and express
    all keywords using the same case as is required by presentation
    attributes and not take advantage of CSS's ability to ignore
    case.</p>

    <h2 id="styling-SVGUseOfCSS">6.8 Facilities from CSS and XSL used by SVG</h2>
    <p>SVG shares various relevant properties and approaches common
    to CSS and XSL, plus the semantics of many of the processing
    rules.</p>
    <p>SVG shares the following facilities with CSS and XSL:</p>
    <ul><li>Shared properties. Many of SVG's properties are shared
      between CSS2, XSL and SVG. (See <a href="#styling-PropertiesFromCSS2">list of shared
      properties</a>).</li><li>Syntax rules. (The normative references are
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html">CSS2 syntax and basic data types</a>
      and <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/grammar.html">The grammar of CSS2</a>;
      in [<a href="#refs-ref-CSS2">CSS2</a>], chapter 4 and appendix D.)</li><li>Allowable data types. (The normative reference is <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html">CSS2 syntax
      and basic data types</a> ([<a href="#refs-ref-CSS2">CSS2</a>], chapter 4), with the exception that SVG
      length and angle values without a unit identifier.  See <a href="#coords-Units">Units</a>.)</li><li><a href="#styling-Inheritance">Inheritance
      rules</a>.</li><li>The color keywords from CSS2 that correspond to the
      colors used by objects in the user's environment. (The
      normative reference is 
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/ui.html#system-colors">CSS2
      system colors</a>; in [<a href="#refs-ref-CSS2">CSS2</a>], section 18.2.)</li><li>For implementations that support CSS styling of SVG
      content, then that styling must be compatible with various
      other rules in CSS. (See <a href="#styling-StylingWithCSS">Styling with
      CSS</a>.)</li></ul>

    <h2 id="styling-ReferencingExternalStyleSheets">6.9 Referencing external style sheets</h2>
    <p>External style sheets are referenced using the mechanism
    documented in <a href="http://www.w3.org/1999/06/REC-xml-stylesheet-19990629/"><cite>Associating Style Sheets with XML documents Version 1.0</cite></a>
    [<a href="#refs-ref-XML-SS">XML-SS</a>].</p>

    <h2 id="styling-StyleElement">6.10 The <span class="element-name">‘style’</span>
    element</h2>
    <p>The <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a> element allows
    style sheets to be embedded directly within SVG content. SVG's <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a> element has the same
    attributes as the corresponding element in HTML (see <a href="http://www.w3.org/TR/1999/REC-html401-19991224/present/styles.html#h-14.2.3">
    HTML's <span class="attr-name">‘style’</span> element</a>).</p>

    <div class="element-summary"><div class="element-summary-name"><span class="element-name">‘style’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>
                Any elements or character data.
              </dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#styling-StyleElementTypeAttribute"><span class="attr-name">‘type’</span></a></li><li><a href="#styling-StyleElementMediaAttribute"><span class="attr-name">‘media’</span></a></li><li><a href="#styling-StyleElementTitleAttribute"><span class="attr-name">‘title’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#styling-InterfaceSVGStyleElement">SVGStyleElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p>Attribute definitions:</p>
      <dl><dt id="styling-StyleElementTypeAttribute"><span class="adef">type</span> = <em>content-type</em></dt><dd>This attribute specifies the style sheet language of
        the element's contents. The style sheet language is
        specified as a content type (e.g., "text/css"), as per <a href="http://www.ietf.org/rfc/rfc2046.txt">MIME Part Two: Media Types</a>
        [<a href="#refs-ref-RFC2046">RFC2046</a>].
        If a <a href="#styling-StyleElementTypeAttribute"><span class="attr-name">‘type’</span></a> is not provided, the value of  <a href="#styling-ContentStyleTypeAttribute"><span class="attr-name">‘contentStyleType’</span></a> 
        on the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element shall be used, which in turn defaults to "text/css"  
        [<a href="#refs-ref-RFC2046">RFC2046</a>]. If a  <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a> element falls 
        outside of the <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>
        and the <a href="#styling-StyleElementTypeAttribute"><span class="attr-name">‘type’</span></a> is not 
        provided, the <a href="#styling-StyleElementTypeAttribute"><span class="attr-name">‘type’</span></a> must default to "text/css" 
        [<a href="#refs-ref-RFC2046">RFC2046</a>]. <br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="styling-StyleElementMediaAttribute"><span class="adef">media</span> = <em>media-descriptors</em></dt><dd>This attribute specifies the intended destination
        medium for style information. It may be a single media
        descriptor or a comma-separated list. The default value for
        this attribute is "all". The set of recognized
        <em>media-descriptors</em> are the list of <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#media-types">media types recognized by CSS2</a>
        ([<a href="#refs-ref-CSS2">CSS2</a>], section 7.3).<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="styling-StyleElementTitleAttribute"><span class="adef">title</span> = <em>advisory-title</em></dt><dd>(For compatibility with HTML 4 [<a href="#refs-ref-HTML4">HTML4</a>].) This
        attribute specifies an advisory title for the <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a> element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd></dl>
    </div>
    <p>The syntax of style data depends on the style sheet
    language.</p>
    <p>Some style sheet languages might allow a wider variety of
    rules in the <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a> element
    than in the <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a>. For example, with
    CSS, rules can be declared within a <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a> element that cannot be
    declared within a <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a>
    attribute.</p>
    <p>An example showing the <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a> element is provided above
    (see <a href="#styling-StyleElementExample">example</a>).</p>

    <h2 id="styling-ClassAttribute">6.11 The <span class="attr-name">‘class’</span>
    attribute</h2>
    <div class="adef-list">
      <p>Attribute definitions:</p>
      <dl><dt><span class="adef">class</span> = <em>list</em></dt><dd>This attribute assigns a class name or set of class
        names to an element. Any number of elements may be assigned
        the same class name or names. Multiple class names must be
        separated by white space characters.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>
    <p>The <a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a> attribute assigns
    one or more class names to an element. The element may be said
    to belong to these classes. A class name may be shared by
    several element instances. The <a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a> attribute has several
    roles:</p>
    <ul><li>As a style sheet selector (when an author wishes to
      assign style information to a set of elements).</li><li>For general purpose processing by user agents.</li></ul>
    <p>In the following example, the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element is used in
    conjunction with the <a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a>
    attribute to markup document messages. Messages appear in both
    English and French versions.</p>
<pre>
&lt;!-- English messages --&gt;
&lt;text class="info" lang="en"&gt;Variable declared twice&lt;/text&gt;
&lt;text class="warning" lang="en"&gt;Undeclared variable&lt;/text&gt;
&lt;text class="error" lang="en"&gt;Bad syntax for variable name&lt;/text&gt;
&lt;!-- French messages --&gt;
&lt;text class="info" lang="fr"&gt;Variable déclarée deux fois&lt;/text&gt;
&lt;text class="warning" lang="fr"&gt;Variable indéfinie&lt;/text&gt;
&lt;text class="error" lang="fr"&gt;Erreur de syntaxe pour variable&lt;/text&gt;
</pre>
    <p>In an SVG user agent that supports <a href="#chapter-styling">CSS styling</a>, the following CSS style
    rules would tell visual user agents to display informational
    messages in green, warning messages in yellow, and error
    messages in red:</p>
<pre>
text.info    { color: green }
text.warning { color: yellow }
text.error   { color: red }
</pre>

    <h2 id="styling-StyleAttribute">6.12 The <span class="attr-name">‘style’</span>
    attribute</h2>
    <p>The <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attribute allows
    per-element style rules to be specified directly on a given
    element. When CSS styling is used, CSS inline style is
    specified by including semicolon-separated property
    declarations of the form "name : value" within the <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attribute.
    Property declarations must follow CSS style rules thus CSS defined
    <a href="#intro-TermProperty"><span class="svg-term">properties</span></a> (e.g. 'font-size') when having a
    &lt;length&gt; value must include a unit (for non-zero
    values). See <a href="#styling-SVGStylingProperties">SVG's
    styling properties</a> for a list of CSS defined properties.</p>

    <div class="adef-list">
      <p>Attribute definitions:</p>
      <dl><dt><span class="adef">style</span> = <em>style</em></dt><dd>This attribute specifies style information for the
        current element. The style attribute specifies style
        information for a single element. The style sheet language
        of inline style rules is given by the value of attribute
        <a href="#styling-ContentStyleTypeAttribute"><span class="attr-name">‘contentStyleType’</span></a> on the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.
        The syntax of style data depends on the style sheet language.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd></dl>
    </div>
    <p>The style attribute may be used to apply a particular style
    to an individual SVG element. If the style will be reused for
    several elements, authors should use the <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a> element to regroup that
    information. For optimal flexibility, authors should define
    styles in external style sheets.</p>
    <p>An example showing the <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a>
    attribute is provided above (see <a href="#styling-StyleAttributeExample">example</a>).</p>

    <h2 id="styling-DefaultStyleSheetLanguage">6.13 Specifying the default style sheet language</h2>
    <p>The <a href="#styling-ContentStyleTypeAttribute"><span class="attr-name">‘contentStyleType’</span></a> attribute on the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element
    specifies the default style sheet language for the given document
    fragment.</p>
    <div class="adef-list">
      <dl><dt id="styling-ContentStyleTypeAttribute"><span class="adef">contentStyleType</span> = "<span class="attr-value"><em>content-type</em></span>"</dt><dd>Identifies the default style sheet language for the
        given document. That language must then be used for all instances of style that 
        do not specify their own style sheet language, such as the <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> 
        attributes that are available on many elements. The value <span class="attr-value"><em>content-type</em></span> specifies a media
        type, per <a href="http://www.ietf.org/rfc/rfc2046.txt">MIME Part Two: Media Types</a>
        [<a href="#refs-ref-RFC2046">RFC2046</a>].
        The default value is <span class="attr-value">"text/css"</span>
        [<a href="#refs-ref-RFC2318">RFC2318</a>].<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd></dl>
      <p>Since the only widely deployed language used for inline styling (in style elements and style attributes) is CSS, and since that is already the default language if contentStyleType is omitted, in practice contentStyleType is not well supported in user agents. XSL style sheets are typically external. If a new style sheet language becomes popular, it might not use style attributes and could easily declare which language is in use with the type attribute on the style element. </p>
      <p>The use of contentStyleType is therefore deprecated; new content should not use it. Future versions of the SVG specification may remove contentStyleType. </p>

    </div>
    <h2 id="styling-Inheritance">6.14 Property inheritance</h2>
    <p>Whether or not the user agent supports CSS, property
    inheritance in SVG follows the property inheritance rules
    defined in the CSS2 specification. The normative definition for
    property inheritance is the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#inheritance">Inheritance</a> section
    of the CSS2 specification ([<a href="#refs-ref-CSS2">CSS2</a>], section 6.2).</p>
    <p>The definition of each property indicates whether the
    property can inherit the value of its parent.</p>
    <p>In SVG, as in CSS2, most elements inherit 
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#computed-value">computed values</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 6.1.2).
    For cases where something other than
    computed values are inherited, the property definition will
    describe the inheritance rules. For <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#specified-value">specified values</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 6.1.1)
    which are expressed in user units, in
    pixels (e.g., <span class="attr-value">20px</span>) or in absolute values,
    the computed value equals the specified
    value. For specified values which use certain relative units
    (i.e., <em>em</em>, <em>ex</em> and percentages), the computed
    value will have the same units as the value to which it is
    relative. Thus, if the parent element has a <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> of
    <span class="attr-value">10pt</span> and the current
    element has a <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> of <span class="attr-value">120%</span>,
    then the computed value for <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> on the current element
    will be <span class="attr-value">12pt</span>. In cases where the referenced value for
    relative units is not expressed in any of the standard SVG
    units (i.e., CSS units or user units), such as when a
    percentage is used relative to the current viewport or an
    object bounding box, then the computed value will be in user
    units.</p>
    <p>Note that SVG has some facilities wherein a property which
    is specified on an ancestor element might effect its descendant
    element, even if the descendant element has a different
    assigned value for that property. For example, if a <a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a>
    property is specified on an ancestor element, and the current element has a
    <a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a> of <span class="prop-value">none</span>, the
    ancestor's clipping path
    still applies to the current element because the semantics of
    SVG state that the clipping path used on a given element is the
    intersection of all clipping paths specified on itself and all
    ancestor elements. The key concept is that property assignment
    (with possible property inheritance) happens first. After
    properties values have been assigned to the various elements,
    then the user agent applies the semantics of each assigned
    property, which might result in the property assignment of an
    ancestor element affecting the rendering of its
    descendants.</p>

    <h2 id="styling-Scope">6.15 The scope/range of styles</h2>
    <p>The following define the scope/range of style sheets:</p>
    <dl><dt>Stand-alone SVG document</dt><dd>There is one parse tree. Style sheets defined anywhere
      within the SVG document (in style elements or style
      attributes, or in external style sheets linked with the style
      sheet processing instruction) apply across the entire SVG
      document.</dd><dt>Stand-alone SVG document embedded in an HTML or
      XML document with the <span class="element-name">‘img’</span>,
      <span class="element-name">‘object’</span> (HTML) or
      <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> (SVG) elements</dt><dd>There are two completely separate parse trees; one for
      the referencing document (perhaps HTML or XHTML), and one for
      the SVG document. Style sheets defined anywhere within the
      referencing document (in style elements or style attributes,
      or in external style sheets linked with the style sheet
      processing instruction) apply across the entire referencing
      document but have no effect on the referenced SVG document.
      Style sheets defined anywhere within the referenced SVG
      document (in style elements or style attributes, or in
      external style sheets linked with the style sheet processing
      instruction) apply across the entire SVG document, but do not
      affect the referencing document (perhaps HTML or XHTML). To
      get the same styling across both the [X]HTML document and the
      SVG document, link them both to the same style sheet.</dd><dt>Stand-alone SVG content textually included in an
      XML document</dt><dd>There is a single parse tree, using multiple namespaces;
      one or more subtrees are in the SVG namespace. Style sheets
      defined anywhere within the XML document (in style elements
      or style attributes, or in external style sheets linked with
      the style sheet processing instruction) apply across the
      entire document, including those parts of it in the SVG
      namespace. To get different styling for the SVG part, use the
      <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attribute, or put an <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a> on the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element and use
      contextual CSS selectors, or use XSL selectors.</dd></dl>

    <h2 id="styling-UAStyleSheet">6.16 User agent style sheet</h2>
    <p>The user agent shall maintain a
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#cascade">user agent style sheet</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 6.4)
    for elements in the SVG namespace for
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">visual media</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 7.3.1).
    The user agent style sheet below is expressed
    using CSS syntax; however, user agents are required to support
    the behavior that corresponds to this default style sheet even
    if CSS style sheets are not supported in the user agent:</p>
<pre>
svg, symbol, image, marker, pattern, foreignObject { overflow: hidden }
svg { width:attr(width); height:attr(height) }
</pre>
    <p>The first line of the above user agent style sheet will
    cause the <a href="#masking-InitialClippingPath">initial
    clipping path</a> to be established at the bounds of the <a href="#coords-SVGViewport">initial viewport</a>.
    Furthermore, it will cause new clipping paths to be established
    at the bounds of the listed elements, all of which are <a href="#coords-ElementsThatEstablishViewports">elements that
    establish a new viewport</a>. (Refer to the description of
    SVG's use of the <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property for more
    information.)</p>
    <p>The second line of the above user agent style sheet will
    cause the <a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a>
    attributes on the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element to be used as the
    default values for the <span class="prop-name"><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/visudet.html#propdef-width">
    'width'</a></span> and <span class="prop-name"><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/visudet.html#propdef-height">
    'height'</a></span> properties during <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/visuren.html">layout</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], chapter 9).</p>
    <h2 id="styling-AuralStyleSheets">6.17 Aural style sheets</h2>
    <p>For the purposes of aural media, SVG represents a stylable
    XML grammar. In user agents that support CSS aural style
    sheets, <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html">aural style properties</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], chapter 19)
    can be applied as defined in CSS2.</p>
    <p>Aural style properties can be applied to any SVG element
    that can contain character data content, including
    <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>
    <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a>
    <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>,
    <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>,
    <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> and
    <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>.
    On user agents that support aural style sheets, the following CSS2
    properties can be applied:</p>
    <table class="vert" summary="aural styling properties"><tr><th>Aural property</th><th>Definition in [<a href="#refs-ref-CSS2">CSS2</a>]</th></tr><tr><td id="styling-AzimuthProperty"><span class="attr-name">‘azimuth’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-azimuth">Section 19.7</a></td></tr><tr><td id="styling-CueProperty"><span class="attr-name">‘cue’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-cue">Section 19.5</a></td></tr><tr><td id="styling-CueAfterProperty"><span class="attr-name">‘cue-after’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-cue-after">Section 19.5</a></td></tr><tr><td id="styling-CueBeforeProperty"><span class="attr-name">‘cue-before’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-cue-before">Section 19.5</a></td></tr><tr><td id="styling-ElevationProperty"><span class="attr-name">‘elevation’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-elevation">Section 19.7</a></td></tr><tr><td id="styling-PauseProperty"><span class="attr-name">‘pause’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-pause">Section 19.4</a></td></tr><tr><td id="styling-PauseAfterProperty"><span class="attr-name">‘pause-after’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-pause-after">Section 19.4</a></td></tr><tr><td id="styling-PauseBeforeProperty"><span class="attr-name">‘pause-before’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-pause-before">Section 19.4</a></td></tr><tr><td id="styling-PitchProperty"><span class="attr-name">‘pitch’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-pitch">Section 19.8</a></td></tr><tr><td id="styling-PitchRangeProperty"><span class="attr-name">‘pitch-range’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-pitch-range">Section 19.8</a></td></tr><tr><td id="styling-PlayDuringProperty"><span class="attr-name">‘play-during’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-play-during">Section 19.6</a></td></tr><tr><td id="styling-RichnessProperty"><span class="attr-name">‘richness’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-richness">Section 19.8</a></td></tr><tr><td id="styling-SpeakProperty"><span class="attr-name">‘speak’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-speak">Section 19.3</a></td></tr><tr><td id="styling-SpeakHeaderProperty"><span class="attr-name">‘speak-header’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/tables.html#propdef-speak-header">Section 17.7.1</a></td></tr><tr><td id="styling-SpeakNumeralProperty"><span class="attr-name">‘speak-numeral’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-speak-numeral">Section 19.9</a></td></tr><tr><td id="styling-SpeakPunctuationProperty"><span class="attr-name">‘speak-punctuation’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-speak-punctuation">Section 19.9</a></td></tr><tr><td id="styling-SpeechRateProperty"><span class="attr-name">‘speech-rate’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-speech-rate">Section 19.8</a></td></tr><tr><td id="styling-StressProperty"><span class="attr-name">‘stress’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-stress">Section 19.8</a></td></tr><tr><td id="styling-VoiceFamilyProperty"><span class="attr-name">‘voice-family’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-voice-family">Section 19.8</a></td></tr><tr><td id="styling-VolumeProperty"><span class="attr-name">‘volume’</span></td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html#propdef-volume">Section 19.2</a></td></tr></table>
    <p>For user agents that support aural style sheets and also
    support <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/">DOM Level 2 Core</a>
    [<a href="#refs-ref-DOM2">DOM2</a>], the user agent is required to
    support the DOM interfaces defined in
    <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html">Document Object Model CSS</a>
    ([<a href="#refs-ref-DOM2STYLE">DOM2STYLE</a>], chapter 2)
    that correspond to aural properties.
    (See <a href="#svgdom-RelationshipWithCSSOM">Relationship
    with DOM2 CSS object model</a>.)</p>

<h2 id="styling-DOMInterfaces">6.18 DOM interfaces</h2>

<h3 id="styling-InterfaceSVGStyleElement">6.18.1 Interface SVGStyleElement</h3>



 The <a class="idlinterface" href="#styling-InterfaceSVGStyleElement">SVGStyleElement</a> interface corresponds to the <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a>
 element.
<pre class="idl">interface <b>SVGStyleElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a> {
  attribute DOMString <a href="#styling-__svg__SVGStyleElement__type">type</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute DOMString <a href="#styling-__svg__SVGStyleElement__media">media</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute DOMString <a href="#styling-__svg__SVGStyleElement__title">title</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="styling-__svg__SVGStyleElement__type" class="attribute first-child"><b>type</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#styling-StyleElementTypeAttribute"><span class="attr-name">‘type’</span></a> on the given element. 

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="styling-__svg__SVGStyleElement__media" class="attribute"><b>media</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#styling-StyleElementMediaAttribute"><span class="attr-name">‘media’</span></a> on the given element. 

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="styling-__svg__SVGStyleElement__title" class="attribute"><b>title</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#styling-StyleElementTitleAttribute"><span class="attr-name">‘title’</span></a> on the given element. 

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>


</div><hr class="chapter-divider" />
<div id="chapter-coords">

<h1>7 Coordinate Systems, Transformations and Units</h1><h2 id="coords-toc">Contents</h2><ul class="toc">
<li><a href="#coords-Introduction">7.1 Introduction</a></li>
<li><a href="#coords-ViewportSpace">7.2 The initial viewport</a></li>
<li><a href="#coords-InitialCoordinateSystem">7.3 The initial coordinate system</a></li>
<li><a href="#coords-EstablishingANewUserSpace">7.4 Coordinate system transformations</a></li>
<li><a href="#coords-NestedTransformations">7.5 Nested transformations</a></li>
<li><a href="#coords-TransformAttribute">7.6 The <span class="attr-name">‘transform’</span>
    attribute</a></li>
<li><a href="#coords-ViewBoxAttribute">7.7 The <span class="attr-name">‘viewBox’</span>
    attribute</a></li>
<li><a href="#coords-PreserveAspectRatioAttribute">7.8 The <span class="attr-name">‘preserveAspectRatio’</span>
    attribute</a></li>
<li><a href="#coords-EstablishingANewViewport">7.9 Establishing a new viewport</a></li>
<li><a href="#coords-Units">7.10 Units</a></li>
<li><a href="#coords-ObjectBoundingBoxUnits">7.11 Object bounding box units</a></li>
<li><a href="#coords-IntrinsicSizing">7.12 Intrinsic sizing properties of the viewport of SVG content</a></li>
<li><a href="#coords-GeographicCoordinates">7.13 Geographic coordinate systems</a></li>
<li><a href="#coords-SVGGlobalTransformAttribute">7.14 The <span class="attr-name">‘svg:transform’</span> attribute</a></li>
<li><a href="#coords-DOMInterfaces">7.15 DOM interfaces</a><ul class="toc">
<li><a href="#coords-InterfaceSVGPoint">7.15.1 Interface SVGPoint</a></li>
<li><a href="#coords-InterfaceSVGPointList">7.15.2 Interface SVGPointList</a></li>
<li><a href="#coords-InterfaceSVGMatrix">7.15.3 Interface SVGMatrix</a></li>
<li><a href="#coords-InterfaceSVGTransform">7.15.4 Interface SVGTransform</a></li>
<li><a href="#coords-InterfaceSVGTransformList">7.15.5 Interface SVGTransformList</a></li>
<li><a href="#coords-InterfaceSVGAnimatedTransformList">7.15.6 Interface SVGAnimatedTransformList</a></li>
<li><a href="#coords-InterfaceSVGPreserveAspectRatio">7.15.7 Interface SVGPreserveAspectRatio</a></li>
<li><a href="#coords-InterfaceSVGAnimatedPreserveAspectRatio">7.15.8 Interface SVGAnimatedPreserveAspectRatio</a></li></ul></li></ul>

<h2 id="coords-Introduction">7.1 Introduction</h2>

    <p>For all media, the <span id="coords-SVGCanvas"><span id="coords-SVGViewport" class="SVG-Term">SVG canvas</span></span>
    describes "the space where the SVG content is rendered." The
    canvas is infinite for each dimension of the space, but
    rendering occurs relative to a finite rectangular region of the
    canvas. This finite rectangular region is called the <span class="SVG-Term">SVG viewport</span>. For
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">visual media</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 7.3.1)
    the SVG viewport is the viewing area where the user sees the SVG content.</p>
    <p>The size of the SVG viewport (i.e., its width and height) is
    determined by a negotiation process (see <a href="#coords-ViewportSpace">Establishing the size of the initial
    viewport</a>) between the SVG document fragment and its parent
    (real or implicit). Once that negotiation process is completed,
    the SVG user agent is provided the following information:</p>
    <ul><li>a number (usually an integer) that represents the width
      in "pixels" of the viewport</li><li>a number (usually an integer) that represents the height
      in "pixels" of the viewport</li><li>(highly desirable but not required) a real number value
      that indicates the size in real world units, such as
      millimeters, of a "pixel" (i.e., a <em>px</em> unit
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#length-units">as defined in CSS2</a>
      ([<a href="#refs-ref-CSS2">CSS2</a>], section 4.3.2)</li></ul>
    <p id="coords-SVGInitialUserCoordinateSystem">Using the above information, the SVG user agent determines
    the <span class="SVG-Term">viewport</span>, an initial <span class="SVG-Term">viewport coordinate system</span> and an
    initial <span class="SVG-Term">user coordinate system</span>
    such that the two coordinates systems are identical. Both
    coordinates systems are established such that the origin
    matches the origin of the viewport (for the root viewport, the
    viewport origin is at the top/left corner), and one unit in the
    initial coordinate system equals one "pixel" in the viewport.
    (See <a href="#coords-InitialCoordinateSystem">Initial
    coordinate system</a>.) The viewport coordinate system is also
    called <span class="SVG-Term">viewport space</span> and the
    user coordinate system is also called <span class="SVG-Term">user space</span>.</p>
    <p id="coords-LengthsInSVG">Lengths in SVG can be specified as:</p>
    <ul><li>(if no unit identifier is provided) values in user space
      — for example, "15"</li><li>(if a unit identifier is provided) a length expressed as
      an absolute or relative unit measure — for example, "15mm"
      or "5em"</li></ul>
    <p>The supported length unit identifiers are: em, ex, px, pt,
    pc, cm, mm, in, and percentages.</p>
    <p>A new user space (i.e., a new current coordinate system) can
    be established at any place within an SVG document fragment by
    specifying <span class="SVG-Term">transformations</span> in the
    form of <span class="SVG-Term">transformation matrices</span>
    or simple transformation operations such as rotation, skewing,
    scaling and translation. Establishing new user spaces via <a href="#coords-EstablishingANewUserSpace">coordinate system
    transformations</a> are fundamental operations to 2D graphics
    and represent the usual method of controlling the size,
    position, rotation and skew of graphic objects.</p>
    <p>New viewports also can be established. By <a href="#coords-EstablishingANewViewport">establishing a new
    viewport</a>, you can redefine the meaning of percentages units
    and provide a new reference rectangle for "fitting" a graphic
    into a particular rectangular area. ("Fit" means that a given
    graphic is transformed in such a way that its bounding box in
    user space aligns exactly with the edges of a given
    viewport.)</p>
    <h2 id="coords-ViewportSpace">7.2 The initial viewport</h2>
    <p>The SVG user agent negotiates with its parent user agent to
    determine the viewport into which the SVG user agent can render
    the document. In some circumstances, SVG content will be
    embedded (<a href="#concepts-UsageOptions">by reference or
    inline</a>) within a containing document. This containing
    document might include attributes, properties and/or other
    parameters (explicit or implicit) which specify or provide
    hints about the dimensions of the viewport for the SVG content.
    SVG content itself optionally can provide information about the
    appropriate viewport region for the content via the <a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a>
    and <a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a> XML attributes on the <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>.
    The negotiation process uses any information provided by the
    containing document and the SVG content itself to choose the
    viewport location and size.</p>
    <p>The <a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a> attribute on the
    <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>
    establishes the viewport's width, unless the following
    conditions are met:</p>
    <ul><li>the SVG content is a separately stored resource that is
      embedded by reference (such as the <span class="element-name">‘object’</span> element in XHTML [<a href="#refs-ref-XHTML">XHTML</a>]), or the SVG
      content is embedded inline within a containing document;</li><li>and the referencing element or containing document is
      styled using CSS [<a href="#refs-ref-CSS2">CSS2</a>] or
      XSL [<a href="#refs-ref-XSL">XSL</a>];</li><li>and there are <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/visuren.html#positioning-scheme">CSS-compatible positioning properties</a>
      ([<a href="#refs-ref-CSS2">CSS2</a>], section 9.3)
       specified on the referencing element (e.g.,
      the <span class="element-name">‘object’</span> element) or on
      the containing document's <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a> that are sufficient
      to establish the width of the viewport.</li></ul>
    <p>Under these conditions, the positioning properties establish
    the viewport's width.</p>
    <p>Similarly, if there are
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/visuren.html#positioning-scheme">positioning properties</a>
    specified on the referencing element or on the
    <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a> that are
    sufficient to establish the height of the viewport, then these
    positioning properties establish the viewport's height;
    otherwise, the <a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a> attribute
    on the <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>
    establishes the viewport's height.</p>
    <p>If the <a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a> or <a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a>
     attributes on the <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>
    are in <a href="#intro-TermUserUnits">user units</a> (i.e., no unit
    identifier has been provided), then the value is assumed to be
    equivalent to the same number of "px" units (see <a href="#coords-Units">Units</a>).</p>
    <p>In the following example, an SVG graphic is embedded inline
    within a parent XML document which is formatted using CSS
    layout rules. Since CSS positioning properties are not provided
    on the <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>,
    the <span class="attr-value">width="100px"</span> and
    <span class="attr-value">height="200px"</span> attributes
    determine the size of the initial viewport:</p>
<pre>
&lt;?xml version="1.0" standalone="yes"?&gt;
&lt;parent xmlns="http://some.url"&gt;
   
   &lt;!-- SVG graphic --&gt;
   &lt;svg xmlns='http://www.w3.org/2000/svg'
      width="100px" height="200px" version="1.1"&gt;
      &lt;path d="M100,100 Q200,400,300,100"/&gt;
      &lt;!-- rest of SVG graphic would go here --&gt;
   &lt;/svg&gt;   
   
&lt;/parent&gt;
</pre>
    <p>The initial clipping path for the SVG document fragment is
    established according to the rules described in <a href="#masking-InitialClippingPath">The initial clipping
    path</a>.</p>

    <h2 id="coords-InitialCoordinateSystem">7.3 The initial coordinate system</h2>
    <p>For the <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>, the SVG user
    agent determines an initial <span class="SVG-Term">viewport
    coordinate system</span> and an initial <span class="SVG-Term">user coordinate system</span> such that the
    two coordinates systems are identical. The origin of both
    coordinate systems is at the origin of the viewport, and one
    unit in the initial coordinate system equals one "pixel" (i.e.,
    a <em>px</em> unit <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#length-units">as defined in CSS2</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 4.3.2)
    in the viewport. In most cases, such as
    stand-alone SVG documents or SVG document fragments embedded
    (<a href="#concepts-UsageOptions">by reference or
    inline</a>) within XML parent documents where the parent's
    layout is determined by CSS [<a href="#refs-ref-CSS2">CSS2</a>] or
    XSL [<a href="#refs-ref-XSL">XSL</a>], the initial viewport
    coordinate system (and therefore the initial user coordinate
    system) has its origin at the top/left of the viewport, with
    the positive x-axis pointing towards the right, the positive
    y-axis pointing down, and text rendered with an "upright"
    orientation, which means glyphs are oriented such that Roman
    characters and full-size ideographic characters for Asian
    scripts have the top edge of the corresponding glyphs oriented
    upwards and the right edge of the corresponding glyphs oriented
    to the right.</p>
    <p>If the SVG implementation is part of a user agent which
    supports styling XML documents using CSS2 compatible
    <em>px</em> units, then the SVG user agent should get its
    initial value for the size of a <em>px</em> unit in real world
    units to match the value used for other XML styling operations;
    otherwise, if the user agent can determine the size of a
    <em>px</em> unit from its environment, it should use that
    value; otherwise, it should choose an appropriate size for one
    <em>px</em> unit. In all cases, the size of a <em>px</em> must
    be in conformance with <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#length-units">the rules described in CSS2</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 4.3.2).</p>

    <p id="coords-ExampleInitialCoords"><span class="example-ref">Example InitialCoords</span> below
    shows that the initial coordinate system has the origin at the
    top/left with the x-axis pointing to the right and the y-axis
    pointing down. The initial user coordinate system has one user
    unit equal to the parent (implicit or explicit) user agent's
    "pixel".</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="300px" height="100px" version="1.1"
     xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;desc&gt;Example InitialCoords - SVG's initial coordinate system&lt;/desc&gt;

  &lt;g fill="none" stroke="black" stroke-width="3" &gt;
    &lt;line x1="0" y1="1.5" x2="300" y2="1.5" /&gt;
    &lt;line x1="1.5" y1="0" x2="1.5" y2="100" /&gt;
  &lt;/g&gt;
  &lt;g fill="red" stroke="none" &gt;
    &lt;rect x="0" y="0" width="3" height="3" /&gt;
    &lt;rect x="297" y="0" width="3" height="3" /&gt;
    &lt;rect x="0" y="97" width="3" height="3" /&gt;
  &lt;/g&gt;
  &lt;g font-size="14" font-family="Verdana" &gt;
    &lt;text x="10" y="20"&gt;(0,0)&lt;/text&gt;
    &lt;text x="240" y="20"&gt;(300,0)&lt;/text&gt;
    &lt;text x="10" y="90"&gt;(0,100)&lt;/text&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example InitialCoords</caption><tr><td><img alt="Example InitialCoords — SVG's initial coordinate system" src="images/coords/InitialCoords.png" /></td></tr></table><p class="view-as-svg"><a href="images/coords/InitialCoords.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <h2 id="coords-EstablishingANewUserSpace">7.4 Coordinate system transformations</h2>
    <p>A new user space (i.e., a new current coordinate system) can
    be established by specifying <span class="SVG-Term">transformations</span> in the form of a <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a>
    attribute on a container element or graphics element or a
    <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute on an
    <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>,
    <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>,
    <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>,
    <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> and the
    <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a> element.
    The <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> and <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attributes transform user
    space coordinates and lengths on sibling attributes on the
    given element (see <a href="#coords-TransformAttributeEffectOnSiblingAttributes">effect
    of the <span class="attr-name">‘transform’</span> attribute on
    sibling attributes</a> and <a href="#coords-ViewBoxAttributeEffectOnSiblingAttributes">effect
    of the <span class="attr-name">‘viewBox’</span> attribute on
    sibling attributes</a>) and all of its descendants.
    Transformations can be nested, in which case the effect of the
    transformations are cumulative.</p>
    <p id="coords-ExampleOrigCoordSys"><span class="example-ref">Example OrigCoordSys</span> below
    shows a document without transformations. The text string is
    specified in the <a href="#coords-InitialCoordinateSystem">initial coordinate
    system</a>.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="400px" height="150px"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example OrigCoordSys - Simple transformations: original picture&lt;/desc&gt;
  &lt;g fill="none" stroke="black" stroke-width="3" &gt;
    &lt;!-- Draw the axes of the original coordinate system --&gt;
    &lt;line x1="0" y1="1.5" x2="400" y2="1.5" /&gt;
    &lt;line x1="1.5" y1="0" x2="1.5" y2="150" /&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;text x="30" y="30" font-size="20" font-family="Verdana" &gt;
      ABC (orig coord system)
    &lt;/text&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example OrigCoordSys</caption><tr><td><img alt="Example OrigCoordSys — SVG's initial coordinate system" src="images/coords/OrigCoordSys.png" /></td></tr></table><p class="view-as-svg"><a href="images/coords/OrigCoordSys.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p id="coords-ExampleNewCoordSys"><span class="example-ref">Example NewCoordSys</span>
    establishes a new user coordinate system by specifying <span class="attr-value">transform="translate(50,50)"</span> on the
    third <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element below. The
    new user coordinate system has its origin at location (50,50)
    in the original coordinate system. The result of this
    transformation is that the coordinate (30,30) in the new user
    coordinate system gets mapped to coordinate (80,80) in the
    original coordinate system (i.e., the coordinates have been
    translated by 50 units in X and 50 units in Y).</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="400px" height="150px"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example NewCoordSys - New user coordinate system&lt;/desc&gt;
  &lt;g fill="none" stroke="black" stroke-width="3" &gt;
    &lt;!-- Draw the axes of the original coordinate system --&gt;
    &lt;line x1="0" y1="1.5" x2="400" y2="1.5" /&gt;
    &lt;line x1="1.5" y1="0" x2="1.5" y2="150" /&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;text x="30" y="30" font-size="20" font-family="Verdana" &gt;
      ABC (orig coord system)
    &lt;/text&gt;
  &lt;/g&gt;
  &lt;!-- Establish a new coordinate system, which is
       shifted (i.e., translated) from the initial coordinate
       system by 50 user units along each axis. --&gt;
  &lt;g transform="translate(50,50)"&gt;
    &lt;g fill="none" stroke="red" stroke-width="3" &gt;
      &lt;!-- Draw lines of length 50 user units along 
           the axes of the new coordinate system --&gt;
      &lt;line x1="0" y1="0" x2="50" y2="0" stroke="red" /&gt;
      &lt;line x1="0" y1="0" x2="0" y2="50" /&gt;
    &lt;/g&gt;
    &lt;text x="30" y="30" font-size="20" font-family="Verdana" &gt;
      ABC (translated coord system)
    &lt;/text&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example NewCoordSys</caption><tr><td><img alt="Example NewCoordSys — New user coordinate system" src="images/coords/NewCoordSys.png" /></td></tr></table><p class="view-as-svg"><a href="images/coords/NewCoordSys.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p id="coords-ExampleRotateScale"><span class="example-ref">Example RotateScale</span>
    illustrates simple <strong>rotate</strong> and
    <strong>scale</strong> transformations. The example defines two
    new coordinate systems:</p>
    <ul><li>one which is the result of a translation by 50 units in X
      and 30 units in Y, followed by a rotation of 30 degrees</li><li>another which is the result of a translation by 200 units
      in X and 40 units in Y, followed by a scale transformation of
      1.5.</li></ul>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="400px" height="120px" version="1.1"
     xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;desc&gt;Example RotateScale - Rotate and scale transforms&lt;/desc&gt;
  &lt;g fill="none" stroke="black" stroke-width="3" &gt;
    &lt;!-- Draw the axes of the original coordinate system --&gt;
    &lt;line x1="0" y1="1.5" x2="400" y2="1.5" /&gt;
    &lt;line x1="1.5" y1="0" x2="1.5" y2="120" /&gt;
  &lt;/g&gt;
  &lt;!-- Establish a new coordinate system whose origin is at (50,30)
       in the initial coord. system and which is rotated by 30 degrees. --&gt;
  &lt;g transform="translate(50,30)"&gt;
    &lt;g transform="rotate(30)"&gt;
      &lt;g fill="none" stroke="red" stroke-width="3" &gt;
        &lt;line x1="0" y1="0" x2="50" y2="0" /&gt;
        &lt;line x1="0" y1="0" x2="0" y2="50" /&gt;
      &lt;/g&gt;
      &lt;text x="0" y="0" font-size="20" font-family="Verdana" fill="blue" &gt;
        ABC (rotate)
      &lt;/text&gt;
    &lt;/g&gt;
  &lt;/g&gt;
  &lt;!-- Establish a new coordinate system whose origin is at (200,40)
       in the initial coord. system and which is scaled by 1.5. --&gt;
  &lt;g transform="translate(200,40)"&gt;
    &lt;g transform="scale(1.5)"&gt;
      &lt;g fill="none" stroke="red" stroke-width="3" &gt;
        &lt;line x1="0" y1="0" x2="50" y2="0" /&gt;
        &lt;line x1="0" y1="0" x2="0" y2="50" /&gt;
      &lt;/g&gt;
      &lt;text x="0" y="0" font-size="20" font-family="Verdana" fill="blue" &gt;
        ABC (scale)
      &lt;/text&gt;
    &lt;/g&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example RotateScale</caption><tr><td><img alt="Example RotateScale — Rotate and scale transforms" src="images/coords/RotateScale.png" /></td></tr></table><p class="view-as-svg"><a href="images/coords/RotateScale.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p id="coords-ExampleSkew"><span class="example-ref">Example Skew</span> defines two
    coordinate systems which are <strong>skewed</strong> relative
    to the origin coordinate system.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="400px" height="120px" version="1.1"
     xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;desc&gt;Example Skew - Show effects of skewX and skewY&lt;/desc&gt;
  &lt;g fill="none" stroke="black" stroke-width="3" &gt;
    &lt;!-- Draw the axes of the original coordinate system --&gt;
    &lt;line x1="0" y1="1.5" x2="400" y2="1.5" /&gt;
    &lt;line x1="1.5" y1="0" x2="1.5" y2="120" /&gt;
  &lt;/g&gt;
  &lt;!-- Establish a new coordinate system whose origin is at (30,30)
       in the initial coord. system and which is skewed in X by 30 degrees. --&gt;
  &lt;g transform="translate(30,30)"&gt;
    &lt;g transform="skewX(30)"&gt;
      &lt;g fill="none" stroke="red" stroke-width="3" &gt;
        &lt;line x1="0" y1="0" x2="50" y2="0" /&gt;
        &lt;line x1="0" y1="0" x2="0" y2="50" /&gt;
      &lt;/g&gt;
      &lt;text x="0" y="0" font-size="20" font-family="Verdana" fill="blue" &gt;
        ABC (skewX)
      &lt;/text&gt;
    &lt;/g&gt;
  &lt;/g&gt;
  &lt;!-- Establish a new coordinate system whose origin is at (200,30)
       in the initial coord. system and which is skewed in Y by 30 degrees. --&gt;
  &lt;g transform="translate(200,30)"&gt;
    &lt;g transform="skewY(30)"&gt;
      &lt;g fill="none" stroke="red" stroke-width="3" &gt;
        &lt;line x1="0" y1="0" x2="50" y2="0" /&gt;
        &lt;line x1="0" y1="0" x2="0" y2="50" /&gt;
      &lt;/g&gt;
      &lt;text x="0" y="0" font-size="20" font-family="Verdana" fill="blue" &gt;
        ABC (skewY)
      &lt;/text&gt;
    &lt;/g&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example Skew</caption><tr><td><img alt="Example Skew — Show effects of skewX and skewY" src="images/coords/Skew.png" /></td></tr></table><p class="view-as-svg"><a href="images/coords/Skew.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p id="coords-TransformMatrixDefined">Mathematically, all transformations can be represented as
    3x3 <span class="SVG-Term">transformation matrices</span> of
    the following form:<br />
           <img src="images/coords/Matrix.png" alt="3-by-3 transformation matrix" width="104" height="83" /></p>
    <p>Since only six values are used in the above 3x3 matrix, a
    transformation matrix is also expressed as a vector: <strong>[a
    b c d e f]</strong>.</p>
    <p>Transformations map coordinates and lengths from a new
    coordinate system into a previous coordinate system:<br />
           <img src="images/coords/MatrixMultiply.png" alt="3-by-3 transformation matrix" width="408" height="83" /></p>
    <p>Simple transformations are represented in matrix form as
    follows:</p>
    <ul><li id="coords-TranslationDefined">
      Translation is equivalent to the matrix<br />
             <img src="images/coords/MatrixTranslate.png" alt="Translation matrix" width="104" height="83" /><br />
       or <strong>[1 0 0 1 tx ty]</strong>, where <em>tx</em> and
      <em>ty</em> are the distances to translate coordinates in
      <em>X</em> and <em>Y</em>, respectively.<br />
      <br />
      </li><li id="coords-ScalingDefined"> Scaling is
      equivalent to the matrix<br />
             <img src="images/coords/MatrixScale.png" alt="Scale matrix" width="104" height="83" /><br />
       or <strong>[sx 0 0 sy 0 0]</strong>. One unit in the
      <em>X</em> and <em>Y</em> directions in the new coordinate
      system equals <em>sx</em> and <em>sy</em> units in the
      previous coordinate system, respectively.<br />
      <br />
      </li><li id="coords-RotationDefined"> Rotation
      about the origin is equivalent to the matrix<br />
             <img src="images/coords/MatrixRotate.png" alt="Rotation matrix" width="169" height="83" /><br />
       or <strong>[cos(a) sin(a) -sin(a) cos(a) 0 0]</strong>,
      which has the effect of rotating the coordinate system axes
      by angle <em>a</em>.<br />
      <br />
      </li><li id="coords-SkewXDefined"> A skew
      transformation along the x-axis is equivalent to the
      matrix<br />
             <img src="images/coords/MatrixSkewX.png" alt="SkewX matrix" width="131" height="83" /><br />
       or <strong>[1 0 tan(a) 1 0 0]</strong>, which has the effect
      of skewing X coordinates by angle <em>a</em>.<br />
      <br />
      </li><li id="coords-SkewYDefined"> A skew
      transformation along the y-axis is equivalent to the
      matrix<br />
             <img src="images/coords/MatrixSkewY.png" alt="SkewY matrix" width="131" height="83" /><br />
       or <strong>[1 tan(a) 0 1 0 0]</strong>, which has the effect
      of skewing Y coordinates by angle <em>a</em>.<br />
      <br />
      </li></ul>

    <h2 id="coords-NestedTransformations">7.5 Nested transformations</h2>
    <p>Transformations can be nested to any level. The effect of
    nested transformations is to post-multiply (i.e., concatenate)
    the subsequent transformation matrices onto previously defined
    transformations:<br />
           <img src="images/coords/MatrixNested.png" alt="3-by-3 matrix concatenation" width="359" height="83" /></p>
    <p>For each given element, the accumulation of all
    transformations that have been defined on the given element and
    all of its ancestors up to and including the element that
    established the current viewport (usually, the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>
     element which is the most
    immediate ancestor to the given element) is called the <span class="SVG-Term">current transformation matrix</span> or <span class="SVG-Term">CTM</span>. The CTM thus represents the
    mapping of current user coordinates to viewport
    coordinates:<br />
     <img src="images/coords/CTM.png" alt="current transformation matrix: CTM" width="483" height="179" /></p>

    <p id="coords-ExampleNested"><span class="example-ref">Example Nested</span> illustrates
    nested transformations.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="400px" height="150px" version="1.1"
     xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;desc&gt;Example Nested - Nested transformations&lt;/desc&gt;
  &lt;g fill="none" stroke="black" stroke-width="3" &gt;
    &lt;!-- Draw the axes of the original coordinate system --&gt;
    &lt;line x1="0" y1="1.5" x2="400" y2="1.5" /&gt;
    &lt;line x1="1.5" y1="0" x2="1.5" y2="150" /&gt;
  &lt;/g&gt;
  &lt;!-- First, a translate --&gt;
  &lt;g transform="translate(50,90)"&gt;
    &lt;g fill="none" stroke="red" stroke-width="3" &gt;
      &lt;line x1="0" y1="0" x2="50" y2="0" /&gt;
      &lt;line x1="0" y1="0" x2="0" y2="50" /&gt;
    &lt;/g&gt;
    &lt;text x="0" y="0" font-size="16" font-family="Verdana" &gt;
      ....Translate(1)
    &lt;/text&gt;
    &lt;!-- Second, a rotate --&gt;
    &lt;g transform="rotate(-45)"&gt;
      &lt;g fill="none" stroke="green" stroke-width="3" &gt;
        &lt;line x1="0" y1="0" x2="50" y2="0" /&gt;
        &lt;line x1="0" y1="0" x2="0" y2="50" /&gt;
      &lt;/g&gt;
      &lt;text x="0" y="0" font-size="16" font-family="Verdana" &gt;
        ....Rotate(2)
      &lt;/text&gt;
      &lt;!-- Third, another translate --&gt;
      &lt;g transform="translate(130,160)"&gt;
        &lt;g fill="none" stroke="blue" stroke-width="3" &gt;
          &lt;line x1="0" y1="0" x2="50" y2="0" /&gt;
          &lt;line x1="0" y1="0" x2="0" y2="50" /&gt;
        &lt;/g&gt;
        &lt;text x="0" y="0" font-size="16" font-family="Verdana" &gt;
          ....Translate(3)
        &lt;/text&gt;
      &lt;/g&gt;
    &lt;/g&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example Nested</caption><tr><td><img alt="Example Nested — Nested transformations" src="images/coords/Nested.png" /></td></tr></table><p class="view-as-svg"><a href="images/coords/Nested.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p>In the example above, the CTM within the third nested
    transformation (i.e., the <span class="attr-value">transform="translate(130,160)"</span>)
    consists of the concatenation of the three transformations, as
    follows:<br />
     <img src="images/coords/NestedCalcs.png" alt="Matrix concatenation" width="512" height="296" /></p>
    <br />
    <h2 id="coords-TransformAttribute">7.6 The <span class="attr-name">‘transform’</span>
    attribute</h2>
    <p id="coords-TransformList">The value of the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a>
    attribute is a &lt;transform-list&gt;, which is defined as a
    list of transform definitions, which are applied in the order
    provided. The individual transform definitions are separated by
    whitespace and/or a comma. The available types of transform
    definitions include:</p>
    <ul><li><span class="attr-value">matrix(&lt;a&gt; &lt;b&gt;
      &lt;c&gt; &lt;d&gt; &lt;e&gt; &lt;f&gt;)</span>, which
      specifies a transformation in the form of a <a href="#coords-TransformMatrixDefined">transformation
      matrix</a> of six values. <span class="attr-value">matrix(a,b,c,d,e,f)</span> is equivalent
      to applying the transformation matrix <strong>[a b c d e
      f]</strong>.<br />
        </li><li><span class="attr-value">translate(&lt;tx&gt;
      [&lt;ty&gt;])</span>, which specifies a <a href="#coords-TranslationDefined">translation</a> by
      <em>tx</em> and <em>ty</em>. If <em>&lt;ty&gt;</em> is not
      provided, it is assumed to be zero.<br />
        </li><li><span class="attr-value">scale(&lt;sx&gt;
      [&lt;sy&gt;])</span>, which specifies a <a href="#coords-ScalingDefined">scale</a> operation by
      <em>sx</em> and <em>sy</em>. If <em>&lt;sy&gt;</em> is not
      provided, it is assumed to be equal to
      <em>&lt;sx&gt;</em>.<br />
        </li><li><span class="attr-value">rotate(&lt;rotate-angle&gt;
      [&lt;cx&gt; &lt;cy&gt;])</span>, which specifies a <a href="#coords-RotationDefined">rotation</a> by <span class="attr-value">&lt;rotate-angle&gt;</span> degrees about
      a given point.<br />
       If optional parameters <span class="attr-value">&lt;cx&gt;</span> and <span class="attr-value">&lt;cy&gt;</span> are not supplied, the
      rotate is about the origin of the current user coordinate
      system. The operation corresponds to the matrix
      <strong>[cos(a) sin(a) -sin(a) cos(a) 0 0]</strong>.<br />
       If optional parameters <span class="attr-value">&lt;cx&gt;</span> and <span class="attr-value">&lt;cy&gt;</span> are supplied, the rotate
      is about the point (<var>cx</var>, <var>cy</var>).
      The operation represents the equivalent
      of the following specification: <span class="attr-value">translate(&lt;cx&gt;, &lt;cy&gt;)
      rotate(&lt;rotate-angle&gt;) translate(-&lt;cx&gt;,
      -&lt;cy&gt;)</span>.<br />
        </li><li><span class="attr-value">skewX(&lt;skew-angle&gt;)</span>, which
      specifies a <a href="#coords-SkewXDefined">skew
      transformation along the x-axis</a>.<br />
        </li><li><span class="attr-value">skewY(&lt;skew-angle&gt;)</span>, which
      specifies a <a href="#coords-SkewYDefined">skew
      transformation along the y-axis</a>.<br />
        </li></ul>
    <p>All numeric values are <a href="#types-DataTypeNumber">&lt;number&gt;</a>s.</p>
    <p>If a list of transforms is provided, then the net effect is
    as if each transform had been specified separately in the order
    provided. For example,</p>
<pre>
&lt;g transform="translate(-10,-20) scale(2) rotate(45) translate(5,10)"&gt;
  &lt;!-- graphics elements go here --&gt;
&lt;/g&gt;
</pre>
    <p>is functionally equivalent to:</p>
<pre>
&lt;g transform="translate(-10,-20)"&gt;
  &lt;g transform="scale(2)"&gt;
    &lt;g transform="rotate(45)"&gt;
      &lt;g transform="translate(5,10)"&gt;
        &lt;!-- graphics elements go here --&gt;
      &lt;/g&gt;
    &lt;/g&gt;
  &lt;/g&gt;
&lt;/g&gt;
</pre>
    <p id="coords-TransformAttributeEffectOnSiblingAttributes">The <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute is
    applied to an element before processing any other coordinate or
    length values supplied for that element. In the element</p>
<pre>
&lt;rect x="10" y="10" width="20" height="20" transform="scale(2)"/&gt;
</pre>
    <p>the x, y, width and height values are processed after the
    current coordinate system has been scaled uniformly by a factor
    of 2 by the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute.
    Attributes x, y, width and height (and any other attributes or
    properties) are treated as values in the new user coordinate
    system, not the previous user coordinate system. Thus, the
    above <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element is
    functionally equivalent to:</p>
<pre>
&lt;g transform="scale(2)"&gt;
  &lt;rect x="10" y="10" width="20" height="20"/&gt;
&lt;/g&gt;
</pre>
    <p>The following is the Backus-Naur Form (BNF) for values for
    the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute. The
    following notation is used:</p>
    <ul><li>*: 0 or more</li><li>+: 1 or more</li><li>?: 0 or 1</li><li>(): grouping</li><li>|: separates alternatives</li><li>double quotes surround literals</li></ul>
<pre>
transform-list:
    wsp* transforms? wsp*
transforms:
    transform
    | transform comma-wsp+ transforms
transform:
    matrix
    | translate
    | scale
    | rotate
    | skewX
    | skewY
matrix:
    "matrix" wsp* "(" wsp*
       number comma-wsp
       number comma-wsp
       number comma-wsp
       number comma-wsp
       number comma-wsp
       number wsp* ")"
translate:
    "translate" wsp* "(" wsp* number ( comma-wsp number )? wsp* ")"
scale:
    "scale" wsp* "(" wsp* number ( comma-wsp number )? wsp* ")"
rotate:
    "rotate" wsp* "(" wsp* number ( comma-wsp number comma-wsp number )? wsp* ")"
skewX:
    "skewX" wsp* "(" wsp* number wsp* ")"
skewY:
    "skewY" wsp* "(" wsp* number wsp* ")"
number:
    sign? integer-constant
    | sign? floating-point-constant
comma-wsp:
    (wsp+ comma? wsp*) | (comma wsp*)
comma:
    ","
integer-constant:
    digit-sequence
floating-point-constant:
    fractional-constant exponent?
    | digit-sequence exponent
fractional-constant:
    digit-sequence? "." digit-sequence
    | digit-sequence "."
exponent:
    ( "e" | "E" ) sign? digit-sequence
sign:
    "+" | "-"
digit-sequence:
    digit
    | digit digit-sequence
digit:
    "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
wsp:
    (#x20 | #x9 | #xD | #xA)
</pre>
    <p>For the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a>
    attribute:</p>
    <p>    <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes.</span></p>
    <p>See the <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a> element for
    information on animating transformations.</p>
    <h2 id="coords-ViewBoxAttribute">7.7 The <span class="attr-name">‘viewBox’</span>
    attribute</h2>
    <p>It is often desirable to specify that a given set of
    graphics stretch to fit a particular container element. The
    <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute provides this
    capability.</p>
    <p>All elements that establish a new viewport (see <a href="#coords-ElementsThatEstablishViewports">elements that
    establish viewports</a>), plus the
    <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>,
    <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> and
    <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a>
    elements have attribute
    <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>. The value of the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute is a list of four
    numbers <span class="attr-value">&lt;min-x&gt;</span>, <span class="attr-value">&lt;min-y&gt;</span>, <span class="attr-value">&lt;width&gt;</span> and <span class="attr-value">&lt;height&gt;</span>, separated by
    whitespace and/or a comma, which specify a rectangle in user
    space which should be mapped to the bounds of the viewport
    established by the given element, taking into account attribute
    <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>. If specified,
    an additional transformation is applied to all descendants of
    the given element to achieve the specified effect.</p>
    <p>A negative value for <span class="attr-value">&lt;width&gt;</span> or <span class="attr-value">&lt;height&gt;</span> is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>). A
    value of zero disables rendering of the element.</p>
    <p id="coords-ExampleViewBox"><span class="example-ref">Example ViewBox</span> illustrates
    the use of the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute
    on the <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a> to specify that
    the SVG content should stretch to fit bounds of the
    viewport.</p>
<pre>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="300px" height="200px" version="1.1"
     viewBox="0 0 1500 1000" preserveAspectRatio="none"
     xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;desc&gt;Example ViewBox - uses the viewBox 
   attribute to automatically create an initial user coordinate
   system which causes the graphic to scale to fit into the
   viewport no matter what size the viewport is.&lt;/desc&gt;
  &lt;!-- This rectangle goes from (0,0) to (1500,1000) in user space.
       Because of the viewBox attribute above,
       the rectangle will end up filling the entire area
       reserved for the SVG content. --&gt;
  &lt;rect x="0" y="0" width="1500" height="1000" 
        fill="yellow" stroke="blue" stroke-width="12"  /&gt;
  &lt;!-- A large, red triangle --&gt;
  &lt;path fill="red"  d="M 750,100 L 250,900 L 1250,900 z"/&gt;
  &lt;!-- A text string that spans most of the viewport --&gt;
  &lt;text x="100" y="600" font-size="200" font-family="Verdana" &gt;
    Stretch to fit
  &lt;/text&gt;
&lt;/svg&gt;
</pre>
    <table summary="Example ViewBox"><caption align="bottom">
        Example ViewBox
      </caption><tr><th>Rendered into<br />
         viewport with<br />
         width=300px,<br />
         height=200px</th><th>     </th><th>Rendered into<br />
         viewport with<br />
         width=150px,<br />
         height=200px</th></tr><tr><td><img alt="Example ViewBox - stretch to fit 300 by 200" src="images/coords/ViewBox.png" width="300" height="200" /></td><td>     </td><td><img alt="Example ViewBox - stretch to fit 150 by 200" src="images/coords/ViewBox-Width150.png" width="150" height="200" /></td></tr></table>
    <p class="view-as-svg"><a href="images/coords/ViewBox.svg">View
    this example as SVG (SVG-enabled browsers only)</a><br />
      </p>
    <p>The effect of the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>
    attribute is that the user agent automatically supplies the
    appropriate transformation matrix to map the specified
    rectangle in user space to the bounds of a designated region
    (often, the viewport). To achieve the effect of the example on
    the left, with viewport dimensions of 300 by 200 pixels, the
    user agent needs to automatically insert a transformation which
    scales both X and Y by 0.2. The effect is equivalent to having
    a viewport of size 300px by 200px and the following
    supplemental transformation in the document, as follows:</p>
<pre>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="300px" height="200px" version="1.1"
     xmlns="http://www.w3.org/2000/svg"&gt;
  <strong>&lt;g transform="scale(0.2)"&gt;</strong>
    &lt;!-- Rest of document goes here --&gt;
  <strong>&lt;/g&gt;</strong>
&lt;/svg&gt;
</pre>
    To achieve the effect of the example on the right, with
    viewport dimensions of 150 by 200 pixels, the user agent needs
    to automatically insert a transformation which scales X by 0.1
    and Y by 0.2. The effect is equivalent to having a viewport of
    size 150px by 200px and the following supplemental
    transformation in the document, as follows: 
<pre>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="150px" height="200px" version="1.1"
     xmlns="http://www.w3.org/2000/svg"&gt;
  <strong>&lt;g transform="scale(0.1 0.2)"&gt;</strong>
    &lt;!-- Rest of document goes here --&gt;
  <strong>&lt;/g&gt;</strong>
&lt;/svg&gt;
</pre>
    <p>(Note: in some cases the user agent will need to supply a
    <strong>translate</strong> transformation in addition to a
    <strong>scale</strong> transformation. For example, on an
    <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>, a
    <strong>translate</strong> transformation will be needed if the
    <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attributes specifies
    values other than zero for <span class="attr-value">&lt;min-x&gt;</span> or <span class="attr-value">&lt;min-y&gt;</span>.)</p>
    <p id="coords-ViewBoxAttributeEffectOnSiblingAttributes">Unlike the
    <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute (see <a href="#coords-TransformAttributeEffectOnSiblingAttributes">effect
    of the <span class="attr-name">‘transform’</span> on sibling
    attributes</a>), the automatic transformation that is created
    due to a <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> does not affect
    the <span class="attr-name">‘x’</span>, <span class="attr-name">‘y’</span>, <span class="attr-name">‘width’</span> and <span class="attr-name">‘height’</span> attributes (or in the case of
    the <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element, the
    <a href="#painting-MarkerWidthAttribute"><span class="attr-name">‘markerWidth’</span></a> and <a href="#painting-MarkerHeightAttribute"><span class="attr-name">‘markerHeight’</span></a> attributes) on the
    element with the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>
    attribute. Thus, in the example above which shows an
    <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element which has attributes
    <a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a>,
    <a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a> and <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>,
    the <a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a> attributes
    represent values in the coordinate system that exists <em>before</em> the
    <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> transformation is applied. On
    the other hand, like the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute, it does
    establish a new coordinate system for all other attributes and
    for descendant elements.</p>
    <p>For the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>
    attribute:</p>
    <p>    <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
    yes.</span></p>
    <h2 id="coords-PreserveAspectRatioAttribute">7.8 The <span class="attr-name">‘preserveAspectRatio’</span>
    attribute</h2>
    <p>In some cases, typically when using the
    <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute, it is desirable that the graphics stretch to
    fit non-uniformly to take up the
    entire viewport. In other cases, it is desirable that uniform
    scaling be used for the purposes of preserving the aspect ratio
    of the graphics.</p>
    <p>Attribute <span class="attr-value">preserveAspectRatio="[defer] &lt;align&gt;
    [&lt;meetOrSlice&gt;]"</span>, which is available for all
    elements that establish a new viewport (see <a href="#coords-ElementsThatEstablishViewports">elements that
    establish viewports</a>), plus the
    <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>,
    <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>,
    <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> and
    <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a> elements,
    indicates whether or not to force uniform scaling.</p>
    <p>For elements that establish a new viewport (see <a href="#coords-ElementsThatEstablishViewports">elements that
    establish viewports</a>), plus the
    <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>,
    <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> and
    <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a> elements,
    <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> only applies when
    a value has been provided for <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>
    on the same element. For these elements, if attribute
    <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> is not provided, then
    <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> is ignored.</p>
    <p>For <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> elements,
    <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> indicates how
    referenced images should be fitted with respect to the
    reference rectangle and whether the aspect ratio of the
    referenced image should be preserved with respect to the
    current user coordinate system.</p>
    <p>If the value of <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> on an
    <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element starts with <span class="attr-value">'defer'</span> then the value of the
    <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> attribute on the
    referenced content if present should be used. If the
    referenced content lacks a value for
    <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> then the
    <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> attribute should
    be processed as normal (ignoring <span class="attr-value">'defer'</span>).
    For <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> on all other
    elements the <span class="attr-value">'defer'</span> portion of the attribute is ignored.</p>
    <p>The <span class="attr-value">&lt;align&gt;</span> parameter
    indicates whether to force uniform scaling and, if so, the
    alignment method to use in case the aspect ratio of the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>
     doesn't match the aspect ratio of the viewport. The <span class="attr-value">&lt;align&gt;</span> parameter must be one
    of the following strings:</p>
    <ul><li><span class="attr-value">none</span> - Do not force
      uniform scaling. Scale the graphic content of the given
      element non-uniformly if necessary such that the element's
      bounding box exactly matches the viewport rectangle.<br />
       (Note: if <span class="attr-value">&lt;align&gt;</span> is
      <span class="attr-value">none</span>, then the optional <span class="attr-value">&lt;meetOrSlice&gt;</span> value is
      ignored.)</li><li><span class="attr-value">xMinYMin</span> - Force uniform
      scaling.<br />
       Align the <span class="attr-value">&lt;min-x&gt;</span> of
      the element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> with the smallest X
      value of the viewport.<br />
       Align the <span class="attr-value">&lt;min-y&gt;</span> of
      the element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> with the smallest Y
      value of the viewport.</li><li><span class="attr-value">xMidYMin</span> - Force uniform
      scaling.<br />
       Align the midpoint X value of the element's
       <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> with the midpoint X value of the viewport.<br />
       Align the <span class="attr-value">&lt;min-y&gt;</span> of
      the element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> with the smallest Y
      value of the viewport.</li><li><span class="attr-value">xMaxYMin</span> - Force uniform
      scaling.<br />
       Align the <span class="attr-value">&lt;min-x&gt;+&lt;width&gt;</span> of the
      element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> with the maximum X value
      of the viewport.<br />
       Align the <span class="attr-value">&lt;min-y&gt;</span> of
      the element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> with the smallest Y
      value of the viewport.</li><li><span class="attr-value">xMinYMid</span> - Force uniform
      scaling.<br />
       Align the <span class="attr-value">&lt;min-x&gt;</span> of
      the element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> with the smallest X
      value of the viewport.<br />
       Align the midpoint Y value of the element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>
       with the midpoint Y
      value of the viewport.</li><li><span class="attr-value">xMidYMid</span> (the default) -
      Force uniform scaling.<br />
       Align the midpoint X value of the element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>
       with the midpoint X value of the viewport.<br />
       Align the midpoint Y value of the element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>
       with the midpoint Y value of the viewport.</li><li><span class="attr-value">xMaxYMid</span> - Force uniform
      scaling.<br />
       Align the <span class="attr-value">&lt;min-x&gt;+&lt;width&gt;</span> of the
      element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>
       with the maximum X value of the viewport.<br />
       Align the midpoint Y value of the element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>
       with the midpoint Y
      value of the viewport.</li><li><span class="attr-value">xMinYMax</span> - Force uniform
      scaling.<br />
       Align the <span class="attr-value">&lt;min-x&gt;</span> of
      the element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> with the smallest X
      value of the viewport.<br />
       Align the <span class="attr-value">&lt;min-y&gt;+&lt;height&gt;</span> of the
      element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> with the maximum Y value
      of the viewport.</li><li><span class="attr-value">xMidYMax</span> - Force uniform
      scaling.<br />
       Align the midpoint X value of the element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>
       with the midpoint X value of the viewport.<br />
       Align the <span class="attr-value">&lt;min-y&gt;+&lt;height&gt;</span> of the
      element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> with the maximum Y value
      of the viewport.</li><li><span class="attr-value">xMaxYMax</span> - Force uniform
      scaling.<br />
       Align the <span class="attr-value">&lt;min-x&gt;+&lt;width&gt;</span> of the
      element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> with the maximum X value
      of the viewport.<br />
       Align the <span class="attr-value">&lt;min-y&gt;+&lt;height&gt;</span> of the
      element's <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> with the maximum Y value
      of the viewport.</li></ul>
    <p>The <span class="attr-value">&lt;meetOrSlice&gt;</span>
    parameter is optional and, if provided, is separated from the
    <span class="attr-value">&lt;align&gt;</span> value by one or
    more spaces and then must be one of the following strings:</p>
    <ul><li>
        <span class="attr-value">meet</span> (the default) - Scale
        the graphic such that: 
        <ul><li>aspect ratio is preserved</li><li>the entire <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> is visible within
          the viewport</li><li>the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> is scaled up as much
          as possible, while still meeting the other criteria</li></ul>
        In this case, if the aspect ratio of the graphic does not
        match the viewport, some of the viewport will extend beyond
        the bounds of the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> (i.e., the area into
        which the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> will draw will be
        smaller than the viewport).
      </li><li>
        <span class="attr-value">slice</span> - Scale the graphic
        such that: 
        <ul><li>aspect ratio is preserved</li><li>the entire viewport is covered by the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a></li><li>the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> is scaled down as
          much as possible, while still meeting the other
          criteria</li></ul>
        In this case, if the aspect ratio of the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> does not match the
        viewport, some of the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> will extend beyond the
        bounds of the viewport (i.e., the area into which the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> will draw is larger
        than the viewport).
      </li></ul>
    <p id="coords-ExamplePreserveAspectRatio"><span class="example-ref">Example PreserveAspectRatio</span>
    illustrates the various options on <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>. To save space,
    XML entities have been defined for the three repeated graphic
    objects, the rectangle with the smile inside and the outlines
    of the two rectangles which have the same dimensions as the
    target viewports. The example creates several new viewports by
    including <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> sub-elements embedded
    inside the <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a> (see <a href="#coords-EstablishingANewViewport">Establishing a new
    viewport</a>).</p>

<pre class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"
[ &lt;!ENTITY Smile "
&lt;rect x='.5' y='.5' width='29' height='39' fill='black' stroke='red'/&gt;
&lt;g transform='translate(0, 5)'&gt;
&lt;circle cx='15' cy='15' r='10' fill='yellow'/&gt;
&lt;circle cx='12' cy='12' r='1.5' fill='black'/&gt;
&lt;circle cx='17' cy='12' r='1.5' fill='black'/&gt;
&lt;path d='M 10 19 A 8 8 0 0 0 20 19' stroke='black' stroke-width='2'/&gt;
&lt;/g&gt;
"&gt;
&lt;!ENTITY Viewport1 "&lt;rect x='.5' y='.5' width='49' height='29'
fill='none' stroke='blue'/&gt;"&gt;
&lt;!ENTITY Viewport2 "&lt;rect x='.5' y='.5' width='29' height='59'
fill='none' stroke='blue'/&gt;"&gt;
]&gt;

&lt;svg width="450px" height="300px" version="1.1"
     xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;desc&gt;Example PreserveAspectRatio - illustrates preserveAspectRatio attribute&lt;/desc&gt;
  &lt;rect x="1" y="1" width="448" height="298"
        fill="none" stroke="blue"/&gt;
  &lt;g font-size="9"&gt;
    &lt;text x="10" y="30"&gt;SVG to fit&lt;/text&gt;
    &lt;g transform="translate(20,40)"&gt;&amp;Smile;&lt;/g&gt;
    &lt;text x="10" y="110"&gt;Viewport 1&lt;/text&gt;
    &lt;g transform="translate(10,120)"&gt;&amp;Viewport1;&lt;/g&gt;
    &lt;text x="10" y="180"&gt;Viewport 2&lt;/text&gt;
    &lt;g transform="translate(20,190)"&gt;&amp;Viewport2;&lt;/g&gt;

    &lt;g id="meet-group-1" transform="translate(100, 60)"&gt;
      &lt;text x="0" y="-30"&gt;--------------- meet ---------------&lt;/text&gt;
      &lt;g&gt;&lt;text y="-10"&gt;xMin*&lt;/text&gt;&amp;Viewport1;
        &lt;svg preserveAspectRatio="xMinYMin meet" viewBox="0 0 30 40"
             width="50" height="30"&gt;&amp;Smile;&lt;/svg&gt;&lt;/g&gt;
      &lt;g transform="translate(70,0)"&gt;&lt;text y="-10"&gt;xMid*&lt;/text&gt;&amp;Viewport1;
        &lt;svg preserveAspectRatio="xMidYMid meet" viewBox="0 0 30 40"
             width="50" height="30"&gt;&amp;Smile;&lt;/svg&gt;&lt;/g&gt;
      &lt;g transform="translate(0,70)"&gt;&lt;text y="-10"&gt;xMax*&lt;/text&gt;&amp;Viewport1;
        &lt;svg preserveAspectRatio="xMaxYMax meet" viewBox="0 0 30 40"
             width="50" height="30"&gt;&amp;Smile;&lt;/svg&gt;&lt;/g&gt;
    &lt;/g&gt;

    &lt;g id="meet-group-2" transform="translate(250, 60)"&gt;
      &lt;text x="0" y="-30"&gt;---------- meet ----------&lt;/text&gt;
      &lt;g&gt;&lt;text y="-10"&gt;*YMin&lt;/text&gt;&amp;Viewport2;
        &lt;svg preserveAspectRatio="xMinYMin meet" viewBox="0 0 30 40"
             width="30" height="60"&gt;&amp;Smile;&lt;/svg&gt;&lt;/g&gt;
      &lt;g transform="translate(50, 0)"&gt;&lt;text y="-10"&gt;*YMid&lt;/text&gt;&amp;Viewport2;
        &lt;svg preserveAspectRatio="xMidYMid meet" viewBox="0 0 30 40"
             width="30" height="60"&gt;&amp;Smile;&lt;/svg&gt;&lt;/g&gt;
      &lt;g transform="translate(100, 0)"&gt;&lt;text y="-10"&gt;*YMax&lt;/text&gt;&amp;Viewport2;
        &lt;svg preserveAspectRatio="xMaxYMax meet" viewBox="0 0 30 40"
             width="30" height="60"&gt;&amp;Smile;&lt;/svg&gt;&lt;/g&gt;
    &lt;/g&gt;

    &lt;g id="slice-group-1" transform="translate(100, 220)"&gt;
      &lt;text x="0" y="-30"&gt;---------- slice ----------&lt;/text&gt;
      &lt;g&gt;&lt;text y="-10"&gt;xMin*&lt;/text&gt;&amp;Viewport2;
        &lt;svg preserveAspectRatio="xMinYMin slice" viewBox="0 0 30 40"
             width="30" height="60"&gt;&amp;Smile;&lt;/svg&gt;&lt;/g&gt;
      &lt;g transform="translate(50,0)"&gt;&lt;text y="-10"&gt;xMid*&lt;/text&gt;&amp;Viewport2;
        &lt;svg preserveAspectRatio="xMidYMid slice" viewBox="0 0 30 40"
             width="30" height="60"&gt;&amp;Smile;&lt;/svg&gt;&lt;/g&gt;
      &lt;g transform="translate(100,0)"&gt;&lt;text y="-10"&gt;xMax*&lt;/text&gt;&amp;Viewport2;
        &lt;svg preserveAspectRatio="xMaxYMax slice" viewBox="0 0 30 40"
             width="30" height="60"&gt;&amp;Smile;&lt;/svg&gt;&lt;/g&gt;
    &lt;/g&gt;

    &lt;g id="slice-group-2" transform="translate(250, 220)"&gt;
      &lt;text x="0" y="-30"&gt;--------------- slice ---------------&lt;/text&gt;
      &lt;g&gt;&lt;text y="-10"&gt;*YMin&lt;/text&gt;&amp;Viewport1;
        &lt;svg preserveAspectRatio="xMinYMin slice" viewBox="0 0 30 40"
             width="50" height="30"&gt;&amp;Smile;&lt;/svg&gt;&lt;/g&gt;
      &lt;g transform="translate(70,0)"&gt;&lt;text y="-10"&gt;*YMid&lt;/text&gt;&amp;Viewport1;
        &lt;svg preserveAspectRatio="xMidYMid slice" viewBox="0 0 30 40"
             width="50" height="30"&gt;&amp;Smile;&lt;/svg&gt;&lt;/g&gt;
      &lt;g transform="translate(140,0)"&gt;&lt;text y="-10"&gt;*YMax&lt;/text&gt;&amp;Viewport1;
        &lt;svg preserveAspectRatio="xMaxYMax slice" viewBox="0 0 30 40"
             width="50" height="30"&gt;&amp;Smile;&lt;/svg&gt;&lt;/g&gt;
    &lt;/g&gt;   
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example PreserveAspectRatio</caption><tr><td><img alt="Example PreserveAspectRatio — demonstrate available options" src="images/coords/PreserveAspectRatio.png" /></td></tr></table><p class="view-as-svg"><a href="images/coords/PreserveAspectRatio.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p>For the <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>
    attribute:</p>
    <p>    <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes.</span></p>
    <h2 id="coords-EstablishingANewViewport">7.9 Establishing a new viewport</h2>
    <p>At any point in an SVG drawing, you can establish a new
    viewport into which all contained graphics is drawn by
    including an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element
    inside SVG content. By establishing a new viewport, you also
    implicitly establish a new viewport coordinate system, a new
    user coordinate system, and, potentially, a new clipping path
    (see the definition of the <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property).
    Additionally, there is a new meaning for percentage units
    defined to be relative to the current viewport since a new
    viewport has been established (see <a href="#coords-Units">Units</a>).</p>
    <p>The bounds of the new viewport are defined by the <span class="attr-name">‘x’</span>, <span class="attr-name">‘y’</span>,
    <span class="attr-name">‘width’</span> and <span class="attr-name">‘height’</span> attributes on the element
    establishing the new viewport, such as an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element. Both the new
    viewport coordinate system and the new user coordinate system
    have their origins at (<span class="attr-name">‘x’</span>, <span class="attr-name">‘y’</span>), where <span class="attr-name">‘x’</span> and <span class="attr-name">‘y’</span>
    represent the value of the corresponding attributes on the
    element establishing the viewport. The orientation of the new
    viewport coordinate system and the new user coordinate system
    correspond to the orientation of the current user coordinate
    system for the element establishing the viewport. A single unit
    in the new viewport coordinate system and the new user
    coordinate system are the same size as a single unit in the
    current user coordinate system for the element establishing the
    viewport.</p>
    <p>Here is an example:</p>
<pre>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="4in" height="3in" version="1.1"
     xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;desc&gt;This SVG drawing embeds another one,
    thus establishing a new viewport
  &lt;/desc&gt;
  &lt;!-- The following statement establishing a new viewport
       and renders SVG drawing B into that viewport --&gt;
  &lt;svg x="25%" y="25%" width="50%" height="50%"&gt;
     &lt;!-- drawing B goes here --&gt;
  &lt;/svg&gt;
&lt;/svg&gt;
</pre>
    <p>For an extensive example of creating new viewports, see <a href="#coords-ExamplePreserveAspectRatio">Example
    PreserveAspectRatio</a>.</p>
    <p id="coords-ElementsThatEstablishViewports">The following elements establish new viewports:</p>
    <ul><li>The <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element</li><li>A <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> element define new
      viewports whenever they are instanced by a <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element.</li><li>An <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element that
      references an SVG file will result in the establishment of a
      temporary new viewport since the referenced resource by
      definition will have an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.</li><li>A <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a> element
      creates a new viewport for rendering the content that is
      within the element.</li></ul>
    <p>Whether a new viewport also establishes a new additional
    clipping path is determined by the value of the <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property on the element
    that establishes the new viewport. If a clipping path is
    created to correspond to the new viewport, the clipping path's
    geometry is determined by the value of the <a href="#masking-ClipProperty"><span class="prop-name">‘clip’</span></a> property. Also, see <a href="#masking-AutoClipAtViewportNotViewBox">Clip to
    viewport vs. clip to <span class="attr-name">‘viewBox’</span></a>.</p>

    <h2 id="coords-Units">7.10 Units</h2>
    <p>All coordinates and lengths in SVG can be specified with or
    without a <span class="SVG-Term">unit identifier</span>.</p>
    <p>When a coordinate or length value is a number without a unit
    identifier (e.g., "25"), then the given coordinate or length is
    assumed to be in user units (i.e., a value in the current user
    coordinate system). For example:</p>
<pre>
&lt;text font-size="50"&gt;Text size is 50 user units&lt;/text&gt;
</pre>
    <p>Alternatively, a coordinate or length value can be expressed
    as a number followed by a unit identifier (e.g., "25cm" or
    "15em").
    (Note that CSS defined <a href="#intro-TermProperty"><span class="svg-term">properties</span></a> used in a CSS style sheet
    or the <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attribute require units for
    non-zero lengths, see <a href="#styling-SVGStylingProperties">SVG's styling
    properties</a>.)
    The list of unit identifiers in SVG matches the list
    of unit identifiers in CSS: em, ex, px, pt, pc, cm, mm and in.
    The <a href="#types-DataTypeLength">&lt;length&gt;</a> type can also have
    a percentage unit identifier.  The following describes how the various unit
    identifiers are processed:</p>
    <ul><li>
        <p>As in CSS, the <em>em</em> and <em>ex</em> unit
        identifiers are relative to the current font's
        <em>font-size</em> and <em>x-height</em>, respectively.</p>
      </li><li>
        <p>One <em>px</em> unit is defined to be equal to one user
        unit. Thus, a length of "5px" is the same as a length of
        "5".</p>
        <p>Note that at initialization, a user unit in the <a href="#coords-InitialCoordinateSystem">the initial
        coordinate system</a> is equivalenced to the parent
        environment's notion of a <em>px</em> unit. Thus, in the <a href="#coords-InitialCoordinateSystem">the initial
        coordinate system</a>, because the user coordinate system
        aligns exactly with the parent's coordinate system, and
        because often the parent's coordinate system aligns with
        the device pixel grid, "5px" might actually map to 5
        devices pixels. However, if there are any coordinate system
        transformation due to the use of <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> or
        <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attributes, because
        "5px" maps to 5 user units and because the coordinate
        system transformations have resulted in a revised user
        coordinate system, "5px" likely will not map to 5 device
        pixels. As a result, in most circumstances, "px" units will
        not map to the device pixel grid.</p>
      </li><li>
        <p>The other absolute unit identifiers from CSS (i.e., pt,
        pc, cm, mm, in) are all defined as an appropriate multiple
        of one <em>px</em> unit (which, according to the previous
        item, is defined to be equal to one user unit), based on
        what the SVG user agent determines is the size of a
        <em>px</em> unit (possibly passed from the parent processor
        or environment at initialization time). For example,
        suppose that the user agent can determine from its
        environment that "1px" corresponds to "0.2822222mm" (i.e.,
        90dpi). Then, for all processing of SVG content:</p>
        <ul><li>"1pt" equals "1.25px" (and therefore 1.25 user
          units)</li><li>"1pc" equals "15px" (and therefore 15 user
          units)</li><li>"1mm" would be "3.543307px" (3.543307 user
          units)</li><li>"1cm" equals "35.43307px" (and therefore 35.43307
          user units)</li><li>"1in" equals "90px" (and therefore 90 user
          units)</li></ul>
      </li></ul>
    <p>Note that use of <em>px</em> units or any other absolute
    unit identifiers can cause inconsistent visual results on
    different viewing environments since the size of "1px" may map
    to a different number of user units on different systems; thus,
    absolute units identifiers are only recommended for the
    <a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a> and the <a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a> on
     and situations
    where the content contains no transformations and it is
    desirable to specify values relative to the device pixel grid
    or to a particular real world unit size.</p>
    <p>For percentage values that are defined to be relative to the
    size of viewport:</p>
    <ul><li>For any x-coordinate value or width value expressed as a
      percentage of the viewport, the value to use is the specified
      percentage of the <em>actual-width</em> in user units for the
      nearest containing viewport, where <em>actual-width</em> is
      the width dimension of the viewport element within the user
      coordinate system for the viewport element.</li><li>For any y-coordinate value or height value expressed as a
      percentage of the viewport, the value to use is the specified
      percentage of the <em>actual-height</em> in user units for
      the nearest containing viewport, where <em>actual-height</em>
      is the height dimension of the viewport element within the
      user coordinate system for the viewport element.</li><li id="coords-Units_viewport_percentage">For any other length value expressed as a percentage of
      the viewport, the percentage is calculated as the specified
      percentage of <code>sqrt((<em>actual-width</em>)**2 +
      (<em>actual-height</em>)**2))/sqrt(2)</code>.</li></ul>
    <p id="coords-ExampleUnits"><span class="example-ref">Example Units</span> below
    illustrates some of the processing rules for different types of
    units.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="400px" height="200px" viewBox="0 0 4000 2000"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;title&gt;Example Units&lt;/title&gt;
  &lt;desc&gt;Illustrates various units options&lt;/desc&gt;

  &lt;!-- Frame the picture --&gt;
  &lt;rect x="5" y="5" width="3990" height="1990" 
        fill="none" stroke="blue" stroke-width="10"/&gt;

  &lt;g fill="blue" stroke="red" font-family="Verdana" font-size="150"&gt;
    &lt;!-- Absolute unit specifiers --&gt;
    &lt;g transform="translate(400,0)"&gt;
      &lt;text x="-50" y="300" fill="black" stroke="none"&gt;Abs. units:&lt;/text&gt;
      &lt;rect x="0" y="400" width="4in" height="2in" stroke-width=".4in"/&gt;
      &lt;rect x="0" y="750" width="384" height="192" stroke-width="38.4"/&gt;
      &lt;g transform="scale(2)"&gt;
        &lt;rect x="0" y="600" width="4in" height="2in" stroke-width=".4in"/&gt;
      &lt;/g&gt;
    &lt;/g&gt;

    &lt;!-- Relative unit specifiers --&gt;
    &lt;g transform="translate(1600,0)"&gt;
      &lt;text x="-50" y="300" fill="black" stroke="none"&gt;Rel. units:&lt;/text&gt;
      &lt;rect x="0" y="400" width="2.5em" height="1.25em" stroke-width=".25em"/&gt;
      &lt;rect x="0" y="750" width="375" height="187.5" stroke-width="37.5"/&gt;
      &lt;g transform="scale(2)"&gt;
        &lt;rect x="0" y="600" width="2.5em" height="1.25em" stroke-width=".25em"/&gt;
      &lt;/g&gt;
    &lt;/g&gt;

    &lt;!-- Percentages --&gt;
    &lt;g transform="translate(2800,0)"&gt;
      &lt;text x="-50" y="300" fill="black" stroke="none"&gt;Percentages:&lt;/text&gt;
      &lt;rect x="0" y="400" width="10%" height="10%" stroke-width="1%"/&gt;
      &lt;rect x="0" y="750" width="400" height="200" stroke-width="31.62"/&gt;
      &lt;g transform="scale(2)"&gt;
        &lt;rect x="0" y="600" width="10%" height="10%" stroke-width="1%"/&gt;
      &lt;/g&gt;
    &lt;/g&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example Units</caption><tr><td><img alt="Example Units — demonstrate available options" src="images/coords/Units.png" /></td></tr></table><p class="view-as-svg"><a href="images/coords/Units.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p>The three rectangles on the left demonstrate the use of one
    of the absolute unit identifiers, the "in" unit (inch). The
    reference image above was generated on a 96dpi system (i.e., 1
    inch = 96 pixels). Therefore, the topmost rectangle, which is
    specified in inches, is exactly the same size as the middle
    rectangle, which is specified in user units such that there are
    96 user units for each corresponding inch in the topmost
    rectangle. (Note: on systems with different screen resolutions,
    the top and middle rectangles will likely be rendered at
    different sizes.) The bottom rectangle of the group illustrates
    what happens when values specified in inches are scaled.</p>
    <p>The three rectangles in the middle demonstrate the use of
    one of the relative unit identifiers, the "em" unit. Because
    the <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> property has been set
    to <span class="prop-value">150</span> on the outermost <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element, each "em" unit is
    equal to 150 user units. The topmost rectangle, which is
    specified in "em" units, is exactly the same size as the middle
    rectangle, which is specified in user units such that there are
    150 user units for each corresponding "em" unit in the topmost
    rectangle. The bottom rectangle of the group illustrates what
    happens when values specified in "em" units are scaled.</p>
    <p>The three rectangles on the right demonstrate the use of
    percentages. Note that the width and height of the viewport in
    the user coordinate system for the viewport element (in this
    case, the <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>) are 4000 and
    2000, respectively, because processing the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute results in a
    transformed user coordinate system. The topmost rectangle,
    which is specified in percentage units, is exactly the same
    size as the middle rectangle, which is specified in equivalent
    user units. In particular, note that the <a href="#painting-StrokeWidthProperty"><span class="prop-name">‘stroke-width’</span></a> property in the
    middle rectangle is set to 1% of the
    <code>sqrt((<em>actual-width</em>)**2 +
    (<em>actual-height</em>)**2)) / sqrt(2)</code>, which in this
    case is .01*sqrt(4000*4000+2000*2000)/sqrt(2), or 31.62. The
    bottom rectangle of the group illustrates what happens when
    values specified in percentage units are scaled.</p>

    <h2 id="coords-ObjectBoundingBoxUnits">7.11 Object bounding box units</h2>
    <p id="coords-ObjectBoundingBox">The following elements offer the option of expressing
    coordinate values and lengths as fractions (and, in some cases,
    percentages) of the <span class="SVG-Term">bounding box</span>,
    by setting a specified attribute to <span class="attr-value">'objectBoundingBox'</span>
    on the given element:</p>
    <table class="vert" summary="Object bounding box units rules"><tr><th>Element</th><th>Attribute</th><th>Effect</th></tr><tr>
          <td><a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a></td>
          <td><a href="#pservers-LinearGradientElementGradientUnitsAttribute"><span class="attr-name">‘gradientUnits’</span></a></td>
          <td>Indicates that the attributes which specify the
          gradient vector (<a href="#pservers-LinearGradientElementX1Attribute"><span class="attr-name">‘x1’</span></a>, <a href="#pservers-LinearGradientElementY1Attribute"><span class="attr-name">‘y1’</span></a>, <a href="#pservers-LinearGradientElementX2Attribute"><span class="attr-name">‘x2’</span></a>, <a href="#pservers-LinearGradientElementY2Attribute"><span class="attr-name">‘y2’</span></a>) represent fractions or
          percentages of the bounding box of the element to which the
          gradient is applied.</td>
        </tr><tr>
          <td><a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></td>
          <td><a href="#pservers-RadialGradientElementGradientUnitsAttribute"><span class="attr-name">‘gradientUnits’</span></a></td>
          <td>Indicates that the attributes which specify the center
          (<a href="#pservers-RadialGradientElementCXAttribute"><span class="attr-name">‘cx’</span></a>, <a href="#pservers-RadialGradientElementCYAttribute"><span class="attr-name">‘cy’</span></a>), the radius (<a href="#pservers-RadialGradientElementRAttribute"><span class="attr-name">‘r’</span></a>) and focus
          (<a href="#pservers-RadialGradientElementFXAttribute"><span class="attr-name">‘fx’</span></a>, <a href="#pservers-RadialGradientElementFYAttribute"><span class="attr-name">‘fy’</span></a>) represent fractions or
          percentages of the bounding box of the element to which the
          gradient is applied.</td>
        </tr>
        <tr><td><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></td><td><a href="#pservers-PatternElementPatternUnitsAttribute"><span class="attr-name">‘patternUnits’</span></a></td><td>Indicates that the attributes which define how to tile the pattern
          (<a href="#pservers-PatternElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#pservers-PatternElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#pservers-PatternElementWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#pservers-PatternElementHeightAttribute"><span class="attr-name">‘height’</span></a>) are
          established using the bounding box of the element to which the pattern
          is applied.</td></tr>
        <tr><td><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></td><td><a href="#pservers-PatternElementPatternContentUnitsAttribute"><span class="attr-name">‘patternContentUnits’</span></a></td><td>Indicates that the user coordinate system for the
          contents of the pattern is established using the bounding
          box of the element to which the pattern is applied.</td></tr>
      <tr><td><a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a></td><td><a href="#masking-ClipPathElementClipPathUnitsAttribute"><span class="attr-name">‘clipPathUnits’</span></a></td><td>Indicates that the user coordinate system for the contents of the
        <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element is established using the bounding box of the
        element to which the clipping path is applied.</td></tr>
        <tr><td><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></td><td><a href="#masking-MaskElementMaskUnitsAttribute"><span class="attr-name">‘maskUnits’</span></a></td><td>Indicates that the attributes which define the masking region
          (<a href="#masking-MaskElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#masking-MaskElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#masking-MaskElementWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#masking-MaskElementHeightAttribute"><span class="attr-name">‘height’</span></a>) is
          established using the bounding box of the element to which the mask
          is applied.</td></tr>
        <tr><td><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></td><td><a href="#masking-MaskElementMaskContentUnitsAttribute"><span class="attr-name">‘maskContentUnits’</span></a></td><td>Indicates that the user coordinate system for the contents of
          the <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element are established using the bounding box of
          the element to which the mask is applied.</td></tr>
      
        <tr><td><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></td><td><a href="#filters-FilterElementFilterUnitsAttribute"><span class="attr-name">‘filterUnits’</span></a></td><td>Indicates that the attributes which define the
          <a href="#filters-FilterEffectsRegion">filter effects region</a>
          (<a href="#filters-FilterElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterElementWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterElementHeightAttribute"><span class="attr-name">‘height’</span></a>) represent
          fractions or percentages of the bounding box of the element to which
          the filter is applied.</td></tr>
        <tr><td><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></td><td><a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a></td><td>Indicates that the various length values within the filter
          primitives represent fractions or percentages of the bounding box of
          the element to which the filter is applied.</td></tr>
      </table>
    <p>In the discussion that follows, the term <span class="SVG-Term">applicable element</span> is the element to
    which the given effect applies. For gradients and patterns, the
    applicable element is the <a href="#intro-TermGraphicsElement">graphics element</a>
    which has its <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> or <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> property referencing the
    given gradient or pattern. (See <a href="#painting-InheritanceOfPaintingProperties">Inheritance
    of Painting Properties</a>. For special rules concerning <a href="#chapter-text">text elements</a>, see the discussion of <a href="#text-ObjectBoundingBoxUnitsTextObjects">object
    bounding box units and text elements</a>.) For clipping paths,
    masks and filters, the applicable element can be either a <a href="#intro-TermContainerElement">container element</a> or
    a <a href="#intro-TermGraphicsElement">graphics
    element</a>.</p>
    <p>When keyword <span class="attr-value">objectBoundingBox</span> is used, then the
    effect is as if a supplemental transformation matrix were
    inserted into the list of nested transformation matrices to
    create a new user coordinate system.</p>
    <p>First, the (<strong>minx</strong>,<strong>miny</strong>) and
    (<strong>maxx</strong>,<strong>maxy</strong>) coordinates are
    determined for the applicable element and all of its
    descendants. The values <strong>minx</strong>,
    <strong>miny</strong>, <strong>maxx</strong> and
    <strong>maxy</strong> are determined by computing the maximum
    extent of the shape of the element in X and Y with respect to
    the user coordinate system for the applicable element. The
    bounding box is the tightest fitting rectangle aligned with the
    axes of the applicable element's user coordinate system that
    entirely encloses the applicable element and its descendants.
    The bounding box is computed exclusive of any values for
    clipping, masking, filter effects, opacity and stroke-width.
    For curved shapes, the bounding box encloses all portions of
    the shape, not just end points. For <a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements, for the
    purposes of the bounding box calculation, each glyph is treated
    as a separate graphics element. The calculations assume that
    all glyphs occupy the full glyph cell. For example, for
    horizontal text, the calculations assume that each glyph
    extends vertically to the full ascent and descent values for
    the font.</p>
    <p>Then, coordinate (0,0) in the new user coordinate system is
    mapped to the (minx,miny) corner of the tight bounding box
    within the user coordinate system of the applicable element and
    coordinate (1,1) in the new user coordinate system is mapped to
    the (maxx,maxy) corner of the tight bounding box of the
    applicable element. In most situations, the following
    transformation matrix produces the correct effect:</p>
<pre>
[ (maxx-minx) 0 0 (maxy-miny) minx miny ]
</pre>
    <p> </p>
    <p>When percentages are used with attributes that define the
    gradient vector, the pattern tile, the filter region or the
    masking region, a percentage represents the same value as the
    corresponding decimal value (e.g., 50% means the same as 0.5).
    If percentages are used within the content of a <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>,
    <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>, <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> or <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element, these values
    are treated according to the processing rules for percentages
    as defined in <a href="#coords-Units">Units</a>.</p>
    <p>Any numeric value can be specified for values expressed as a
    fraction or percentage of object bounding box units. In
    particular, fractions less are zero or greater than one and
    percentages less than 0% or greater than 100% can be
    specified.</p>
    <p>Keyword <span class="attr-value">objectBoundingBox</span>
    should not be used when the geometry of the applicable element
    has no width or no height, such as the case of a horizontal or
    vertical line, even when the line has actual thickness when
    viewed due to having a non-zero stroke width since stroke width
    is ignored for bounding box calculations. When the geometry of
    the applicable element has no width or height and <span class="attr-value">objectBoundingBox</span> is specified, then
    the given effect (e.g., a gradient or a filter) will be
    ignored.</p>
    


<h2 id="coords-IntrinsicSizing">7.12 Intrinsic sizing properties of the viewport of SVG content</h2>
<p>SVG needs to specify how to calculate some intrinsic sizing properties  to
enable inclusion within other languages. The intrinsic width and height
of the <a href="#intro-TermViewport"><span class="svg-term">viewport</span></a> of SVG content must be determined from the <a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a>
    attributes. If either of these are not specified, a
    value of <span class="attr-value">'100%'</span> must
    be assumed. <em>Note:</em> the  <a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a>
 attributes are <em>not the same</em> as the CSS width and height properties. Specifically, percentage values <em>do not
provide an intrinsic width or height, and do not indicate a percentage of the containing block</em>. Rather, once the viewport is established, they indicate the portion of the viewport that is actually covered by image data.</p>

<p>The intrinsic aspect ratio of the <a href="#intro-TermViewport"><span class="svg-term">viewport</span></a> of SVG content is necessary
for example, when including SVG from an <span class="element-name">‘object’</span> element in HTML styled with
CSS.  It is possible (indeed, common) for an SVG graphic to have an intrinsic aspect ratio but not to have an intrinsic width or height.
The intrinsic aspect ratio must be calculated based upon the
following rules:</p>
<ul><li><p>The aspect ratio is calculated by dividing a width by a height.</p></li><li><p>If the <a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a> of the <a href="#intro-TermRootmostSVGElement"><span class="svg-term">rootmost <span class="element-name">‘svg’</span> element</span></a> are both specified with 
unit identifiers (in, mm, cm, pt, pc, px, em, ex) or in <a href="#intro-TermUserUnits"><span class="svg-term">user units</span></a>, then the aspect ratio is
calculated from the <a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a> attributes after resolving both values to user units.</p></li><li><p>If either/both of the <a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a> of the <a href="#intro-TermRootmostSVGElement"><span class="svg-term">rootmost <span class="element-name">‘svg’</span> element</span></a> are in
percentage units (or omitted), the aspect ratio is calculated from the width and
height values of the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> specified for the <a href="#intro-TermCurrentSVGDocumentFragment"><span class="svg-term">current SVG document fragment</span></a>. If the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> is not correctly specified, or set to <span class="attr-value">'none'</span>,
the intrinsic aspect ratio cannot be calculated and is considered unspecified.</p></li></ul>

<p>Examples:</p>

<div class="example">
<div class="exampleheader">
<strong>Example:</strong> Intrinsic Aspect Ratio 1
</div>

<div class="examplesource">
<pre>&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.2" baseProfile="tiny"
     width="10cm" height="5cm"&gt;
  ...
&lt;/svg&gt;</pre>
</div>
</div>

<p>In this example the intrinsic aspect ratio of the <a href="#intro-TermViewport"><span class="svg-term">viewport</span></a> is 2:1. The
intrinsic width is 10cm and the intrinsic height is 5cm.</p>

<div class="example">
<div class="exampleheader">
<strong>Example:</strong> Intrinsic Aspect Ratio 2
</div>

<div class="examplesource">
<pre>&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.2" baseProfile="tiny"
     width="100%" height="50%" viewBox="0 0 200 200"&gt;
  ...
&lt;/svg&gt;</pre>
</div>
</div>

<p>In this example the intrinsic aspect ratio of the rootmost <a href="#intro-TermViewport"><span class="svg-term">viewport</span></a> is
1:1. An aspect ratio calculation in this case allows embedding in an
object within a containing block that is only constrained in one direction.</p>

<div class="example">
<div class="exampleheader">
<strong>Example:</strong> Intrinsic Aspect Ratio 3
</div>

<div class="examplesource">
<pre>&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.2" baseProfile="tiny"
     width="10cm" viewBox="0 0 200 200"&gt;
  ...
&lt;/svg&gt;</pre>
</div>
</div>

<p>In this case the intrinsic aspect ratio is 1:1.</p>

<div class="example">
<div class="exampleheader">
<strong>Example:</strong> Intrinsic Aspect Ratio 4
</div>

<div class="examplesource">
<pre>&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.2" baseProfile="tiny"
     width="75%" height="10cm" viewBox="0 0 200 200"&gt;
  ...
&lt;/svg&gt;</pre>
</div>
</div>

<p>In this example, the intrinsic aspect ratio is 1:1.</p>



<h2 id="coords-GeographicCoordinates">7.13 Geographic coordinate systems</h2>

<p>In order to allow interoperability between SVG content generators
and user agents dealing with maps encoded in SVG, the use of a common
metadata definition for describing the coordinate system used to
generate SVG documents is encouraged.</p>

<p>Such metadata must be added under the <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a> element of
the topmost <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element describing the map, consisting of an
RDF description of the Coordinate Reference System definition used to
generate the SVG map [<a href="#refs-ref-RDF-PRIMER">RDF-PRIMER</a>]. Note that
the presence of this metadata does not affect the rendering of the SVG
in any way; it merely provides added semantic value for applications
that make use of combined maps.</p>

<p>The definition must be conformant to the XML grammar described in
<a href="http://portal.opengeospatial.org/files/?artifact_id=20509"><cite>GML 3.2.1</cite></a>,
an OpenGIS Standard for encoding common CRS data types in XML
[<a href="#refs-ref-GML">GML</a>]. In order to correctly map
the 2-dimensional data used by SVG, the CRS must be of subtype
<strong>ProjectedCRS</strong> or <strong>Geographic2dCRS</strong>. The
first axis of the described CRS maps the SVG <var>x</var>-axis and the
second axis maps the SVG <var>y</var>-axis.</p>

<p>The main purpose of such metadata is to indicate to the user agent
that two or more SVG documents can be overlayed or merged into a single
document. Obviously, if two maps reference the same Coordinate Reference
System definition and have the same SVG <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute
value then they can be overlayed without reprojecting the data. If
the maps reference different Coordinate Reference Systems and/or have
different SVG <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute values, then a specialized
cartographic user agent may choose to transform the coordinate data to
overlay the data. However, typical SVG user agents are not required
to perform these types of transformations, or even recognize the
metadata. It is described in this specification so that the connection
between geographic coordinate systems and the SVG coordinate system is
clear.</p>
  
<h2 id="coords-SVGGlobalTransformAttribute">7.14 The <span class="attr-name">‘svg:transform’</span> attribute</h2>

<div class="adef-list">
  <p><em>Attribute definition:</em></p>
  <dl><dt id="coords-SVGGlobalTransformAttributeDefinition"><span class="adef">svg:transform</span> = <span class="attr-value">"<a href="#coords-TransformAttribute">&lt;transform&gt;</a>" | "none"</span></dt><dd>
      <dl><dt><span class="attr-value"><a href="#coords-TransformAttribute">&lt;transform&gt;</a></span></dt><dd>
          <p>Specifies the affine transformation that has been
          applied to the map data. The syntax is identical to
          that described in <a href="#coords-TransformAttribute">The <span class="attr-name">‘transform’</span> attribute</a>
          section.</p>
        </dd><dt><span class="attr-value">none</span></dt><dd>
          <p>Specifies that no supplemental affine transformation has been
          applied to the map data.  Using this value has the same meaning as
          specifying the identity matrix, which in turn is just the same as
          not specifying the
          <a href="#coords-SVGGlobalTransformAttribute"><span class="attr-name">‘svg:transform’</span></a>
          the attribute at all.</p>
        </dd></dl>
      <p class="anim-target"><a href="#animate-Animatable">Animatable</a>: no.</p>
    </dd></dl>
</div>    
    
<p>This attribute describes an optional additional affine
transformation that may have been applied during this
mapping. This attribute may be added to the OpenGIS
<span class="element-name">‘CoordinateReferenceSystem’</span> element. Note
that, unlike the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute, it does not indicate that
a transformation is to <em>be applied</em> to the data within the file.
Instead, it simply describes the transformation that <em>was already
applied</em> to the data when being encoded in SVG.</p>

<p>There are three typical uses for the
<a href="#coords-SVGGlobalTransformAttribute"><span class="attr-name">‘svg:transform’</span></a>
global attribute. These are described below and used in the examples.</p>

<ul><li><p>Most ProjectedCRS have the north direction represented by
  positive values of the second axis and conversely SVG has a
  <var>y</var>-down coordinate system. That's why, in order to follow the
  usual way to represent a map with the north at its top, it is
  recommended for that kind of ProjectedCRS to use the
  <a href="#coords-SVGGlobalTransformAttribute"><span class="attr-name">‘svg:transform’</span></a>
  global attribute with a <span class="attr-value">'scale(1, -1)'</span> value as in the
  third example below.</p></li><li><p>Most Geographic2dCRS have the latitude as their first
  axis rather than the longitude, which means that the
  south-north axis would be represented by the <var>x</var>-axis in SVG
  instead of the usual <var>y</var>-axis. That's why, in order to follow
  the usual way to represent a map with the north at its top,
  it is recommended for that kind of Geographic2dCRS to use the
  <a href="#coords-SVGGlobalTransformAttribute"><span class="attr-name">‘svg:transform’</span></a>
  global attribute with a <span class="attr-value">'rotate(-90)'</span> value as in the
  first example (while also adding the <span class="attr-value">'scale(1, -1)'</span> as for
  ProjectedCRS).</p></li><li><p>In addition, when converting for profiles which place
  restrictions on precision of real number values, it may be
  useful to add an additional scaling factor to retain good
  precision for a specific area. When generating an SVG
  document from WGS84 geographic coordinates (EPGS 4326), we
  recommend the use of an additional 100 times scaling factor
  corresponding to an <a href="#coords-SVGGlobalTransformAttribute"><span class="attr-name">‘svg:transform’</span></a>
  global attribute with a <span class="attr-value">'rotate(-90) scale(100)'</span>
  value (shown in the second example).
  Different scaling values may be required depending on the
  particular CRS.</p></li></ul>

<p>Below is a simple example of the coordinate metadata, which
describes the coordinate system used by the document via a
URI.</p>

<pre class="xml">&lt;?xml version="1.0"?&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1"
     width="100" height="100" viewBox="0 0 1000 1000"&gt;

  &lt;desc&gt;An example that references coordinate data.&lt;/desc&gt;

  &lt;metadata&gt;
    &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
             xmlns:crs="http://www.ogc.org/crs"
             xmlns:svg="http://www.w3.org/2000/svg"&gt;
      &lt;rdf:Description rdf:about=""&gt;
        &lt;!-- The Coordinate Reference System is described
             through a URI. --&gt;
        &lt;crs:CoordinateReferenceSystem
            svg:transform="rotate(-90)"
            rdf:resource="http://www.example.org/srs/epsg.xml#4326"/&gt;
      &lt;/rdf:Description&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;

  &lt;!-- The actual map content --&gt;
&lt;/svg&gt;</pre>

<p>The second example uses a well-known identifier to describe
the coordinate system. Note that the coordinates used in the
document have had the supplied transform applied.</p>

<pre class="xml">&lt;?xml version="1.0"?&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1"
     width="100" height="100" viewBox="0 0 1000 1000"&gt;

  &lt;desc&gt;Example using a well known coordinate system.&lt;/desc&gt;

  &lt;metadata&gt;
    &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
             xmlns:crs="http://www.ogc.org/crs"
             xmlns:svg="http://www.w3.org/2000/svg"&gt;
      &lt;rdf:Description rdf:about=""&gt;
        &lt;!-- In case of a well-known Coordinate Reference System
             an 'Identifier' is enough to describe the CRS --&gt;
        &lt;crs:CoordinateReferenceSystem svg:transform="rotate(-90) scale(100, 100)"&gt;
          &lt;crs:Identifier&gt;
            &lt;crs:code&gt;4326&lt;/crs:code&gt;
            &lt;crs:codeSpace&gt;EPSG&lt;/crs:codeSpace&gt;
            &lt;crs:edition&gt;5.2&lt;/crs:edition&gt;
          &lt;/crs:Identifier&gt;
        &lt;/crs:CoordinateReferenceSystem&gt;
      &lt;/rdf:Description&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;

  &lt;!-- The actual map content --&gt;
&lt;/svg&gt;</pre>

<p>The third example defines the coordinate system completely
within the SVG document.</p>

<pre class="xml">&lt;?xml version="1.0"?&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1"
     width="100" height="100" viewBox="0 0 1000 1000"&gt;

  &lt;desc&gt;Coordinate metadata defined within the SVG document&lt;/desc&gt;

  &lt;metadata&gt;
    &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
             xmlns:crs="http://www.ogc.org/crs"
             xmlns:svg="http://www.w3.org/2000/svg"&gt;
      &lt;rdf:Description rdf:about=""&gt;
        &lt;!-- For other CRS it should be entirely defined --&gt;
        &lt;crs:CoordinateReferenceSystem svg:transform="scale(1,-1)"&gt;
          &lt;crs:NameSet&gt;
            &lt;crs:name&gt;Mercator projection of WGS84&lt;/crs:name&gt;
          &lt;/crs:NameSet&gt;
          &lt;crs:ProjectedCRS&gt;
            &lt;!-- The actual definition of the CRS --&gt;
            &lt;crs:CartesianCoordinateSystem&gt;
              &lt;crs:dimension&gt;2&lt;/crs:dimension&gt;
              &lt;crs:CoordinateAxis&gt;
                &lt;crs:axisDirection&gt;north&lt;/crs:axisDirection&gt;
                &lt;crs:AngularUnit&gt;
                  &lt;crs:Identifier&gt;
                    &lt;crs:code&gt;9108&lt;/crs:code&gt;
                    &lt;crs:codeSpace&gt;EPSG&lt;/crs:codeSpace&gt;
                    &lt;crs:edition&gt;5.2&lt;/crs:edition&gt;
                  &lt;/crs:Identifier&gt;
                &lt;/crs:AngularUnit&gt;
              &lt;/crs:CoordinateAxis&gt;
              &lt;crs:CoordinateAxis&gt;
                &lt;crs:axisDirection&gt;east&lt;/crs:axisDirection&gt;
                &lt;crs:AngularUnit&gt;
                  &lt;crs:Identifier&gt;
                    &lt;crs:code&gt;9108&lt;/crs:code&gt;
                    &lt;crs:codeSpace&gt;EPSG&lt;/crs:codeSpace&gt;
                    &lt;crs:edition&gt;5.2&lt;/crs:edition&gt;
                  &lt;/crs:Identifier&gt;
                &lt;/crs:AngularUnit&gt;
              &lt;/crs:CoordinateAxis&gt;
            &lt;/crs:CartesianCoordinateSystem&gt;
            &lt;crs:CoordinateReferenceSystem&gt;
              &lt;!-- the reference system of that projected system is
                         WGS84 which is EPSG 4326 in EPSG codeSpace --&gt;
              &lt;crs:NameSet&gt;
                &lt;crs:name&gt;WGS 84&lt;/crs:name&gt;
              &lt;/crs:NameSet&gt;
              &lt;crs:Identifier&gt;
                &lt;crs:code&gt;4326&lt;/crs:code&gt;
                &lt;crs:codeSpace&gt;EPSG&lt;/crs:codeSpace&gt;
                &lt;crs:edition&gt;5.2&lt;/crs:edition&gt;
              &lt;/crs:Identifier&gt;
            &lt;/crs:CoordinateReferenceSystem&gt;
            &lt;crs:CoordinateTransformationDefinition&gt;
              &lt;crs:sourceDimensions&gt;2&lt;/crs:sourceDimensions&gt;
              &lt;crs:targetDimensions&gt;2&lt;/crs:targetDimensions&gt;
              &lt;crs:ParameterizedTransformation&gt;
                &lt;crs:TransformationMethod&gt;
                  &lt;!-- the projection is a Mercator projection which is
                        EPSG 9805 in EPSG codeSpace --&gt;
                  &lt;crs:NameSet&gt;
                    &lt;crs:name&gt;Mercator&lt;/crs:name&gt;
                  &lt;/crs:NameSet&gt;
                  &lt;crs:Identifier&gt;
                    &lt;crs:code&gt;9805&lt;/crs:code&gt;
                    &lt;crs:codeSpace&gt;EPSG&lt;/crs:codeSpace&gt;
                    &lt;crs:edition&gt;5.2&lt;/crs:edition&gt;
                  &lt;/crs:Identifier&gt;
                  &lt;crs:description&gt;Mercator (2SP)&lt;/crs:description&gt;
                &lt;/crs:TransformationMethod&gt;
                &lt;crs:Parameter&gt;
                  &lt;crs:NameSet&gt;
                    &lt;crs:name&gt;Latitude of 1st standart parallel&lt;/crs:name&gt;
                  &lt;/crs:NameSet&gt;
                  &lt;crs:Identifier&gt;
                    &lt;crs:code&gt;8823&lt;/crs:code&gt;
                    &lt;crs:codeSpace&gt;EPSG&lt;/crs:codeSpace&gt;
                    &lt;crs:edition&gt;5.2&lt;/crs:edition&gt;
                  &lt;/crs:Identifier&gt;
                  &lt;crs:value&gt;0&lt;/crs:value&gt;
                &lt;/crs:Parameter&gt;
                &lt;crs:Parameter&gt;
                  &lt;crs:NameSet&gt;
                    &lt;crs:name&gt;Longitude of natural origin&lt;/crs:name&gt;
                  &lt;/crs:NameSet&gt;
                  &lt;crs:Identifier&gt;
                    &lt;crs:code&gt;8802&lt;/crs:code&gt;
                    &lt;crs:codeSpace&gt;EPSG&lt;/crs:codeSpace&gt;
                    &lt;crs:edition&gt;5.2&lt;/crs:edition&gt;
                  &lt;/crs:Identifier&gt;
                  &lt;crs:value&gt;0&lt;/crs:value&gt;
                &lt;/crs:Parameter&gt;
                &lt;crs:Parameter&gt;
                  &lt;crs:NameSet&gt;
                    &lt;crs:name&gt;False Easting&lt;/crs:name&gt;
                  &lt;/crs:NameSet&gt;
                  &lt;crs:Identifier&gt;
                    &lt;crs:code&gt;8806&lt;/crs:code&gt;         
                    &lt;crs:codeSpace&gt;EPSG&lt;/crs:codeSpace&gt;
                    &lt;crs:edition&gt;5.2&lt;/crs:edition&gt;
                  &lt;/crs:Identifier&gt;
                  &lt;crs:value&gt;0&lt;/crs:value&gt;
                &lt;/crs:Parameter&gt;
                &lt;crs:Parameter&gt;
                  &lt;crs:NameSet&gt;
                    &lt;crs:name&gt;False Northing&lt;/crs:name&gt;
                  &lt;/crs:NameSet&gt;
                  &lt;crs:Identifier&gt;
                    &lt;crs:code&gt;8807&lt;/crs:code&gt;
                    &lt;crs:codeSpace&gt;EPSG&lt;/crs:codeSpace&gt;
                    &lt;crs:edition&gt;5.2&lt;/crs:edition&gt;
                  &lt;/crs:Identifier&gt;
                  &lt;crs:value&gt;0&lt;/crs:value&gt;
                &lt;/crs:Parameter&gt;
              &lt;/crs:ParameterizedTransformation&gt;
            &lt;/crs:CoordinateTransformationDefinition&gt;
          &lt;/crs:ProjectedCRS&gt;
        &lt;/crs:CoordinateReferenceSystem&gt;
      &lt;/rdf:Description&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;

  &lt;!-- the actual map content --&gt;
&lt;/svg&gt;</pre>

<h2 id="coords-DOMInterfaces">7.15 DOM interfaces</h2>

<h3 id="coords-InterfaceSVGPoint">7.15.1 Interface SVGPoint</h3>


 <p>Many of the SVG DOM interfaces refer to objects of class
 <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a>. An <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> is an (x, y) coordinate pair. When
 used in matrix operations, an <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> is treated as a vector of
 the form:</p>

 <pre>
[x]
[y]
[1]</pre>

 <p>If an <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> object is designated as <em>read only</em>,
 then attempting to assign to one of its attributes will result in
 an exception being thrown.</p>
<pre class="idl">interface <b>SVGPoint</b> {

  attribute float <a href="#coords-__svg__SVGPoint__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#coords-__svg__SVGPoint__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);

  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#coords-__svg__SVGPoint__matrixTransform">matrixTransform</a>(in <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> matrix);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="coords-__svg__SVGPoint__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The x coordinate.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised if the 
   <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> object is read only, or corresponds to a DOM 
   attribute that is read only.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGPoint__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The y coordinate.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised if the 
   <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> object is read only, or corresponds to a DOM 
   attribute that is read only.
</dd></dl></dd></dl></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="coords-__svg__SVGPoint__matrixTransform" class="operation first-child"><a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <b>matrixTransform</b>(in <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <var>matrix</var>)</dt><dd class="operation"><div>
 <p>Applies a 2x3 matrix transformation on this <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> object and
 returns a new, transformed <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> object:</p>

 <pre>newpoint = matrix * thispoint</pre>

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <var>matrix</var></div> <div> The matrix which is to be applied to this <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a>
   object.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A new <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> object.
</div></dd></dl></dd></dl></dd></dl>

<h3 id="coords-InterfaceSVGPointList">7.15.2 Interface SVGPointList</h3>


 <p>This interface defines a list of SVGPoint objects.</p>

 <p><a class="idlinterface" href="#coords-InterfaceSVGPointList">SVGPointList</a> has the same attributes and methods as other
 SVGxxxList interfaces. Implementers may consider using a single base class
 to implement the various SVGxxxList interfaces.</p>
<pre class="idl">interface <b>SVGPointList</b> {

  readonly attribute unsigned long <a href="#coords-__svg__SVGPointList__numberOfItems">numberOfItems</a>;

  void <a href="#coords-__svg__SVGPointList__clear">clear</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#coords-__svg__SVGPointList__initialize">initialize</a>(in <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#coords-__svg__SVGPointList__getItem">getItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#coords-__svg__SVGPointList__insertItemBefore">insertItemBefore</a>(in <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#coords-__svg__SVGPointList__replaceItem">replaceItem</a>(in <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#coords-__svg__SVGPointList__removeItem">removeItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#coords-__svg__SVGPointList__appendItem">appendItem</a>(in <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="coords-__svg__SVGPointList__numberOfItems" class="attribute first-child"><b>numberOfItems</b><span class="idl-type-parenthetical"> (readonly unsigned long)</span></dt><dd class="attribute"><div>
 The number of items in the list.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="coords-__svg__SVGPointList__clear" class="operation first-child">void <b>clear</b>()</dt><dd class="operation"><div>
 Clears all existing current items from the list, with the result being
 an empty list.

</div><dl class="operation"><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGPointList__initialize" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <b>initialize</b>(in <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <var>newItem</var>)</dt><dd class="operation"><div>
 Clears all existing current items from the list and re-initializes the
 list to hold the single item specified by the parameter.  If the inserted
 item is already in a list, it is removed from its previous list before
 it is inserted into this list.  The inserted item is the item itself and
 not a copy. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <var>newItem</var></div> <div> The item which should become the only member of the list.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The item being inserted into the list.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGPointList__getItem" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <b>getItem</b>(in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Returns the specified item from the list.  The returned item is the
 item itself and not a copy.  Any changes made to the item are
 immediately reflected in the list.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>index</var></div> <div> The index of the item from the list which is to be
   returned.  The first item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The selected item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#coords-__svg__SVGPointList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGPointList__insertItemBefore" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <b>insertItemBefore</b>(in <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <var>newItem</var>, in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Inserts a new item into the list at the specified position. The first
 item is number 0. If <var>newItem</var> is already in a list, it is
 removed from its previous list before it is inserted into this list.
 The inserted item is the item itself and not a copy. If the item is
 already in this list, note that the index of the item to insert
 before is <i>before</i> the removal of the item.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <var>newItem</var></div> <div> The item which is to be inserted into the list.
</div></li><li class="parameter"><div>unsigned long <var>index</var></div> <div> The index of the item before which the new item is to be
   inserted. The first item is number 0.  If the index is equal to 0,
   then the new item is inserted at the front of the list. If the index
   is greater than or equal to <a class="idlattr" href="#coords-__svg__SVGPointList__numberOfItems">numberOfItems</a>, then the new item is
   appended to the end of the list.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGPointList__replaceItem" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <b>replaceItem</b>(in <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <var>newItem</var>, in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Replaces an existing item in the list with a new item. If
 <var>newItem</var> is already in a list, it is removed from its
 previous list before it is inserted into this list.  The inserted item
 is the item itself and not a copy.  If the item is already in this
 list, note that the index of the item to replace is <i>before</i>
 the removal of the item.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <var>newItem</var></div> <div> The item which is to be inserted into the list.
</div></li><li class="parameter"><div>unsigned long <var>index</var></div> <div> The index of the item which is to be replaced. The first
   item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#coords-__svg__SVGPointList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGPointList__removeItem" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <b>removeItem</b>(in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Removes an existing item from the list.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>index</var></div> <div> The index of the item which is to be removed. The first
   item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The removed item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#coords-__svg__SVGPointList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGPointList__appendItem" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <b>appendItem</b>(in <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <var>newItem</var>)</dt><dd class="operation"><div>
 Inserts a new item at the end of the list. If <var>newItem</var> is
 already in a list, it is removed from its previous list before it is
 inserted into this list.  The inserted item is the item itself and
 not a copy.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <var>newItem</var></div> <div> The item which is to be inserted. The first item is
   number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="coords-InterfaceSVGMatrix">7.15.3 Interface SVGMatrix</h3>


 <p>Many of SVG's graphics operations utilize 2x3 matrices of the form:</p>

 <pre>
[a c e]
[b d f]</pre>

 <p>which, when expanded into a 3x3 matrix for the purposes of matrix
 arithmetic, become:</p>

 <pre>
[a c e]
[b d f]
[0 0 1]</pre>
<pre class="idl">interface <b>SVGMatrix</b> {

  attribute float <a href="#coords-__svg__SVGMatrix__a">a</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#coords-__svg__SVGMatrix__b">b</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#coords-__svg__SVGMatrix__c">c</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#coords-__svg__SVGMatrix__d">d</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#coords-__svg__SVGMatrix__e">e</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#coords-__svg__SVGMatrix__f">f</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);

  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__multiply">multiply</a>(in <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> secondMatrix);
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__inverse">inverse</a>() raises(<a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__translate">translate</a>(in float x, in float y);
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__scale">scale</a>(in float scaleFactor);
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__scaleNonUniform">scaleNonUniform</a>(in float scaleFactorX, in float scaleFactorY);
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__rotate">rotate</a>(in float angle);
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__rotateFromVector">rotateFromVector</a>(in float x, in float y) raises(<a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__flipX">flipX</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__flipY">flipY</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__skewX">skewX</a>(in float angle);
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__skewY">skewY</a>(in float angle);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="coords-__svg__SVGMatrix__a" class="attribute first-child"><b>a</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The <var>a</var> component of the matrix.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGMatrix__b" class="attribute"><b>b</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The <var>b</var> component of the matrix.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGMatrix__c" class="attribute"><b>c</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The <var>c</var> component of the matrix.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGMatrix__d" class="attribute"><b>d</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The <var>d</var> component of the matrix.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGMatrix__e" class="attribute"><b>e</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The <var>e</var> component of the matrix.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGMatrix__f" class="attribute"><b>f</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The <var>f</var> component of the matrix.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="coords-__svg__SVGMatrix__multiply" class="operation first-child"><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <b>multiply</b>(in <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <var>secondMatrix</var>)</dt><dd class="operation"><div>
 Performs matrix multiplication. This matrix is post-multiplied by
 another matrix, returning the resulting new matrix.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <var>secondMatrix</var></div> <div> The matrix which is post-multiplied to this matrix.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The resulting matrix.
</div></dd></dl></dd>
<dt id="coords-__svg__SVGMatrix__inverse" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <b>inverse</b>()</dt><dd class="operation"><div>
 Returns the inverse matrix.

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> The inverse matrix.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>, code SVG_MATRIX_NOT_INVERTABLE</dt><dd class="exception"> Raised if this matrix is
   not invertable.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGMatrix__translate" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <b>translate</b>(in float <var>x</var>, in float <var>y</var>)</dt><dd class="operation"><div>
 Post-multiplies a translation transformation on the current matrix and
 returns the resulting matrix.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The distance to translate along the x-axis.
</div></li><li class="parameter"><div>float <var>y</var></div> <div> The distance to translate along the y-axis.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The resulting matrix.
</div></dd></dl></dd>
<dt id="coords-__svg__SVGMatrix__scale" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <b>scale</b>(in float <var>scaleFactor</var>)</dt><dd class="operation"><div>
 Post-multiplies a uniform scale transformation on the current matrix
 and returns the resulting matrix.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>scaleFactor</var></div> <div> Scale factor in both X and Y.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The resulting matrix.
</div></dd></dl></dd>
<dt id="coords-__svg__SVGMatrix__scaleNonUniform" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <b>scaleNonUniform</b>(in float <var>scaleFactorX</var>, in float <var>scaleFactorY</var>)</dt><dd class="operation"><div>
 Post-multiplies a non-uniform scale transformation on the current matrix
 and returns the resulting matrix.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>scaleFactorX</var></div> <div> Scale factor in X.
</div></li><li class="parameter"><div>float <var>scaleFactorY</var></div> <div> Scale factor in Y.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The resulting matrix.
</div></dd></dl></dd>
<dt id="coords-__svg__SVGMatrix__rotate" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <b>rotate</b>(in float <var>angle</var>)</dt><dd class="operation"><div>
 Post-multiplies a rotation transformation on the current matrix and
 returns the resulting matrix.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>angle</var></div> <div> Rotation angle.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The resulting matrix.
</div></dd></dl></dd>
<dt id="coords-__svg__SVGMatrix__rotateFromVector" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <b>rotateFromVector</b>(in float <var>x</var>, in float <var>y</var>)</dt><dd class="operation"><div>
 Post-multiplies a rotation transformation on the current matrix and
 returns the resulting matrix. The rotation angle is determined by taking
 (+/-) atan(y/x). The direction of the vector (x, y) determines whether
 the positive or negative angle value is used.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The X coordinate of the vector (x,y). Must not be zero.
</div></li><li class="parameter"><div>float <var>y</var></div> <div> The Y coordinate of the vector (x,y). Must not be zero.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The resulting matrix.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>, code SVG_INVALID_VALUE_ERR</dt><dd class="exception"> Raised if one of the
   parameters has an invalid value.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGMatrix__flipX" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <b>flipX</b>()</dt><dd class="operation"><div>
 Post-multiplies the transformation [-1 0 0 1 0 0] and returns the
 resulting matrix.

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> The resulting matrix.
</div></dd></dl></dd>
<dt id="coords-__svg__SVGMatrix__flipY" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <b>flipY</b>()</dt><dd class="operation"><div>
 Post-multiplies the transformation [1 0 0 -1 0 0] and returns the
 resulting matrix.

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> The resulting matrix.
</div></dd></dl></dd>
<dt id="coords-__svg__SVGMatrix__skewX" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <b>skewX</b>(in float <var>angle</var>)</dt><dd class="operation"><div>
 Post-multiplies a skewX transformation on the current matrix and
 returns the resulting matrix.
 
</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>angle</var></div> <div> Skew angle.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The resulting matrix.
</div></dd></dl></dd>
<dt id="coords-__svg__SVGMatrix__skewY" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <b>skewY</b>(in float <var>angle</var>)</dt><dd class="operation"><div>
 Post-multiplies a skewY transformation on the current matrix and
 returns the resulting matrix.
 
</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>angle</var></div> <div> Skew angle.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The resulting matrix.
</div></dd></dl></dd></dl></dd></dl>

<h3 id="coords-InterfaceSVGTransform">7.15.4 Interface SVGTransform</h3>


 <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> is the interface for one of the component
 transformations within an <a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a>; thus, an
 <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> object corresponds to a single component (e.g.,
 <span class="attr-value">'scale(…)'</span> or
 <span class="attr-value">'matrix(…)'</span>) within a <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a>
 attribute specification.
<pre class="idl">interface <b>SVGTransform</b> {

  // Transform Types
  const unsigned short <a href="#coords-__svg__SVGTransform__SVG_TRANSFORM_UNKNOWN">SVG_TRANSFORM_UNKNOWN</a> = 0;
  const unsigned short <a href="#coords-__svg__SVGTransform__SVG_TRANSFORM_MATRIX">SVG_TRANSFORM_MATRIX</a> = 1;
  const unsigned short <a href="#coords-__svg__SVGTransform__SVG_TRANSFORM_TRANSLATE">SVG_TRANSFORM_TRANSLATE</a> = 2;
  const unsigned short <a href="#coords-__svg__SVGTransform__SVG_TRANSFORM_SCALE">SVG_TRANSFORM_SCALE</a> = 3;
  const unsigned short <a href="#coords-__svg__SVGTransform__SVG_TRANSFORM_ROTATE">SVG_TRANSFORM_ROTATE</a> = 4;
  const unsigned short <a href="#coords-__svg__SVGTransform__SVG_TRANSFORM_SKEWX">SVG_TRANSFORM_SKEWX</a> = 5;
  const unsigned short <a href="#coords-__svg__SVGTransform__SVG_TRANSFORM_SKEWY">SVG_TRANSFORM_SKEWY</a> = 6;

  readonly attribute unsigned short <a href="#coords-__svg__SVGTransform__type">type</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGTransform__matrix">matrix</a>;
  readonly attribute float <a href="#coords-__svg__SVGTransform__angle">angle</a>;

  void <a href="#coords-__svg__SVGTransform__setMatrix">setMatrix</a>(in <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> matrix) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  void <a href="#coords-__svg__SVGTransform__setTranslate">setTranslate</a>(in float tx, in float ty) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  void <a href="#coords-__svg__SVGTransform__setScale">setScale</a>(in float sx, in float sy) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  void <a href="#coords-__svg__SVGTransform__setRotate">setRotate</a>(in float angle, in float cx, in float cy) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  void <a href="#coords-__svg__SVGTransform__setSkewX">setSkewX</a>(in float angle) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  void <a href="#coords-__svg__SVGTransform__setSkewY">setSkewY</a>(in float angle) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Transform Types”:</dt><dd><dl class="constants">
<dt id="coords-__svg__SVGTransform__SVG_TRANSFORM_UNKNOWN" class="constant first-child"><b>SVG_TRANSFORM_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The unit type is not one of predefined types. It is invalid to attempt
 to define a new value of this type or to attempt to switch an existing
 value to this type.

</div></dd>
<dt id="coords-__svg__SVGTransform__SVG_TRANSFORM_MATRIX" class="constant"><b>SVG_TRANSFORM_MATRIX</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A <span class="attr-value">'matrix(…)'</span> transformation.

</div></dd>
<dt id="coords-__svg__SVGTransform__SVG_TRANSFORM_TRANSLATE" class="constant"><b>SVG_TRANSFORM_TRANSLATE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A <span class="attr-value">'translate(…)'</span> transformation.

</div></dd>
<dt id="coords-__svg__SVGTransform__SVG_TRANSFORM_SCALE" class="constant"><b>SVG_TRANSFORM_SCALE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A <span class="attr-value">'scale(…)'</span> transformation.

</div></dd>
<dt id="coords-__svg__SVGTransform__SVG_TRANSFORM_ROTATE" class="constant"><b>SVG_TRANSFORM_ROTATE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A <span class="attr-value">'rotate(…)'</span> transformation.

</div></dd>
<dt id="coords-__svg__SVGTransform__SVG_TRANSFORM_SKEWX" class="constant"><b>SVG_TRANSFORM_SKEWX</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A <span class="attr-value">'skewX(…)'</span> transformation.

</div></dd>
<dt id="coords-__svg__SVGTransform__SVG_TRANSFORM_SKEWY" class="constant"><b>SVG_TRANSFORM_SKEWY</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A <span class="attr-value">'skewY(…)'</span> transformation.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="coords-__svg__SVGTransform__type" class="attribute first-child"><b>type</b><span class="idl-type-parenthetical"> (readonly unsigned short)</span></dt><dd class="attribute"><div>
 The type of the value as specified by one of the SVG_TRANSFORM_*
 constants defined on this interface.
</div></dd>
<dt id="coords-__svg__SVGTransform__matrix" class="attribute"><b>matrix</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a>)</span></dt><dd class="attribute"><div>
 <p>The matrix that represents this transformation.  The matrix
 object is live, meaning that any changes made to the SVGTransform
 object are immediately reflected in the matrix object and vice
 versa.  In case the matrix object is changed directly (i.e.,
 without using the methods on the SVGTransform interface itself)
 then the type of the SVGTransform changes to SVG_TRANSFORM_MATRIX.
 </p>
 <ul>
   <li>For SVG_TRANSFORM_MATRIX, the matrix contains the
   <a class="idlattr" href="#coords-__svg__SVGMatrix__a">a</a>, <a class="idlattr" href="#coords-__svg__SVGMatrix__b">b</a>, <a class="idlattr" href="#coords-__svg__SVGMatrix__c">c</a>, <a class="idlattr" href="#coords-__svg__SVGMatrix__d">d</a>, <a class="idlattr" href="#coords-__svg__SVGMatrix__e">e</a>,
   <a class="idlattr" href="#coords-__svg__SVGMatrix__f">f</a> values supplied by the user.</li>
   <li>For SVG_TRANSFORM_TRANSLATE, <a class="idlattr" href="#coords-__svg__SVGMatrix__e">e</a> and <a class="idlattr" href="#coords-__svg__SVGMatrix__f">f</a>
   represent the translation amounts (<a class="idlattr" href="#coords-__svg__SVGMatrix__a">a</a>=1, <a class="idlattr" href="#coords-__svg__SVGMatrix__b">b</a>=0,
   <a class="idlattr" href="#coords-__svg__SVGMatrix__c">c</a>=0 and <a class="idlattr" href="#coords-__svg__SVGMatrix__d">d</a>=1).</li>
   <li>For SVG_TRANSFORM_SCALE, <a class="idlattr" href="#coords-__svg__SVGMatrix__a">a</a> and <a class="idlattr" href="#coords-__svg__SVGMatrix__d">d</a>
   represent the scale amounts (<a class="idlattr" href="#coords-__svg__SVGMatrix__b">b</a>=0, <a class="idlattr" href="#coords-__svg__SVGMatrix__c">c</a>=0,
   <a class="idlattr" href="#coords-__svg__SVGMatrix__e">e</a>=0 and <a class="idlattr" href="#coords-__svg__SVGMatrix__f">f</a>=0).</li>
   <li>For SVG_TRANSFORM_SKEWX and SVG_TRANSFORM_SKEWY,
   <a class="idlattr" href="#coords-__svg__SVGMatrix__a">a</a>, <a class="idlattr" href="#coords-__svg__SVGMatrix__b">b</a>, <a class="idlattr" href="#coords-__svg__SVGMatrix__c">c</a> and <a class="idlattr" href="#coords-__svg__SVGMatrix__d">d</a>
   represent the matrix which will result in the given skew
   (<a class="idlattr" href="#coords-__svg__SVGMatrix__e">e</a>=0 and <a class="idlattr" href="#coords-__svg__SVGMatrix__f">f</a>=0).</li>
   <li>For SVG_TRANSFORM_ROTATE,
   <a class="idlattr" href="#coords-__svg__SVGMatrix__a">a</a>, <a class="idlattr" href="#coords-__svg__SVGMatrix__b">b</a>, <a class="idlattr" href="#coords-__svg__SVGMatrix__c">c</a>, <a class="idlattr" href="#coords-__svg__SVGMatrix__d">d</a>,
   <a class="idlattr" href="#coords-__svg__SVGMatrix__e">e</a> and <a class="idlattr" href="#coords-__svg__SVGMatrix__f">f</a> together represent the matrix
   which will result in the given rotation.  When the rotation is around
   the center point (0, 0), <a class="idlattr" href="#coords-__svg__SVGMatrix__e">e</a> and <a class="idlattr" href="#coords-__svg__SVGMatrix__f">f</a> will be zero.</li>
 </ul>
</div></dd>
<dt id="coords-__svg__SVGTransform__angle" class="attribute"><b>angle</b><span class="idl-type-parenthetical"> (readonly float)</span></dt><dd class="attribute"><div>
 <p>A convenience attribute for SVG_TRANSFORM_ROTATE,
 SVG_TRANSFORM_SKEWX and SVG_TRANSFORM_SKEWY.  It holds
 the angle that was specified.</p>

 <p>For SVG_TRANSFORM_MATRIX, SVG_TRANSFORM_TRANSLATE and
 SVG_TRANSFORM_SCALE, <a class="idlattr" href="#coords-__svg__SVGTransform__angle">angle</a> will be zero.</p>
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="coords-__svg__SVGTransform__setMatrix" class="operation first-child">void <b>setMatrix</b>(in <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <var>matrix</var>)</dt><dd class="operation"><div>
 <p>
 Sets the transform type to SVG_TRANSFORM_MATRIX, with parameter
 <var>matrix</var> defining the new transformation.  The values
 from the parameter <var>matrix</var> are copied, the <var>matrix</var>
 parameter does not replace <a class="idlattr" href="#coords-__svg__SVGTransform__matrix">SVGTransform::matrix</a>.
 </p>

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <var>matrix</var></div> <div> The new matrix for the transformation.
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGTransform__setTranslate" class="operation">void <b>setTranslate</b>(in float <var>tx</var>, in float <var>ty</var>)</dt><dd class="operation"><div>
 Sets the transform type to SVG_TRANSFORM_TRANSLATE, with parameters
 <var>tx</var> and <var>ty</var> defining the translation amounts.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>tx</var></div> <div> The translation amount in X.
</div></li><li class="parameter"><div>float <var>ty</var></div> <div> The translation amount in Y.
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGTransform__setScale" class="operation">void <b>setScale</b>(in float <var>sx</var>, in float <var>sy</var>)</dt><dd class="operation"><div>
 Sets the transform type to SVG_TRANSFORM_SCALE, with parameters
 <var>sx</var> and <var>sy</var> defining the scale amounts.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>sx</var></div> <div> The scale amount in X.
</div></li><li class="parameter"><div>float <var>sy</var></div> <div> The scale amount in Y.
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGTransform__setRotate" class="operation">void <b>setRotate</b>(in float <var>angle</var>, in float <var>cx</var>, in float <var>cy</var>)</dt><dd class="operation"><div>
 Sets the transform type to SVG_TRANSFORM_ROTATE, with parameter
 <var>angle</var> defining the rotation angle and parameters
 <var>cx</var> and <var>cy</var> defining the optional center of rotation.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>angle</var></div> <div> The rotation angle.
</div></li><li class="parameter"><div>float <var>cx</var></div> <div> The x coordinate of center of rotation.
</div></li><li class="parameter"><div>float <var>cy</var></div> <div> The y coordinate of center of rotation.
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGTransform__setSkewX" class="operation">void <b>setSkewX</b>(in float <var>angle</var>)</dt><dd class="operation"><div>
 Sets the transform type to SVG_TRANSFORM_SKEWX, with parameter
 <var>angle</var> defining the amount of skew.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>angle</var></div> <div> The skew angle.
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGTransform__setSkewY" class="operation">void <b>setSkewY</b>(in float <var>angle</var>)</dt><dd class="operation"><div>
 Sets the transform type to SVG_TRANSFORM_SKEWY, with parameter
 <var>angle</var> defining the amount of skew.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>angle</var></div> <div> The skew angle.
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="coords-InterfaceSVGTransformList">7.15.5 Interface SVGTransformList</h3>


 <p>This interface defines a list of SVGTransform objects.</p>

 <p>The <a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a> and <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> interfaces correspond
 to the various attributes which specify a set of transformations, such as
 the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute which is available for many of SVG's elements.</p>
 
 <p><a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a> has the same attributes and methods as other
 SVGxxxList interfaces. Implementers may consider using a single base class
 to implement the various SVGxxxList interfaces.</p>

 <p id="coords-ReadOnlyTransformList">An <a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a> object can be designated as <em>read only</em>,
 which means that attempts to modify the object will result in an exception
 being thrown, as described below.</p>
<pre class="idl">interface <b>SVGTransformList</b> {

  readonly attribute unsigned long <a href="#coords-__svg__SVGTransformList__numberOfItems">numberOfItems</a>;

  void <a href="#coords-__svg__SVGTransformList__clear">clear</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#coords-__svg__SVGTransformList__initialize">initialize</a>(in <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#coords-__svg__SVGTransformList__getItem">getItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#coords-__svg__SVGTransformList__insertItemBefore">insertItemBefore</a>(in <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#coords-__svg__SVGTransformList__replaceItem">replaceItem</a>(in <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#coords-__svg__SVGTransformList__removeItem">removeItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#coords-__svg__SVGTransformList__appendItem">appendItem</a>(in <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#coords-__svg__SVGTransformList__createSVGTransformFromMatrix">createSVGTransformFromMatrix</a>(in <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> matrix);
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#coords-__svg__SVGTransformList__consolidate">consolidate</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="coords-__svg__SVGTransformList__numberOfItems" class="attribute first-child"><b>numberOfItems</b><span class="idl-type-parenthetical"> (readonly unsigned long)</span></dt><dd class="attribute"><div>
 The number of items in the list.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="coords-__svg__SVGTransformList__clear" class="operation first-child">void <b>clear</b>()</dt><dd class="operation"><div>
 Clears all existing current items from the list, with the result being
 an empty list.

</div><dl class="operation"><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#coords-ReadOnlyTransformList">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGTransformList__initialize" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <b>initialize</b>(in <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <var>newItem</var>)</dt><dd class="operation"><div>
 Clears all existing current items from the list and re-initializes the
 list to hold the single item specified by the parameter.  If the inserted
 item is already in a list, it is removed from its previous list before
 it is inserted into this list.  The inserted item is the item itself and
 not a copy. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <var>newItem</var></div> <div> The item which should become the only member of the list.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The item being inserted into the list.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#coords-ReadOnlyTransformList">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGTransformList__getItem" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <b>getItem</b>(in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Returns the specified item from the list.  The returned item is the
 item itself and not a copy.  Any changes made to the item are
 immediately reflected in the list.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>index</var></div> <div> The index of the item from the list which is to be
   returned.  The first item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The selected item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#coords-__svg__SVGTransformList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGTransformList__insertItemBefore" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <b>insertItemBefore</b>(in <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <var>newItem</var>, in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Inserts a new item into the list at the specified position. The first
 item is number 0. If <var>newItem</var> is already in a list, it is
 removed from its previous list before it is inserted into this list.
 The inserted item is the item itself and not a copy. If the item is
 already in this list, note that the index of the item to insert
 before is <i>before</i> the removal of the item.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <var>newItem</var></div> <div> The item which is to be inserted into the list.
</div></li><li class="parameter"><div>unsigned long <var>index</var></div> <div> The index of the item before which the new item is to be
   inserted. The first item is number 0.  If the index is equal to 0,
   then the new item is inserted at the front of the list. If the index
   is greater than or equal to <a class="idlattr" href="#coords-__svg__SVGTransformList__numberOfItems">numberOfItems</a>, then the new item is
   appended to the end of the list.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#coords-ReadOnlyTransformList">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGTransformList__replaceItem" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <b>replaceItem</b>(in <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <var>newItem</var>, in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Replaces an existing item in the list with a new item. If
 <var>newItem</var> is already in a list, it is removed from its
 previous list before it is inserted into this list.  The inserted item
 is the item itself and not a copy.  If the item is already in this
 list, note that the index of the item to replace is <i>before</i>
 the removal of the item.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <var>newItem</var></div> <div> The item which is to be inserted into the list.
</div></li><li class="parameter"><div>unsigned long <var>index</var></div> <div> The index of the item which is to be replaced. The first
   item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#coords-ReadOnlyTransformList">read only</a>.
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#coords-__svg__SVGTransformList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGTransformList__removeItem" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <b>removeItem</b>(in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Removes an existing item from the list.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>index</var></div> <div> The index of the item which is to be removed. The first
   item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The removed item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#coords-ReadOnlyTransformList">read only</a>.
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#coords-__svg__SVGTransformList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGTransformList__appendItem" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <b>appendItem</b>(in <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <var>newItem</var>)</dt><dd class="operation"><div>
 Inserts a new item at the end of the list. If <var>newItem</var> is
 already in a list, it is removed from its previous list before it is
 inserted into this list.  The inserted item is the item itself and
 not a copy.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <var>newItem</var></div> <div> The item which is to be inserted. The first item is
   number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#coords-ReadOnlyTransformList">read only</a>.
</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGTransformList__createSVGTransformFromMatrix" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <b>createSVGTransformFromMatrix</b>(in <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <var>matrix</var>)</dt><dd class="operation"><div>
 <p>
 Creates an <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> object which is initialized to transform
 of type SVG_TRANSFORM_MATRIX and whose values are the given matrix.
 The values from the parameter <var>matrix</var> are copied, the
 <var>matrix</var> parameter is not adopted as
 <a class="idlattr" href="#coords-__svg__SVGTransform__matrix">SVGTransform::matrix</a>.
 </p>

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <var>matrix</var></div> <div> The matrix which defines the transformation.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The returned <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> object.
</div></dd></dl></dd>
<dt id="coords-__svg__SVGTransformList__consolidate" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <b>consolidate</b>()</dt><dd class="operation"><div>
 Consolidates the list of separate <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> objects by
 multiplying the equivalent transformation matrices together to result
 in a list consisting of a single <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> object of type
 SVG_TRANSFORM_MATRIX.  The consolidation operation creates new
 SVGTransform object as the first and only item in the list.  The
 returned item is the item itself and not a copy.  Any changes made
 to the item are immediately reflected in the list. 

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> The resulting <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> object which becomes single
   item in the list. If the list was empty, then a value of null is
   returned.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#coords-ReadOnlyTransformList">read only</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="coords-InterfaceSVGAnimatedTransformList">7.15.6 Interface SVGAnimatedTransformList</h3>


 Used for the various attributes which specify a set of transformations,
 such as the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute which is available for many of
 SVG's elements, and which can be animated.
<pre class="idl">interface <b>SVGAnimatedTransformList</b> {
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a> <a href="#coords-__svg__SVGAnimatedTransformList__baseVal">baseVal</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a> <a href="#coords-__svg__SVGAnimatedTransformList__animVal">animVal</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="coords-__svg__SVGAnimatedTransformList__baseVal" class="attribute first-child"><b>baseVal</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a>)</span></dt><dd class="attribute"><div>
 The base value of the given attribute before applying any animations.
</div></dd>
<dt id="coords-__svg__SVGAnimatedTransformList__animVal" class="attribute"><b>animVal</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a>)</span></dt><dd class="attribute"><div>
 A <a href="#coords-ReadOnlyTransformList">read only</a> <a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a> representing the current animated value of
 the given attribute.  If the given attribute is not currently being
 animated, then the <a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a> will have the same contents
 as <a class="idlattr" href="#coords-__svg__SVGAnimatedTransformList__baseVal">baseVal</a>.  The object referenced by <a class="idlattr" href="#coords-__svg__SVGAnimatedTransformList__animVal">animVal</a> will always
 be distinct from the one referenced by <a class="idlattr" href="#coords-__svg__SVGAnimatedTransformList__baseVal">baseVal</a>, even when
 the attribute is not animated.
</div></dd></dl></dd></dl>

<h3 id="coords-InterfaceSVGPreserveAspectRatio">7.15.7 Interface SVGPreserveAspectRatio</h3>


 The <a class="idlinterface" href="#coords-InterfaceSVGPreserveAspectRatio">SVGPreserveAspectRatio</a> interface corresponds to the
 <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> attribute, which is available for some of
 SVG's elements.

 <p id="coords-ReadOnlyPreserveAspectRatio">An <a class="idlinterface" href="#coords-InterfaceSVGPreserveAspectRatio">SVGPreserveAspectRatio</a> object can be designated as <em>read only</em>,
 which means that attempts to modify the object will result in an exception
 being thrown, as described below.</p>
<pre class="idl">interface <b>SVGPreserveAspectRatio</b> {

  // Alignment Types
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_UNKNOWN">SVG_PRESERVEASPECTRATIO_UNKNOWN</a> = 0;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_NONE">SVG_PRESERVEASPECTRATIO_NONE</a> = 1;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMINYMIN">SVG_PRESERVEASPECTRATIO_XMINYMIN</a> = 2;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMIDYMIN">SVG_PRESERVEASPECTRATIO_XMIDYMIN</a> = 3;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMAXYMIN">SVG_PRESERVEASPECTRATIO_XMAXYMIN</a> = 4;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMINYMID">SVG_PRESERVEASPECTRATIO_XMINYMID</a> = 5;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMIDYMID">SVG_PRESERVEASPECTRATIO_XMIDYMID</a> = 6;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMAXYMID">SVG_PRESERVEASPECTRATIO_XMAXYMID</a> = 7;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMINYMAX">SVG_PRESERVEASPECTRATIO_XMINYMAX</a> = 8;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMIDYMAX">SVG_PRESERVEASPECTRATIO_XMIDYMAX</a> = 9;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMAXYMAX">SVG_PRESERVEASPECTRATIO_XMAXYMAX</a> = 10;

  // Meet-or-slice Types
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_MEETORSLICE_UNKNOWN">SVG_MEETORSLICE_UNKNOWN</a> = 0;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_MEETORSLICE_MEET">SVG_MEETORSLICE_MEET</a> = 1;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_MEETORSLICE_SLICE">SVG_MEETORSLICE_SLICE</a> = 2;

  attribute unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__align">align</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__meetOrSlice">meetOrSlice</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Alignment Types”:</dt><dd><dl class="constants">
<dt id="coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_UNKNOWN" class="constant first-child"><b>SVG_PRESERVEASPECTRATIO_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The enumeration was set to a value that is not one of predefined types.
 It is invalid to attempt to define a new value of this type or to
 attempt to switch an existing value to this type. 

</div></dd>
<dt id="coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_NONE" class="constant"><b>SVG_PRESERVEASPECTRATIO_NONE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'none'</span> for attribute
 <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.

</div></dd>
<dt id="coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMINYMIN" class="constant"><b>SVG_PRESERVEASPECTRATIO_XMINYMIN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'xMinYMin'</span> for attribute
 <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.

</div></dd>
<dt id="coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMIDYMIN" class="constant"><b>SVG_PRESERVEASPECTRATIO_XMIDYMIN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'xMidYMin'</span> for attribute
 <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.

</div></dd>
<dt id="coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMAXYMIN" class="constant"><b>SVG_PRESERVEASPECTRATIO_XMAXYMIN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'xMaxYMin'</span> for attribute
 <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.

</div></dd>
<dt id="coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMINYMID" class="constant"><b>SVG_PRESERVEASPECTRATIO_XMINYMID</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'XMinYMid'</span> for attribute
 <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.

</div></dd>
<dt id="coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMIDYMID" class="constant"><b>SVG_PRESERVEASPECTRATIO_XMIDYMID</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'xMidYMid'</span> for attribute
 <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.

</div></dd>
<dt id="coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMAXYMID" class="constant"><b>SVG_PRESERVEASPECTRATIO_XMAXYMID</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'xMaxYMid'</span> for attribute
 <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.

</div></dd>
<dt id="coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMINYMAX" class="constant"><b>SVG_PRESERVEASPECTRATIO_XMINYMAX</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'xMinYMax'</span> for attribute
 <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.

</div></dd>
<dt id="coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMIDYMAX" class="constant"><b>SVG_PRESERVEASPECTRATIO_XMIDYMAX</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'xMidYMax'</span> for attribute
 <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.

</div></dd>
<dt id="coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMAXYMAX" class="constant"><b>SVG_PRESERVEASPECTRATIO_XMAXYMAX</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'xMaxYMax'</span> for attribute
 <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.

</div></dd></dl></dd><dt class="constants-header">Constants in group “Meet-or-slice Types”:</dt><dd><dl class="constants">
<dt id="coords-__svg__SVGPreserveAspectRatio__SVG_MEETORSLICE_UNKNOWN" class="constant first-child"><b>SVG_MEETORSLICE_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The enumeration was set to a value that is not one of predefined types.
 It is invalid to attempt to define a new value of this type or to
 attempt to switch an existing value to this type.

</div></dd>
<dt id="coords-__svg__SVGPreserveAspectRatio__SVG_MEETORSLICE_MEET" class="constant"><b>SVG_MEETORSLICE_MEET</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'meet'</span> for
 attribute <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.

</div></dd>
<dt id="coords-__svg__SVGPreserveAspectRatio__SVG_MEETORSLICE_SLICE" class="constant"><b>SVG_MEETORSLICE_SLICE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'slice'</span> for
 attribute <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="coords-__svg__SVGPreserveAspectRatio__align" class="attribute first-child"><b>align</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="attribute"><div>
 The type of the alignment value as specified by one of the
 SVG_PRESERVEASPECTRATIO_* constants defined on this interface.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the object
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#coords-ReadOnlyPreserveAspectRatio">read only</a>.

</dd></dl></dd></dl></dd>
<dt id="coords-__svg__SVGPreserveAspectRatio__meetOrSlice" class="attribute"><b>meetOrSlice</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="attribute"><div>
 The type of the meet-or-slice value as specified by one of the
 SVG_MEETORSLICE_* constants defined on this interface.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the object
   corresponds to a <a href="#svgdom-ReadOnlyNodes">read only attribute</a> or when the object itself is
   <a href="#coords-ReadOnlyPreserveAspectRatio">read only</a>.

</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="coords-InterfaceSVGAnimatedPreserveAspectRatio">7.15.8 Interface SVGAnimatedPreserveAspectRatio</h3>


 Used for attributes of type <a class="idlinterface" href="#coords-InterfaceSVGPreserveAspectRatio">SVGPreserveAspectRatio</a> which can be
 animated. 
<pre class="idl">interface <b>SVGAnimatedPreserveAspectRatio</b> {
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGPreserveAspectRatio">SVGPreserveAspectRatio</a> <a href="#coords-__svg__SVGAnimatedPreserveAspectRatio__baseVal">baseVal</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGPreserveAspectRatio">SVGPreserveAspectRatio</a> <a href="#coords-__svg__SVGAnimatedPreserveAspectRatio__animVal">animVal</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="coords-__svg__SVGAnimatedPreserveAspectRatio__baseVal" class="attribute first-child"><b>baseVal</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGPreserveAspectRatio">SVGPreserveAspectRatio</a>)</span></dt><dd class="attribute"><div>
 The base value of the given attribute before applying any animations.
</div></dd>
<dt id="coords-__svg__SVGAnimatedPreserveAspectRatio__animVal" class="attribute"><b>animVal</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGPreserveAspectRatio">SVGPreserveAspectRatio</a>)</span></dt><dd class="attribute"><div>
 A <a href="#coords-ReadOnlyPreserveAspectRatio">read only</a> <a class="idlinterface" href="#coords-InterfaceSVGPreserveAspectRatio">SVGPreserveAspectRatio</a> representing the current animated value of
 the given attribute.  If the given attribute is not currently being
 animated, then the <a class="idlinterface" href="#coords-InterfaceSVGPreserveAspectRatio">SVGPreserveAspectRatio</a> will have the same contents
 as <a class="idlattr" href="#coords-__svg__SVGAnimatedPreserveAspectRatio__baseVal">baseVal</a>.  The object referenced by <a class="idlattr" href="#coords-__svg__SVGAnimatedPreserveAspectRatio__animVal">animVal</a> will always
 be distinct from the one referenced by <a class="idlattr" href="#coords-__svg__SVGAnimatedPreserveAspectRatio__baseVal">baseVal</a>, even when
 the attribute is not animated.
</div></dd></dl></dd></dl>

</div><hr class="chapter-divider" />
<div id="chapter-paths">

<h1>8 Paths</h1><h2 id="paths-toc">Contents</h2><ul class="toc">
<li><a href="#paths-Introduction">8.1 Introduction</a></li>
<li><a href="#paths-PathElement">8.2 The <span class="element-name">‘path’</span> element</a></li>
<li><a href="#paths-PathData">8.3 Path data</a><ul class="toc">
<li><a href="#paths-PathDataGeneralInformation">8.3.1 General information about path data</a></li>
<li><a href="#paths-PathDataMovetoCommands">8.3.2 The <strong>"moveto"</strong> commands</a></li>
<li><a href="#paths-PathDataClosePathCommand">8.3.3 The <strong>"closepath"</strong> command</a></li>
<li><a href="#paths-PathDataLinetoCommands">8.3.4 The <strong>"lineto"</strong> commands</a></li>
<li><a href="#paths-PathDataCurveCommands">8.3.5 The curve commands</a></li>
<li><a href="#paths-PathDataCubicBezierCommands">8.3.6 The cubic Bézier curve commands</a></li>
<li><a href="#paths-PathDataQuadraticBezierCommands">8.3.7 The quadratic Bézier curve commands</a></li>
<li><a href="#paths-PathDataEllipticalArcCommands">8.3.8 The elliptical arc curve commands</a></li>
<li><a href="#paths-PathDataBNF">8.3.9 The grammar for path data</a></li></ul></li>
<li><a href="#paths-DistanceAlongAPath">8.4 Distance along a path</a></li>
<li><a href="#paths-DOMInterfaces">8.5 DOM interfaces</a><ul class="toc">
<li><a href="#paths-InterfaceSVGPathSeg">8.5.1 Interface SVGPathSeg</a></li>
<li><a href="#paths-InterfaceSVGPathSegClosePath">8.5.2 Interface SVGPathSegClosePath</a></li>
<li><a href="#paths-InterfaceSVGPathSegMovetoAbs">8.5.3 Interface SVGPathSegMovetoAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegMovetoRel">8.5.4 Interface SVGPathSegMovetoRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegLinetoAbs">8.5.5 Interface SVGPathSegLinetoAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegLinetoRel">8.5.6 Interface SVGPathSegLinetoRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegCurvetoCubicAbs">8.5.7 Interface SVGPathSegCurvetoCubicAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegCurvetoCubicRel">8.5.8 Interface SVGPathSegCurvetoCubicRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegCurvetoQuadraticAbs">8.5.9 Interface SVGPathSegCurvetoQuadraticAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegCurvetoQuadraticRel">8.5.10 Interface SVGPathSegCurvetoQuadraticRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegArcAbs">8.5.11 Interface SVGPathSegArcAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegArcRel">8.5.12 Interface SVGPathSegArcRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegLinetoHorizontalAbs">8.5.13 Interface SVGPathSegLinetoHorizontalAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegLinetoHorizontalRel">8.5.14 Interface SVGPathSegLinetoHorizontalRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegLinetoVerticalAbs">8.5.15 Interface SVGPathSegLinetoVerticalAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegLinetoVerticalRel">8.5.16 Interface SVGPathSegLinetoVerticalRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegCurvetoCubicSmoothAbs">8.5.17 Interface SVGPathSegCurvetoCubicSmoothAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegCurvetoCubicSmoothRel">8.5.18 Interface SVGPathSegCurvetoCubicSmoothRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegCurvetoQuadraticSmoothAbs">8.5.19 Interface SVGPathSegCurvetoQuadraticSmoothAbs</a></li>
<li><a href="#paths-InterfaceSVGPathSegCurvetoQuadraticSmoothRel">8.5.20 Interface SVGPathSegCurvetoQuadraticSmoothRel</a></li>
<li><a href="#paths-InterfaceSVGPathSegList">8.5.21 Interface SVGPathSegList</a></li>
<li><a href="#paths-InterfaceSVGAnimatedPathData">8.5.22 Interface SVGAnimatedPathData</a></li>
<li><a href="#paths-InterfaceSVGPathElement">8.5.23 Interface SVGPathElement</a></li></ul></li></ul>



<h2 id="paths-Introduction">8.1 Introduction</h2>

    <p>Paths represent the outline of a shape which can be filled,
    stroked, used as a clipping path, or any combination of the
    three. (See <a href="#chapter-painting">Filling, Stroking and Paint
    Servers</a> and <a href="#chapter-masking">Clipping, Masking and
    Compositing</a>.)</p>
    <p>A path is described using the concept of a current point. In
    an analogy with drawing on paper, the current point can be
    thought of as the location of the pen. The position of the pen
    can be changed, and the outline of a shape (open or closed) can
    be traced by dragging the pen in either straight lines or
    curves.</p>
    <p>Paths represent the geometry of the outline of an object,
    defined in terms of <em>moveto</em> (set a new current point),
    <em>lineto</em> (draw a straight line), <em>curveto</em> (draw
    a curve using a cubic Bézier), <em>arc</em> (elliptical
    or circular arc) and <em>closepath</em> (close the current
    shape by drawing a line to the last <em>moveto</em>) elements.
    Compound paths (i.e., a path with multiple subpaths) are
    possible to allow effects such as "donut holes" in objects.</p>
    <p>This chapter describes the syntax, behavior and DOM
    interfaces for SVG paths. Various implementation notes for SVG
    paths can be found in <a href="#implnote-PathElementImplementationNotes"><span class="element-name">‘path’</span> element implementation
    notes</a> and <a href="#implnote-ArcImplementationNotes">Elliptical arc
    implementation notes</a>.</p>
    <p>A path is defined in SVG using the <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element.</p>

<h2 id="paths-PathElement">8.2 The <span class="element-name">‘path’</span> element</h2>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘path’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermGraphicsElement">Graphics element</a>, <a href="#intro-TermShapeElement">shape element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></li><li><a href="#paths-DAttribute"><span class="attr-name">‘d’</span></a></li><li><a href="#paths-PathLengthAttribute"><span class="attr-name">‘pathLength’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#paths-InterfaceSVGPathElement">SVGPathElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="paths-DAttribute"><span class="adef">d</span> = "<em>path data</em>"</dt><dd>The definition of the outline of a shape. See <a href="#paths-PathData">Path data</a>.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes.</span>
        Path data animation is only possible when each path data
        specification within an animation specification has exactly
        the same list of path data commands as the <a href="#paths-DAttribute"><span class="attr-name">‘d’</span></a> attribute. If an animation is
        specified and the list of path data commands is not the
        same, then the animation specification is in error (see <a href="#implnote-ErrorProcessing">Error Processing</a>).
        The animation engine interpolates each parameter to each
        path data command separately based on the attributes to the
        given animation element. Flags and booleans are
        interpolated as fractions between zero and one, with any
        non-zero value considered to be a value of one/true.</dd><dt id="paths-PathLengthAttribute"><span class="adef">pathLength</span> = "<a href="#types-DataTypeNumber">&lt;number&gt;</a>"</dt><dd>The author's computation of the total length of the
        path, in user units. This value is used to calibrate the
        user agent's own <a href="#paths-DistanceAlongAPath">distance-along-a-path</a>
        calculations with that of the author. The user agent will
        scale all distance-along-a-path computations by the ratio
        of <a href="#paths-PathLengthAttribute"><span class="attr-name">‘pathLength’</span></a> to the user
        agent's own computed value for total path length. <a href="#paths-PathLengthAttribute"><span class="attr-name">‘pathLength’</span></a> potentially affects
        calculations for <a href="#text-TextOnAPath">text on a path</a>,
        <a href="#animate-AnimateMotionElement">motion animation</a> and
        various <a href="#painting-StrokeProperties">stroke operations</a>.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error
        processing</a>).<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>

<h2 id="paths-PathData">8.3 Path data</h2>

<h3 id="paths-PathDataGeneralInformation">8.3.1 General information about path data</h3>

    <p>A path is defined by including a <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>
    element which contains a <span class="attr-value">d="(path data)"</span>
    attribute, where the <a href="#paths-DAttribute"><span class="attr-name">‘d’</span></a> attribute contains the
    <em>moveto</em>, <em>line</em>, <em>curve</em> (both cubic and
    quadratic Béziers), <em>arc</em> and <em>closepath</em>
    instructions.</p>
    <p><span class="example-ref">Example triangle01</span>
    specifies a path in the shape of a triangle. (The
    <strong>M</strong> indicates a <em>moveto</em>, the
    <strong>L</strong>s indicate <em>lineto</em>s, and the
    <strong>z</strong> indicates a <em>closepath</em>).</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="4cm" height="4cm" viewBox="0 0 400 400"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;title&gt;Example triangle01- simple example of a 'path'&lt;/title&gt;
  &lt;desc&gt;A path that draws a triangle&lt;/desc&gt;
  &lt;rect x="1" y="1" width="398" height="398"
        fill="none" stroke="blue" /&gt;
  &lt;path d="M 100 100 L 300 100 L 200 300 z"
        fill="red" stroke="blue" stroke-width="3" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example triangle01</caption><tr><td><img alt="Example triangle01 — simple example of a 'path'" src="images/paths/triangle01.png" /></td></tr></table><p class="view-as-svg"><a href="images/paths/triangle01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p>Path data can contain newline characters and thus can be
    broken up into multiple lines to improve readability. Because
    of line length limitations with certain related tools, it is
    recommended that SVG generators split long path data strings
    across multiple lines, with each line not exceeding 255
    characters. Also note that newline characters are only allowed
    at certain places within path data.</p>
    <p>The syntax of path data is concise in order to allow for
    minimal file size and efficient downloads, since many SVG files
    will be dominated by their path data. Some of the ways that SVG
    attempts to minimize the size of path data are as follows:</p>
    <ul><li>All instructions are expressed as one character (e.g., a
      <em>moveto</em> is expressed as an <strong>M</strong>).</li><li>Superfluous white space and separators such as commas can
      be eliminated (e.g., "M 100 100 L 200 200" contains
      unnecessary spaces and could be expressed more compactly as
      "M100 100L200 200").</li><li>The command letter can be eliminated on subsequent
      commands if the same command is used multiple times in a row
      (e.g., you can drop the second "L" in "M 100 200 L 200 100 L
      -100 -200" and use "M 100 200 L 200 100 -100 -200"
      instead).</li><li>Relative versions of all commands are available
      (uppercase means absolute coordinates, lowercase means
      relative coordinates).</li><li>Alternate forms of <em>lineto</em> are available to
      optimize the special cases of horizontal and vertical lines
      (absolute and relative).</li><li>Alternate forms of <em>curve</em> are available to
      optimize the special cases where some of the control points
      on the current segment can be determined automatically from
      the control points on the previous segment.</li></ul>
    <p>The path data syntax is a prefix notation (i.e., commands
    followed by parameters). The only allowable decimal point is a
    Unicode 
    U+0046 FULL STOP (".") character (also referred to in Unicode as
    PERIOD, dot and decimal point) and no other delimiter
    characters are allowed [<a href="#refs-ref-UNICODE">UNICODE</a>].
    (For example, the following is an
    invalid numeric value in a path data stream: "13,000.56".
    Instead, say: "13000.56".)</p>
    <p>For the relative versions of the commands, all coordinate
    values are relative to the current point at the start of the
    command.</p>
    <p>In the tables below, the following notation is used:</p>
    <ul><li>(): grouping of parameters</li><li>+: 1 or more of the given parameter(s) is required</li></ul>
    <p>The following sections list the commands.</p>
    
    <h3 id="paths-PathDataMovetoCommands">8.3.2 The <strong>"moveto"</strong> commands</h3>
    <p>The "moveto" commands (<strong>M</strong> or
    <strong>m</strong>) establish a new current point. The effect
    is as if the "pen" were lifted and moved to a new location. A
    path data segment (if there is one) must begin with a "moveto"
    command. Subsequent "moveto" commands (i.e., when the "moveto"
    is not the first command) represent the start of a new
    <em>subpath</em>:</p>
    <table summary="moveto command" class="PathDataTable" border="1" cellspacing="2" cellpadding="5"><tr><th>Command</th><th>Name</th><th>Parameters</th><th>Description</th></tr><tr><td><strong>M</strong> (absolute)<br />
         <strong>m</strong> (relative)</td><td>moveto</td><td>(x y)+</td><td>
          Start a new sub-path at the given (x,y) coordinate.
          <strong>M</strong> (uppercase) indicates that absolute
          coordinates will follow; <strong>m</strong> (lowercase)
          indicates that relative coordinates will follow. If a moveto is
          followed by multiple pairs of coordinates, the subsequent pairs
          are treated as implicit lineto commands. Hence, implicit lineto
          commands will be relative if the moveto is relative, and
          absolute if the moveto is absolute. If a relative moveto
          (<strong>m</strong>) appears as the first element of the path,
          then it is treated as a pair of absolute coordinates. In this
          case, subsequent pairs of coordinates are treated as relative
          even though the initial moveto is interpreted as an absolute moveto.
        </td></tr></table>
    
    <h3 id="paths-PathDataClosePathCommand">8.3.3 The <strong>"closepath"</strong> command</h3>
    <p>The "closepath" (<strong>Z</strong> or <strong>z</strong>)
    ends the current subpath and causes an automatic straight line
    to be drawn from the current point to the initial point of the
    current subpath. If a "closepath" is followed immediately by a
    "moveto", then the "moveto" identifies the start point of the
    next subpath. If a "closepath" is followed immediately by any
    other command, then the next subpath starts at the same initial
    point as the current subpath.</p>
    <p>When a subpath ends in a "closepath," it differs in behavior
    from what happens when "manually" closing a subpath via a
    "lineto" command in how <a href="#painting-StrokeLinejoinProperty"><span class="prop-name">‘stroke-linejoin’</span></a>
    and <a href="#painting-StrokeLinecapProperty"><span class="prop-name">‘stroke-linecap’</span></a> are implemented. With "closepath", the end of the final segment
    of the subpath is "joined" with the start of the initial
    segment of the subpath using the current value of <a href="#painting-StrokeLinejoinProperty"><span class="prop-name">‘stroke-linejoin’</span></a>.
    If you instead "manually" close the subpath via a "lineto"
    command, the start of the first segment and the end of the last
    segment are not joined but instead are each capped using the
    current value of <a href="#painting-StrokeLinecapProperty"><span class="prop-name">‘stroke-linecap’</span></a>.
    At the end of the command, the new current point is set to the
    initial point of the current subpath.</p>
    <table summary="closepath command" class="PathDataTable" border="1" cellspacing="2" cellpadding="5"><tr><th>Command</th><th>Name</th><th>Parameters</th><th>Description</th></tr><tr><td><strong>Z</strong> or<br />
         <strong>z</strong></td><td>closepath</td><td>(none)</td><td>Close the current subpath by drawing a straight line from the
        current point to current subpath's initial point. Since the Z and z
        commands take no parameters, they have an identical effect.</td></tr></table>
    
    <h3 id="paths-PathDataLinetoCommands">8.3.4 The <strong>"lineto"</strong> commands</h3>
    <p>The various "lineto" commands draw straight lines from the
    current point to a new point:</p>
    <table summary="lineto command" class="PathDataTable" border="1" cellspacing="2" cellpadding="5"><tr><th>Command</th><th>Name</th><th>Parameters</th><th>Description</th></tr><tr><td><strong>L</strong> (absolute)<br />
         <strong>l</strong> (relative)</td><td>lineto</td><td>(x y)+</td><td>Draw a line from the current point to the given (x,y)
        coordinate which becomes the new current point.
        <strong>L</strong> (uppercase) indicates that absolute
        coordinates will follow; <strong>l</strong> (lowercase)
        indicates that relative coordinates will follow. A number
        of coordinates pairs may be specified to draw a polyline.
        At the end of the command, the new current point is set to
        the final set of coordinates provided.</td></tr><tr><td><strong>H</strong> (absolute)<br />
         <strong>h</strong> (relative)</td><td>horizontal lineto</td><td>x+</td><td>Draws a horizontal line from the current point (cpx,
        cpy) to (x, cpy). <strong>H</strong> (uppercase) indicates
        that absolute coordinates will follow; <strong>h</strong>
        (lowercase) indicates that relative coordinates will
        follow. Multiple x values can be provided (although usually
        this doesn't make sense). At the end of the command, the
        new current point becomes (x, cpy) for the final value of
        x.</td></tr><tr><td><strong>V</strong> (absolute)<br />
         <strong>v</strong> (relative)</td><td>vertical lineto</td><td>y+</td><td>Draws a vertical line from the current point (cpx, cpy)
        to (cpx, y). <strong>V</strong> (uppercase) indicates that
        absolute coordinates will follow; <strong>v</strong>
        (lowercase) indicates that relative coordinates will
        follow. Multiple y values can be provided (although usually
        this doesn't make sense). At the end of the command, the
        new current point becomes (cpx, y) for the final value of
        y.</td></tr></table>

    <h3 id="paths-PathDataCurveCommands">8.3.5 The curve commands</h3>
    <p>These three groups of commands draw curves:</p>
    <ul><li><a href="#paths-PathDataCubicBezierCommands">Cubic
      Bézier commands</a> (<strong>C</strong>,
      <strong>c</strong>, <strong>S</strong> and
      <strong>s</strong>). A cubic Bézier segment is defined
      by a start point, an end point, and two control points.</li><li><a href="#paths-PathDataQuadraticBezierCommands">Quadratic
      Bézier commands</a> (<strong>Q</strong>,
      <strong>q</strong>, <strong>T</strong> and
      <strong>t</strong>). A quadratic Bézier segment is
      defined by a start point, an end point, and one control
      point.</li><li><a href="#paths-PathDataEllipticalArcCommands">Elliptical
      arc commands</a> (<strong>A</strong> and <strong>a</strong>).
      An elliptical arc segment draws a segment of an ellipse.</li></ul>

    <h3 id="paths-PathDataCubicBezierCommands">8.3.6 The cubic Bézier curve commands</h3>
    <p>The cubic Bézier commands are as follows:</p>
    <table summary="cubic Bézier command" class="PathDataTable" border="1" cellspacing="2" cellpadding="5"><tr><th>Command</th><th>Name</th><th>Parameters</th><th>Description</th></tr><tr><td><strong>C</strong> (absolute)<br />
         <strong>c</strong> (relative)</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td><td>Draws a cubic Bézier curve from the current
        point to (x,y) using (x1,y1) as the control point at the
        beginning of the curve and (x2,y2) as the control point at
        the end of the curve. <strong>C</strong> (uppercase)
        indicates that absolute coordinates will follow;
        <strong>c</strong> (lowercase) indicates that relative
        coordinates will follow. Multiple sets of coordinates may
        be specified to draw a polybézier. At the end of the
        command, the new current point becomes the final (x,y)
        coordinate pair used in the polybézier.</td></tr><tr><td><strong>S</strong> (absolute)<br />
         <strong>s</strong> (relative)</td><td>shorthand/smooth curveto</td><td>(x2 y2 x y)+</td><td>Draws a cubic Bézier curve from the current
        point to (x,y). The first control point is assumed to be
        the reflection of the second control point on the previous
        command relative to the current point. (If there is no
        previous command or if the previous command was not an C,
        c, S or s, assume the first control point is coincident
        with the current point.) (x2,y2) is the second control
        point (i.e., the control point at the end of the curve).
        <strong>S</strong> (uppercase) indicates that absolute
        coordinates will follow; <strong>s</strong> (lowercase)
        indicates that relative coordinates will follow. Multiple
        sets of coordinates may be specified to draw a
        polybézier. At the end of the command, the new
        current point becomes the final (x,y) coordinate pair used
        in the polybézier.</td></tr></table>
    <p><span class="example-ref">Example cubic01</span> shows some
    simple uses of cubic Bézier commands within a path. The
    example uses an internal CSS style sheet to assign styling
    properties. Note that the control point for the "S" command is
    computed automatically as the reflection of the control point
    for the previous "C" command relative to the start point of the
    "S" command.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="5cm" height="4cm" viewBox="0 0 500 400"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;title&gt;Example cubic01- cubic Bézier commands in path data&lt;/title&gt;
  &lt;desc&gt;Picture showing a simple example of path data
        using both a "C" and an "S" command,
        along with annotations showing the control points
        and end points&lt;/desc&gt;
  &lt;style type="text/css"&gt;&lt;![CDATA[
    .Border { fill:none; stroke:blue; stroke-width:1 }
    .Connect { fill:none; stroke:#888888; stroke-width:2 }
    .SamplePath { fill:none; stroke:red; stroke-width:5 }
    .EndPoint { fill:none; stroke:#888888; stroke-width:2 }
    .CtlPoint { fill:#888888; stroke:none }
    .AutoCtlPoint { fill:none; stroke:blue; stroke-width:4 }
    .Label { font-size:22; font-family:Verdana }
  ]]&gt;&lt;/style&gt;

  &lt;rect class="Border" x="1" y="1" width="498" height="398" /&gt;

  &lt;polyline class="Connect" points="100,200 100,100" /&gt;
  &lt;polyline class="Connect" points="250,100 250,200" /&gt;
  &lt;polyline class="Connect" points="250,200 250,300" /&gt;
  &lt;polyline class="Connect" points="400,300 400,200" /&gt;
  &lt;path class="SamplePath" d="M100,200 C100,100 250,100 250,200
                                       S400,300 400,200" /&gt;
  &lt;circle class="EndPoint" cx="100" cy="200" r="10" /&gt;
  &lt;circle class="EndPoint" cx="250" cy="200" r="10" /&gt;
  &lt;circle class="EndPoint" cx="400" cy="200" r="10" /&gt;
  &lt;circle class="CtlPoint" cx="100" cy="100" r="10" /&gt;
  &lt;circle class="CtlPoint" cx="250" cy="100" r="10" /&gt;
  &lt;circle class="CtlPoint" cx="400" cy="300" r="10" /&gt;
  &lt;circle class="AutoCtlPoint" cx="250" cy="300" r="9" /&gt;
  &lt;text class="Label" x="25" y="70"&gt;M100,200 C100,100 250,100 250,200&lt;/text&gt;
  &lt;text class="Label" x="325" y="350"
        style="text-anchor:middle"&gt;S400,300 400,200&lt;/text&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example cubic01</caption><tr><td><img alt="Example cubic01 — cubic Bézier comamnds in path data" src="images/paths/cubic01.png" /></td></tr></table><p class="view-as-svg"><a href="images/paths/cubic01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p>The following picture shows some how cubic Bézier
    curves change their shape depending on the position of the
    control points. The first five examples illustrate a single
    cubic Bézier path segment. The example at the lower
    right shows a "C" command followed by an "S" command.</p>
    <p><img alt="Example cubic02 - cubic Bézier commands in path data" src="images/paths/cubic02.png" width="355" height="355" /></p>
    <p class="view-as-svg"><a href="images/paths/cubic02.svg">View
    this example as SVG (SVG-enabled browsers only)</a><br />
      </p>

    <h3 id="paths-PathDataQuadraticBezierCommands">8.3.7 The quadratic Bézier curve commands</h3>
    <p>The quadratic Bézier commands are as follows:</p>
    <table summary="quadratic Bézier command" class="PathDataTable" border="1" cellspacing="2" cellpadding="5"><tr><th>Command</th><th>Name</th><th>Parameters</th><th>Description</th></tr><tr><td><strong>Q</strong> (absolute)<br />
         <strong>q</strong> (relative)</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td><td>Draws a quadratic Bézier curve from the current
        point to (x,y) using (x1,y1) as the control point.
        <strong>Q</strong> (uppercase) indicates that absolute
        coordinates will follow; <strong>q</strong> (lowercase)
        indicates that relative coordinates will follow. Multiple
        sets of coordinates may be specified to draw a
        polybézier. At the end of the command, the new
        current point becomes the final (x,y) coordinate pair used
        in the polybézier.</td></tr><tr><td><strong>T</strong> (absolute)<br />
         <strong>t</strong> (relative)</td><td>Shorthand/smooth quadratic Bézier curveto</td><td>(x y)+</td><td>Draws a quadratic Bézier curve from the current
        point to (x,y). The control point is assumed to be the
        reflection of the control point on the previous command
        relative to the current point. (If there is no previous
        command or if the previous command was not a Q, q, T or t,
        assume the control point is coincident with the current
        point.) <strong>T</strong> (uppercase) indicates that
        absolute coordinates will follow; <strong>t</strong>
        (lowercase) indicates that relative coordinates will
        follow. At the end of the command, the new current point
        becomes the final (x,y) coordinate pair used in the
        polybézier.</td></tr></table>
    <p><span class="example-ref">Example quad01</span> shows some
    simple uses of quadratic Bézier commands within a path.
    Note that the control point for the "T" command is computed
    automatically as the reflection of the control point for the
    previous "Q" command relative to the start point of the "T"
    command.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="6cm" viewBox="0 0 1200 600"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;title&gt;Example quad01 - quadratic Bézier commands in path data&lt;/title&gt;
  &lt;desc&gt;Picture showing a "Q" a "T" command,
        along with annotations showing the control points
        and end points&lt;/desc&gt;
  &lt;rect x="1" y="1" width="1198" height="598"
        fill="none" stroke="blue" stroke-width="1" /&gt;

  &lt;path d="M200,300 Q400,50 600,300 T1000,300"
        fill="none" stroke="red" stroke-width="5"  /&gt;
  &lt;!-- End points --&gt;
  &lt;g fill="black" &gt;
    &lt;circle cx="200" cy="300" r="10"/&gt;
    &lt;circle cx="600" cy="300" r="10"/&gt;
    &lt;circle cx="1000" cy="300" r="10"/&gt;
  &lt;/g&gt;
  &lt;!-- Control points and lines from end points to control points --&gt;
  &lt;g fill="#888888" &gt;
    &lt;circle cx="400" cy="50" r="10"/&gt;
    &lt;circle cx="800" cy="550" r="10"/&gt;
  &lt;/g&gt;
  &lt;path d="M200,300 L400,50 L600,300 
           L800,550 L1000,300"
        fill="none" stroke="#888888" stroke-width="2" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example quad01</caption><tr><td><img alt="Example quad01 — quadratic Bézier commands in path data" src="images/paths/quad01.png" /></td></tr></table><p class="view-as-svg"><a href="images/paths/quad01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <h3 id="paths-PathDataEllipticalArcCommands">8.3.8 The elliptical arc curve commands</h3>
    <p>The elliptical arc commands are as follows:</p>
    <table summary="elliptical arc commands" class="PathDataTable" border="1" cellspacing="2" cellpadding="5"><tr><th>Command</th><th>Name</th><th>Parameters</th><th>Description</th></tr><tr><td><strong>A</strong> (absolute)<br />
         <strong>a</strong> (relative)</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x
        y)+</td><td>Draws an elliptical arc from the current point to
        (<strong>x</strong>, <strong>y</strong>). The size and
        orientation of the ellipse are defined by two radii
        (<strong>rx</strong>, <strong>ry</strong>) and an
        <strong>x-axis-rotation</strong>, which indicates how the
        ellipse as a whole is rotated relative to the current
        coordinate system. The center (<strong>cx</strong>,
        <strong>cy</strong>) of the ellipse is calculated
        automatically to satisfy the constraints imposed by the
        other parameters. <strong>large-arc-flag</strong> and
        <strong>sweep-flag</strong> contribute to the automatic
        calculations and help determine how the arc is drawn.</td></tr></table>
    <p><span class="example-ref">Example arcs01</span> shows some
    simple uses of arc commands within a path.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="5.25cm" viewBox="0 0 1200 400"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;title&gt;Example arcs01 - arc commands in path data&lt;/title&gt;
  &lt;desc&gt;Picture of a pie chart with two pie wedges and
        a picture of a line with arc blips&lt;/desc&gt;
  &lt;rect x="1" y="1" width="1198" height="398"
        fill="none" stroke="blue" stroke-width="1" /&gt;

  &lt;path d="M300,200 h-150 a150,150 0 1,0 150,-150 z"
        fill="red" stroke="blue" stroke-width="5" /&gt;
  &lt;path d="M275,175 v-150 a150,150 0 0,0 -150,150 z"
        fill="yellow" stroke="blue" stroke-width="5" /&gt;

  &lt;path d="M600,350 l 50,-25 
           a25,25 -30 0,1 50,-25 l 50,-25 
           a25,50 -30 0,1 50,-25 l 50,-25 
           a25,75 -30 0,1 50,-25 l 50,-25 
           a25,100 -30 0,1 50,-25 l 50,-25"
        fill="none" stroke="red" stroke-width="5"  /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example arcs01</caption><tr><td><img alt="Example arcs01 — arc commands in path data" src="images/paths/arcs01.png" /></td></tr></table><p class="view-as-svg"><a href="images/paths/arcs01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p>The elliptical arc command draws a section of an ellipse
    which meets the following constraints:</p>
    <ul><li>the arc starts at the current point</li><li>the arc ends at point (<strong>x</strong>,
      <strong>y</strong>)</li><li>the ellipse has the two radii (<strong>rx</strong>,
      <strong>ry</strong>)</li><li>the x-axis of the ellipse is rotated by
      <strong>x-axis-rotation</strong> relative to the x-axis of
      the current coordinate system.</li></ul>
    For most situations, there are actually four different arcs
    (two different ellipses, each with two different arc sweeps)
    that satisfy these constraints. <strong>large-arc-flag</strong>
    and <strong>sweep-flag</strong> indicate which one of the four
    arcs are drawn, as follows: 
    <ul><li>Of the four candidate arc sweeps, two will represent an
      arc sweep of greater than or equal to 180 degrees (the
      "large-arc"), and two will represent an arc sweep of less
      than or equal to 180 degrees (the "small-arc"). If
      <strong>large-arc-flag</strong> is '1', then one of the two
      larger arc sweeps will be chosen; otherwise, if
      <strong>large-arc-flag</strong> is '0', one of the smaller
      arc sweeps will be chosen,</li><li>If <strong>sweep-flag</strong> is '1', then the arc will
      be drawn in a "positive-angle" direction (i.e., the ellipse
      formula x=<strong>cx</strong>+<strong>rx</strong>*cos(theta)
      and y=<strong>cy</strong>+<strong>ry</strong>*sin(theta) is
      evaluated such that theta starts at an angle corresponding to
      the current point and increases positively until the arc
      reaches (x,y)). A value of 0 causes the arc to be drawn in a
      "negative-angle" direction (i.e., theta starts at an angle
      value corresponding to the current point and decreases until
      the arc reaches (x,y)).</li></ul>
    <p>The following illustrates the four combinations of
    <strong>large-arc-flag</strong> and <strong>sweep-flag</strong>
    and the four different arcs that will be drawn based on the
    values of these flags. For each case, the following path data
    command was used:</p>
<pre>
&lt;path d="M 125,75 a100,50 0 ?,? 100,50"
      style="fill:none; stroke:red; stroke-width:6"/&gt;
</pre>
    <p>where "?,?" is replaced by "0,0" "0,1" "1,0" and "1,1" to
    generate the four possible cases.</p>
    <p><img alt="Illustration of flags in arc commands" src="images/paths/arcs02.png" width="426" height="187" /></p>
    <p class="view-as-svg"><a href="images/paths/arcs02.svg">View
    this example as SVG (SVG-enabled browsers only)</a></p>
    <p>Refer to <a href="#implnote-ArcImplementationNotes">Elliptical arc
    implementation notes</a> for detailed implementation notes for
    the path data elliptical arc commands.</p>

    <h3 id="paths-PathDataBNF">8.3.9 The grammar for path data</h3>
    <p>The following notation is used in the Backus-Naur Form (BNF)
    description of the grammar for path data:</p>
    <ul><li>*: 0 or more</li><li>+: 1 or more</li><li>?: 0 or 1</li><li>(): grouping</li><li>|: separates alternatives</li><li>double quotes surround literals</li></ul>
    <p>The following is the BNF for SVG paths.</p>
<pre class="grammar">
svg-path:
    wsp* moveto-drawto-command-groups? wsp*
moveto-drawto-command-groups:
    moveto-drawto-command-group
    | moveto-drawto-command-group wsp* moveto-drawto-command-groups
moveto-drawto-command-group:
    moveto wsp* drawto-commands?
drawto-commands:
    drawto-command
    | drawto-command wsp* drawto-commands
drawto-command:
    closepath
    | lineto
    | horizontal-lineto
    | vertical-lineto
    | curveto
    | smooth-curveto
    | quadratic-bezier-curveto
    | smooth-quadratic-bezier-curveto
    | elliptical-arc
moveto:
    ( "M" | "m" ) wsp* moveto-argument-sequence
moveto-argument-sequence:
    coordinate-pair
    | coordinate-pair comma-wsp? lineto-argument-sequence
closepath:
    ("Z" | "z")
lineto:
    ( "L" | "l" ) wsp* lineto-argument-sequence
lineto-argument-sequence:
    coordinate-pair
    | coordinate-pair comma-wsp? lineto-argument-sequence
horizontal-lineto:
    ( "H" | "h" ) wsp* horizontal-lineto-argument-sequence
horizontal-lineto-argument-sequence:
    coordinate
    | coordinate comma-wsp? horizontal-lineto-argument-sequence
vertical-lineto:
    ( "V" | "v" ) wsp* vertical-lineto-argument-sequence
vertical-lineto-argument-sequence:
    coordinate
    | coordinate comma-wsp? vertical-lineto-argument-sequence
curveto:
    ( "C" | "c" ) wsp* curveto-argument-sequence
curveto-argument-sequence:
    curveto-argument
    | curveto-argument comma-wsp? curveto-argument-sequence
curveto-argument:
    coordinate-pair comma-wsp? coordinate-pair comma-wsp? coordinate-pair
smooth-curveto:
    ( "S" | "s" ) wsp* smooth-curveto-argument-sequence
smooth-curveto-argument-sequence:
    smooth-curveto-argument
    | smooth-curveto-argument comma-wsp? smooth-curveto-argument-sequence
smooth-curveto-argument:
    coordinate-pair comma-wsp? coordinate-pair
quadratic-bezier-curveto:
    ( "Q" | "q" ) wsp* quadratic-bezier-curveto-argument-sequence
quadratic-bezier-curveto-argument-sequence:
    quadratic-bezier-curveto-argument
    | quadratic-bezier-curveto-argument comma-wsp? 
        quadratic-bezier-curveto-argument-sequence
quadratic-bezier-curveto-argument:
    coordinate-pair comma-wsp? coordinate-pair
smooth-quadratic-bezier-curveto:
    ( "T" | "t" ) wsp* smooth-quadratic-bezier-curveto-argument-sequence
smooth-quadratic-bezier-curveto-argument-sequence:
    coordinate-pair
    | coordinate-pair comma-wsp? smooth-quadratic-bezier-curveto-argument-sequence
elliptical-arc:
    ( "A" | "a" ) wsp* elliptical-arc-argument-sequence
elliptical-arc-argument-sequence:
    elliptical-arc-argument
    | elliptical-arc-argument comma-wsp? elliptical-arc-argument-sequence
elliptical-arc-argument:
    nonnegative-number comma-wsp? nonnegative-number comma-wsp? 
        number comma-wsp flag comma-wsp? flag comma-wsp? coordinate-pair
coordinate-pair:
    coordinate comma-wsp? coordinate
coordinate:
    number
nonnegative-number:
    integer-constant
    | floating-point-constant
number:
    sign? integer-constant
    | sign? floating-point-constant
flag:
    "0" | "1"
comma-wsp:
    (wsp+ comma? wsp*) | (comma wsp*)
comma:
    ","
integer-constant:
    digit-sequence
floating-point-constant:
    fractional-constant exponent?
    | digit-sequence exponent
fractional-constant:
    digit-sequence? "." digit-sequence
    | digit-sequence "."
exponent:
    ( "e" | "E" ) sign? digit-sequence
sign:
    "+" | "-"
digit-sequence:
    digit
    | digit digit-sequence
digit:
    "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
wsp:
    (#x20 | #x9 | #xD | #xA)
</pre>
    <p>The processing of the BNF must consume as much of a given
    BNF production as possible, stopping at the point when a
    character is encountered which no longer satisfies the
    production. Thus, in the string "M 100-200", the first
    coordinate for the "moveto" consumes the characters "100" and
    stops upon encountering the minus sign because the minus sign
    cannot follow a digit in the production of a "coordinate". The
    result is that the first coordinate will be "100" and the
    second coordinate will be "-200".</p>
    <p>Similarly, for the string "M 0.6.5", the first coordinate of
    the "moveto" consumes the characters "0.6" and stops upon
    encountering the second decimal point because the production of
    a "coordinate" only allows one decimal point. The result is
    that the first coordinate will be "0.6" and the second
    coordinate will be ".5".</p>
    <p>Note that the BNF allows the path <a href="#paths-DAttribute"><span class="attr-name">‘d’</span></a> attribute to be empty. This is not
    an error, instead it disables rendering of the path.</p>

    <h2 id="paths-DistanceAlongAPath">8.4 Distance along a path</h2>
    <p>Various operations, including <a href="#text-TextOnAPath">text on a path</a> and <a href="#animate-AnimateMotionElement">motion animation</a>
    and various <a href="#painting-StrokeProperties">stroke
    operations</a>, require that the user agent compute the
    distance along the geometry of a graphics element, such as a <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>.</p>
    <p>Exact mathematics exist for computing distance along a path,
    but the formulas are highly complex and require substantial
    computation. It is recommended that authoring products and user
    agents employ algorithms that produce as precise results as
    possible; however, to accommodate implementation differences
    and to help distance calculations produce results that
    approximate author intent, the <a href="#paths-PathLengthAttribute"><span class="attr-name">‘pathLength’</span></a> attribute can be used
    to provide the author's computation of the total length of the
    path so that the user agent can scale distance-along-a-path
    computations by the ratio of <a href="#paths-PathLengthAttribute"><span class="attr-name">‘pathLength’</span></a> to the user agent's own
    computed value for total path length.</p>
    <p>A "moveto" operation within a <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element is defined to have
    zero length. Only the various "lineto", "curveto" and "arcto"
    commands contribute to path length calculations.</p>



<h2 id="paths-DOMInterfaces">8.5 DOM interfaces</h2>

<h3 id="paths-InterfaceSVGPathSeg">8.5.1 Interface SVGPathSeg</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> interface is a base interface that corresponds to a
 single command within a path data specification.
<pre class="idl">interface <b>SVGPathSeg</b> {

  // Path Segment Types
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_UNKNOWN">PATHSEG_UNKNOWN</a> = 0;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CLOSEPATH">PATHSEG_CLOSEPATH</a> = 1;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_MOVETO_ABS">PATHSEG_MOVETO_ABS</a> = 2;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_MOVETO_REL">PATHSEG_MOVETO_REL</a> = 3;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_LINETO_ABS">PATHSEG_LINETO_ABS</a> = 4;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_LINETO_REL">PATHSEG_LINETO_REL</a> = 5;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CURVETO_CUBIC_ABS">PATHSEG_CURVETO_CUBIC_ABS</a> = 6;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CURVETO_CUBIC_REL">PATHSEG_CURVETO_CUBIC_REL</a> = 7;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CURVETO_QUADRATIC_ABS">PATHSEG_CURVETO_QUADRATIC_ABS</a> = 8;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CURVETO_QUADRATIC_REL">PATHSEG_CURVETO_QUADRATIC_REL</a> = 9;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_ARC_ABS">PATHSEG_ARC_ABS</a> = 10;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_ARC_REL">PATHSEG_ARC_REL</a> = 11;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_LINETO_HORIZONTAL_ABS">PATHSEG_LINETO_HORIZONTAL_ABS</a> = 12;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_LINETO_HORIZONTAL_REL">PATHSEG_LINETO_HORIZONTAL_REL</a> = 13;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_LINETO_VERTICAL_ABS">PATHSEG_LINETO_VERTICAL_ABS</a> = 14;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_LINETO_VERTICAL_REL">PATHSEG_LINETO_VERTICAL_REL</a> = 15;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CURVETO_CUBIC_SMOOTH_ABS">PATHSEG_CURVETO_CUBIC_SMOOTH_ABS</a> = 16;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CURVETO_CUBIC_SMOOTH_REL">PATHSEG_CURVETO_CUBIC_SMOOTH_REL</a> = 17;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS">PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS</a> = 18;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL">PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL</a> = 19;

  readonly attribute unsigned short <a href="#paths-__svg__SVGPathSeg__pathSegType">pathSegType</a>;
  readonly attribute DOMString <a href="#paths-__svg__SVGPathSeg__pathSegTypeAsLetter">pathSegTypeAsLetter</a>;
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Path Segment Types”:</dt><dd><dl class="constants">
<dt id="paths-__svg__SVGPathSeg__PATHSEG_UNKNOWN" class="constant first-child"><b>PATHSEG_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The unit type is not one of predefined types. It is invalid to attempt
 to define a new value of this type or to attempt to switch an existing
value to this type.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_CLOSEPATH" class="constant"><b>PATHSEG_CLOSEPATH</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "closepath" (z) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_MOVETO_ABS" class="constant"><b>PATHSEG_MOVETO_ABS</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "absolute moveto" (M) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_MOVETO_REL" class="constant"><b>PATHSEG_MOVETO_REL</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "relative moveto" (m) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_LINETO_ABS" class="constant"><b>PATHSEG_LINETO_ABS</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "absolute lineto" (L) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_LINETO_REL" class="constant"><b>PATHSEG_LINETO_REL</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "relative lineto" (l) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_CURVETO_CUBIC_ABS" class="constant"><b>PATHSEG_CURVETO_CUBIC_ABS</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "absolute cubic Bézier curveto" (C) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_CURVETO_CUBIC_REL" class="constant"><b>PATHSEG_CURVETO_CUBIC_REL</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "relative cubic Bézier curveto" (c) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_CURVETO_QUADRATIC_ABS" class="constant"><b>PATHSEG_CURVETO_QUADRATIC_ABS</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "absolute quadratic Bézier curveto" (Q) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_CURVETO_QUADRATIC_REL" class="constant"><b>PATHSEG_CURVETO_QUADRATIC_REL</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "relative quadratic Bézier curveto" (q) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_ARC_ABS" class="constant"><b>PATHSEG_ARC_ABS</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "absolute arcto" (A) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_ARC_REL" class="constant"><b>PATHSEG_ARC_REL</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "relative arcto" (a) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_LINETO_HORIZONTAL_ABS" class="constant"><b>PATHSEG_LINETO_HORIZONTAL_ABS</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "absolute horizontal lineto" (H) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_LINETO_HORIZONTAL_REL" class="constant"><b>PATHSEG_LINETO_HORIZONTAL_REL</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "relative horizontal lineto" (h) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_LINETO_VERTICAL_ABS" class="constant"><b>PATHSEG_LINETO_VERTICAL_ABS</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "absolute vertical lineto" (V) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_LINETO_VERTICAL_REL" class="constant"><b>PATHSEG_LINETO_VERTICAL_REL</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "relative vertical lineto" (v) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_CURVETO_CUBIC_SMOOTH_ABS" class="constant"><b>PATHSEG_CURVETO_CUBIC_SMOOTH_ABS</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "absolute smooth cubic curveto" (S) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_CURVETO_CUBIC_SMOOTH_REL" class="constant"><b>PATHSEG_CURVETO_CUBIC_SMOOTH_REL</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "relative smooth cubic curveto" (s) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS" class="constant"><b>PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "absolute smooth quadratic curveto" (T) path data command.

</div></dd>
<dt id="paths-__svg__SVGPathSeg__PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL" class="constant"><b>PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a "relative smooth quadratic curveto" (t) path data command.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSeg__pathSegType" class="attribute first-child"><b>pathSegType</b><span class="idl-type-parenthetical"> (readonly unsigned short)</span></dt><dd class="attribute"><div>
 The type of the path segment as specified by one of the constants
 defined on this interface.
</div></dd>
<dt id="paths-__svg__SVGPathSeg__pathSegTypeAsLetter" class="attribute"><b>pathSegTypeAsLetter</b><span class="idl-type-parenthetical"> (readonly DOMString)</span></dt><dd class="attribute"><div>
 The type of the path segment, specified by the corresponding one
 character command name.
</div></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegClosePath">8.5.2 Interface SVGPathSegClosePath</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegClosePath">SVGPathSegClosePath</a> interface corresponds to a
 "closepath" (z) path data command.
<pre class="idl">interface <b>SVGPathSegClosePath</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
};</pre>

<h3 id="paths-InterfaceSVGPathSegMovetoAbs">8.5.3 Interface SVGPathSegMovetoAbs</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegMovetoAbs">SVGPathSegMovetoAbs</a> interface corresponds to an
 "absolute moveto" (M) path data command.
<pre class="idl">interface <b>SVGPathSegMovetoAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegMovetoAbs__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegMovetoAbs__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegMovetoAbs__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute X coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegMovetoAbs__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute Y coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegMovetoRel">8.5.4 Interface SVGPathSegMovetoRel</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegMovetoRel">SVGPathSegMovetoRel</a> interface corresponds to a
 "relative moveto" (m) path data command.
<pre class="idl">interface <b>SVGPathSegMovetoRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegMovetoRel__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegMovetoRel__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegMovetoRel__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative X coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegMovetoRel__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative Y coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegLinetoAbs">8.5.5 Interface SVGPathSegLinetoAbs</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoAbs">SVGPathSegLinetoAbs</a> interface corresponds to an
 "absolute lineto" (L) path data command.
<pre class="idl">interface <b>SVGPathSegLinetoAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegLinetoAbs__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegLinetoAbs__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegLinetoAbs__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute X coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegLinetoAbs__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute Y coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegLinetoRel">8.5.6 Interface SVGPathSegLinetoRel</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoRel">SVGPathSegLinetoRel</a> interface corresponds to a
 "relative lineto" (l) path data command.
<pre class="idl">interface <b>SVGPathSegLinetoRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegLinetoRel__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegLinetoRel__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegLinetoRel__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative X coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegLinetoRel__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative Y coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegCurvetoCubicAbs">8.5.7 Interface SVGPathSegCurvetoCubicAbs</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicAbs">SVGPathSegCurvetoCubicAbs</a> interface corresponds to an
 "absolute cubic Bézier curveto" (C) path data command.
<pre class="idl">interface <b>SVGPathSegCurvetoCubicAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicAbs__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicAbs__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicAbs__x1">x1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicAbs__y1">y1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicAbs__x2">x2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicAbs__y2">y2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegCurvetoCubicAbs__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute X coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoCubicAbs__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute Y coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoCubicAbs__x1" class="attribute"><b>x1</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute X coordinate for the first control point.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoCubicAbs__y1" class="attribute"><b>y1</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute Y coordinate for the first control point.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoCubicAbs__x2" class="attribute"><b>x2</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute X coordinate for the second control point.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoCubicAbs__y2" class="attribute"><b>y2</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute Y coordinate for the second control point.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegCurvetoCubicRel">8.5.8 Interface SVGPathSegCurvetoCubicRel</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicRel">SVGPathSegCurvetoCubicRel</a> interface corresponds to a
 "relative cubic Bézier curveto" (c) path data command.
<pre class="idl">interface <b>SVGPathSegCurvetoCubicRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicRel__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicRel__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicRel__x1">x1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicRel__y1">y1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicRel__x2">x2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicRel__y2">y2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegCurvetoCubicRel__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative X coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoCubicRel__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative Y coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoCubicRel__x1" class="attribute"><b>x1</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative X coordinate for the first control point.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoCubicRel__y1" class="attribute"><b>y1</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative Y coordinate for the first control point.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoCubicRel__x2" class="attribute"><b>x2</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative X coordinate for the second control point.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoCubicRel__y2" class="attribute"><b>y2</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative Y coordinate for the second control point.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegCurvetoQuadraticAbs">8.5.9 Interface SVGPathSegCurvetoQuadraticAbs</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticAbs">SVGPathSegCurvetoQuadraticAbs</a> interface corresponds to an
 "absolute quadratic Bézier curveto" (Q) path data command.
<pre class="idl">interface <b>SVGPathSegCurvetoQuadraticAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticAbs__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticAbs__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticAbs__x1">x1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticAbs__y1">y1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegCurvetoQuadraticAbs__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute X coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoQuadraticAbs__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute Y coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoQuadraticAbs__x1" class="attribute"><b>x1</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute X coordinate for the first control point.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoQuadraticAbs__y1" class="attribute"><b>y1</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute Y coordinate for the first control point.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegCurvetoQuadraticRel">8.5.10 Interface SVGPathSegCurvetoQuadraticRel</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticRel">SVGPathSegCurvetoQuadraticRel</a> interface corresponds to a
 "relative quadratic Bézier curveto" (q) path data command.
<pre class="idl">interface <b>SVGPathSegCurvetoQuadraticRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticRel__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticRel__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticRel__x1">x1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticRel__y1">y1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegCurvetoQuadraticRel__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative X coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoQuadraticRel__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative Y coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoQuadraticRel__x1" class="attribute"><b>x1</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative X coordinate for the first control point.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoQuadraticRel__y1" class="attribute"><b>y1</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative Y coordinate for the first control point.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegArcAbs">8.5.11 Interface SVGPathSegArcAbs</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegArcAbs">SVGPathSegArcAbs</a> interface corresponds to an
 "absolute arcto" (A) path data command.
<pre class="idl">interface <b>SVGPathSegArcAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegArcAbs__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegArcAbs__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegArcAbs__r1">r1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegArcAbs__r2">r2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegArcAbs__angle">angle</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute boolean <a href="#paths-__svg__SVGPathSegArcAbs__largeArcFlag">largeArcFlag</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute boolean <a href="#paths-__svg__SVGPathSegArcAbs__sweepFlag">sweepFlag</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegArcAbs__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute X coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegArcAbs__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute Y coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegArcAbs__r1" class="attribute"><b>r1</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The x-axis radius for the ellipse (i.e., r1).

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegArcAbs__r2" class="attribute"><b>r2</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The y-axis radius for the ellipse (i.e., r2).

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegArcAbs__angle" class="attribute"><b>angle</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The rotation angle in degrees for the ellipse's x-axis relative to the x-axis of the user coordinate system.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegArcAbs__largeArcFlag" class="attribute"><b>largeArcFlag</b><span class="idl-type-parenthetical"> (boolean)</span></dt><dd class="attribute"><div>
 The value of the large-arc-flag parameter.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegArcAbs__sweepFlag" class="attribute"><b>sweepFlag</b><span class="idl-type-parenthetical"> (boolean)</span></dt><dd class="attribute"><div>
 The value of the sweep-flag parameter.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegArcRel">8.5.12 Interface SVGPathSegArcRel</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegArcRel">SVGPathSegArcRel</a> interface corresponds to a
 "relative arcto" (a) path data command.
<pre class="idl">interface <b>SVGPathSegArcRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegArcRel__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegArcRel__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegArcRel__r1">r1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegArcRel__r2">r2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegArcRel__angle">angle</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute boolean <a href="#paths-__svg__SVGPathSegArcRel__largeArcFlag">largeArcFlag</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute boolean <a href="#paths-__svg__SVGPathSegArcRel__sweepFlag">sweepFlag</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegArcRel__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative X coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegArcRel__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative Y coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegArcRel__r1" class="attribute"><b>r1</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The x-axis radius for the ellipse (i.e., r1).

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegArcRel__r2" class="attribute"><b>r2</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The y-axis radius for the ellipse (i.e., r2).

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegArcRel__angle" class="attribute"><b>angle</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The rotation angle in degrees for the ellipse's x-axis relative to the x-axis of the user coordinate system.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegArcRel__largeArcFlag" class="attribute"><b>largeArcFlag</b><span class="idl-type-parenthetical"> (boolean)</span></dt><dd class="attribute"><div>
 The value of the large-arc-flag parameter.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegArcRel__sweepFlag" class="attribute"><b>sweepFlag</b><span class="idl-type-parenthetical"> (boolean)</span></dt><dd class="attribute"><div>
 The value of the sweep-flag parameter.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegLinetoHorizontalAbs">8.5.13 Interface SVGPathSegLinetoHorizontalAbs</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoHorizontalAbs">SVGPathSegLinetoHorizontalAbs</a> interface corresponds to an
 "absolute horizontal lineto" (H) path data command.
<pre class="idl">interface <b>SVGPathSegLinetoHorizontalAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegLinetoHorizontalAbs__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegLinetoHorizontalAbs__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute X coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegLinetoHorizontalRel">8.5.14 Interface SVGPathSegLinetoHorizontalRel</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoHorizontalRel">SVGPathSegLinetoHorizontalRel</a> interface corresponds to a
 "relative horizontal lineto" (h) path data command.
<pre class="idl">interface <b>SVGPathSegLinetoHorizontalRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegLinetoHorizontalRel__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegLinetoHorizontalRel__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative X coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegLinetoVerticalAbs">8.5.15 Interface SVGPathSegLinetoVerticalAbs</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoVerticalAbs">SVGPathSegLinetoVerticalAbs</a> interface corresponds to an
 "absolute vertical lineto" (V) path data command.
<pre class="idl">interface <b>SVGPathSegLinetoVerticalAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegLinetoVerticalAbs__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegLinetoVerticalAbs__y" class="attribute first-child"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute Y coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegLinetoVerticalRel">8.5.16 Interface SVGPathSegLinetoVerticalRel</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoVerticalRel">SVGPathSegLinetoVerticalRel</a> interface corresponds to a
 "relative vertical lineto" (v) path data command.
<pre class="idl">interface <b>SVGPathSegLinetoVerticalRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegLinetoVerticalRel__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegLinetoVerticalRel__y" class="attribute first-child"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative Y coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegCurvetoCubicSmoothAbs">8.5.17 Interface SVGPathSegCurvetoCubicSmoothAbs</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicSmoothAbs">SVGPathSegCurvetoCubicSmoothAbs</a> interface corresponds to an
 "absolute smooth cubic curveto" (S) path data command.
<pre class="idl">interface <b>SVGPathSegCurvetoCubicSmoothAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicSmoothAbs__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicSmoothAbs__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicSmoothAbs__x2">x2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicSmoothAbs__y2">y2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegCurvetoCubicSmoothAbs__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute X coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoCubicSmoothAbs__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute Y coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoCubicSmoothAbs__x2" class="attribute"><b>x2</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute X coordinate for the second control point.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoCubicSmoothAbs__y2" class="attribute"><b>y2</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute Y coordinate for the second control point.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegCurvetoCubicSmoothRel">8.5.18 Interface SVGPathSegCurvetoCubicSmoothRel</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicSmoothRel">SVGPathSegCurvetoCubicSmoothRel</a> interface corresponds to a
 "relative smooth cubic curveto" (s) path data command.
<pre class="idl">interface <b>SVGPathSegCurvetoCubicSmoothRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicSmoothRel__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicSmoothRel__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicSmoothRel__x2">x2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicSmoothRel__y2">y2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegCurvetoCubicSmoothRel__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative X coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoCubicSmoothRel__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative Y coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoCubicSmoothRel__x2" class="attribute"><b>x2</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative X coordinate for the second control point.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoCubicSmoothRel__y2" class="attribute"><b>y2</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative Y coordinate for the second control point.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegCurvetoQuadraticSmoothAbs">8.5.19 Interface SVGPathSegCurvetoQuadraticSmoothAbs</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticSmoothAbs">SVGPathSegCurvetoQuadraticSmoothAbs</a> interface corresponds to an
 "absolute smooth cubic curveto" (T) path data command.
<pre class="idl">interface <b>SVGPathSegCurvetoQuadraticSmoothAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticSmoothAbs__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticSmoothAbs__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegCurvetoQuadraticSmoothAbs__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute X coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoQuadraticSmoothAbs__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The absolute Y coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegCurvetoQuadraticSmoothRel">8.5.20 Interface SVGPathSegCurvetoQuadraticSmoothRel</h3>


 The <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticSmoothRel">SVGPathSegCurvetoQuadraticSmoothRel</a> interface corresponds to a
 "relative smooth cubic curveto" (t) path data command.
<pre class="idl">interface <b>SVGPathSegCurvetoQuadraticSmoothRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticSmoothRel__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticSmoothRel__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegCurvetoQuadraticSmoothRel__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative X coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegCurvetoQuadraticSmoothRel__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 The relative Y coordinate for the end point of this path segment.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathSegList">8.5.21 Interface SVGPathSegList</h3>


 <p>This interface defines a list of SVGPathSeg objects.</p>

 <p><a class="idlinterface" href="#paths-InterfaceSVGPathSegList">SVGPathSegList</a> has the same attributes and methods as other
 SVGxxxList interfaces. Implementers may consider using a single base class
 to implement the various SVGxxxList interfaces.</p>
<pre class="idl">interface <b>SVGPathSegList</b> {

  readonly attribute unsigned long <a href="#paths-__svg__SVGPathSegList__numberOfItems">numberOfItems</a>;

  void <a href="#paths-__svg__SVGPathSegList__clear">clear</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <a href="#paths-__svg__SVGPathSegList__initialize">initialize</a>(in <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <a href="#paths-__svg__SVGPathSegList__getItem">getItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <a href="#paths-__svg__SVGPathSegList__insertItemBefore">insertItemBefore</a>(in <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <a href="#paths-__svg__SVGPathSegList__replaceItem">replaceItem</a>(in <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <a href="#paths-__svg__SVGPathSegList__removeItem">removeItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <a href="#paths-__svg__SVGPathSegList__appendItem">appendItem</a>(in <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegList__numberOfItems" class="attribute first-child"><b>numberOfItems</b><span class="idl-type-parenthetical"> (readonly unsigned long)</span></dt><dd class="attribute"><div>
 The number of items in the list.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathSegList__clear" class="operation first-child">void <b>clear</b>()</dt><dd class="operation"><div>
 Clears all existing current items from the list, with the result being
 an empty list.

</div><dl class="operation"><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegList__initialize" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <b>initialize</b>(in <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <var>newItem</var>)</dt><dd class="operation"><div>
 Clears all existing current items from the list and re-initializes the
 list to hold the single item specified by the parameter.  If the inserted
 item is already in a list, it is removed from its previous list before
 it is inserted into this list.  The inserted item is the item itself and
 not a copy. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <var>newItem</var></div> <div> The item which should become the only member of the list.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The item being inserted into the list.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegList__getItem" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <b>getItem</b>(in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Returns the specified item from the list.  The returned item is the
 item itself and not a copy.  Any changes made to the item are
 immediately reflected in the list.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>index</var></div> <div> The index of the item from the list which is to be
   returned.  The first item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The selected item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#paths-__svg__SVGPathSegList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegList__insertItemBefore" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <b>insertItemBefore</b>(in <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <var>newItem</var>, in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Inserts a new item into the list at the specified position. The first
 item is number 0. If <var>newItem</var> is already in a list, it is
 removed from its previous list before it is inserted into this list.
 The inserted item is the item itself and not a copy. If the item is
 already in this list, note that the index of the item to insert
 before is <i>before</i> the removal of the item.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <var>newItem</var></div> <div> The item which is to be inserted into the list.
</div></li><li class="parameter"><div>unsigned long <var>index</var></div> <div> The index of the item before which the new item is to be
   inserted. The first item is number 0.  If the index is equal to 0,
   then the new item is inserted at the front of the list. If the index
   is greater than or equal to <a class="idlattr" href="#paths-__svg__SVGPathSegList__numberOfItems">numberOfItems</a>, then the new item is
   appended to the end of the list.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegList__replaceItem" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <b>replaceItem</b>(in <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <var>newItem</var>, in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Replaces an existing item in the list with a new item. If
 <var>newItem</var> is already in a list, it is removed from its
 previous list before it is inserted into this list.  The inserted item
 is the item itself and not a copy.  If the item is already in this
 list, note that the index of the item to replace is <i>before</i>
 the removal of the item.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <var>newItem</var></div> <div> The item which is to be inserted into the list.
</div></li><li class="parameter"><div>unsigned long <var>index</var></div> <div> The index of the item which is to be replaced. The first
   item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#paths-__svg__SVGPathSegList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegList__removeItem" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <b>removeItem</b>(in unsigned long <var>index</var>)</dt><dd class="operation"><div>
 Removes an existing item from the list.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>index</var></div> <div> The index of the item which is to be removed. The first
   item is number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The removed item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the index number is
   greater than or equal to <a class="idlattr" href="#paths-__svg__SVGPathSegList__numberOfItems">numberOfItems</a>.
</dd></dl></dd></dl></dd>
<dt id="paths-__svg__SVGPathSegList__appendItem" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <b>appendItem</b>(in <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <var>newItem</var>)</dt><dd class="operation"><div>
 Inserts a new item at the end of the list. If <var>newItem</var> is
 already in a list, it is removed from its previous list before it is
 inserted into this list.  The inserted item is the item itself and
 not a copy.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <var>newItem</var></div> <div> The item which is to be inserted. The first item is
   number 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The inserted item.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised when the list
   cannot be modified.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGAnimatedPathData">8.5.22 Interface SVGAnimatedPathData</h3>


 <p>The SVGAnimatedPathData interface supports elements which have a <span class="attr-name">‘d’</span>
 attribute which holds SVG path data, and supports the ability to animate
 that attribute.</p>

 <p>The <a class="idlinterface" href="#paths-InterfaceSVGAnimatedPathData">SVGAnimatedPathData</a> interface provides two lists to access and
 modify the base (i.e., static) contents of the <span class="attr-name">‘d’</span> attribute:</p>

 <ul>
   <li>DOM attribute <a class="idlattr" href="#paths-__svg__SVGAnimatedPathData__pathSegList">pathSegList</a> provides access to the static/base
   contents of the <span class="attr-name">‘d’</span> attribute in a form which matches one-for-one
   with SVG's syntax.</li>

   <li>DOM attribute <a class="idlattr" href="#paths-__svg__SVGAnimatedPathData__normalizedPathSegList">normalizedPathSegList</a> provides normalized access
   to the static/base contents of the <span class="attr-name">‘d’</span> attribute where all path
   data commands are expressed in terms of the following subset of
   <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> types:
   SVG_PATHSEG_MOVETO_ABS (M),
   SVG_PATHSEG_LINETO_ABS (L),
   SVG_PATHSEG_CURVETO_CUBIC_ABS (C) and
   SVG_PATHSEG_CLOSEPATH (z).</li>
 </ul>

 <p>and two lists to access the current animated values of the <span class="attr-name">‘d’</span>
 attribute:</p>

 <ul>
   <li>DOM attribute <a class="idlattr" href="#paths-__svg__SVGAnimatedPathData__animatedPathSegList">animatedPathSegList</a> provides access to the current
   animated contents of the <span class="attr-name">‘d’</span> attribute in a form which matches
   one-for-one with SVG's syntax.</li>

   <li>DOM attribute <a class="idlattr" href="#paths-__svg__SVGAnimatedPathData__animatedNormalizedPathSegList">animatedNormalizedPathSegList</a> provides
   normalized access to the current animated contents of the <span class="attr-name">‘d’</span>
   attribute where all path data commands are expressed in terms of the
   following subset of <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> types:
   SVG_PATHSEG_MOVETO_ABS (M),
   SVG_PATHSEG_LINETO_ABS (L),
   SVG_PATHSEG_CURVETO_CUBIC_ABS (C) and
   SVG_PATHSEG_CLOSEPATH (z).</li>
 </ul>

 <p>Each of the two lists are always kept synchronized. Modifications to one
 list will immediately cause the corresponding list to be modified.
 Modifications to <a class="idlattr" href="#paths-__svg__SVGAnimatedPathData__normalizedPathSegList">normalizedPathSegList</a> might cause entries in
 <a class="idlattr" href="#paths-__svg__SVGAnimatedPathData__pathSegList">pathSegList</a> to be broken into a set of normalized path segments.</p>

 <p>Additionally, the <a href="#paths-DAttribute"><span class="attr-name">‘d’</span></a> attribute on the <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element
 accessed via the XML DOM (e.g., using the <code>getAttribute()</code>
 method call) will reflect any changes made to <a class="idlattr" href="#paths-__svg__SVGAnimatedPathData__pathSegList">pathSegList</a> or
 <a class="idlattr" href="#paths-__svg__SVGAnimatedPathData__normalizedPathSegList">normalizedPathSegList</a>.</p>
<pre class="idl">interface <b>SVGAnimatedPathData</b> {
  readonly attribute <a class="idlinterface" href="#paths-InterfaceSVGPathSegList">SVGPathSegList</a> <a href="#paths-__svg__SVGAnimatedPathData__pathSegList">pathSegList</a>;
  readonly attribute <a class="idlinterface" href="#paths-InterfaceSVGPathSegList">SVGPathSegList</a> <a href="#paths-__svg__SVGAnimatedPathData__normalizedPathSegList">normalizedPathSegList</a>;
  readonly attribute <a class="idlinterface" href="#paths-InterfaceSVGPathSegList">SVGPathSegList</a> <a href="#paths-__svg__SVGAnimatedPathData__animatedPathSegList">animatedPathSegList</a>;
  readonly attribute <a class="idlinterface" href="#paths-InterfaceSVGPathSegList">SVGPathSegList</a> <a href="#paths-__svg__SVGAnimatedPathData__animatedNormalizedPathSegList">animatedNormalizedPathSegList</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGAnimatedPathData__pathSegList" class="attribute first-child"><b>pathSegList</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#paths-InterfaceSVGPathSegList">SVGPathSegList</a>)</span></dt><dd class="attribute"><div>
 Provides access to the base (i.e., static) contents of the <span class="attr-name">‘d’</span>
 attribute in a form which matches one-for-one with SVG's syntax.
 Thus, if the <span class="attr-name">‘d’</span> attribute has an "absolute moveto (M)" and an
 "absolute arcto (A)" command, then <a class="idlattr" href="#paths-__svg__SVGAnimatedPathData__pathSegList">pathSegList</a> will have two
 entries: a SVG_PATHSEG_MOVETO_ABS and a SVG_PATHSEG_ARC_ABS.
</div></dd>
<dt id="paths-__svg__SVGAnimatedPathData__normalizedPathSegList" class="attribute"><b>normalizedPathSegList</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#paths-InterfaceSVGPathSegList">SVGPathSegList</a>)</span></dt><dd class="attribute"><div>
 <p>Provides access to the base (i.e., static) contents of the
 <span class="attr-name">‘d’</span> attribute in a form where all path data commands are
 expressed in terms of the following subset of <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a>
 types: SVG_PATHSEG_MOVETO_ABS (M), SVG_PATHSEG_LINETO_ABS (L),
 SVG_PATHSEG_CURVETO_CUBIC_ABS (C) and SVG_PATHSEG_CLOSEPATH
 (z). Thus, if the <span class="attr-name">‘d’</span> attribute has an "absolute moveto (M)"
 and an "absolute arcto (A)" command, then pathSegList will
 have one SVG_PATHSEG_MOVETO_ABS entry followed by a series of
 SVG_PATHSEG_LINETO_ABS entries which approximate the arc. This
 alternate representation is available to provide a simpler
 interface to developers who would benefit from a more limited set
 of commands.</p>

 <p>The only valid <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> types are
 SVG_PATHSEG_MOVETO_ABS (M), SVG_PATHSEG_LINETO_ABS (L),
 SVG_PATHSEG_CURVETO_CUBIC_ABS (C) and SVG_PATHSEG_CLOSEPATH (z).</p>
</div></dd>
<dt id="paths-__svg__SVGAnimatedPathData__animatedPathSegList" class="attribute"><b>animatedPathSegList</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#paths-InterfaceSVGPathSegList">SVGPathSegList</a>)</span></dt><dd class="attribute"><div>
 Provides access to the current animated contents of the <span class="attr-name">‘d’</span>
 attribute in a form which matches one-for-one with SVG's syntax.
 If the given attribute or property is being animated, contains
 the current animated value of the attribute or property, and both
 the object itself and its contents are read only. If the given
 attribute or property is not currently being animated, contains
 the same value as <a class="idlattr" href="#paths-__svg__SVGAnimatedPathData__pathSegList">pathSegList</a>.
</div></dd>
<dt id="paths-__svg__SVGAnimatedPathData__animatedNormalizedPathSegList" class="attribute"><b>animatedNormalizedPathSegList</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#paths-InterfaceSVGPathSegList">SVGPathSegList</a>)</span></dt><dd class="attribute"><div>
 Provides access to the current animated contents of the
 <span class="attr-name">‘d’</span> attribute in a form where all path data commands
 are expressed in terms of the following subset of <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a>
 types: SVG_PATHSEG_MOVETO_ABS (M), SVG_PATHSEG_LINETO_ABS (L),
 SVG_PATHSEG_CURVETO_CUBIC_ABS (C) and SVG_PATHSEG_CLOSEPATH (z).
 If the given attribute or property is being animated, contains
 the current animated value of the attribute or property, and both
 the object itself and its contents are read only. If the given
 attribute or property is not currently being animated, contains
 the same value as <a class="idlattr" href="#paths-__svg__SVGAnimatedPathData__normalizedPathSegList">normalizedPathSegList</a>.
</div></dd></dl></dd></dl>

<h3 id="paths-InterfaceSVGPathElement">8.5.23 Interface SVGPathElement</h3>



 The <a class="idlinterface" href="#paths-InterfaceSVGPathElement">SVGPathElement</a> interface corresponds to the <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>
 element.
<pre class="idl">interface <b>SVGPathElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a>,
                           <a class="idlinterface" href="#paths-InterfaceSVGAnimatedPathData">SVGAnimatedPathData</a> {

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#paths-__svg__SVGPathElement__pathLength">pathLength</a>;

  float <a href="#paths-__svg__SVGPathElement__getTotalLength">getTotalLength</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#paths-__svg__SVGPathElement__getPointAtLength">getPointAtLength</a>(in float distance);
  unsigned long <a href="#paths-__svg__SVGPathElement__getPathSegAtLength">getPathSegAtLength</a>(in float distance);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegClosePath">SVGPathSegClosePath</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegClosePath">createSVGPathSegClosePath</a>();
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegMovetoAbs">SVGPathSegMovetoAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegMovetoAbs">createSVGPathSegMovetoAbs</a>(in float x, in float y);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegMovetoRel">SVGPathSegMovetoRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegMovetoRel">createSVGPathSegMovetoRel</a>(in float x, in float y);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoAbs">SVGPathSegLinetoAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegLinetoAbs">createSVGPathSegLinetoAbs</a>(in float x, in float y);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoRel">SVGPathSegLinetoRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegLinetoRel">createSVGPathSegLinetoRel</a>(in float x, in float y);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicAbs">SVGPathSegCurvetoCubicAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegCurvetoCubicAbs">createSVGPathSegCurvetoCubicAbs</a>(in float x, in float y, in float x1, in float y1, in float x2, in float y2);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicRel">SVGPathSegCurvetoCubicRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegCurvetoCubicRel">createSVGPathSegCurvetoCubicRel</a>(in float x, in float y, in float x1, in float y1, in float x2, in float y2);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticAbs">SVGPathSegCurvetoQuadraticAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegCurvetoQuadraticAbs">createSVGPathSegCurvetoQuadraticAbs</a>(in float x, in float y, in float x1, in float y1);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticRel">SVGPathSegCurvetoQuadraticRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegCurvetoQuadraticRel">createSVGPathSegCurvetoQuadraticRel</a>(in float x, in float y, in float x1, in float y1);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegArcAbs">SVGPathSegArcAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegArcAbs">createSVGPathSegArcAbs</a>(in float x, in float y, in float r1, in float r2, in float angle, in boolean largeArcFlag, in boolean sweepFlag);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegArcRel">SVGPathSegArcRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegArcRel">createSVGPathSegArcRel</a>(in float x, in float y, in float r1, in float r2, in float angle, in boolean largeArcFlag, in boolean sweepFlag);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoHorizontalAbs">SVGPathSegLinetoHorizontalAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegLinetoHorizontalAbs">createSVGPathSegLinetoHorizontalAbs</a>(in float x);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoHorizontalRel">SVGPathSegLinetoHorizontalRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegLinetoHorizontalRel">createSVGPathSegLinetoHorizontalRel</a>(in float x);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoVerticalAbs">SVGPathSegLinetoVerticalAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegLinetoVerticalAbs">createSVGPathSegLinetoVerticalAbs</a>(in float y);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoVerticalRel">SVGPathSegLinetoVerticalRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegLinetoVerticalRel">createSVGPathSegLinetoVerticalRel</a>(in float y);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicSmoothAbs">SVGPathSegCurvetoCubicSmoothAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegCurvetoCubicSmoothAbs">createSVGPathSegCurvetoCubicSmoothAbs</a>(in float x, in float y, in float x2, in float y2);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicSmoothRel">SVGPathSegCurvetoCubicSmoothRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegCurvetoCubicSmoothRel">createSVGPathSegCurvetoCubicSmoothRel</a>(in float x, in float y, in float x2, in float y2);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticSmoothAbs">SVGPathSegCurvetoQuadraticSmoothAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegCurvetoQuadraticSmoothAbs">createSVGPathSegCurvetoQuadraticSmoothAbs</a>(in float x, in float y);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticSmoothRel">SVGPathSegCurvetoQuadraticSmoothRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegCurvetoQuadraticSmoothRel">createSVGPathSegCurvetoQuadraticSmoothRel</a>(in float x, in float y);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathElement__pathLength" class="attribute first-child"><b>pathLength</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a class="idlattr" href="#paths-__svg__SVGPathElement__pathLength">pathLength</a> on the given <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>
 element.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="paths-__svg__SVGPathElement__getTotalLength" class="operation first-child">float <b>getTotalLength</b>()</dt><dd class="operation"><div>
 Returns the user agent's computed value for the total length of the path
 using the user agent's distance-along-a-path algorithm, as a distance
 in the current user coordinate system. 

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> The total length of the path.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__getPointAtLength" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <b>getPointAtLength</b>(in float <var>distance</var>)</dt><dd class="operation"><div>
 Returns the (x,y) coordinate in user space which is <var>distance</var>
 units along the path, utilizing the user agent's distance-along-a-path
 algorithm. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>distance</var></div> <div> The distance along the path, relative to the start of
   the path, as a distance in the current user coordinate system.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The returned point in user space.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__getPathSegAtLength" class="operation">unsigned long <b>getPathSegAtLength</b>(in float <var>distance</var>)</dt><dd class="operation"><div>
 Returns the index into <a class="idlattr" href="#paths-__svg__SVGAnimatedPathData__pathSegList">pathSegList</a> which is <var>distance</var>
 units along the path, utilizing the user agent's distance-along-a-path
 algorithm. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>distance</var></div> <div> The distance along the path, relative to the start of
   the path, as a distance in the current user coordinate system.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The index of the path segment, where the first path segment is
   number 0.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegClosePath" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegClosePath">SVGPathSegClosePath</a> <b>createSVGPathSegClosePath</b>()</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegClosePath">SVGPathSegClosePath</a> object.

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegClosePath">SVGPathSegClosePath</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegMovetoAbs" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegMovetoAbs">SVGPathSegMovetoAbs</a> <b>createSVGPathSegMovetoAbs</b>(in float <var>x</var>, in float <var>y</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegMovetoAbs">SVGPathSegMovetoAbs</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The absolute X coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>y</var></div> <div> The absolute Y coordinate for the end point of this path segment.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegMovetoAbs">SVGPathSegMovetoAbs</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegMovetoRel" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegMovetoRel">SVGPathSegMovetoRel</a> <b>createSVGPathSegMovetoRel</b>(in float <var>x</var>, in float <var>y</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegMovetoRel">SVGPathSegMovetoRel</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The relative X coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>y</var></div> <div> The relative Y coordinate for the end point of this path segment.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegMovetoRel">SVGPathSegMovetoRel</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegLinetoAbs" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoAbs">SVGPathSegLinetoAbs</a> <b>createSVGPathSegLinetoAbs</b>(in float <var>x</var>, in float <var>y</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoAbs">SVGPathSegLinetoAbs</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The absolute X coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>y</var></div> <div> The absolute Y coordinate for the end point of this path segment.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoAbs">SVGPathSegLinetoAbs</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegLinetoRel" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoRel">SVGPathSegLinetoRel</a> <b>createSVGPathSegLinetoRel</b>(in float <var>x</var>, in float <var>y</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoRel">SVGPathSegLinetoRel</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The relative X coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>y</var></div> <div> The relative Y coordinate for the end point of this path segment.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoRel">SVGPathSegLinetoRel</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegCurvetoCubicAbs" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicAbs">SVGPathSegCurvetoCubicAbs</a> <b>createSVGPathSegCurvetoCubicAbs</b>(in float <var>x</var>, in float <var>y</var>, in float <var>x1</var>, in float <var>y1</var>, in float <var>x2</var>, in float <var>y2</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicAbs">SVGPathSegCurvetoCubicAbs</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The absolute X coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>y</var></div> <div> The absolute Y coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>x1</var></div> <div> The absolute X coordinate for the first control point.
</div></li><li class="parameter"><div>float <var>y1</var></div> <div> The absolute Y coordinate for the first control point.
</div></li><li class="parameter"><div>float <var>x2</var></div> <div> The absolute X coordinate for the second control point.
</div></li><li class="parameter"><div>float <var>y2</var></div> <div> The absolute Y coordinate for the second control point.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicAbs">SVGPathSegCurvetoCubicAbs</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegCurvetoCubicRel" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicRel">SVGPathSegCurvetoCubicRel</a> <b>createSVGPathSegCurvetoCubicRel</b>(in float <var>x</var>, in float <var>y</var>, in float <var>x1</var>, in float <var>y1</var>, in float <var>x2</var>, in float <var>y2</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicRel">SVGPathSegCurvetoCubicRel</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The relative X coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>y</var></div> <div> The relative Y coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>x1</var></div> <div> The relative X coordinate for the first control point.
</div></li><li class="parameter"><div>float <var>y1</var></div> <div> The relative Y coordinate for the first control point.
</div></li><li class="parameter"><div>float <var>x2</var></div> <div> The relative X coordinate for the second control point.
</div></li><li class="parameter"><div>float <var>y2</var></div> <div> The relative Y coordinate for the second control point.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicRel">SVGPathSegCurvetoCubicRel</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegCurvetoQuadraticAbs" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticAbs">SVGPathSegCurvetoQuadraticAbs</a> <b>createSVGPathSegCurvetoQuadraticAbs</b>(in float <var>x</var>, in float <var>y</var>, in float <var>x1</var>, in float <var>y1</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticAbs">SVGPathSegCurvetoQuadraticAbs</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The absolute X coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>y</var></div> <div> The absolute Y coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>x1</var></div> <div> The absolute X coordinate for the first control point.
</div></li><li class="parameter"><div>float <var>y1</var></div> <div> The absolute Y coordinate for the first control point.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticAbs">SVGPathSegCurvetoQuadraticAbs</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegCurvetoQuadraticRel" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticRel">SVGPathSegCurvetoQuadraticRel</a> <b>createSVGPathSegCurvetoQuadraticRel</b>(in float <var>x</var>, in float <var>y</var>, in float <var>x1</var>, in float <var>y1</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticRel">SVGPathSegCurvetoQuadraticRel</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The relative X coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>y</var></div> <div> The relative Y coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>x1</var></div> <div> The relative X coordinate for the first control point.
</div></li><li class="parameter"><div>float <var>y1</var></div> <div> The relative Y coordinate for the first control point.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticRel">SVGPathSegCurvetoQuadraticRel</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegArcAbs" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegArcAbs">SVGPathSegArcAbs</a> <b>createSVGPathSegArcAbs</b>(in float <var>x</var>, in float <var>y</var>, in float <var>r1</var>, in float <var>r2</var>, in float <var>angle</var>, in boolean <var>largeArcFlag</var>, in boolean <var>sweepFlag</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegArcAbs">SVGPathSegArcAbs</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The absolute X coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>y</var></div> <div> The absolute Y coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>r1</var></div> <div> The x-axis radius for the ellipse (i.e., r1).
</div></li><li class="parameter"><div>float <var>r2</var></div> <div> The y-axis radius for the ellipse (i.e., r2).
</div></li><li class="parameter"><div>float <var>angle</var></div> <div> The rotation angle in degrees for the ellipse's x-axis relative to the x-axis of the user coordinate system.
</div></li><li class="parameter"><div>boolean <var>largeArcFlag</var></div> <div> The value of the large-arc-flag parameter.
</div></li><li class="parameter"><div>boolean <var>sweepFlag</var></div> <div> The value of the large-arc-flag parameter.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegArcAbs">SVGPathSegArcAbs</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegArcRel" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegArcRel">SVGPathSegArcRel</a> <b>createSVGPathSegArcRel</b>(in float <var>x</var>, in float <var>y</var>, in float <var>r1</var>, in float <var>r2</var>, in float <var>angle</var>, in boolean <var>largeArcFlag</var>, in boolean <var>sweepFlag</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegArcRel">SVGPathSegArcRel</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The relative X coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>y</var></div> <div> The relative Y coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>r1</var></div> <div> The x-axis radius for the ellipse (i.e., r1).
</div></li><li class="parameter"><div>float <var>r2</var></div> <div> The y-axis radius for the ellipse (i.e., r2).
</div></li><li class="parameter"><div>float <var>angle</var></div> <div> The rotation angle in degrees for the ellipse's x-axis relative to the x-axis of the user coordinate system.
</div></li><li class="parameter"><div>boolean <var>largeArcFlag</var></div> <div> The value of the large-arc-flag parameter.
</div></li><li class="parameter"><div>boolean <var>sweepFlag</var></div> <div> The value of the large-arc-flag parameter.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegArcRel">SVGPathSegArcRel</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegLinetoHorizontalAbs" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoHorizontalAbs">SVGPathSegLinetoHorizontalAbs</a> <b>createSVGPathSegLinetoHorizontalAbs</b>(in float <var>x</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoHorizontalAbs">SVGPathSegLinetoHorizontalAbs</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The absolute X coordinate for the end point of this path segment.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoHorizontalAbs">SVGPathSegLinetoHorizontalAbs</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegLinetoHorizontalRel" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoHorizontalRel">SVGPathSegLinetoHorizontalRel</a> <b>createSVGPathSegLinetoHorizontalRel</b>(in float <var>x</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoHorizontalRel">SVGPathSegLinetoHorizontalRel</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The relative X coordinate for the end point of this path segment.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoHorizontalRel">SVGPathSegLinetoHorizontalRel</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegLinetoVerticalAbs" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoVerticalAbs">SVGPathSegLinetoVerticalAbs</a> <b>createSVGPathSegLinetoVerticalAbs</b>(in float <var>y</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoVerticalAbs">SVGPathSegLinetoVerticalAbs</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>y</var></div> <div> The absolute Y coordinate for the end point of this path segment.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoVerticalAbs">SVGPathSegLinetoVerticalAbs</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegLinetoVerticalRel" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoVerticalRel">SVGPathSegLinetoVerticalRel</a> <b>createSVGPathSegLinetoVerticalRel</b>(in float <var>y</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoVerticalRel">SVGPathSegLinetoVerticalRel</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>y</var></div> <div> The relative Y coordinate for the end point of this path segment.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoVerticalRel">SVGPathSegLinetoVerticalRel</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegCurvetoCubicSmoothAbs" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicSmoothAbs">SVGPathSegCurvetoCubicSmoothAbs</a> <b>createSVGPathSegCurvetoCubicSmoothAbs</b>(in float <var>x</var>, in float <var>y</var>, in float <var>x2</var>, in float <var>y2</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicSmoothAbs">SVGPathSegCurvetoCubicSmoothAbs</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The absolute X coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>y</var></div> <div> The absolute Y coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>x2</var></div> <div> The absolute X coordinate for the second control point.
</div></li><li class="parameter"><div>float <var>y2</var></div> <div> The absolute Y coordinate for the second control point.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicSmoothAbs">SVGPathSegCurvetoCubicSmoothAbs</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegCurvetoCubicSmoothRel" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicSmoothRel">SVGPathSegCurvetoCubicSmoothRel</a> <b>createSVGPathSegCurvetoCubicSmoothRel</b>(in float <var>x</var>, in float <var>y</var>, in float <var>x2</var>, in float <var>y2</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicSmoothRel">SVGPathSegCurvetoCubicSmoothRel</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The relative X coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>y</var></div> <div> The relative Y coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>x2</var></div> <div> The relative X coordinate for the second control point.
</div></li><li class="parameter"><div>float <var>y2</var></div> <div> The relative Y coordinate for the second control point.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicSmoothRel">SVGPathSegCurvetoCubicSmoothRel</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegCurvetoQuadraticSmoothAbs" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticSmoothAbs">SVGPathSegCurvetoQuadraticSmoothAbs</a> <b>createSVGPathSegCurvetoQuadraticSmoothAbs</b>(in float <var>x</var>, in float <var>y</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticSmoothAbs">SVGPathSegCurvetoQuadraticSmoothAbs</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The absolute X coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>y</var></div> <div> The absolute Y coordinate for the end point of this path segment.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticSmoothAbs">SVGPathSegCurvetoQuadraticSmoothAbs</a> object.
</div></dd></dl></dd>
<dt id="paths-__svg__SVGPathElement__createSVGPathSegCurvetoQuadraticSmoothRel" class="operation"><a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticSmoothRel">SVGPathSegCurvetoQuadraticSmoothRel</a> <b>createSVGPathSegCurvetoQuadraticSmoothRel</b>(in float <var>x</var>, in float <var>y</var>)</dt><dd class="operation"><div>
 Returns a stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticSmoothRel">SVGPathSegCurvetoQuadraticSmoothRel</a> object.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>x</var></div> <div> The relative X coordinate for the end point of this path segment.
</div></li><li class="parameter"><div>float <var>y</var></div> <div> The relative Y coordinate for the end point of this path segment.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> A stand-alone, parentless <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticSmoothRel">SVGPathSegCurvetoQuadraticSmoothRel</a> object.
</div></dd></dl></dd></dl></dd></dl>


</div><hr class="chapter-divider" />
<div id="chapter-shapes">

<h1>9 Basic Shapes</h1><h2 id="shapes-toc">Contents</h2><ul class="toc">
<li><a href="#shapes-Introduction">9.1 Introduction</a></li>
<li><a href="#shapes-RectElement">9.2 The <span class="element-name">‘rect’</span> element</a></li>
<li><a href="#shapes-CircleElement">9.3 The <span class="element-name">‘circle’</span> element</a></li>
<li><a href="#shapes-EllipseElement">9.4 The <span class="element-name">‘ellipse’</span> element</a></li>
<li><a href="#shapes-LineElement">9.5 The <span class="element-name">‘line’</span> element</a></li>
<li><a href="#shapes-PolylineElement">9.6 The <span class="element-name">‘polyline’</span> element</a></li>
<li><a href="#shapes-PolygonElement">9.7 The <span class="element-name">‘polygon’</span> element</a><ul class="toc">
<li><a href="#shapes-PointsBNF">9.7.1 The grammar for points specifications in
<span class="element-name">‘polyline’</span> and
<span class="element-name">‘polygon’</span> elements</a></li></ul></li>
<li><a href="#shapes-DOMInterfaces">9.8 DOM interfaces</a><ul class="toc">
<li><a href="#shapes-InterfaceSVGRectElement">9.8.1 Interface SVGRectElement</a></li>
<li><a href="#shapes-InterfaceSVGCircleElement">9.8.2 Interface SVGCircleElement</a></li>
<li><a href="#shapes-InterfaceSVGEllipseElement">9.8.3 Interface SVGEllipseElement</a></li>
<li><a href="#shapes-InterfaceSVGLineElement">9.8.4 Interface SVGLineElement</a></li>
<li><a href="#shapes-InterfaceSVGAnimatedPoints">9.8.5 Interface SVGAnimatedPoints</a></li>
<li><a href="#shapes-InterfaceSVGPolylineElement">9.8.6 Interface SVGPolylineElement</a></li>
<li><a href="#shapes-InterfaceSVGPolygonElement">9.8.7 Interface SVGPolygonElement</a></li></ul></li></ul>

<h2 id="shapes-Introduction">9.1 Introduction</h2>

<p>SVG contains the following set of basic shape elements:</p>

<ul><li>rectangles (including optional rounded corners), created with the <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element,</li><li>circles, created with the <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a> element,</li><li>ellipses, created with the <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a> element,</li><li>straight lines, created with the <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a> element,</li><li>polylines, created with the <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> element, and</li><li>polygons, created with the <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a> element.</li></ul>

<p>Mathematically, these shape elements are equivalent to a
<a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element that would construct the same shape. The basic
shapes may be stroked, filled and used as clip paths. All of the
properties available for <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> elements also apply to the basic
shapes.</p>

<h2 id="shapes-RectElement">9.2 The <span class="element-name">‘rect’</span> element</h2>



<p>The <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element defines a rectangle which is axis-aligned
with the current <a href="#intro-TermUserCoordinateSystem">user
coordinate system</a>. Rounded rectangles can be achieved by setting
appropriate values for attributes <a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a> and <a href="#shapes-RectElementRYAttribute"><span class="attr-name">‘ry’</span></a>.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘rect’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermBasicShapeElement">Basic shape element</a>, <a href="#intro-TermGraphicsElement">graphics element</a>, <a href="#intro-TermShapeElement">shape element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></li><li><a href="#shapes-RectElementXAttribute"><span class="attr-name">‘x’</span></a></li><li><a href="#shapes-RectElementYAttribute"><span class="attr-name">‘y’</span></a></li><li><a href="#shapes-RectElementWidthAttribute"><span class="attr-name">‘width’</span></a></li><li><a href="#shapes-RectElementHeightAttribute"><span class="attr-name">‘height’</span></a></li><li><a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a></li><li><a href="#shapes-RectElementRYAttribute"><span class="attr-name">‘ry’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#shapes-InterfaceSVGRectElement">SVGRectElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="shapes-RectElementXAttribute"><span class="adef">x</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The x-axis coordinate of the side of the rectangle
        which has the smaller x-axis coordinate value in the
        current user coordinate system.<br />
         If the attribute is not specified, the effect is as if a
        value of "0" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="shapes-RectElementYAttribute"><span class="adef">y</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The y-axis coordinate of the side of the rectangle
        which has the smaller y-axis coordinate value in the
        current user coordinate system.<br />
         If the attribute is not specified, the effect is as if a
        value of "0" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="shapes-RectElementWidthAttribute"><span class="adef">width</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>The width of the rectangle.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables rendering of the element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="shapes-RectElementHeightAttribute"><span class="adef">height</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>The height of the rectangle.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables rendering of the element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="shapes-RectElementRXAttribute"><span class="adef">rx</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>For rounded rectangles, the x-axis radius of the
        ellipse used to round off the corners of the
        rectangle.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error
        processing</a>).<br />
         See the notes below about what happens if the attribute is
        not specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="shapes-RectElementRYAttribute"><span class="adef">ry</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>For rounded rectangles, the y-axis radius of the
        ellipse used to round off the corners of the
        rectangle.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error
        processing</a>).<br />
         See the notes below about what happens if the attribute is
        not specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>



<p>The values used for the x- and y-axis rounded corner radii are
determined implicitly if the <a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a> or <a href="#shapes-RectElementRYAttribute"><span class="attr-name">‘ry’</span></a> attributes (or both)
are not specified, or are specified but with invalid values.
The values are also subject to clamping so that the lengths of
the straight segments of the rectangle are never negative.  The
effective values for <a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a> and <a href="#shapes-RectElementRYAttribute"><span class="attr-name">‘ry’</span></a> are determined by following
these steps in order:</p>

<ol><li>Let <var>rx</var> and <var>ry</var> be length values.</li><li>If neither <a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a> nor <a href="#shapes-RectElementRYAttribute"><span class="attr-name">‘ry’</span></a> are properly specified, then set both
  <var>rx</var> and <var>ry</var> to 0.  (This will result in square corners.)</li><li>Otherwise, if a properly specified value is provided for <a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a>, but
  not for <a href="#shapes-RectElementRYAttribute"><span class="attr-name">‘ry’</span></a>, then set both <var>rx</var> and <var>ry</var> to the value of <a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a>.</li><li>Otherwise, if a properly specified value is provided for <a href="#shapes-RectElementRYAttribute"><span class="attr-name">‘ry’</span></a>, but
  not for <a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a>, then set both <var>rx</var> and <var>ry</var> to the value of <a href="#shapes-RectElementRYAttribute"><span class="attr-name">‘ry’</span></a>.</li><li>Otherwise, both <a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a> and <a href="#shapes-RectElementRYAttribute"><span class="attr-name">‘ry’</span></a> were specified properly.  Set <var>rx</var> to
  the value of <a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a> and <var>ry</var> to the value of <a href="#shapes-RectElementRYAttribute"><span class="attr-name">‘ry’</span></a>.</li><li>If <var>rx</var> is greater than half of <a href="#shapes-RectElementWidthAttribute"><span class="attr-name">‘width’</span></a>, then set
  <var>rx</var> to half of <a href="#shapes-RectElementWidthAttribute"><span class="attr-name">‘width’</span></a>.</li><li>If <var>ry</var> is greater than half of <a href="#shapes-RectElementHeightAttribute"><span class="attr-name">‘height’</span></a>, then set
  <var>ry</var> to half of <a href="#shapes-RectElementHeightAttribute"><span class="attr-name">‘height’</span></a>.</li><li>The effective values of <a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a> and <a href="#shapes-RectElementRYAttribute"><span class="attr-name">‘ry’</span></a> are <var>rx</var> and
  <var>ry</var>, respectively.</li></ol>

<p>Mathematically, a <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element can be mapped to an
equivalent <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element as follows: (Note: all coordinate and
length values are first converted into user space coordinates according
to <a href="#coords-Units">Units</a>.)</p>

<ul><li>perform an absolute <a href="#paths-PathDataMovetoCommands">moveto</a> operation to
  location (<em>x+rx</em>,<em>y</em>), where <em>x</em> is the value of
  the <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element's <a href="#shapes-RectElementXAttribute"><span class="attr-name">‘x’</span></a> attribute converted to user
  space, <em>rx</em> is the effective value of the <a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a> attribute
  converted to user space and <em>y</em> is the value of the <a href="#shapes-RectElementYAttribute"><span class="attr-name">‘y’</span></a>
  attribute converted to user space</li><li>perform an absolute horizontal <a href="#paths-PathDataLinetoCommands">lineto</a>
  operation to location (<em>x+width-rx</em>,<em>y</em>), where <em>width</em>
  is the <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element's <a href="#shapes-RectElementWidthAttribute"><span class="attr-name">‘width’</span></a> attribute converted to user
  space</li><li>perform an absolute <a href="#paths-PathDataEllipticalArcCommands">elliptical arc</a>
  operation to coordinate (<em>x+width</em>,<em>y+ry</em>), where the effective
  values for the <a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a> and <a href="#shapes-RectElementRYAttribute"><span class="attr-name">‘ry’</span></a> attributes on the <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>
  element converted to user space are used as the <em>rx</em> and <em>ry</em>
  attributes on the <a href="#paths-PathDataEllipticalArcCommands">elliptical arc</a>
  command, respectively, the <em>x-axis-rotation</em> is set to zero, the
  <em>large-arc-flag</em> is set to zero, and the <em>sweep-flag</em> is set
  to one</li><li>perform a absolute vertical <em>lineto</em> to location
  (<em>x+width</em>,<em>y+height-ry</em>), where <em>height</em> is the
  <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element's <a href="#shapes-RectElementHeightAttribute"><span class="attr-name">‘height’</span></a> attribute converted to user
  space</li><li>perform an absolute <a href="#paths-PathDataEllipticalArcCommands">elliptical arc</a>
  operation to coordinate (<em>x+width-rx</em>,<em>y+height</em>)</li><li>perform an absolute horizontal <em>lineto</em> to location
  (<em>x+rx</em>,<em>y+height</em>)</li><li>perform an absolute <a href="#paths-PathDataEllipticalArcCommands">elliptical arc</a>
  operation to coordinate (<em>x</em>,<em>y+height-ry</em>)</li><li>perform an absolute absolute vertical <em>lineto</em> to location
  (<em>x</em>,<em>y+ry</em>)</li><li>perform an absolute <a href="#paths-PathDataEllipticalArcCommands">elliptical arc</a>
  operation to coordinate (<em>x+rx</em>,<em>y</em>)</li></ul>

<p id="shapes-ExampleRect01"><span class="example-ref">Example rect01</span> shows a
rectangle with sharp corners. The <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element is filled with yellow
and stroked with navy.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="4cm" viewBox="0 0 1200 400"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example rect01 - rectangle with sharp corners&lt;/desc&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="1198" height="398"
        fill="none" stroke="blue" stroke-width="2"/&gt;

  &lt;rect x="400" y="100" width="400" height="200"
        fill="yellow" stroke="navy" stroke-width="10"  /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example rect01</caption><tr><td><img alt="Example rect01 — rectangle with sharp corners" src="images/shapes/rect01.png" /></td></tr></table><p class="view-as-svg"><a href="images/shapes/rect01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<p id="shapes-ExampleRect02"><span class="example-ref">Example rect02</span> shows
two rounded rectangles. The <a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a> specifies how to round the corners of
the rectangles. Note that since no value has been specified for the <a href="#shapes-RectElementRYAttribute"><span class="attr-name">‘ry’</span></a>
attribute, it will be assigned the same value as the <a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a> attribute.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="4cm" viewBox="0 0 1200 400"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example rect02 - rounded rectangles&lt;/desc&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="1198" height="398"
        fill="none" stroke="blue" stroke-width="2"/&gt;

  &lt;rect x="100" y="100" width="400" height="200" rx="50"
        fill="green" /&gt;

  &lt;g transform="translate(700 210) rotate(-30)"&gt;
    &lt;rect x="0" y="0" width="400" height="200" rx="50"
          fill="none" stroke="purple" stroke-width="30" /&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example rect02</caption><tr><td><img alt="Example rect02 — rounded rectangles expressed in user coordinates" src="images/shapes/rect02.png" /></td></tr></table><p class="view-as-svg"><a href="images/shapes/rect02.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h2 id="shapes-CircleElement">9.3 The <span class="element-name">‘circle’</span> element</h2>



<p>The <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a> element defines a circle based on a center point and a
radius.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘circle’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermBasicShapeElement">Basic shape element</a>, <a href="#intro-TermGraphicsElement">graphics element</a>, <a href="#intro-TermShapeElement">shape element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></li><li><a href="#shapes-CircleElementCXAttribute"><span class="attr-name">‘cx’</span></a></li><li><a href="#shapes-CircleElementCYAttribute"><span class="attr-name">‘cy’</span></a></li><li><a href="#shapes-CircleElementRAttribute"><span class="attr-name">‘r’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#shapes-InterfaceSVGCircleElement">SVGCircleElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="shapes-CircleElementCXAttribute"><span class="adef">cx</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The x-axis coordinate of the center of the
        circle.<br />
         If the attribute is not specified, the effect is as if a
        value of "0" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="shapes-CircleElementCYAttribute"><span class="adef">cy</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The y-axis coordinate of the center of the
        circle.<br />
         If the attribute is not specified, the effect is as if a
        value of "0" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="shapes-CircleElementRAttribute"><span class="adef">r</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>The radius of the circle.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables rendering of the element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>

<p>The arc of a <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a> element begins at the "3 o'clock" point
on the radius and progresses towards the "9 o'clock" point. The starting
point and direction of the arc are affected by the user space transform
in the same manner as the geometry of the element.</p>

<p id="shapes-ExampleCircle01"><span class="example-ref">Example
circle01</span> consists of a <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a> element that is filled
with red and stroked with blue.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="4cm" viewBox="0 0 1200 400"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example circle01 - circle filled with red and stroked with blue&lt;/desc&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="1198" height="398"
        fill="none" stroke="blue" stroke-width="2"/&gt;

  &lt;circle cx="600" cy="200" r="100"
        fill="red" stroke="blue" stroke-width="10"  /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example circle01</caption><tr><td><img alt="Example circle01 — circle filled with red and stroked with blue" src="images/shapes/circle01.png" /></td></tr></table><p class="view-as-svg"><a href="images/shapes/circle01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h2 id="shapes-EllipseElement">9.4 The <span class="element-name">‘ellipse’</span> element</h2>



<p>The <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a> element defines an ellipse which is axis-aligned
with the current <a href="#intro-TermUserCoordinateSystem">user
coordinate system</a> based on a center point and two radii.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘ellipse’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermBasicShapeElement">Basic shape element</a>, <a href="#intro-TermGraphicsElement">graphics element</a>, <a href="#intro-TermShapeElement">shape element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></li><li><a href="#shapes-EllipseElementCXAttribute"><span class="attr-name">‘cx’</span></a></li><li><a href="#shapes-EllipseElementCYAttribute"><span class="attr-name">‘cy’</span></a></li><li><a href="#shapes-EllipseElementRXAttribute"><span class="attr-name">‘rx’</span></a></li><li><a href="#shapes-EllipseElementRYAttribute"><span class="attr-name">‘ry’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#shapes-InterfaceSVGEllipseElement">SVGEllipseElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="shapes-EllipseElementCXAttribute"><span class="adef">cx</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The x-axis coordinate of the center of the
        ellipse.<br />
         If the attribute is not specified, the effect is as if a
        value of "0" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="shapes-EllipseElementCYAttribute"><span class="adef">cy</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The y-axis coordinate of the center of the
        ellipse.<br />
         If the attribute is not specified, the effect is as if a
        value of "0" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="shapes-EllipseElementRXAttribute"><span class="adef">rx</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>The x-axis radius of the ellipse.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables rendering of the element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="shapes-EllipseElementRYAttribute"><span class="adef">ry</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>The y-axis radius of the ellipse.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables rendering of the element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>

<p id="shapes-ExampleEllipse01">The arc of an <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a> element begins
at the "3 o'clock" point on the radius and progresses towards the "9
o'clock" point. The starting point and direction of the arc are affected
by the user space transform in the same manner as the geometry of the
element.</p>

<p><span class="example-ref">Example ellipse01</span> below specifies
the coordinates of the two ellipses in the user coordinate system
established by the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute on the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>
element and the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute on the <a href="#struct-GElement"><span class="element-name">‘g’</span></a> and
<a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a> elements. Both ellipses use the default values of
zero for the <a href="#shapes-EllipseElementCXAttribute"><span class="attr-name">‘cx’</span></a> and <a href="#shapes-EllipseElementCYAttribute"><span class="attr-name">‘cy’</span></a> attributes (the center of the
ellipse). The second ellipse is rotated.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="4cm" viewBox="0 0 1200 400"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example ellipse01 - examples of ellipses&lt;/desc&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="1198" height="398"
        fill="none" stroke="blue" stroke-width="2" /&gt;

  &lt;g transform="translate(300 200)"&gt;
    &lt;ellipse rx="250" ry="100"
          fill="red"  /&gt;
  &lt;/g&gt;

  &lt;ellipse transform="translate(900 200) rotate(-30)" 
        rx="250" ry="100"
        fill="none" stroke="blue" stroke-width="20"  /&gt;

&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example ellipse01</caption><tr><td><img alt="Example ellipse01 — ellipses expressed in user coordinates" src="images/shapes/ellipse01.png" /></td></tr></table><p class="view-as-svg"><a href="images/shapes/ellipse01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h2 id="shapes-LineElement">9.5 The <span class="element-name">‘line’</span> element</h2>



<p>The <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a> element defines a line segment that starts at one point
and ends at another.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘line’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermBasicShapeElement">Basic shape element</a>, <a href="#intro-TermGraphicsElement">graphics element</a>, <a href="#intro-TermShapeElement">shape element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></li><li><a href="#shapes-LineElementX1Attribute"><span class="attr-name">‘x1’</span></a></li><li><a href="#shapes-LineElementY1Attribute"><span class="attr-name">‘y1’</span></a></li><li><a href="#shapes-LineElementX2Attribute"><span class="attr-name">‘x2’</span></a></li><li><a href="#shapes-LineElementY2Attribute"><span class="attr-name">‘y2’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#shapes-InterfaceSVGLineElement">SVGLineElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="shapes-LineElementX1Attribute"><span class="adef">x1</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The x-axis coordinate of the start of the line.<br />
         If the attribute is not specified, the effect is as if a
        value of "0" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="shapes-LineElementY1Attribute"><span class="adef">y1</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The y-axis coordinate of the start of the line.<br />
         If the attribute is not specified, the effect is as if a
        value of "0" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="shapes-LineElementX2Attribute"><span class="adef">x2</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The x-axis coordinate of the end of the line.<br />
         If the attribute is not specified, the effect is as if a
        value of "0" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="shapes-LineElementY2Attribute"><span class="adef">y2</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The y-axis coordinate of the end of the line.<br />
         If the attribute is not specified, the effect is as if a
        value of "0" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>

<p>Mathematically, a <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a> element can be mapped to an
equivalent <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element as follows: (Note: all coordinate and
length values are first converted into user space coordinates according
to <a href="#coords-Units">Units</a>.)</p>

<ul><li>perform an absolute <a href="#paths-PathDataMovetoCommands">moveto</a>
  operation to absolute location (<em>x1</em>,<em>y1</em>), where <em>x1</em>
  and <em>y1</em> are the values of the <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a> element's <a href="#shapes-LineElementX1Attribute"><span class="attr-name">‘x1’</span></a> and
  <a href="#shapes-LineElementY1Attribute"><span class="attr-name">‘y1’</span></a> attributes converted to user space, respectively</li><li>perform an absolute <a href="#paths-PathDataLinetoCommands">lineto</a>
  operation to absolute location (<em>x2</em>,<em>y2</em>), where <em>x2</em>
  and <em>y2</em> are the values of the <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a> element's <a href="#shapes-LineElementX2Attribute"><span class="attr-name">‘x2’</span></a> and
  <a href="#shapes-LineElementY2Attribute"><span class="attr-name">‘y2’</span></a> attributes converted to user space, respectively</li></ul>

<p>Because <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a> elements are single lines and thus are geometrically
one-dimensional, they have no interior; thus, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a> elements are never
filled (see the <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> property).</p>

<p id="shapes-ExampleLine01"><span class="example-ref">Example line01</span> below
specifies the coordinates of the five lines in the user coordinate system
established by the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute on the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element. The
lines have different thicknesses.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="4cm" viewBox="0 0 1200 400"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example line01 - lines expressed in user coordinates&lt;/desc&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="1198" height="398"
        fill="none" stroke="blue" stroke-width="2" /&gt;

  &lt;g stroke="green" &gt;
    &lt;line x1="100" y1="300" x2="300" y2="100"
            stroke-width="5"  /&gt;
    &lt;line x1="300" y1="300" x2="500" y2="100"
            stroke-width="10"  /&gt;
    &lt;line x1="500" y1="300" x2="700" y2="100"
            stroke-width="15"  /&gt;
    &lt;line x1="700" y1="300" x2="900" y2="100"
            stroke-width="20"  /&gt;
    &lt;line x1="900" y1="300" x2="1100" y2="100"
            stroke-width="25"  /&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example line01</caption><tr><td><img alt="Example line01 — lines expressed in user coordinates" src="images/shapes/line01.png" /></td></tr></table><p class="view-as-svg"><a href="images/shapes/line01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h2 id="shapes-PolylineElement">9.6 The <span class="element-name">‘polyline’</span> element</h2>



<p>The <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> element defines a set of connected straight
line segments. Typically, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> elements define open
shapes.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘polyline’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermBasicShapeElement">Basic shape element</a>, <a href="#intro-TermGraphicsElement">graphics element</a>, <a href="#intro-TermShapeElement">shape element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></li><li><a href="#shapes-PolylineElementPointsAttribute"><span class="attr-name">‘points’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#shapes-InterfaceSVGPolylineElement">SVGPolylineElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="shapes-PolylineElementPointsAttribute"><span class="adef">points</span> = "<span class="attr-value"><a href="#shapes-PointsBNF">&lt;list-of-points&gt;</a></span>"</dt><dd>The points that make up the polyline. All coordinate
        values are in the user coordinate system.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>

<p>If an odd number of coordinates is provided, then the element is in
error, with the same user agent behavior as occurs with an incorrectly
specified <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element.</p>

<p>Mathematically, a <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> element can be mapped to an
equivalent <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element as follows:</p>

<ul><li>perform an absolute <a href="#paths-PathDataMovetoCommands">moveto</a>
  operation to the first coordinate pair in the list of points</li><li>for each subsequent coordinate pair, perform an absolute
  <a href="#paths-PathDataLinetoCommands">lineto</a> operation to that
  coordinate pair.</li></ul>

<p id="shapes-ExamplePolyline01"><span class="example-ref">Example polyline01</span>
below specifies a polyline in the user coordinate system established by the
<a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute on the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="4cm" viewBox="0 0 1200 400"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example polyline01 - increasingly larger bars&lt;/desc&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="1198" height="398"
        fill="none" stroke="blue" stroke-width="2" /&gt;

  &lt;polyline fill="none" stroke="blue" stroke-width="10" 
            points="50,375
                    150,375 150,325 250,325 250,375
                    350,375 350,250 450,250 450,375
                    550,375 550,175 650,175 650,375
                    750,375 750,100 850,100 850,375
                    950,375 950,25 1050,25 1050,375
                    1150,375" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example polyline01</caption><tr><td><img alt="Example polyline01 — increasingly larger bars" src="images/shapes/polyline01.png" /></td></tr></table><p class="view-as-svg"><a href="images/shapes/polyline01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h2 id="shapes-PolygonElement">9.7 The <span class="element-name">‘polygon’</span> element</h2>



<p>The <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a> element defines a closed shape consisting of a
set of connected straight line segments.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘polygon’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermBasicShapeElement">Basic shape element</a>, <a href="#intro-TermGraphicsElement">graphics element</a>, <a href="#intro-TermShapeElement">shape element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></li><li><a href="#shapes-PolygonElementPointsAttribute"><span class="attr-name">‘points’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#shapes-InterfaceSVGPolygonElement">SVGPolygonElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="shapes-PolygonElementPointsAttribute"><span class="adef">points</span> = "<span class="attr-value"><a href="#shapes-PointsBNF">&lt;list-of-points&gt;</a></span>"</dt><dd>The points that make up the polygon. All coordinate
        values are in the user coordinate system.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>

<p>If an odd number of coordinates is provided, then the element is in
error, with the same user agent behavior as occurs with an incorrectly
specified <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element.</p>

<p>Mathematically, a <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a> element can be mapped to an
equivalent <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element as follows:</p>

<ul><li>perform an absolute <a href="#paths-PathDataMovetoCommands">moveto</a>
  operation to the first coordinate pair in the list of points</li><li>for each subsequent coordinate pair, perform an absolute
  <a href="#paths-PathDataLinetoCommands">lineto</a> operation to that
  coordinate pair</li><li>perform a <a href="#paths-PathDataClosePathCommand">closepath</a>
  command</li></ul>

<p id="shapes-ExamplePolygon01"><span class="example-ref">Example
polygon01</span> below specifies two polygons (a star and a hexagon) in
the user coordinate system established by the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute
on the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="4cm" viewBox="0 0 1200 400"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example polygon01 - star and hexagon&lt;/desc&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="1198" height="398"
        fill="none" stroke="blue" stroke-width="2" /&gt;

  &lt;polygon fill="red" stroke="blue" stroke-width="10" 
            points="350,75  379,161 469,161 397,215
                    423,301 350,250 277,301 303,215
                    231,161 321,161" /&gt;
  &lt;polygon fill="lime" stroke="blue" stroke-width="10" 
            points="850,75  958,137.5 958,262.5
                    850,325 742,262.6 742,137.5" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example polygon01</caption><tr><td><img alt="Example polygon01 — star and hexagon" src="images/shapes/polygon01.png" /></td></tr></table><p class="view-as-svg"><a href="images/shapes/polygon01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h3 id="shapes-PointsBNF">9.7.1 The grammar for points specifications in
<span class="element-name">‘polyline’</span> and
<span class="element-name">‘polygon’</span> elements</h3>

<p>The following is the Extended Backus-Naur Form (EBNF) for points specifications
in <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> and <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a> elements. The following
notation is used:</p>

<ul><li>*: 0 or more</li><li>+: 1 or more</li><li>?: 0 or 1</li><li>(): grouping</li><li>|: separates alternatives</li><li>double quotes surround literals</li></ul>

<pre>
list-of-points:
    wsp* coordinate-pairs? wsp*
coordinate-pairs:
    coordinate-pair
    | coordinate-pair comma-wsp coordinate-pairs
coordinate-pair:
    coordinate comma-wsp coordinate
    | coordinate negative-coordinate
coordinate:
    number
number:
    sign? integer-constant
    | sign? floating-point-constant
negative-coordinate:
    "-" integer-constant
    | "-" floating-point-constant
comma-wsp:
    (wsp+ comma? wsp*) | (comma wsp*)
comma:
    ","
integer-constant:
    digit-sequence
floating-point-constant:
    fractional-constant exponent?
    | digit-sequence exponent
fractional-constant:
    digit-sequence? "." digit-sequence
    | digit-sequence "."
exponent:
    ( "e" | "E" ) sign? digit-sequence
sign:
    "+" | "-"
digit-sequence:
    digit
    | digit digit-sequence
digit:
    "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
wsp:
    (#x20 | #x9 | #xD | #xA)+
</pre>

<h2 id="shapes-DOMInterfaces">9.8 DOM interfaces</h2>

<h3 id="shapes-InterfaceSVGRectElement">9.8.1 Interface SVGRectElement</h3>



 The <a class="idlinterface" href="#shapes-InterfaceSVGRectElement">SVGRectElement</a> interface corresponds to the <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>
 element.
<pre class="idl">interface <b>SVGRectElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGRectElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGRectElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGRectElement__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGRectElement__height">height</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGRectElement__rx">rx</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGRectElement__ry">ry</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="shapes-__svg__SVGRectElement__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-RectElementXAttribute"><span class="attr-name">‘x’</span></a> on the given <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element.
</div></dd>
<dt id="shapes-__svg__SVGRectElement__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-RectElementYAttribute"><span class="attr-name">‘y’</span></a> on the given <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element.
</div></dd>
<dt id="shapes-__svg__SVGRectElement__width" class="attribute"><b>width</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-RectElementWidthAttribute"><span class="attr-name">‘width’</span></a> on the given <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element.
</div></dd>
<dt id="shapes-__svg__SVGRectElement__height" class="attribute"><b>height</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-RectElementHeightAttribute"><span class="attr-name">‘height’</span></a> on the given <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element.
</div></dd>
<dt id="shapes-__svg__SVGRectElement__rx" class="attribute"><b>rx</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a> on the given <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element.
</div></dd>
<dt id="shapes-__svg__SVGRectElement__ry" class="attribute"><b>ry</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-RectElementRYAttribute"><span class="attr-name">‘ry’</span></a> on the given <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element.
</div></dd></dl></dd></dl>


<h3 id="shapes-InterfaceSVGCircleElement">9.8.2 Interface SVGCircleElement</h3>



 The <a class="idlinterface" href="#shapes-InterfaceSVGCircleElement">SVGCircleElement</a> interface corresponds to the <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>
 element.
<pre class="idl">interface <b>SVGCircleElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGCircleElement__cx">cx</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGCircleElement__cy">cy</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGCircleElement__r">r</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="shapes-__svg__SVGCircleElement__cx" class="attribute first-child"><b>cx</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-CircleElementCXAttribute"><span class="attr-name">‘cx’</span></a> on the given <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a> element.
</div></dd>
<dt id="shapes-__svg__SVGCircleElement__cy" class="attribute"><b>cy</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-CircleElementCYAttribute"><span class="attr-name">‘cy’</span></a> on the given <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a> element.
</div></dd>
<dt id="shapes-__svg__SVGCircleElement__r" class="attribute"><b>r</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-CircleElementRAttribute"><span class="attr-name">‘r’</span></a> on the given <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a> element.
</div></dd></dl></dd></dl>


<h3 id="shapes-InterfaceSVGEllipseElement">9.8.3 Interface SVGEllipseElement</h3>



 The <a class="idlinterface" href="#shapes-InterfaceSVGEllipseElement">SVGEllipseElement</a> interface corresponds to the <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>
 element.
<pre class="idl">interface <b>SVGEllipseElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGEllipseElement__cx">cx</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGEllipseElement__cy">cy</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGEllipseElement__rx">rx</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGEllipseElement__ry">ry</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="shapes-__svg__SVGEllipseElement__cx" class="attribute first-child"><b>cx</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-EllipseElementCXAttribute"><span class="attr-name">‘cx’</span></a> on the given <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a> element.
</div></dd>
<dt id="shapes-__svg__SVGEllipseElement__cy" class="attribute"><b>cy</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-EllipseElementCYAttribute"><span class="attr-name">‘cy’</span></a> on the given <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a> element.
</div></dd>
<dt id="shapes-__svg__SVGEllipseElement__rx" class="attribute"><b>rx</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-EllipseElementRXAttribute"><span class="attr-name">‘rx’</span></a> on the given <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a> element.
</div></dd>
<dt id="shapes-__svg__SVGEllipseElement__ry" class="attribute"><b>ry</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-EllipseElementRYAttribute"><span class="attr-name">‘ry’</span></a> on the given <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a> element.
</div></dd></dl></dd></dl>


<h3 id="shapes-InterfaceSVGLineElement">9.8.4 Interface SVGLineElement</h3>



 The <a class="idlinterface" href="#shapes-InterfaceSVGLineElement">SVGLineElement</a> interface corresponds to the <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>
 element.
<pre class="idl">interface <b>SVGLineElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGLineElement__x1">x1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGLineElement__y1">y1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGLineElement__x2">x2</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGLineElement__y2">y2</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="shapes-__svg__SVGLineElement__x1" class="attribute first-child"><b>x1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-LineElementX1Attribute"><span class="attr-name">‘x1’</span></a> on the given <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a> element.
</div></dd>
<dt id="shapes-__svg__SVGLineElement__y1" class="attribute"><b>y1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-LineElementY1Attribute"><span class="attr-name">‘y1’</span></a> on the given <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a> element.
</div></dd>
<dt id="shapes-__svg__SVGLineElement__x2" class="attribute"><b>x2</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-LineElementX2Attribute"><span class="attr-name">‘x2’</span></a> on the given <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a> element.
</div></dd>
<dt id="shapes-__svg__SVGLineElement__y2" class="attribute"><b>y2</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#shapes-LineElementY2Attribute"><span class="attr-name">‘y2’</span></a> on the given <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a> element.
</div></dd></dl></dd></dl>


<h3 id="shapes-InterfaceSVGAnimatedPoints">9.8.5 Interface SVGAnimatedPoints</h3>


 <p>The <a class="idlinterface" href="#shapes-InterfaceSVGAnimatedPoints">SVGAnimatedPoints</a> interface supports elements which have a
 <span class="attr-name">‘points’</span> attribute which holds a list of
 coordinate values and which support the ability to animate that
 attribute.</p>

 <p>Additionally, the <span class="attr-name">‘points’</span> attribute on
 the original element accessed via the XML DOM (e.g., using the
 <code>getAttribute()</code> method call) will reflect any changes made to
 <a class="idlattr" href="#shapes-__svg__SVGAnimatedPoints__points">points</a>.</p>
<pre class="idl">interface <b>SVGAnimatedPoints</b> {
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGPointList">SVGPointList</a> <a href="#shapes-__svg__SVGAnimatedPoints__points">points</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGPointList">SVGPointList</a> <a href="#shapes-__svg__SVGAnimatedPoints__animatedPoints">animatedPoints</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="shapes-__svg__SVGAnimatedPoints__points" class="attribute first-child"><b>points</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGPointList">SVGPointList</a>)</span></dt><dd class="attribute"><div>
 Provides access to the base (i.e., static) contents of the
 <span class="attr-name">‘points’</span> attribute.
</div></dd>
<dt id="shapes-__svg__SVGAnimatedPoints__animatedPoints" class="attribute"><b>animatedPoints</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGPointList">SVGPointList</a>)</span></dt><dd class="attribute"><div>
 Provides access to the current animated contents of the
 <span class="attr-name">‘points’</span> attribute. If the given attribute
 or property is being animated, contains the current animated value of
 the attribute or property. If the given attribute or property is not
 currently being animated, contains the same value as <a class="idlattr" href="#shapes-__svg__SVGAnimatedPoints__points">points</a>.
</div></dd></dl></dd></dl>

<h3 id="shapes-InterfaceSVGPolylineElement">9.8.6 Interface SVGPolylineElement</h3>



 The <a class="idlinterface" href="#shapes-InterfaceSVGPolylineElement">SVGPolylineElement</a> interface corresponds to the <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>
 element.
<pre class="idl">interface <b>SVGPolylineElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a>,
                               <a class="idlinterface" href="#shapes-InterfaceSVGAnimatedPoints">SVGAnimatedPoints</a> {
};</pre>


<h3 id="shapes-InterfaceSVGPolygonElement">9.8.7 Interface SVGPolygonElement</h3>



 The <a class="idlinterface" href="#shapes-InterfaceSVGPolygonElement">SVGPolygonElement</a> interface corresponds to the <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>
 element.
<pre class="idl">interface <b>SVGPolygonElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a>,
                              <a class="idlinterface" href="#shapes-InterfaceSVGAnimatedPoints">SVGAnimatedPoints</a> {
};</pre>


</div><hr class="chapter-divider" />
<div id="chapter-text">

<h1>10 Text</h1><h2 id="text-toc">Contents</h2><ul class="toc">
<li><a href="#text-Introduction">10.1 Introduction</a></li>
<li><a href="#text-CharactersAndGlyphs">10.2 Characters and their corresponding glyphs</a></li>
<li><a href="#text-FontsTablesBaselines">10.3 Fonts, font tables and baselines</a></li>
<li><a href="#text-TextElement">10.4 The <span class="element-name">‘text’</span> element</a></li>
<li><a href="#text-TSpanElement">10.5 The <span class="element-name">‘tspan’</span> element</a></li>
<li><a href="#text-TRefElement">10.6 The <span class="element-name">‘tref’</span> element</a></li>
<li><a href="#text-TextLayout">10.7 Text layout</a><ul class="toc">
<li><a href="#text-TextLayoutIntroduction">10.7.1 Text layout introduction</a></li>
<li><a href="#text-SettingInlineProgressionDirection">10.7.2 Setting the inline-progression-direction</a></li>
<li><a href="#text-GlyphOrientation">10.7.3 Glyph orientation within a text run</a></li>
<li><a href="#text-RelationshipWithBiDirectionality">10.7.4 Relationship with bidirectionality</a></li></ul></li>
<li><a href="#text-TextRenderingOrder">10.8 Text rendering order</a></li>
<li><a href="#text-AlignmentProperties">10.9 Alignment properties</a><ul class="toc">
<li><a href="#text-TextAlignmentProperties">10.9.1 Text alignment properties</a></li>
<li><a href="#text-BaselineAlignmentProperties">10.9.2 Baseline alignment properties</a></li></ul></li>
<li><a href="#text-FontPropertiesUsedBySVG">10.10 Font selection properties</a></li>
<li><a href="#text-SpacingProperties">10.11 Spacing properties</a></li>
<li><a href="#text-TextDecorationProperties">10.12 Text decoration</a></li>
<li><a href="#text-TextOnAPath">10.13 Text on a path</a><ul class="toc">
<li><a href="#text-TextOnAPathIntroduction">10.13.1 Introduction to text on a path</a></li>
<li><a href="#text-TextPathElement">10.13.2 The <span class="element-name">‘textPath’</span> element</a></li>
<li><a href="#text-TextpathLayoutRules">10.13.3 Text on a path layout rules</a></li></ul></li>
<li><a href="#text-AlternateGlyphs">10.14 Alternate glyphs</a><ul class="toc">
<li><a href="#text-AltGlyphElement">10.14.1 The <span class="element-name">‘altGlyph’</span> element</a></li>
<li><a href="#text-AlternateGlyphDefinitions">10.14.2 The <span class="element-name">‘altGlyphDef’</span>,
<span class="element-name">‘altGlyphItem’</span> and
<span class="element-name">‘glyphRef’</span> elements</a></li></ul></li>
<li><a href="#text-WhiteSpace">10.15 White space handling</a></li>
<li><a href="#text-TextSelection">10.16 Text selection and clipboard operations</a></li>
<li><a href="#text-DOMInterfaces">10.17 DOM interfaces</a><ul class="toc">
<li><a href="#text-InterfaceSVGTextContentElement">10.17.1 Interface SVGTextContentElement</a></li>
<li><a href="#text-InterfaceSVGTextPositioningElement">10.17.2 Interface SVGTextPositioningElement</a></li>
<li><a href="#text-InterfaceSVGTextElement">10.17.3 Interface SVGTextElement</a></li>
<li><a href="#text-InterfaceSVGTSpanElement">10.17.4 Interface SVGTSpanElement</a></li>
<li><a href="#text-InterfaceSVGTRefElement">10.17.5 Interface SVGTRefElement</a></li>
<li><a href="#text-InterfaceSVGTextPathElement">10.17.6 Interface SVGTextPathElement</a></li>
<li><a href="#text-InterfaceSVGAltGlyphElement">10.17.7 Interface SVGAltGlyphElement</a></li>
<li><a href="#text-InterfaceSVGAltGlyphDefElement">10.17.8 Interface SVGAltGlyphDefElement</a></li>
<li><a href="#text-InterfaceSVGAltGlyphItemElement">10.17.9 Interface SVGAltGlyphItemElement</a></li>
<li><a href="#text-InterfaceSVGGlyphRefElement">10.17.10 Interface SVGGlyphRefElement</a></li></ul></li></ul>

<h2 id="text-Introduction">10.1 Introduction</h2>

<p>Text that is to be rendered as part of an SVG document fragment is
specified using the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element. The characters to be drawn are
expressed as <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#syntax">XML character data</a>
([<a href="#refs-ref-XML10">XML10</a>], section 2.4)
inside the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element.</p>

<p>SVG's <a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements are rendered like other graphics elements.
Thus, <a href="#chapter-coords">coordinate system transformations</a>,
<a href="#chapter-painting">painting</a>, <a href="#chapter-masking">clipping</a> and
<a href="#chapter-masking">masking</a> features apply to <a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements in
the same way as they apply to <a href="#intro-TermShape">shapes</a> such as
<a href="#chapter-paths">paths</a> and <a href="#shapes-RectElement">rectangles</a>.</p>

<p>Each <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element causes a single string of text to be rendered.
SVG performs no automatic line breaking or word wrapping. To achieve the
effect of multiple lines of text, use one of the following methods:</p>

<ul><li>The author or authoring package needs to pre-compute the line breaks and
  use multiple <a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements (one for each line of text).</li><li>The author or authoring package needs to pre-compute the line breaks and
  use a single <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element with one or more <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> child
  elements with appropriate values for attributes <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a>,
  <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> and <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> to set new start positions for those characters
  which start new lines. (This approach allows user text selection across
  multiple lines of text -- see
  <a href="#text-TextSelection">Text selection and clipboard operations</a>.)</li><li>Express the text to be rendered in another XML namespace such as XHTML
  [<a href="#refs-ref-XHTML">XHTML</a>] embedded inline within a
  <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a> element.  (Note: the exact semantics of this approach
  are not completely defined at this time.)</li></ul>

<p>The text strings within <a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements can be rendered in a
straight line or rendered along the outline of a <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element.
SVG supports the following international text processing features for
both straight line text and text on a path:</p>

<ul><li>horizontal and vertical orientation of text</li><li>left-to-right or bidirectional text (i.e., languages
  which intermix right-to-left and left-to-right text, such as
  Arabic and Hebrew)</li><li>when <a href="#fonts-SVGFonts">SVG fonts</a> are
  used, automatic selection of the correct glyph corresponding
  to the current form for
  <a href="#fonts-GlyphElementArabicFormAttribute">Arabic</a>
  and <a href="#fonts-GlyphElementLangAttribute">Han</a>
  text</li></ul>

<p>(The layout rules for straight line text are described in
<a href="#text-TextLayout">Text layout</a>. The layout rules for text on a
path are described in <a href="#text-TextpathLayoutRules">Text on a path
layout rules</a>.)</p>

<p>Because SVG text is packaged as XML character data:</p>

<ul><li>Text data in SVG content is readily accessible to the visually impaired
  (see <a href="#chapter-access">Accessibility Support</a>)</li><li>In many viewing scenarios, the user will be able to search for and select
  text strings and copy selected text strings to the system clipboard (see
  <a href="#text-TextSelection">Text selection and clipboard operations</a>)</li><li>XML-compatible Web search engines will find text strings in SVG
  content with no additional effort over what they need to do to find
  text strings in other XML documents</li></ul>

<p>Multi-language SVG content is possible by <a href="#i18n-I18nTextSubstitution">substituting
different text strings based on the user's preferred language</a>.</p>

<p>For accessibility reasons, it is recommended that text which is
included in a document have appropriate semantic markup to indicate
its function. See <a href="#access-SVGAccessibilityGuidelines">SVG
accessibility guidelines</a> for more information.</p>

<h2 id="text-CharactersAndGlyphs">10.2 Characters and their corresponding glyphs</h2>

<p>In XML [<a href="http://www.w3.org/TR/2008/REC-xml-20081126/">XML10</a>], textual content
is defined in terms of a sequence of XML <span class="SVG-Term">characters</span>,
where each character is defined by a particular Unicode code point
[<a href="#refs-ref-UNICODE">UNICODE</a>].
Fonts, on the other hand, consist of a collection of
<span class="SVG-Term">glyphs</span> and other associated information, such as
<a href="#text-FontsTablesBaselines">font tables</a>. A glyph is a
presentable form of one or more characters (or a part of a character in some
cases). Each glyph consists of some sort of identifier (in some cases a string,
in other cases a number) along with drawing instructions for rendering that
particular glyph.</p>

    <p>In many cases, there is a one-to-one mapping of Unicode
    characters (i.e., Unicode code points) to glyphs in a font. For
    example, it is common for a font designed for Latin languages
    (where the term <em>Latin</em> is used for European languages
    such as English with alphabets similar to and/or derivative to
    the Latin language) to contain a single glyph for each of the
    standard ASCII characters (i.e., A-to-Z, a-to-z, 0-to-9, plus
    the various punctuation characters found in ASCII). Thus, in
    most situations, the string "XML", which consists of three
    Unicode characters, would be rendered by the three glyphs
    corresponding to "X", "M" and "L", respectively.</p>
    <p>In various other cases, however, there is not a strict
    one-to-one mapping of Unicode characters to glyphs. Some of the
    circumstances when the mapping is not one-to-one:</p>
    <ul><li>Ligatures - For best looking typesetting, it is often
      desirable that particular sequences of characters are
      rendered as a single glyph. An example is the word "office".
      Many fonts will define an "ffi" ligature. When the word
      "office" is rendered, sometimes the user agent will render
      the glyph for the "ffi" ligature instead of rendering
      distinct glyphs (i.e., "f", "f" and "i") for each of the
      three characters. Thus, for ligatures, multiple Unicode
      characters map to a single glyph. (Note that for proper
      rendering of some languages, ligatures are required for
      certain character combinations.)</li><li>Composite characters - In various situations, commonly
      used adornments such as diacritical marks will be stored once
      in a font as a particular glyph and then composed with one or
      more other glyphs to result in the desired character. For
      example, it is possible that a font engine might render the
      <span class="code-fragment">é</span> character by
      first rendering the glyph for <span class="code-fragment">e</span> and then rendering the glyph
      for <span class="code-fragment">´</span> (the accent
      mark) such that the accent mark will appear over the <span class="code-fragment">e</span>. In this situation, a single
      Unicode character maps to multiple glyphs.</li><li>Glyph substitution - Some typography systems examine the
      nature of the textual content and utilize different glyphs in
      different circumstances. For example, in Arabic, the same
      Unicode character might render as any of four different
      glyphs, depending on such factors as whether the character
      appears at the start, the end or the middle of a sequence of
      cursively joined characters. Different glyphs might be used
      for a punctuation character depending on
      inline-progression-direction (e.g., horizontal vs. vertical).
      In these situations, a single Unicode character might map to
      one of several alternative glyphs.</li><li>In some languages, particular sequences of characters
      will be converted into multiple glyphs such that parts of a
      particular character are in one glyph and the remainder of
      that character is in another glyph.</li><li>Alternative glyph specification - SVG contains a facility
      for the author to explicitly specify that a particular
      sequence of Unicode characters is to be rendered using a
      particular glyph. (See <a href="#text-AlternateGlyphs">Alternate glyphs</a>.) When
      this facility is used, multiple Unicode characters map to a
      single glyph.</li></ul>
    <p>In many situations, the algorithms for mapping from
    characters to glyphs are system-dependent, resulting in the
    possibility that the rendering of text might be (usually
    slightly) different when viewed in different user environments.
    If the author of SVG content requires precise selection of
    fonts and glyphs, then the recommendation is that the necessary
    fonts (potentially subsetted to include only the glyphs needed
    for the given document) be available either as <a href="#fonts-SVGFonts">SVG fonts</a> embedded within the
    SVG content or as <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#q1">WebFonts</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.1)
    posted at the same Web location as the SVG content.</p>
    <p>Throughout this chapter, the term <span class="SVG-Term">character</span> shall be equivalent to the
    definition of a character in XML [<a href="http://www.w3.org/TR/2008/REC-xml-20081126/">XML10</a>].</p>

<h2 id="text-FontsTablesBaselines">10.3 Fonts, font tables and baselines</h2>

    <p>A font consists of a collection of glyphs together with the
    information (the font tables) necessary to use those glyphs to
    present characters on some medium. The combination of the
    collection of glyphs and the font tables is called the <em>font
    data</em>. The font tables include the information necessary to
    map characters to glyphs, to determine the size of glyph areas
    and to position the glyph area. Each font table consists of one
    or more font characteristics, such as the font-weight and
    font-style.</p>
    <p>The geometric font characteristics are expressed in a
    coordinate system based on the EM box. (The EM is a relative
    measure of the height of the glyphs in the font; see <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#emsq">Coordinate units on the em square</a>;
    in [<a href="#refs-ref-CSS2">CSS2</a>], section 15.4.3.)
    The box 1 EM high and 1 EM wide is called the
    <em>design space</em>. This space is given a geometric
    coordinates by sub-dividing the EM into a number of <em>units
    per em</em>.</p>
    <p>Note: Units per em is a font characteristic. A typical value
    for units per em is 1000 or 2048.</p>
    <p>The coordinate space of the EM box is called the <em>design
    space coordinate system</em>. For scalable fonts, the curves
    and lines that are used to draw a glyph are represented using
    this coordinate system.</p>
    <p>Note: Most often, the (0,0) point in this coordinate system
    is positioned on the left edge of the EM box, but not at the
    bottom left corner. The Y coordinate of the bottom of a roman
    capital letter is usually zero. And the descenders on lowercase
    roman letters have negative coordinate values.</p>
    <p>SVG assumes that the font tables will provide at least three
    font characteristics: an ascent, a descent and a set of
    baseline-tables. The ascent is the distance to the top of the
    EM box from the (0,0) point of the font; the descent is the
    distance to the bottom of the EM box from the (0.0) point of
    the font. The baseline-table is explained below.</p>
    <p>Note: Within an OpenType font, for horizontal writing-modes,
    the ascent and descent are given by the sTypoAscender and
    sTypoDescender entries in the OS/2 table. For vertical
    writing-modes, the descent (the distance, in this case from the
    (0,0) point to the left edge of the glyph) is normally zero
    because the (0,0) point is on the left edge. The ascent for
    vertical writing-modes is either 1 em or is specified by the
    ideographic top baseline value in the OpenType Base table for
    vertical writing-modes.</p>
    <p>In horizontal writing-modes, the glyphs of a given script
    are positioned so that a particular point on each glyph, the
    <em><a href="#text-AlignmentPoint">alignment-point</a></em>, is
    aligned with the alignment-points of the other glyphs in that
    script. The glyphs of different scripts, for example, Western,
    Northern Indic and Far-Eastern scripts, are typically aligned
    at different points on the glyph. For example, Western glyphs
    are aligned on the bottoms of the capital letters, northern
    indic glyphs are aligned at the top of a horizontal stroke near
    the top of the glyphs and far-eastern glyphs are aligned either
    at the bottom or center of the glyph. Within a script and
    within a line of text having a single font-size, the sequence
    of alignment-points defines, in the inline-
    progression-direction, a geometric line called a
    <em>baseline</em>. Western and most other alphabetic and
    syllabic glyphs are aligned to an "alphabetic" baseline, the
    northern indic glyphs are aligned to a "hanging" baseline and
    the far-eastern glyphs are aligned to an "ideographic"
    baseline.</p>
    <p>A <em>baseline-table</em> specifies the position of one or
    more baselines in the design space coordinate system. The
    function of the baseline table is to facilitate the alignment
    of different scripts with respect to each other when they are
    mixed on the same text line. Because the desired relative
    alignments may depend on which script is dominant in a line (or
    block), there may be a different baseline table for each
    script. In addition, different alignment positions are needed
    for horizontal and vertical writing modes. Therefore, the font
    may have a set of baseline tables: typically, one or more for
    horizontal writing-modes and zero or more for vertical
    writing-modes.</p>
    <p>Note: Some fonts may not have values for the baseline
    tables. Heuristics are suggested for approximating the baseline
    tables when a given font does not supply baseline tables.</p>
    <p>SVG further assumes that for each glyph in the font data for
    a font, there are two width values, two alignment-baselines and
    two alignment-points, one each for horizontal writing-modes and
    the other for vertical writing-modes. (Even though it is
    specified as a width, for vertical writing-modes the width is
    used in the vertical direction.) The script to which a glyph
    belongs determines an alignment-baseline to which the glyph is
    to be aligned. The <a href="#text-InlineProgressionDirection">inline-progression-direction</a>
    position of the alignment-point is on the start-edge of the
    glyph.</p>
    <p>Properties related to baselines are described below under <a href="#text-BaselineAlignmentProperties">Baseline alignment
    properties</a>.</p>
    <p>In addition to the font characteristics required above, a
    font may also supply substitution and positioning tables that
    can be used by a formatter to re-order, combine and position a
    sequence of glyphs to make one or more composite glyphs. The
    combination may be as simple as a ligature, or as complex as an
    indic syllable which combines, usually with some re-ordering,
    multiple consonants and vowel glyphs.</p>

<h2 id="text-TextElement">10.4 The <span class="element-name">‘text’</span> element</h2>



<p>The <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element defines
a graphics element consisting of text. The XML
character data within the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element, along with relevant attributes
and properties and character-to-glyph mapping tables within
the font itself, define the glyphs to be rendered. (See
<a href="#text-CharactersAndGlyphs">Characters and their corresponding
glyphs</a>.) The attributes and properties on the <a href="#text-TextElement"><span class="element-name">‘text’</span></a>
element indicate such things as the writing direction, font
specification and painting attributes which describe how exactly
to render the characters. Subsequent sections of this chapter
describe the relevant text-specific attributes and properties,
particular <a href="#text-TextLayout">text layout</a> and
<a href="#text-RelationshipWithBiDirectionality">bidirectionality</a>.</p>

<p>Since <a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements are
rendered using the same rendering methods as other graphics
elements, all of the same <a href="#chapter-coords">coordinate
system transformations</a>, <a href="#chapter-painting">painting</a>, <a href="#chapter-masking">clipping</a> and <a href="#chapter-masking">masking</a> features that apply to <a href="#intro-TermShape">shapes</a> such as <a href="#chapter-paths">paths</a> and <a href="#shapes-RectElement">rectangles</a> also apply to
<a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements.</p>

<p id="text-ObjectBoundingBoxUnitsTextObjects">It is possible to apply
a gradient, pattern, clipping path, mask or filter to text. When
one of these facilities is applied to text and keyword
<span class="attr-value">'objectBoundingBox'</span> is used (see
<a href="#coords-ObjectBoundingBox">Object bounding box units</a>)
to specify a graphical effect relative to the "object bounding box",
then the object bounding box units are computed relative to the entire
<a href="#text-TextElement"><span class="element-name">‘text’</span></a> element in all cases, even when different effects
are applied to different <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements within the same
<a href="#text-TextElement"><span class="element-name">‘text’</span></a> element.</p>

<p>The <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element renders its first glyph (after
<a href="#text-RelationshipWithBiDirectionality">bidirectionality</a>
reordering) at the initial <a href="#text-CurrentTextPosition">current
text position</a>, which is established by the <a href="#text-TextElementXAttribute"><span class="attr-name">‘x’</span></a> and <a href="#text-TextElementYAttribute"><span class="attr-name">‘y’</span></a>
attributes on the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element (with possible adjustments
due to the value of the <a href="#text-TextAnchorProperty"><span class="prop-name">‘text-anchor’</span></a> property, the presence
of a <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> element containing the first character,
and/or an <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> or
<a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> attributes on a <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> or
<a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element which contains the first character). After
the glyph(s) corresponding to the given character is(are) rendered, the
current text position is updated for the next character. In the simplest
case, the new current text position is the previous current text
position plus the glyphs' advance value (horizontal or vertical). See
<a href="#text-TextLayout">text layout</a> for a description of glyph
placement and glyph advance.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘text’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermGraphicsElement">Graphics element</a>, <a href="#intro-TermTextContentElement">text content element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#intro-TermTextContentChildElement">text content child elements</a><span class="expanding"> — <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a></span></li><li><a href="#linking-AElement"><span class="element-name">‘a’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></li><li><a href="#text-TextElementLengthAdjustAttribute"><span class="attr-name">‘lengthAdjust’</span></a></li><li><a href="#text-TextElementXAttribute"><span class="attr-name">‘x’</span></a></li><li><a href="#text-TextElementYAttribute"><span class="attr-name">‘y’</span></a></li><li><a href="#text-TextElementDXAttribute"><span class="attr-name">‘dx’</span></a></li><li><a href="#text-TextElementDYAttribute"><span class="attr-name">‘dy’</span></a></li><li><a href="#text-TextElementRotateAttribute"><span class="attr-name">‘rotate’</span></a></li><li><a href="#text-TextElementTextLengthAttribute"><span class="attr-name">‘textLength’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#text-InterfaceSVGTextElement">SVGTextElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="text-TextElementXAttribute"><span class="adef">x</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinates">&lt;list-of-coordinates&gt;</a></span>"</dt><dd>If a single <a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a>
        is provided, then the value represents the new absolute X
        coordinate for the <a href="#text-CurrentTextPosition">current text
        position</a> for rendering the glyphs that correspond to
        the first character within this element or any of its
        descendants.<br />
         If a comma- or space-separated list of <var>n</var> <a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a>s
        is provided, then the values represent new absolute X
        coordinates for the <a href="#text-CurrentTextPosition">current text
        position</a> for rendering the glyphs corresponding to each
        of the first <var>n</var> characters within this element or
        any of its descendants.<br />
         For additional processing rules, refer to the description
        of the <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a> attribute on the <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element.<br />
         If the attribute is not specified, the effect is as if a
        value of "0" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="text-TextElementYAttribute"><span class="adef">y</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinates">&lt;list-of-coordinates&gt;</a></span>"</dt><dd>The corresponding list of absolute Y coordinates for
        the glyphs corresponding to the characters within this
        element. The processing rules for the <a href="#text-TextElementYAttribute"><span class="attr-name">‘y’</span></a> attribute parallel the
        processing rules for the <a href="#text-TextElementXAttribute"><span class="attr-name">‘x’</span></a> attribute.<br />
         If the attribute is not specified, the effect is as if a
        value of "0" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="text-TextElementDXAttribute"><span class="adef">dx</span> = "<span class="attr-value"><a href="#types-DataTypeLengths">&lt;list-of-lengths&gt;</a></span>"</dt><dd>Shifts in the <a href="#text-CurrentTextPosition">current text
        position</a> along the x-axis for the characters within
        this element or any of its descendants.<br />
        Refer to the description of the <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> attribute on the
        <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element.<br />
        If the attribute is not specified on this element or any
        of its descendants, no supplemental shifts along the x-axis
        will occur.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="text-TextElementDYAttribute"><span class="adef">dy</span> = "<span class="attr-value"><a href="#types-DataTypeLengths">&lt;list-of-lengths&gt;</a></span>"</dt><dd>Shifts in the <a href="#text-CurrentTextPosition">current text
        position</a> along the y-axis for the characters within
        this element or any of its descendants.<br />
         Refer to the description of the <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> attribute on the
        <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element.<br />
         If the attribute is not specified on this element or any
        of its descendants, no supplemental shifts along the y-axis
        will occur.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="text-TextElementRotateAttribute"><span class="adef">rotate</span> = "<span class="attr-value"><a href="#types-DataTypeNumbers">&lt;list-of-numbers&gt;</a></span>"</dt><dd>The supplemental rotation about the <a href="#text-CurrentTextPosition">current text
        position</a> that will be applied to all of the glyphs
        corresponding to each character within this element.<br />
         Refer to the description of the <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> attribute on the
        <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element.<br />
         If the attribute is not specified on this element or any
        of its descendants, no supplemental rotations will
        occur.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes
        (non-additive).</span></dd><dt id="text-TextElementTextLengthAttribute"><span class="adef">textLength</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>The author's computation of the total sum of all of the
        advance values that correspond to character data within
        this element, including the advance value on the glyph
        (horizontal or vertical), the effect of properties
        <a href="#text-KerningProperty"><span class="prop-name">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="prop-name">‘letter-spacing’</span></a> and <a href="#text-WordSpacingProperty"><span class="prop-name">‘word-spacing’</span></a>
        and adjustments due to attributes <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> and
        <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> on <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements. This
        value is used to calibrate the user agent's own
        calculations with that of the author.<br />
         The purpose of this attribute is to allow the author to
        achieve exact alignment, in visual rendering order after
        any <a href="#text-RelationshipWithBiDirectionality">bidirectional
        reordering</a>, for the first and last rendered glyphs that
        correspond to this element; thus, for the last rendered
        character (in visual rendering order after any <a href="#text-RelationshipWithBiDirectionality">bidirectional
        reordering</a>), any supplemental inter-character spacing
        beyond normal glyph advances are ignored (in most cases)
        when the user agent determines the appropriate amount to
        expand/compress the text string to fit within a length of
        <a href="#text-TextElementTextLengthAttribute"><span class="attr-name">‘textLength’</span></a>.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error
        processing</a>).<br />
         If the attribute is not specified, the effect is as if the
        author's computation exactly matched the value calculated
        by the user agent; thus, no advance adjustments are
        made.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="text-TextElementLengthAdjustAttribute"><span class="adef">lengthAdjust</span> = "<span class="attr-value">spacing|spacingAndGlyphs</span>"</dt><dd>Indicates the type of adjustments which the user agent
        shall make to make the rendered length of the text match
        the value specified on the <a href="#text-TextElementTextLengthAttribute"><span class="attr-name">‘textLength’</span></a> attribute.<br />
         <span class="attr-value">'spacing'</span> indicates that
        only the advance values are adjusted. The glyphs themselves
        are not stretched or compressed.<br />
         <span class="attr-value">'spacingAndGlyphs'</span> indicates
        that the advance values are adjusted and the glyphs
        themselves stretched or compressed in one axis (i.e., a
        direction parallel to the
        inline-progression-direction).<br />
         The user agent is required to achieve correct start and
        end positions for the text strings, but the locations of
        intermediate glyphs are not predictable because user agents
        might employ advanced algorithms to stretch or compress
        text strings in order to balance correct start and end
        positioning with optimal typography.<br />
         Note that, for a text string that contains <var>n</var>
        characters, the adjustments to the advance values often
        occur only for <var>n</var>−1 characters (see description of
        attribute <a href="#text-TextElementTextLengthAttribute"><span class="attr-name">‘textLength’</span></a>), whereas
        stretching or compressing of the glyphs will be applied to
        all <var>n</var> characters.<br />
         If the attribute is not specified, the effect is as a
        value of <span class="attr-value">'spacing'</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>
    <p id="text-ExampleText01"><span class="example-ref">Example text01</span> below
    contains the text string "Hello, out there" which will be
    rendered onto the canvas using the Verdana font family with the
    glyphs filled with the color blue.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="10cm" height="3cm" viewBox="0 0 1000 300"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example text01 - 'Hello, out there' in blue&lt;/desc&gt;

  &lt;text x="250" y="150" 
        font-family="Verdana" font-size="55" fill="blue" &gt;
    Hello, out there
  &lt;/text&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="998" height="298"
        fill="none" stroke="blue" stroke-width="2" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example test01</caption><tr><td><img alt="Example test01 — 'Hello, out there' in blue" src="images/text/text01.png" /></td></tr></table><p class="view-as-svg"><a href="images/text/text01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h2 id="text-TSpanElement">10.5 The <span class="element-name">‘tspan’</span> element</h2>

<p>Within a <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element, text and font properties and the
<a href="#text-CurrentTextPosition">current text position</a> can be
adjusted with absolute or relative coordinate values by including a
<span class="element-name">‘tspan’</span> element.</p>



<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘tspan’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermTextContentElement">Text content element</a>, <a href="#intro-TermTextContentChildElement">text content child element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#linking-AElement"><span class="element-name">‘a’</span></a></li><li><a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a></li><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li><li><a href="#text-TRefElement"><span class="element-name">‘tref’</span></a></li><li><a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a></li><li><a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a></li><li><a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a></li><li><a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a></li><li><a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a></li><li><a href="#text-TSpanElementTextLengthAttribute"><span class="attr-name">‘textLength’</span></a></li><li><a href="#text-TextElementLengthAdjustAttribute"><span class="attr-name">‘lengthAdjust’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#text-InterfaceSVGTSpanElement">SVGTSpanElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="text-TSpanElementXAttribute"><span class="adef">x</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinates">&lt;list-of-coordinates&gt;</a></span>"</dt><dd>If a single <a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a>
        is provided, then the value represents the new absolute X
        coordinate for the <a href="#text-CurrentTextPosition">current text
        position</a> for rendering the glyphs that correspond to
        the first character within this element or any of its
        descendants.<br />
         If a comma- or space-separated list of <var>n</var> <a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a>s
        is provided, then the values represent new absolute X
        coordinates for the <a href="#text-CurrentTextPosition">current text
        position</a> for rendering the glyphs corresponding to each
        of the first <var>n</var> characters within this element or
        any of its descendants.<br />
         If more <a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a>s
        are provided than characters, then the extra <a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a>s
        will have no effect on glyph positioning.<br />
         If more characters exist than <a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a>s,
        then for each of these extra characters: (a) if an ancestor
        <a href="#text-TextElement"><span class="element-name">‘text’</span></a> or <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element specifies
        an absolute X coordinate for the given character via an
        <span class="attr-name">‘x’</span> attribute, then that
        absolute X coordinate is used as the starting X coordinate
        for that character (nearest ancestor has precedence), else
        (b) the starting X coordinate for rendering the glyphs
        corresponding to the given character is the X coordinate of
        the resulting <a href="#text-CurrentTextPosition">current text
        position</a> from the most recently rendered glyph for the
        current <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element.<br />
         If the attribute is not specified: (a) if an ancestor <a href="#text-TextElement"><span class="element-name">‘text’</span></a>
        or <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element specifies
        an absolute X coordinate for a given character via an
        <span class="attr-name">‘x’</span> attribute, then that absolute X
        coordinate is used (nearest ancestor has precedence), else
        (b) the starting X coordinate for rendering the glyphs
        corresponding to a given character is the X coordinate of
        the resulting <a href="#text-CurrentTextPosition">current text
        position</a> from the most recently rendered glyph for the
        current <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="text-TSpanElementYAttribute"><span class="adef">y</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinates">&lt;list-of-coordinates&gt;</a></span>"</dt><dd>The corresponding list of absolute Y coordinates for
        the glyphs corresponding to the characters within this
        element. The processing rules for the <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a> attribute parallel the
        processing rules for the <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a> attribute.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="text-TSpanElementDXAttribute"><span class="adef">dx</span> = "<span class="attr-value"><a href="#types-DataTypeLengths">&lt;list-of-lengths&gt;</a></span>"</dt><dd>If a single <a href="#types-DataTypeLength">&lt;length&gt;</a> is
        provided, this value represents the new relative X
        coordinate for the <a href="#text-CurrentTextPosition">current text
        position</a> for rendering the glyphs corresponding to the
        first character within this element or any of its
        descendants. The <a href="#text-CurrentTextPosition">current text
        position</a> is shifted along the x-axis of the current
        user coordinate system by <a href="#types-DataTypeLength">&lt;length&gt;</a> before
        the first character's glyphs are rendered.<br />
         If a comma- or space-separated list of <var>n</var> <a href="#types-DataTypeLength">&lt;length&gt;</a>s is
        provided, then the values represent incremental shifts
        along the x-axis for the <a href="#text-CurrentTextPosition">current text
        position</a> before rendering the glyphs corresponding to
        the first <var>n</var> characters within this element or any
        of its descendants. Thus, before the glyphs are rendered
        corresponding to each character, the <a href="#text-CurrentTextPosition">current text
        position</a> resulting from drawing the glyphs for the
        previous character within the current <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element is shifted
        along the X axis of the current user coordinate system by
        <a href="#types-DataTypeLength">&lt;length&gt;</a>.<br />
         If more <a href="#types-DataTypeLength">&lt;length&gt;</a>s are
        provided than characters, then any extra <a href="#types-DataTypeLength">&lt;length&gt;</a>s will
        have no effect on glyph positioning.<br />
         If more characters exist than <a href="#types-DataTypeLength">&lt;length&gt;</a>s, then
        for each of these extra characters: (a) if an ancestor
        <a href="#text-TextElement"><span class="element-name">‘text’</span></a> or <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element specifies a
        relative X coordinate for the given character via a
        <span class="attr-name">‘dx’</span> attribute, then the <a href="#text-CurrentTextPosition">current text
        position</a> is shifted along the x-axis of the current
        user coordinate system by that amount (nearest ancestor has
        precedence), else (b) no extra shift along the x-axis
        occurs.<br />
         If the attribute is not specified: (a) if an ancestor <a href="#text-TextElement"><span class="element-name">‘text’</span></a>
        or <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element specifies a
        relative X coordinate for a given character via a
        <span class="attr-name">‘dx’</span> attribute, then the <a href="#text-CurrentTextPosition">current text
        position</a> is shifted along the x-axis of the current
        user coordinate system by that amount (nearest ancestor has
        precedence), else (b) no extra shift along the x-axis
        occurs.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="text-TSpanElementDYAttribute"><span class="adef">dy</span> = "<span class="attr-value"><a href="#types-DataTypeLengths">&lt;list-of-lengths&gt;</a></span>"</dt><dd>The corresponding list of relative Y coordinates for
        the characters within the <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element. The processing
        rules for the <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> attribute
        parallel the processing rules for the
        <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> attribute.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="text-TSpanElementRotateAttribute"><span class="adef">rotate</span> = "<span class="attr-value"><a href="#types-DataTypeNumbers">&lt;list-of-numbers&gt;</a></span>"</dt><dd>The supplemental rotation about the <a href="#text-CurrentTextPosition">current text
        position</a> that will be applied to all of the glyphs
        corresponding to each character within this element.<br />
         If a comma- or space-separated list of <a href="#types-DataTypeNumber">&lt;number&gt;</a>s is
        provided, then the first <a href="#types-DataTypeNumber">&lt;number&gt;</a>
        represents the supplemental rotation for the glyphs
        corresponding to the first character within this element or
        any of its descendants, the second <a href="#types-DataTypeNumber">&lt;number&gt;</a>
        represents the supplemental rotation for the glyphs that
        correspond to the second character, and so on.<br />
         If more <a href="#types-DataTypeNumber">&lt;number&gt;</a>s are
        provided than there are characters, then the extra <a href="#types-DataTypeNumber">&lt;number&gt;</a>s will
        be ignored.<br />
         If more characters are provided than <a href="#types-DataTypeNumber">&lt;number&gt;</a>s, then
        for each of these extra characters the rotation value specified by the
        last number must be used.
        <br />
         If the attribute is not specified and if an ancestor <a href="#text-TextElement"><span class="element-name">‘text’</span></a> or
         <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element specifies a supplemental rotation for a given
         character via a <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> attribute, then the given supplemental
         rotation is applied to the given character (nearest ancestor has
         precedence). If there are more characters than <a href="#types-DataTypeNumber">&lt;number&gt;</a>s specified in the 
        ancestor's <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> attribute, then for each of these extra
        characters the rotation value specified by the last number must be used. 
        <br />
        This supplemental rotation has no impact on the rules by
        which <a href="#text-CurrentTextPosition">current text
        position</a> is modified as glyphs get rendered and is
        supplemental to any rotation due to <a href="#text-TextOnAPath">text on a path</a> and to
        <a href="#text-GlyphOrientationHorizontalProperty"><span class="prop-name">‘glyph-orientation-horizontal’</span></a>
        or <a href="#text-GlyphOrientationVerticalProperty"><span class="prop-name">‘glyph-orientation-vertical’</span></a>.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes
        (non-additive).</span>
        </dd><dt id="text-TSpanElementTextLengthAttribute"><span class="adef">textLength</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>The author's computation of the total sum of all of the
        advance values that correspond to character data within
        this element, including the advance value on the glyph
        (horizontal or vertical), the effect of properties <a href="#text-KerningProperty"><span class="prop-name">‘kerning’</span></a>,
        <a href="#text-LetterSpacingProperty"><span class="prop-name">‘letter-spacing’</span></a> and <a href="#text-WordSpacingProperty"><span class="prop-name">‘word-spacing’</span></a> and adjustments due
        to attributes <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> and <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> on this <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>
        element or any descendants. This value is used to calibrate the user
        agent's own calculations with that of the author.<br />
         The purpose of this attribute is to allow the author to
        achieve exact alignment, in visual rendering order after
        any <a href="#text-RelationshipWithBiDirectionality">bidirectional
        reordering</a>, for the first and last rendered glyphs that
        correspond to this element; thus, for the last rendered
        character (in visual rendering order after any <a href="#text-RelationshipWithBiDirectionality">bidirectional
        reordering</a>), any supplemental inter-character spacing
        beyond normal glyph advances are ignored (in most cases)
        when the user agent determines the appropriate amount to
        expand/compress the text string to fit within a length of
        <a href="#text-TSpanElementTextLengthAttribute"><span class="attr-name">‘textLength’</span></a>.<br />
         If attribute <a href="#text-TSpanElementTextLengthAttribute"><span class="attr-name">‘textLength’</span></a> is
        specified on a given element and also specified on an
        ancestor, the adjustments on all character data within this
        element are controlled by the value of <a href="#text-TSpanElementTextLengthAttribute"><span class="attr-name">‘textLength’</span></a> on this element
        exclusively, with the possible side-effect that the
        adjustment ratio for the contents of this element might be
        different than the adjustment ratio used for other content
        that shares the same ancestor. The user agent must assume
        that the total advance values for the other content within
        that ancestor is the difference between the advance value
        on that ancestor and the advance value for this
        element.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error
        processing</a>).<br />
         If the attribute is not specified anywhere within a
        <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element, the effect
        is as if the author's computation exactly matched the value
        calculated by the user agent; thus, no advance adjustments
        are made.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>
    <p>The <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a>, <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> and
    <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> on the <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element are useful in
    high-end typography scenarios where individual glyphs require
    exact placement. These attributes are useful for minor
    positioning adjustments between characters or for major
    positioning adjustments, such as moving the <a href="#text-CurrentTextPosition">current text position</a>
    to a new location to achieve the visual effect of a new line of
    text. Multi-line <a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements are possible by
    defining different <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>
    elements for each line of text, with attributes <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a>,
    <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> and/or <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> defining the position of each
    <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>. (An advantage of
    such an approach is that users will be able to perform
    multi-line <a href="#text-TextSelection">text
    selection</a>.)</p>
    <p>In situations where micro-level positioning adjustment are
    necessary for advanced typographic control, the SVG content
    designer needs to ensure that the necessary font will be
    available for all viewers of the document (e.g., package up the
    necessary font data in the form of an SVG font or an
    alternative WebFont
    format which is stored at the same Web site as the SVG content)
    and that the viewing software will process the font in the
    expected way (the capabilities, characteristics and font layout
    mechanisms vary greatly from system to system). If the SVG
    content contains <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> or
    <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> attribute values which are
    meant to correspond to a particular font processed by a
    particular set of viewing software and either of these
    requirements is not met, then the text might display with poor
    quality.</p>
    <p>The following additional rules apply to attributes <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>,
    <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a>, <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> and <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> when they
    contain a list of numbers:</p>
    <ul><li>When a single XML character maps to a single glyph - In
      this case, the <span class="code-fragment">i</span>-th value for the
      <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a>, <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> and <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a>
      attributes is applied to the glyph that corresponds to the <span class="code-fragment">i</span>-th character.</li><li>When a single XML character maps to multiple glyphs (e.g., when an
      accent glyph is placed on top of a base glyph) - In this case, the
      <span class="code-fragment">i</span>-th value for the <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>,
      <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> and <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> values are applied (i.e., the
      <a href="#text-CurrentTextPosition">current text position</a> is
      adjusted) before rendering the first glyph.  The rotation transformation
      corresponding to the <span class="code-fragment">i</span>-th <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a>
      value is applied to the glyphs and to the inter-glyph advance values
      corresponding to this character on a group basis (i.e., the rotation
      value creates a temporary new rotated coordinate system, and the glyphs
      orresponding to the character are rendered into this rotated coordinate
      system).</li><li>When multiple XML characters map to a single
      glyph (e.g., when a ligature is used) - Suppose
      that the <span class="code-fragment">i</span>-th
      and <span class="code-fragment">(i+1)</span>-th XML
      characters map to a single glyph. In this case, the <span class="code-fragment">i</span>-th value for the <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>,
      <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a>, <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> and <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a>
      attributes all apply when rendering the glyph. The <span class="code-fragment">(i+1)</span>-th values, however, for
      <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a> and <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> are ignored (exception:
      the final <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value in the list would still apply to
      subsequent characters), whereas the <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> and <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a>
      are applied to the subsequent XML character (i.e., the <span class="code-fragment">(i+2)</span>-th character), if one exists,
      by translating the <a href="#text-CurrentTextPosition">current
      text position</a> by the given amounts before rendering the first
      glyph associated with that character.</li><li>When there is a many-to-many mapping of characters to
      glyphs (e.g., when three characters map to two glyphs, such as
      when the first glyph expresses the first character and half
      of the second character, and the second glyph expresses the
      other half of the second character plus the third character)
      - Suppose that the <span class="code-fragment">i</span>-th,
      <span class="code-fragment">(i+1)</span>-th and <span class="code-fragment">(i+2)</span>-th XML characters map to two
      glyphs. In this case, the <span class="code-fragment">i</span>-th
      value for the <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a>
      and <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> values are applied (i.e., the <a href="#text-CurrentTextPosition">current text
      position</a> is adjusted) before rendering the first glyph.
      The rotation transformation corresponding to the <span class="code-fragment">i</span>-th <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value is
      applied to both the two glyphs and the glyph advance values
      for the first glyph on a group basis (i.e., the rotation value
      creates a temporary new rotated coordinate system, and the
      two glyphs are rendered into the temporary rotated coordinate
      system). The <span class="code-fragment">(i+1)</span>-th and
      <span class="code-fragment">(i+2)</span>-th values, however,
      for the <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a> and <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> attributes
      are not applied (exception: the final <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value in
      the list would still apply to subsequent characters), whereas
      the <span class="code-fragment">(i+1)</span>-th and <span class="code-fragment">(i+2)</span>-th values for the <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a>
      and <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> attributes are applied to the subsequent XML
      character (i.e., the <span class="code-fragment">(i+3)</span>-th
      character), if one exists, by translating the <a href="#text-CurrentTextPosition">current text position</a> by
      the given amounts before rendering the first glyph associated with
      that character.</li><li>Relationship to <a href="#text-RelationshipWithBiDirectionality">bidirectionality</a>
      - As described below in the discussion on
      <a href="#text-RelationshipWithBiDirectionality">bidirectionality</a>,
      text is laid out in a two-step process, where any
      bidirectional text is first re-ordered into a left-to-right
      string, and then text layout occurs with the re-ordered
      text string. Whenever the character data within a <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element is re-ordered,
      the corresponding elements within the <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a>,
      <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a>, <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> and <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> are also re-ordered
      to maintain the correspondence. For example, suppose that you have
      the following <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element:
<pre>
&lt;tspan dx="11 12 13 14 15 0 21 22 23 0 31 32 33 34 35 36"&gt;Latin and Hebrew&lt;/tspan&gt;
</pre>
      and that the word "Hebrew" will be drawn right-to-left. First, the
      character data and the corresponding values in the <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a>
      list will be reordered, such that the text string will be "Latin
      and werbeH" and the list of values for the <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> attribute
      will be "11 12 13 14 15 0 21 22 23 0 36 35 34 33 32 31". After
      this re-ordering, the glyphs corresponding to the characters will
      be positioned using standard left-to-right layout rules.</li></ul>
    <p>The following examples show basic use of the <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element.</p>
    <p id="text-ExampleTSpan01"><span class="example-ref">Example tspan01</span> uses a
    <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element to indicate
    that the word "not" is to use a bold font and have red
    fill.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="10cm" height="3cm" viewBox="0 0 1000 300"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example tspan01 - using tspan to change visual attributes&lt;/desc&gt;

  &lt;g font-family="Verdana" font-size="45" &gt;
    &lt;text x="200" y="150" fill="blue" &gt;
      You are
        &lt;tspan font-weight="bold" fill="red" &gt;not&lt;/tspan&gt;
      a banana.
    &lt;/text&gt;
  &lt;/g&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="998" height="298"
        fill="none" stroke="blue" stroke-width="2" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example tspan01</caption><tr><td><img alt="Example tspan01 — using tspan to change visual attributes" src="images/text/tspan01.png" /></td></tr></table><p class="view-as-svg"><a href="images/text/tspan01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p id="text-ExampleTSpan02"><span class="example-ref">Example tspan02</span>
    uses the <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> and <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> attributes on the <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>
    element to adjust the <a href="#text-CurrentTextPosition">current text position</a>
    horizontally and vertically for particular text strings within a
    <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="10cm" height="3cm" viewBox="0 0 1000 300"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example tspan02 - using tspan's dx and dy attributes 
        for incremental positioning adjustments&lt;/desc&gt;

  &lt;g font-family="Verdana" font-size="45" &gt;
    &lt;text x="200" y="150" fill="blue" &gt;
      But you
        &lt;tspan dx="2em" dy="-50" font-weight="bold" fill="red" &gt;
          are
        &lt;/tspan&gt;
        &lt;tspan dy="100"&gt;
           a peach!
        &lt;/tspan&gt;
    &lt;/text&gt;
  &lt;/g&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="998" height="298"
        fill="none" stroke="blue" stroke-width="2" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example tspan02</caption><tr><td><img alt="Example tspan02 — using tspan's dx and dy attributes for incremental positioning adjustments" src="images/text/tspan02.png" /></td></tr></table><p class="view-as-svg"><a href="images/text/tspan02.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p id="text-ExampleTSpan03"><span class="example-ref">Example tspan03</span>
    uses the <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a> and <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a> attributes on the
    <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element to establish a new absolute
    <a href="#text-CurrentTextPosition">current text position</a> for each
    glyph to be rendered. The example shows two lines of text within a single
    <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element. Because both lines of text are within the same
    <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element, the user will be able to select through both lines
    of text and copy the text to the system clipboard in user agents that
    support <a href="#text-TextSelection">text selection and clipboard operations</a>.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="10cm" height="3cm" viewBox="0 0 1000 300"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example tspan03 - using tspan's x and y attributes 
        for multiline text and precise glyph positioning&lt;/desc&gt;

  &lt;g font-family="Verdana" font-size="45" &gt;
    &lt;text fill="rgb(255,164,0)" &gt;
      &lt;tspan x="300 350 400 450 500 550 600 650" y="100"&gt;
        Cute and
      &lt;/tspan&gt;
      &lt;tspan x="375 425 475 525 575" y="200"&gt;
         fuzzy
      &lt;/tspan&gt;
    &lt;/text&gt;
  &lt;/g&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="998" height="298"
        fill="none" stroke="blue" stroke-width="2" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example tspan03</caption><tr><td><img alt="Example tspan03 — using tspan's x and y attributes for multiline text and precise glyph positioning" src="images/text/tspan03.png" /></td></tr></table><p class="view-as-svg"><a href="images/text/tspan03.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

        <p>
          <span class="example-ref">Example tspan04</span> uses the
          <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> attribute on the <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element to rotate the
          glyphs to be rendered. This example shows a single text string in a
          <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element that contains more characters than the number
          of values specified in the <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> attribute. In this case the
          last value specified in the <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> attribute of the
          <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> must be applied to the remaining characters in the
          string.
        </p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="10cm" height="3cm" viewBox="0 0 1000 300"
  xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;
    Example tspan04 - The number of rotate values is less than the number of
    characters in the string.
  &lt;/desc&gt;
  &lt;text font-family="Verdana" font-size="55" fill="blue" &gt;
    &lt;tspan x="250" y="150" rotate="-30,0,30"&gt;
      Hello, out there
    &lt;/tspan&gt;
  &lt;/text&gt;
  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="998" height="298"
  fill="none" stroke="blue" stroke-width="2" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example tspan04</caption><tr><td><img alt="Example tspan04 — simple rotation of characters in a tspan element" src="images/text/tspan04.png" /></td></tr></table><p class="view-as-svg"><a href="images/text/tspan04.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

        <p>
          <span class="example-ref">Example tspan05</span> specifies the
          <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> attribute on the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element and on all but
          one of the child <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements to rotate the glyphs to be
          rendered. The example demonstrates the propagation of the
          <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> attribute.
        </p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="100%" height="100%" viewBox="0 0 500 120"
  xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;
    Example tspan05 - propagation of rotation values to nested tspan elements.
  &lt;/desc&gt;
  &lt;text id="parent" font-family="Arial, sans-serif" font-size="32" fill="red" x="40" y="40"
    rotate="5,15,25,35,45,55"&gt;
    Not

    &lt;tspan id="child1" rotate="-10,-20,-30,-40" fill="orange"&gt;
      all characters

      &lt;tspan id="child2" rotate="70,60,50,40,30,20,10" fill="yellow"&gt;
        in
        
        &lt;tspan id="child3"&gt;
          the
        &lt;/tspan&gt;
      &lt;/tspan&gt;

      &lt;tspan id="child4" fill="orange" x="40" y="90"&gt;
        text
      &lt;/tspan&gt;

      have a
    &lt;/tspan&gt;

    &lt;tspan id="child5" rotate="-10" fill="blue"&gt;
      specified
    &lt;/tspan&gt;

    rotation
  &lt;/text&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="498" height="118" fill="none"
        stroke="blue" stroke-width="2" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example tspan05</caption><tr><td><img alt="Example tspan05 — propagation of rotation values to nested tspan elements" src="images/text/tspan05.png" /></td></tr></table><p class="view-as-svg"><a href="images/text/tspan05.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

        <p>
          Rotation of red text inside the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element:
        </p>
        <ul><li>
            The <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value will rotate the characters in the text
            <em>"Not "</em> by 5, 15, 25 and 35 degrees respectively.
          </li><li>
            A <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value is applied to the space that follows the
            text <em>"Not"</em>, to the space in between the text in the
            "child1" and "child5" <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements, and to the space
            before the text <em>"rotation"</em>.
          </li><li>
            The next current <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value specified is 45 followed
            by 55. The current <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value in the <a href="#text-TextElement"><span class="element-name">‘text’</span></a>
            element is incremented as subsequent characters in the text of the
            child <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements are processed.
          </li><li>
            The next immediate <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element specifies rotate values
            for the text, hence the current <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value will change to
            the next value in the list (but is not used) as each character is
            processed until the last value of 55 degrees is reached.
          </li><li>
            The last <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value of 55 degrees will be applied to all
            the characters in the text <em>"rotation"</em>.
          </li></ul>
        <p>
          Rotation of the orange text inside the "child1" <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>
          element:
        </p>
        <ul><li>
            The <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value will rotate the first 4 characters in the
            text <em>"all characters "</em> by -10, -20, -30 and -40
            respectively.
          </li><li>
            The last <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value of -40 becomes the current
            <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value and will be applied to all subsequent
            characters in the <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element and to any child
            <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements that do not specify <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a>
            values.
          </li><li>
            The "child4" <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element does not specify any
            <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> values and thus uses the current <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> of
            its ancestor ("child1" <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element). All the characters
            in the text <em>"text"</em> specified within the "child4"
            <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element will be rotated by -40 degrees.
          </li><li>
            The last <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value of -40 degrees will be applied to all
            the characters in the text <em>"have a"</em>.
          </li><li>
            A <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value is applied to the space in between the text
            in the "child2" and "child4" <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements, and to the
            space before the text <em>"have a"</em>.
          </li></ul>
        <p>
          Rotation of the yellow text inside the "child2" <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>
          element:
        </p>
        <ul><li>
            The <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value will rotate the characters in the (yellow)
            text <em>"in "</em> by 70, 60, and 50 degrees respectively.
          </li><li>
            A <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value is applied to the space that follows the
            text <em>"in"</em>.
          </li><li>
            There are more <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> values specified than characters,
            thus the additional <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> values will be applied to the
            "child3" <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element which does not specified any
            <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> values.
          </li><li>
            The characters in the text <em>"the"</em> specified within the
            "child3" <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element will be rotated 40, 30 and 20
            degrees respectively.
          </li></ul>
        <p>
          Rotation of the blue text inside the "child5" <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element:
        </p>
        <ul><li>
            The <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value will rotate all the characters in text
            <em>"specified"</em> by -10 degrees.
          </li><li>
            Only one <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> value is specified and is thus
            applied to all characters in the <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element.
          </li></ul>
        <p>
          The following diagram illustrates how the rotation values propagate to
          <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements nested withing a <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element
        </p>
        <img alt="Image that shows propagation of rotation values" src="images/text/tspan05-diagram.png" width="528" height="918" />



<h2 id="text-TRefElement">10.6 The <span class="element-name">‘tref’</span> element</h2>



    <p>The textual content for a <a href="#text-TextElement"><span class="element-name">‘text’</span></a> can be either character data
    directly embedded within the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element or the character data
    content of a referenced element, where the referencing is specified with a
    <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> element.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘tref’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermTextContentElement">Text content element</a>, <a href="#intro-TermTextContentChildElement">text content child element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#text-TRefElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#text-TRefElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#text-InterfaceSVGTRefElement">SVGTRefElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="text-TRefElementHrefAttribute"><span class="adef">xlink:href</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span>"</dt><dd>An <a href="#intro-TermIRIReference">IRI
        reference</a> to an element 
          whose character data content shall be used as
        character data for this <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>
    <p>All character data within the referenced element, including
    character data enclosed within additional markup, will be
    rendered.</p>
    <p>The <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a>, <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> and <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a>
    attributes have the same meanings as for the <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element. The
    attributes are applied as if the <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> element was replaced by a
    <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> with the referenced character data (stripped of all
    supplemental markup) embedded within the hypothetical <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element.</p>

    <p id="text-ExampleTRef01"><span class="example-ref">Example tref01</span> shows
    how to use character data from a different element as the character data
    for a given <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element. The first <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element (with
    <span class="attr-value">id="ReferencedText"</span>) will not draw because
    it is part of a <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a> element. The second <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element
    draws the string "Inline character data". The third <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element
    draws the string "Reference character data" because it includes a
    <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> element which is a reference to element "ReferencedText",
    and that element's character data is "Referenced character data".</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="10cm" height="3cm" viewBox="0 0 1000 300" version="1.1"
     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;defs&gt;
    &lt;text id="ReferencedText"&gt;
      Referenced character data
    &lt;/text&gt;
  &lt;/defs&gt;
  &lt;desc&gt;Example tref01 - inline vs reference text content&lt;/desc&gt;

  &lt;text x="100" y="100" font-size="45" fill="blue" &gt;
    Inline character data
  &lt;/text&gt;
  &lt;text x="100" y="200" font-size="45" fill="red" &gt;
    &lt;tref xlink:href="#ReferencedText"/&gt;
  &lt;/text&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="998" height="298"
        fill="none" stroke="blue" stroke-width="2" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example tref01</caption><tr><td><img alt="Example tref01 — inline vs reference text content" src="images/text/tref01.png" /></td></tr></table><p class="view-as-svg"><a href="images/text/tref01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h2 id="text-TextLayout">10.7 Text layout</h2>

<h3 id="text-TextLayoutIntroduction">10.7.1 Text layout introduction</h3>

    <p>This section describes the text layout features supported by
    SVG, which includes support for various international writing
    directions, such as left-to-right (e.g., Latin scripts) and
    bidirectional (e.g., Hebrew or Arabic) and vertical (e.g.,
    Asian scripts). The descriptions in this section assume
    straight line text (i.e., text that is either strictly
    horizontal or vertical with respect to the current user
    coordinate system). Subsequent sections describe the
    supplemental layout rules for <a href="#text-TextOnAPath">text on a path</a>.</p>
    <p>SVG does not provide for automatic line breaks or word
    wrapping, which makes internationalized text layout for SVG
    relatively simpler than it is for languages which support
    formatting of multi-line text blocks.</p>
    <p id="text-ReferenceOrientation">For each <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element, the SVG user
    agent determines the current <span class="SVG-Term">reference
    orientation</span>. For standard horizontal or vertical text
    (i.e., no text-on-a-path), the reference orientation is the
    vector pointing towards negative infinity in Y within the
    current user coordinate system. (Note: in the <a href="#coords-InitialCoordinateSystem">initial coordinate
    system</a>, the reference orientation is up.) For <a href="#text-TextOnAPath">text on a path</a>, the reference
    orientation is reset with each character.</p>
    <p id="text-InlineProgressionDirection">Based on the reference orientation and the value for
    property <a href="#text-WritingModeProperty"><span class="prop-name">‘writing-mode’</span></a>, the SVG user agent
    determines the current <span class="SVG-Term">inline-progression-direction</span>. For
    left-to-right text, the inline-progression-direction points 90
    degrees clockwise from the reference orientation vector. For
    right-to-left text, the inline progression points 90 degrees
    counter-clockwise from the reference orientation vector. For
    top-to-bottom text, the inline-progression-direction points 180
    degrees from the reference orientation vector.</p>
    <p id="text-BlockProgressionDirection">Based on the reference orientation and the value for
    property <a href="#text-WritingModeProperty"><span class="prop-name">‘writing-mode’</span></a>, the SVG user agent
    determines the current <span class="SVG-Term">block-progression-direction</span>. For
    left-to-right and right-to-left text, the
    block-progression-direction points 180 degrees from the
    reference orientation vector because the only available
    horizontal <a href="#text-WritingModeProperty"><span class="prop-name">‘writing-mode’</span></a>s are <span class="prop-value">lr-tb</span> and <span class="prop-value">rl-tb</span>. For top-to-bottom text, the
    block-progression-direction always points 90 degrees
    counter-clockwise from the reference orientation vector because
    the only available top-to-bottom <a href="#text-WritingModeProperty"><span class="prop-name">‘writing-mode’</span></a> is <span class="prop-value">tb-rl</span>.</p>
    <p id="text-ShiftDirection">The <span class="SVG-Term">shift direction</span> is the
    direction towards which the <a href="#text-FontsTablesBaselines">baseline table</a> moves
    due to positive values for property <a href="#text-BaselineShiftProperty"><span class="prop-name">‘baseline-shift’</span></a>. The shift
    direction is such that a positive value shifts the baseline
    table towards the topmost entry in the parent's <a href="#text-FontsTablesBaselines">baseline table</a>.</p>
    <p id="text-CurrentTextPosition">In processing a given <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element, the SVG user
    agent keeps track of the <span class="SVG-Term">current text
    position</span>. The initial current text position is
    established by the <a href="#text-TextElementXAttribute"><span class="attr-name">‘x’</span></a> and <a href="#text-TextElementYAttribute"><span class="attr-name">‘y’</span></a> attributes on the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element.</p>
    <p>The current text position is adjusted after each glyph to
    establish a new current text position at which the next glyph
    shall be rendered. The adjustment to the current text position
    is based on the current <a href="#text-SettingInlineProgressionDirection">inline-progression-direction</a>,
    glyph-specific advance values corresponding to the <a href="#text-GlyphOrientation">glyph orientation</a> of the
    glyph just rendered, kerning tables in the font and the current
    values of various attributes and properties, such as the <a href="#text-SpacingProperties">spacing properties</a> and
    any <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> and
    <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> attributes on <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>,
    <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> or <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> elements. If a glyph
    does not provide explicit advance values corresponding to the
    current <a href="#text-GlyphOrientation">glyph
    orientation</a>, then an appropriate approximation should be
    used. For vertical text, a suggested approximation is the sum
    of the ascent and descent values for the glyph. Another
    suggested approximation for an advance value for both
    horizontal and vertical text is the size of an <em>em</em> (see
    <a href="#fonts-FontFaceElementUnitsPerEmAttribute">units-per-em</a>).</p>
    <p id="text-AlignmentPoint">For each glyph to be rendered, the SVG user agent determines
    an appropriate <span class="SVG-Term">alignment-point</span> on
    the glyph which will be placed exactly at the current text
    position. The alignment-point is determined based on glyph cell
    metrics in the glyph itself, the current <a href="#text-SettingInlineProgressionDirection">inline-progression-direction</a>
    and the <a href="#text-GlyphOrientation">glyph
    orientation</a> relative to the inline-progression-direction.
    For most uses of Latin text (i.e.,
    <span class="attr-value">writing-mode:lr</span>,
    <span class="attr-value">text-anchor:start</span> and
    <span class="attr-value">alignment-baseline:baseline</span>)
    the alignment-point in the glyph will be the intersection of
    left edge of the glyph cell (or some other glyph-specific
    x-axis coordinate indicating a left-side origin point) with the
    Latin baseline of the glyph. For many cases with top-to-bottom
    vertical text layout, the reference point will be either a
    glyph-specific origin point based on the set of vertical
    baselines for the font or the intersection of the center of the
    glyph with its <em>top line</em> (see
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#tline">Top Baseline</a>;
    in [<a href="#refs-ref-CSS2">CSS2</a>], section 15.4.18). If a glyph does not
    provide explicit origin points corresponding to the current <a href="#text-GlyphOrientation">glyph orientation</a>, then
    an appropriate approximation should be used, such as the
    intersection of the left edge of the glyph with the appropriate
    horizontal baseline for the glyph or intersection of the top
    edge of the glyph with the appropriate vertical baseline. If
    baseline tables are not available, user agents should establish
    baseline tables that reflect common practice.</p>
    <p id="text-TextChunks">Adjustments to the current text position are either <span class="SVG-Term">absolute position adjustments</span> or <span class="SVG-Term">relative position adjustments</span>. An
    absolute position adjustment occurs in the following
    circumstances:</p>
    <ul><li>At the start of a <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element</li><li>At the start of each <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> element</li><li>For each character within a <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>,
      <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> and <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element which has an
      <span class="attr-name">‘x’</span> or <span class="attr-name">‘y’</span>
      attribute value assigned to it explicitly</li></ul>
    <p>All other position adjustments to the current text position
    are relative position adjustments.</p>
  <p id="text-TextChunk">Each absolute position adjustment defines a new <span class="SVG-Term">text chunk</span>. Absolute position
    adjustments impact text layout in the following ways:</p>
    <ul><li>Ligatures only occur when a set of characters which might
      map to a ligature are all in the same text chunk.</li><li>Each text chunk represents a separate block of text for
      alignment due to <a href="#text-TextAnchorProperty"><span class="prop-name">‘text-anchor’</span></a> property
      values.</li><li>Reordering of characters due to <a href="#text-RelationshipWithBiDirectionality">bidirectionality</a>
      only occurs within a text chunk. Reordering does <em>not</em>
      happen across text chunks.</li></ul>
    <p>The following additional rules apply to ligature
    formation:</p>
    <ul><li>As <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/text.html#spacing-props">defined in CSS2</a>,
      ([<a href="#refs-ref-CSS2">CSS2</a>], section 16.4),
      when the resultant space between two characters is not the
      same as the default space, user agents should not use
      ligatures; thus, if there are non-default values for
      properties <a href="#text-KerningProperty"><span class="prop-name">‘kerning’</span></a> or <a href="#text-LetterSpacingProperty"><span class="prop-name">‘letter-spacing’</span></a>, the user agent
      should not use ligatures.</li><li>Ligature formation should not be enabled for the glyphs
      corresponding to characters within different DOM text nodes;
      thus, characters separated by markup should not use
      ligatures.</li><li>As mentioned above, ligature formation should not be
      enabled for the glyphs corresponding to characters within
      different text chunks.</li></ul>

<h3 id="text-SettingInlineProgressionDirection">10.7.2 Setting the inline-progression-direction</h3>

    <p>The <a href="#text-WritingModeProperty"><span class="prop-name">‘writing-mode’</span></a> property specifies whether the initial
    inline-progression-direction for a <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element shall be
    left-to-right, right-to-left, or top-to-bottom. The <a href="#text-WritingModeProperty"><span class="prop-name">‘writing-mode’</span></a>
    property applies only to <a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements; the property is ignored for
    <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> and <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>
    sub-elements. (Note that the inline-progression-direction can change within
    a <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element due to the Unicode bidirectional algorithm and
    properties <a href="#text-DirectionProperty"><span class="prop-name">‘direction’</span></a> and <a href="#text-UnicodeBidiProperty"><span class="prop-name">‘unicode-bidi’</span></a>. For more on
    bidirectional text, see
    <a href="#text-RelationshipWithBiDirectionality">Relationship with bidirectionality</a>.)</p>

    <div class="propdef">
      <dl><dt id="text-WritingModeProperty"><span class="propdef-title prop-name">‘writing-mode’</span></dt><dd>
          <table summary="writing-mode property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>lr-tb | rl-tb | tb-rl | lr | rl | tb | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>lr-tb</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>no</td></tr></table>
        </dd></dl>
    </div>
    <dl><dt><span class="attr-value">lr-tb | lr</span></dt><dd>Sets the initial inline-progression-direction to
      left-to-right, as is common in most Latin-based documents.
      For most characters, the <em>current text position</em> is
      advanced from left to right after each glyph is rendered.
      (When the character data includes characters which are
      subject to the Unicode bidirectional algorithm, the text
      advance rules are more complex. See <a href="#text-RelationshipWithBiDirectionality">Relationship
      with bidirectionality</a>).</dd><dt><span class="attr-value">rl-tb | rl</span></dt><dd>Sets the initial inline-progression-direction to
      right-to-left, as is common in Arabic or Hebrew scripts. (See
      <a href="#text-RelationshipWithBiDirectionality">Relationship
      with bidirectionality</a>.)</dd><dt><span class="attr-value">tb-rl | tb</span></dt><dd>Sets the initial inline-progression-direction to
      top-to-bottom, as is common in some Asian scripts, such as
      Chinese and Japanese. Though hardly as frequent as
      horizontal, this type of vertical layout also occurs in Latin
      based documents, particularly in table column or row labels.
      In most cases, the vertical baselines running through the
      middle of each glyph are aligned.</dd></dl>

<h3 id="text-GlyphOrientation">10.7.3 Glyph orientation within a text run</h3>

    <p>In some cases, it is required to alter the orientation of a
    sequence of characters relative to the
    inline-progression-direction. The requirement is particularly
    applicable to vertical layouts of East Asian documents, where
    sometimes narrow-cell Latin text is to be displayed
    horizontally and other times vertically.</p>
    <p>Two properties control the glyph orientation relative to the
    reference orientation for each of the two possible
    inline-progression-directions. <a href="#text-GlyphOrientationVerticalProperty"><span class="prop-name">‘glyph-orientation-vertical’</span></a> controls
    glyph orientation when the inline-progression-direction is
    vertical. <a href="#text-GlyphOrientationHorizontalProperty"><span class="prop-name">‘glyph-orientation-horizontal’</span></a>
    controls glyph orientation when the
    inline-progression-direction is horizontal.</p>

    <div class="propdef">
      <dl><dt id="text-GlyphOrientationVerticalProperty"><span class="propdef-title prop-name">‘glyph-orientation-vertical’</span></dt><dd>
          <table summary="glyph-orientation-vertical property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>auto | <a href="#types-DataTypeAngle">&lt;angle&gt;</a> |
              <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>auto</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>no</td></tr></table>
        </dd></dl>
    </div>
    <dl><dt><span class="prop-value">auto</span></dt><dd>
        <ul><li>
            <p>Fullwidth ideographic and fullwidth Latin text will
            be set with a glyph-orientation of 0-degrees.</p>
            <p>Ideographic punctuation and other ideographic
            characters having alternate horizontal and vertical
            forms will use the vertical form of the glyph.</p>
          </li><li>
            <p>Text which is not fullwidth will be set with a
            glyph-orientation of 90-degrees.</p>
            <p>This reorientation rule applies only to the
            first-level non-ideographic text. All further embedding
            of writing-modes or bidi processing will be based on
            the first-level rotation.</p>
            <blockquote>
              <b>NOTE:</b> 
              <ul><li>
                  <p>This is equivalent to having set the
                  non-ideographic text string horizontally honoring
                  the bidi-rule, then rotating the resultant
                  sequence of inline-areas (one area for each
                  change of glyph direction) 90-degrees
                  clockwise.</p>
                  <p>It should be noted that text set in this
                  "rotated" manner may contain ligatures or other
                  glyph combining and reordering common to the
                  language and script. (This "rotated" presentation
                  form does not disable auto-ligature formation or
                  similar context-driven variations.)</p>
                </li><li>
                  <p>The determination of which characters should
                  be auto-rotated may vary across user agents. The
                  determination is based on a complex interaction
                  between country, language, script, character
                  properties, font, and character context. It is
                  suggested that one consult the Unicode TR 11 and
                  the various JIS or other national standards.</p>
                </li></ul>
            </blockquote>
          </li></ul>
      </dd><dt><span class="prop-value"><a href="#types-DataTypeAngle">&lt;angle&gt;</a></span></dt><dd>The value of the angle is restricted to 0, 90, 180, and
      270 degrees. The user agent shall round the value of the
      angle to the closest of the permitted values.<br />
       A value of <span class="prop-value">0deg</span> indicates
      that all glyphs are set with the top of the glyphs oriented
      towards the <a href="#text-ReferenceOrientation">reference
      orientation</a>. A value of <span class="prop-value">90deg</span> indicates an orientation of
      90 degrees clockwise from the <a href="#text-ReferenceOrientation">reference
      orientation</a>.</dd></dl>
    <p>This property is applied only to text written in a vertical
    <a href="#text-WritingModeProperty"><span class="prop-name">‘writing-mode’</span></a>.</p>
    <p>The glyph orientation affects the amount that the current
    text position advances as each glyph is rendered. When the
    inline-progression-direction is vertical and the <a href="#text-GlyphOrientationVerticalProperty"><span class="prop-name">‘glyph-orientation-vertical’</span></a> results
    in an orientation angle that is a multiple of 180 degrees, then
    the current text position is incremented according to the
    vertical metrics of the glyph. Otherwise, if the <a href="#text-GlyphOrientationVerticalProperty"><span class="prop-name">‘glyph-orientation-vertical’</span></a> results
    in an orientation angle that is not a multiple of 180 degrees,
    then the current text position is incremented according to the
    horizontal metrics of the glyph.</p>
    <p>The text layout diagrams in this section use the following
    symbols:</p>
    <table><tr><th><img alt="Symbolic wide-cell glyph representation" class="example" width="39" height="39" src="images/fullwidth.png" /></th><td>wide-cell glyph (e.g. Han) which is the <em>n</em>-th glyph in the text run</td></tr><tr><th><img alt="Symbolic narrow-cell glyph representation" class="example" width="19" height="39" src="images/halfwidth.png" /></th><td>narrow-cell glyph (e.g. Latin) which is the <em>n</em>-th glyph in the text run</td></tr></table>
    <p>The orientation which the above symbols assume in the
    diagrams corresponds to the orientation that the Unicode
    characters they represent are intended to assume when rendered
    in the user agent. Spacing between the glyphs in the diagrams
    is usually symbolic, unless intentionally changed to make a
    point.</p>
    <p>The diagrams below illustrate different uses of <a href="#text-GlyphOrientationVerticalProperty"><span class="prop-name">‘glyph-orientation-vertical’</span></a>. The
    diagram on the left shows the result of the mixing of
    full-width ideographic glyphs with narrow-cell Latin glyphs
    when <a href="#text-GlyphOrientationVerticalProperty"><span class="prop-name">‘glyph-orientation-vertical’</span></a> for the
    Latin characters is either <span class="prop-value">auto</span>
    or <span class="prop-value">90</span>. The diagram on the right
    show the result of mixing full-width ideographic glyphs with
    narrow-cell Latin glyphs when Latin glyphs are specified to
    have a <a href="#text-GlyphOrientationVerticalProperty"><span class="prop-name">‘glyph-orientation-vertical’</span></a> of <span class="prop-value">0</span>.</p>
    <p><img alt="Layout of mixed glyphs in vertical-ideographic mode. Wide-cell glyphs are upright, Non-wide-cell glyphs are rotated by 90 degrees." class="example" align="top" width="45" height="262" src="images/text/lf-vi.png" /><img alt="Example of mixed Japanese and English in vertical-ideographic layout. Japanese glyphs are upright, English rotated." class="example" align="top" width="40" height="260" src="images/text/GlyphOrientAuto.png" />
                      
    <img alt="Layout of mixed glyphs in vertical mode. All glyphs are upright." class="example" align="top" width="42" height="342" src="images/text/lf-v.png" /><img alt="Example of mixed Japanese and English in vertical layout. All glyphs are upright." class="example" align="top" width="38" height="340" src="images/text/GlyphOrientZero.png" /></p>

    <div class="propdef">
      <dl><dt id="text-GlyphOrientationHorizontalProperty"><span class="propdef-title prop-name">‘glyph-orientation-horizontal’</span></dt><dd>
          <table summary="glyph-orientation-horizontal property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td><a href="#types-DataTypeAngle">&lt;angle&gt;</a> |
              <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>0deg</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>no</td></tr></table>
        </dd></dl>
    </div>
    <dl><dt><span class="prop-value"><a href="#types-DataTypeAngle">&lt;angle&gt;</a></span></dt><dd>The value of the angle is restricted to 0, 90, 180, and
      270 degrees. The user agent shall round the value of the
      angle to the closest of the permitted values.<br />
       A value of <span class="prop-value">0deg</span> indicates
      that all glyphs are set with the top of the glyphs oriented
      towards the <a href="#text-ReferenceOrientation">reference
      orientation</a>. A value of <span class="prop-value">90deg</span> indicates an orientation of
      90 degrees clockwise from the <a href="#text-ReferenceOrientation">reference
      orientation</a>.</dd></dl>
    <p>This property is applied only to text written in a
    horizontal <a href="#text-WritingModeProperty"><span class="prop-name">‘writing-mode’</span></a>.</p>
    <p>The glyph orientation affects the amount that the current
    text position advances as each glyph is rendered. When the
    reference orientation direction is horizontal and the <a href="#text-GlyphOrientationHorizontalProperty"><span class="prop-name">‘glyph-orientation-horizontal’</span></a> results
    in an orientation angle that is a multiple of 180 degrees, then
    the current text position is incremented according to the
    horizontal metrics of the glyph. Otherwise, if the <a href="#text-GlyphOrientationHorizontalProperty"><span class="prop-name">‘glyph-orientation-horizontal’</span></a> results
    in an orientation angle that is not a multiple of 180 degrees,
    then the current text position is incremented according to the
    vertical metrics of the glyph.</p>

<h3 id="text-RelationshipWithBiDirectionality">10.7.4 Relationship with bidirectionality</h3>
  <p>
    The characters in certain scripts are written from right to
    left. In some documents, in particular those written with the
    Arabic or Hebrew script, and in some mixed-language contexts,
    text in a single line may appear with mixed directionality.
    This phenomenon is called bidirectionality, or "bidi" for
    short.
  </p>
  <p>
    The Unicode standard ([<a href="#refs-ref-UNICODE">UNICODE</a>],
    specifically [<a href="#refs-ref-UAX9">UAX9</a>]) defines a 
    complex algorithm for determining the proper directionality of 
    text. The algorithm consists of an implicit part based on 
    character properties, as well as explicit controls for 
    embeddings and overrides. The 
    <a href="#intro-TermSVGUserAgent"><span class="svg-term">SVG user agent</span></a> 
    applies this bidirectional algorithm when determining the layout of characters within a 
    <a href="#intro-TermTextContentBlockElement"><span class="svg-term">text content block element</span></a>.
  </p>
  
  <p>The <a href="#text-DirectionProperty"><span class="attr-name">‘direction’</span></a> 
    and 
    <a href="#text-DirectionProperty"><span class="attr-name">‘unicode-bidi’</span></a> 
    properties allow authors to override the inherent directionality 
    of the content characters and thus explicitly control how the 
    elements and attributes of a document language map to this algorithm. These
    two properties are applicable to all characters whose glyphs are
    perpendicular to the inline-progression-direction.
  </p>
  
  <p> In many cases, the bidirectional algorithm from Unicode
    [<a href="#refs-ref-UNICODE">UNICODE</a>] produces the desired 
    result automatically, and in such cases the author does not need 
    to use these properties. For other cases, such as when using 
    right-to-left languages, it may be sufficient to add the 
    <a href="#text-DirectionProperty"><span class="prop-name">‘direction’</span></a> property to the <a href="#intro-TermRootmostSVGElement"><span class="svg-term">rootmost <span class="element-name">‘svg’</span> element</span></a>, 
    and allow that direction to inherit to all text elements, 
    as in the following example (which may be used as a template):  
  </p>
  <pre class="xml">&lt;svg xmlns="http://www.w3.org/2000/svg"
     width="100%" height="100%" viewBox="0 0 400 400"
     direction="rtl" xml:lang="fa"&gt;

  &lt;title direction="ltr" xml:lang="en"&gt;Right-to-left Text&lt;/title&gt;
  &lt;desc direction="ltr" xml:lang="en"&gt;
    A simple example for using the 'direction' property in documents
    that predominantly use right-to-left languages.
  &lt;/desc&gt;

  &lt;text x="200" y="200" font-size="20"&gt;داستان SVG 1.1 SE طولا ني است.&lt;/text&gt;

&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example </caption><tr><td><img alt="Example " src="images/text/rtl-text.png" /></td></tr></table><p class="view-as-svg"><a href="images/text/rtl-text.svg">View this example as SVG (SVG-enabled browsers only)</a></p>
  
  <p>Below is another example, where where implicit bidi reordering is not sufficient:</p>
  <pre class="xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg"
     width="100%" height="100%" viewBox="0 0 400 400"
     direction="rtl" xml:lang="he"&gt;

  &lt;title direction="ltr" xml:lang="en"&gt;Right-to-left Text&lt;/title&gt;
  &lt;desc direction="ltr" xml:lang="en"&gt;
    An example for using the 'direction' and 'unicode-bidi' properties
    in documents that predominantly use right-to-left languages.
  &lt;/desc&gt;

  &lt;text x="200" y="200" font-size="20"&gt; כתובת 
	MAC:&amp;#x200F;
    	&lt;tspan direction="ltr" unicode-bidi="embed"&gt;00-24-AF-2A-55-FC&lt;/tspan&gt; 
	&lt;/text&gt;

&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example </caption><tr><td><img alt="Example " src="images/text/rtl-complex.png" /></td></tr></table><p class="view-as-svg"><a href="images/text/rtl-complex.svg">View this example as SVG (SVG-enabled browsers only)</a></p>
  
  <p>
    Within
    <a href="#intro-TermTextContentElement"><span class="svg-term">text content elements</span></a>,
    the alignment of text with regards to the 
    <a href="#text-TextAnchorProperty"><span class="prop-name">‘text-anchor’</span></a> property
    is determined by the value of the
    <a href="#text-DirectionProperty"><span class="attr-name">‘direction’</span></a> 
    property.  For example, given a 
    <a href="#text-TextElement"><span class="element-name">‘text’</span></a> 
    element with a 
    <a href="#text-TextAnchorProperty"><span class="prop-name">‘text-anchor’</span></a>
    value of <span class="prop-value">"end"</span>, for a 
    <a href="#text-DirectionProperty"><span class="attr-name">‘direction’</span></a>
    value of <span class="prop-value">"ltr"</span>, the text will 
    extend to the left of the position of the  
    <a href="#text-TextElement"><span class="element-name">‘text’</span></a> 
    element's
    <a href="#text-TextElementXAttribute"><span class="attr-name">‘x’</span></a>
    attribute value, while for 
    <a href="#text-DirectionProperty"><span class="attr-name">‘direction’</span></a>
    value of <span class="prop-value">"rtl"</span>, the text will 
    extend to the right of the position of the  
    <a href="#text-TextElement"><span class="element-name">‘text’</span></a> 
    element's
    <a href="#text-TextElementXAttribute"><span class="attr-name">‘x’</span></a>
    attribute value.
  </p>
  
  <p>A more complete discussion of bidirectionality can be found
    in the <a href="http://www.w3.org/TR/CSS2/visuren.html#direction">Text direction</a>
    section of CSS 2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 9.10).</p>
  <p>The processing model for bidirectional text is as follows.
    The user agent processes the characters which are provided in
    <span class="SVG-Term">logical order</span> (i.e., the order
    the characters appear in the original document, either via
      direct inclusion or via indirect reference due a <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> element). The user agent
    determines the set of independent blocks within each of which
    it should apply the Unicode bidirectional algorithm. Each <a href="#text-TextChunk">text chunk</a> represents an
    independent block of text. Additionally, any change in glyph
      orientation due to processing of properties <a href="#text-GlyphOrientationHorizontalProperty"><span class="prop-name">‘glyph-orientation-horizontal’</span></a> or
      <a href="#text-GlyphOrientationVerticalProperty"><span class="prop-name">‘glyph-orientation-vertical’</span></a> will
      subdivide the independent blocks of text further. After
    processing the Unicode bidirectional algorithm and properties
    <a href="#text-DirectionProperty"><span class="attr-name">‘direction’</span></a> and <a href="#text-UnicodeBidiProperty"><span class="attr-name">‘unicode-bidi’</span></a> on each of the
    independent text blocks, the user agent will have a potentially
    re-ordered list of characters which are now in left-to-right
    rendering order. Simultaneous with re-ordering of the
      characters, the <a href="#text-TSpanElementDXAttribute"><span class="attr-name">dx</span></a>, <a href="#text-TSpanElementDYAttribute"><span class="attr-name">dy</span></a> and <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">rotate</span></a> attributes on the <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> and <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> elements are also
      re-ordered to maintain the original correspondence between
      characters and attribute values. While kerning or ligature
    processing might be font-specific, the preferred model is that
    kerning and ligature processing occurs between combinations of
    characters or glyphs after the characters have been
    re-ordered.</p>
  

    <div class="propdef">
      <dl><dt id="text-DirectionProperty"><span class="propdef-title prop-name">‘direction’</span></dt><dd>
          <table summary="direction property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>ltr | rtl | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>ltr</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>no</td></tr></table>
        </dd></dl>
    </div>
    <p>This property specifies the base writing direction of text
    and the direction of embeddings and overrides (see <a href="#text-UnicodeBidiProperty"><span class="prop-name">‘unicode-bidi’</span></a>) for the Unicode
    bidirectional algorithm. For the <a href="#text-DirectionProperty"><span class="prop-name">‘direction’</span></a> property to have any
    effect on an element that does not by itself establish a new <a href="#text-TextChunks">text chunk</a> 
    (such as a <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element without absolute position adjustments due to <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a> or <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a> attributes),
    the <a href="#text-UnicodeBidiProperty"><span class="prop-name">‘unicode-bidi’</span></a> property's value
    must be <span class="prop-value">embed</span> or <span class="prop-value">bidi-override</span>.</p>
    <p>Except for any additional information provided in this
    specification, the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/visuren.html#propdef-direction">normative definition</a>
    of the <a href="#text-DirectionProperty"><span class="prop-name">‘direction’</span></a> property is in CSS2
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 9.10).</p>
    <p>The <a href="#text-DirectionProperty"><span class="prop-name">‘direction’</span></a> property
    applies only to glyphs oriented perpendicular to the <a href="#text-SettingInlineProgressionDirection">inline-progression-direction</a>,
    which includes the usual case of horizontally-oriented Latin or
    Arabic text and the case of narrow-cell Latin or Arabic
    characters rotated 90 degrees clockwise relative to a
    top-to-bottom inline-progression-direction.</p>

    <div class="propdef">
      <dl><dt id="text-UnicodeBidiProperty"><span class="propdef-title prop-name">‘unicode-bidi’</span></dt><dd>
          <table summary="unicode-bidi property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>normal | embed | bidi-override | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>normal</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>no</td></tr></table>
        </dd></dl>
    </div>
    <p>Except for any additional information provided in this
    specification, the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/visuren.html#propdef-unicode-bidi">normative definition</a>
    of the <a href="#text-UnicodeBidiProperty"><span class="prop-name">‘unicode-bidi’</span></a> property is in CSS2
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 9.10).</p>

<h2 id="text-TextRenderingOrder">10.8 Text rendering order</h2>

    <p>The glyphs associated with the characters within a <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element are rendered in
    the logical order of the characters in the original document,
    independent of any re-ordering necessary to implement
    bidirectionality. Thus, for text that goes right-to-left
    visually, the glyphs associated with the rightmost character
    are rendered before the glyphs associated with the other
    characters.</p>
    <p>Additionally, each distinct glyph is rendered in its
    entirety (i.e., it is filled and stroked as specified by the <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>
    and <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> properties) before the
    next glyph gets rendered.</p>

<h2 id="text-AlignmentProperties">10.9 Alignment properties</h2>

<h3 id="text-TextAlignmentProperties">10.9.1 Text alignment properties</h3>

<p>The <a href="#text-TextAnchorProperty"><span class="prop-name">‘text-anchor’</span></a> property is used to align (start-, middle- or
end-alignment) a string of text relative to a given point.</p>

<p>The <a href="#text-TextAnchorProperty"><span class="prop-name">‘text-anchor’</span></a> property is applied to each individual
<a href="#text-TextChunks">text chunk</a> within a given <a href="#text-TextElement"><span class="element-name">‘text’</span></a>
element. Each text chunk has an initial current text position, which represents
the point in the user coordinate system resulting from (depending on context)
application of the <a href="#text-TextElementXAttribute"><span class="attr-name">‘x’</span></a> and <a href="#text-TextElementYAttribute"><span class="attr-name">‘y’</span></a> attributes on the <a href="#text-TextElement"><span class="element-name">‘text’</span></a>
element, any <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a> or <a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a> attribute values on a <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>,
<a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> or <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element assigned explicitly to the first
rendered character in a text chunk, or determination of the initial current
text position for a <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> element.</p>

    <div class="propdef">
      <dl><dt id="text-TextAnchorProperty"><span class="propdef-title prop-name">‘text-anchor’</span></dt><dd>
          <table summary="text-anchor property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>start | middle | end | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>start</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <p>Values have the following meanings:</p>
  <dl><dt><span class="attr-value">start</span></dt><dd>The rendered characters are aligned such that the start
      of the resulting rendered text is at the initial current text position.
      For an element with a 
      <a href="#text-DirectionProperty"><span class="attr-name">‘direction’</span></a>
      property value of <span class="prop-value">"ltr"</span>
      (typical for most European languages), 
      the left side of the text is rendered at the initial text 
      position.  For an element with a 
      <a href="#text-DirectionProperty"><span class="attr-name">‘direction’</span></a>
      property value of <span class="prop-value">"rtl"</span>
      (typical for Arabic and Hebrew), 
      the right side of the text is rendered at the initial text 
      position.  For an element with a vertical primary text 
      direction (often typical for Asian text), 
      the top side of the text is rendered at the initial text position. 
    </dd><dt><span class="attr-value">middle</span></dt><dd>The rendered characters are aligned such that the geometric middle
      of the resulting rendered text is at the initial current text position.</dd><dt><span class="attr-value">end</span></dt><dd>The rendered characters are aligned such that the end of
      the resulting rendered text is at the initial current text position.    
      For an element with a 
      <a href="#text-DirectionProperty"><span class="attr-name">‘direction’</span></a>
      property value of <span class="prop-value">"ltr"</span>
      (typical for most European languages), 
      the right side of the text is rendered at the initial text 
      position.  For an element with a 
      <a href="#text-DirectionProperty"><span class="attr-name">‘direction’</span></a>
      property value of <span class="prop-value">"rtl"</span>
      (typical for Arabic and Hebrew), 
      the left side of the text is rendered at the initial text 
      position.  For an element with a vertical primary text 
      direction (often typical for Asian text), 
      the bottom of the text is rendered at the initial text position. 
    </dd></dl>

<h3 id="text-BaselineAlignmentProperties">10.9.2 Baseline alignment properties</h3>

    <p>An overview of baseline alignment and baseline tables can be
    found above in <a href="#text-FontsTablesBaselines">Fonts,
    font tables and baselines</a>.</p>
    <p>One of the characteristics of international text is that
    there are different baselines (different alignment points) for
    glyphs in different scripts. For example, in horizontal
    writing, ideographic scripts, such as Han Ideographs, Katakana,
    Hiragana, and Hangul, alignment occurs with a baseline near the
    bottoms of the glyphs; alphabetic based scripts, such as Latin,
    Cyrillic, Hebrew, Arabic, align a point that is the bottom of
    most glyphs, but some glyphs descend below the baseline; and
    Indic based scripts are aligned at a point that is near the top
    of the glyphs.</p>
    <p>When different scripts are mixed on a line of text, an
    adjustment must be made to ensure that the glyphs in the
    different scripts are aligned correctly with one another.
    OpenType [<a href="http://www.microsoft.com/typography/otspec/">OPENTYPE</a>]
    fonts have a Baseline table (BASE) [<a href="http://www.microsoft.com/typography/otspec/base.htm">OPENTYPE-BASETABLE</a>]
    that specifies the offsets of the alternative baselines from
    the current baseline.</p>
    <p>SVG uses a similar baseline table model that assumes one
    script (at one font-size) is the "dominant run" during
    processing of a <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element; that is, all
    other baselines are defined in relation to this dominant run.
    The baseline of the script with the dominant run is called the
    <span class="SVG-Term">dominant baseline</span>. So, for
    example, if the dominant baseline is the alphabetic baseline,
    there will be offsets in the baseline table for the alternate
    baselines, such as the ideographic baseline and the Indic
    baseline. There will also be an offset for the math baseline
    which is used for some math fonts. Note that there are separate
    baseline tables for horizontal and vertical writing-modes. The
    offsets in these tables may be different for horizontal and
    vertical writing.</p>
    <p>The baseline table established at the start of processing of
    a <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element is called the
    <span class="SVG-Term">dominant baseline table</span>.</p>
    <p>Because the value of the <a href="#text-FontFamilyProperty"><span class="prop-name">‘font-family’</span></a> property is a list
    of fonts, to insure a consistent choice of baseline table we
    define the <em>nominal font</em> in a font list as the first
    font in the list for which a glyph is available. This is the
    first font that could contain a glyph for each character
    encountered. (For this definition, glyph data is assumed to be
    present if a font substitution is made or if the font is
    synthesized.) This definition insures a content independent
    determination of the font and baseline table that is to be
    used.</p>
    <p>The value of the <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> property on the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element establishes the
    <span class="SVG-Term">dominant baseline table font
    size</span>.</p>
    <p>The model assumes that each glyph has a 'alignment-baseline'
    value which specifies the baseline with which the glyph is to
    be aligned. (The 'alignment-baseline' is called the "Baseline
    Tag" in the OpenType baseline table description.) The initial
    value of the <a href="#text-AlignmentBaselineProperty"><span class="prop-name">‘alignment-baseline’</span></a> property uses
    the baseline identifier associated with the given glyph.
    Alternate values for <a href="#text-AlignmentBaselineProperty"><span class="prop-name">‘alignment-baseline’</span></a> can be useful
    for glyphs such as a "*" which are ambiguous with respect to
    script membership.</p>
    <p>The model assumes that the font from which the glyph is
    drawn also has a baseline table, the <span class="SVG-Term">font baseline table</span>. This baseline
    table has offsets in units-per-em from the (0,0) point to each
    of the baselines the font knows about. In particular, it has
    the offset from the glyph's (0,0) point to the baseline
    identified by the 'alignment-baseline'.</p>
    <p>The offset values in the baseline table are in "design
    units" which means fractional units of the EM. CSS calls these
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#unitsperem">"units-per-em"</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.3.4).
    Thus, the current <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> is used to determine
    the actual offset from the dominant baseline to the alternate
    baselines.</p>
    <p>The glyph is aligned so that its baseline identified by its
    'alignment-baseline' is aligned with the baseline with the same
    name from the dominant baseline table.</p>
    <p>The offset from the dominant baseline of the parent to the
    baseline identified by the 'alignment-baseline' is computed
    using the dominant baseline table and dominant baseline table
    font size. The font baseline table and font size applicable to
    the glyph are used to compute the offset from the identified
    baseline to the (0,0) point of the glyph. This second offset is
    subtracted from the first offset to get the position of the
    (0,0) point in the <a href="#text-ShiftDirection">shift
    direction</a>. Both offsets are computed by multiplying the
    baseline value from the baseline table times the appropriate
    font size value.</p>
    <p>If the 'alignment-baseline' identifies the dominant
    baseline, then the first offset is zero and the glyph is
    aligned with the dominant baseline; otherwise, the glyph is
    aligned with the chosen alternate baseline.</p>
    <p>The baseline-identifiers below are used in this
    specification. Some of these are determined by baseline-tables
    contained in a font
    <a href="http://www.w3.org/TR/2006/REC-xsl11-20061205/#font-model">as described in XSL</a>
    ([<a href="#refs-ref-XSL">XSL</a>], section 7.9.1).  Others
    are computed from other font characteristics as described
    below.</p>
    <dl><dt><b>alphabetic</b></dt><dd>
        <p>This identifies the baseline used by most alphabetic and
        syllabic scripts. These include, but are not limited to,
        many Western, Southern Indic, Southeast Asian
        (non-ideographic) scripts.</p>
      </dd><dt><b>ideographic</b></dt><dd>
        <p>This identifies the baseline used by ideographic
        scripts. For historical reasons, this baseline is at the
        bottom of the ideographic EM box and not in the center of
        the ideographic EM box. See the "central" baseline. The
        ideographic scripts include Chinese, Japanese, Korean, and
        Vietnamese Chu Nom.</p>
      </dd><dt><b>hanging</b></dt><dd>
        <p>This identifies the baseline used by certain Indic
        scripts. These scripts include Devanagari, Gurmukhi and
        Bengali.</p>
      </dd><dt><b>mathematical</b></dt><dd>
        <p>This identifies the baseline used by mathematical
        symbols.</p>
      </dd><dt><b>central</b></dt><dd>
        <p>This identifies a computed baseline that is at the
        center of the EM box. This baseline lies halfway between
        the text-before-edge and text-after-edge baselines.</p>
        <blockquote>
          <b>NOTE:</b> 
          <p>For ideographic fonts, this baseline is often used to
          align the glyphs; it is an alternative to the ideographic
          baseline.</p>
        </blockquote>
      </dd><dt><b>middle</b></dt><dd>
        <p>This identifies a baseline that is offset from the
        alphabetic baseline in the <b>shift-direction</b> by 1/2
        the value of the x-height font characteristic. The position
        of this baseline may be obtained from the font data or, for
        fonts that have a font characteristic for "x-height", it
        may be computed using 1/2 the "x-height". Lacking either of
        these pieces of information, the position of this baseline
        may be approximated by the "central" baseline.</p>
      </dd><dt><b>text-before-edge</b></dt><dd>
        <p>This identifies the before-edge of the EM box. The
        position of this baseline may be specified in the
        baseline-table or it may be calculated.</p>
        <blockquote>
          <b>NOTE:</b> 
          <p>The position of this baseline is normally around or at
          the top of the ascenders, but it may not encompass all
          accents that can appear above a glyph. For these fonts
          the value of the "ascent" font characteristic is used.
          For ideographic fonts, the position of this baseline is
          normally 1 EM in the <b>shift-direction</b> from the
          "ideographic" baseline. However, some ideographic fonts
          have a reduced width in the inline-progression-direction
          to allow tighter setting. When such a font, designed only
          for vertical writing-modes, is used in a horizontal
          writing-mode, the "text-before-edge" baseline may be less
          than 1 EM from the text-after-edge.</p>
        </blockquote>
      </dd><dt><b>text-after-edge</b></dt><dd>
        <p>This identifies the after-edge of the EM box. The
        position of this baseline may be specified in the
        baseline-table or it may be calculated.</p>
        <blockquote>
          <b>NOTE:</b> 
          <p>For fonts with descenders, the position of this
          baseline is normally around or at the bottom of the
          descenders. For these fonts the value of the "descent"
          font characteristic is used. For ideographic fonts, the
          position of this baseline is normally at the
          "ideographic" baseline.</p>
        </blockquote>
      </dd></dl>
    <p>There are, in addition, two computed baselines that are only
    defined for line areas. Since SVG does not support the notion
    of computations based on line areas, the two computed baselines
    are mapped as follows:</p>
    <dl><dt><b>before-edge</b></dt><dd>For SVG, this is equivalent to
      <b>text-before-edge</b>.</dd><dt><b>after-edge</b></dt><dd>For SVG, this is equivalent to
      <b>text-after-edge</b>.</dd></dl>
    <p>There are also four baselines that are defined only for
    horizontal writing-modes.</p>
    <dl><dt><b>top</b></dt><dd>
        <p>This baseline is the same as the "before-edge" baseline
        in a horizontal writing-mode and is undefined in a vertical
        writing mode.</p>
      </dd><dt id="text-TextTopBaselineDefinition"><b>text-top</b></dt><dd>
        <p>This baseline is the same as the "text-before-edge"
        baseline in a horizontal writing-mode and is undefined in a
        vertical writing mode.</p>
      </dd><dt><b>bottom</b></dt><dd>
        <p>This baseline is the same as the "after-edge" baseline
        in a horizontal writing-mode and is undefined in a vertical
        writing mode.</p>
      </dd><dt id="text-TextBottomBaselineDefinition"><b>text-bottom</b></dt><dd>
        <p>This baseline is the same as the "text-after-edge"
        baseline in a horizontal writing-mode and is undefined in a
        vertical writing mode.</p>
      </dd></dl>
    <p>The baseline-alignment properties follow.</p>

    <div class="propdef">
      <dl><dt id="text-DominantBaselineProperty"><span class="propdef-title prop-name">‘dominant-baseline’</span></dt><dd>
          <table summary="dominant-baseline property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>auto | use-script | no-change | reset-size |
              ideographic | alphabetic | hanging |
              mathematical | central | middle | text-after-edge |
              text-before-edge | <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              inherit</a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>auto</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <p>The "dominant-baseline" property is used to determine or
    re-determine a scaled-baseline-table. A scaled-baseline-table
    is a compound value with three components: a
    baseline-identifier for the dominant-baseline, a baseline-table
    and a baseline-table font-size. Some values of the property
    re-determine all three values; other only re-establish the
    baseline-table font-size. When the initial value, <span class="prop-value">auto</span>, would
    give an undesired result, this property can be used to
    explicitly set the desire scaled-baseline-table.</p>
    <p>Values for the property have the following meaning:</p>
    <dl><dt><span class="attr-value">auto</span></dt><dd>
        <p>If this property occurs on a <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element, then the
        computed value depends on the value of the <a href="#text-WritingModeProperty"><span class="prop-name">‘writing-mode’</span></a> property. If
        the 'writing-mode' is horizontal, then the value of the
        dominant-baseline component is 'alphabetic', else if the
        'writing-mode' is vertical, then the value of the
        dominant-baseline component is 'central'.</p>
        <p>If this property occurs on a <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>,
        <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> or <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> element, then
        the dominant-baseline and the baseline-table components
        remain the same as those of the parent <a href="#intro-TermTextContentElement">text content
        element</a>. If the computed <a href="#text-BaselineShiftProperty"><span class="prop-name">‘baseline-shift’</span></a> value
        actually shifts the baseline, then the baseline-table
        font-size component is set to the value of the <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> property on the
        element on which the <a href="#text-DominantBaselineProperty"><span class="prop-name">‘dominant-baseline’</span></a> property
        occurs, otherwise the baseline-table font-size remains the
        same as that of the element. If there is no parent <a href="#intro-TermTextContentElement">text content
        element</a>, the scaled-baseline-table value is constructed
        as above for <a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements.</p>
      </dd><dt><span class="attr-value">use-script</span></dt><dd>The dominant-baseline and the baseline-table components
      are set by determining the predominant script of the
      character data content. The <a href="#text-WritingModeProperty"><span class="prop-name">‘writing-mode’</span></a>, whether
      horizontal or vertical, is used to select the appropriate set
      of baseline-tables and the dominant baseline is used to
      select the baseline-table that corresponds to that baseline.
      The baseline-table font-size component is set to the value of
      the <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> property on the
      element on which the <a href="#text-DominantBaselineProperty"><span class="prop-name">‘dominant-baseline’</span></a> property
      occurs.</dd><dt><span class="attr-value">no-change</span></dt><dd>The dominant-baseline, the baseline-table, and the
      baseline-table font-size remain the same as that of the
      parent <a href="#intro-TermTextContentElement">text
      content element</a>.</dd><dt><span class="attr-value">reset-size</span></dt><dd>The dominant-baseline and the baseline-table remain the
      same, but the baseline-table font-size is changed to the
      value of the <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> property on this
      element. This re-scales the baseline-table for the current <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a>.</dd><dt><span class="attr-value">ideographic</span></dt><dd>The baseline-identifier for the dominant-baseline is set
      to be 'ideographic', the derived baseline-table is
      constructed using the 'ideographic' baseline-table in the
      nominal font, and the baseline-table font-size is changed to
      the value of the <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> property on this
      element.</dd><dt><span class="attr-value">alphabetic</span></dt><dd>The baseline-identifier for the dominant-baseline is set
      to be 'alphabetic', the derived baseline-table is constructed
      using the 'alphabetic' baseline-table in the nominal font,
      and the baseline-table font-size is changed to the value of
      the <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> property on this
      element.</dd><dt><span class="attr-value">hanging</span></dt><dd>The baseline-identifier for the dominant-baseline is set
      to be 'hanging', the derived baseline-table is constructed
      using the 'hanging' baseline-table in the nominal font, and
      the baseline-table font-size is changed to the value of the
      <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> property on this
      element.</dd><dt><span class="attr-value">mathematical</span></dt><dd>The baseline-identifier for the dominant-baseline is set
      to be 'mathematical', the derived baseline-table is
      constructed using the 'mathematical' baseline-table in the
      nominal font, and the baseline-table font-size is changed to
      the value of the <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> property on this
      element.</dd><dt><span class="attr-value">central</span></dt><dd>The baseline-identifier for the dominant-baseline is set
      to be 'central'. The derived baseline-table is constructed
      from the defined baselines in a baseline-table in the nominal
      font. That font baseline-table is chosen using the following
      priority order of baseline-table names: 'ideographic',
      'alphabetic', 'hanging', 'mathematical'. The baseline-table
      font-size is changed to the value of the <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> property on this
      element.</dd><dt><span class="attr-value">middle</span></dt><dd>The baseline-identifier for the dominant-baseline is set
      to be 'middle'. The derived baseline-table is constructed
      from the defined baselines in a baseline-table in the nominal
      font. That font baseline -table is chosen using the following
      priority order of baseline-table names: 'alphabetic',
      'ideographic', 'hanging', 'mathematical'. The baseline-table
      font-size is changed to the value of the <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> property on this
      element.</dd><dt><span class="attr-value">text-after-edge</span></dt><dd>The baseline-identifier for the dominant-baseline is set
      to be 'text-after-edge'. The derived baseline-table is
      constructed from the defined baselines in a baseline-table in
      the nominal font. The choice of which font baseline-table to
      use from the baseline-tables in the nominal font is
      implementation defined. The baseline-table font-size is
      changed to the value of the <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> property on this
      element.<br />
      <br />
       NOTE: using the following priority order of baseline-table
      names: 'alphabetic', 'ideographic', 'hanging', 'mathematical'
      is probably a reasonable strategy for determining which font
      baseline-table to use.</dd><dt><span class="attr-value">text-before-edge</span></dt><dd>The baseline-identifier for the dominant-baseline is set
      to be 'text-before-edge'. The derived baseline-table is
      constructed from the defined baselines in a baseline-table in
      the nominal font. The choice of which baseline-table to use
      from the baseline-tables in the nominal font is
      implementation defined. The baseline-table font-size is
      changed to the value of the <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> property on this
      element.<br />
      <br />
       NOTE: Using the following priority order of baseline-table
      names: 'alphabetic', 'ideographic', 'hanging', 'mathematical'
      is probably a reasonable strategy for determining which font
      baseline-table to use.</dd></dl>
    <p>If there is no baseline table in the nominal font or if the
    baseline table lacks an entry for the desired baseline, then
    the user agent may use heuristics to determine the position of
    the desired baseline.</p>

    <div class="propdef">
      <dl><dt id="text-AlignmentBaselineProperty"><span class="propdef-title prop-name">‘alignment-baseline’</span></dt><dd>
          <table summary="alignment-baseline property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>auto | baseline | before-edge | text-before-edge
              | middle | central | after-edge | text-after-edge |
              ideographic | alphabetic | hanging | mathematical |
              <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              inherit</a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>auto</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> elements</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <p>This property specifies how an object is aligned with
    respect to its parent. This property specifies which baseline
    of this element is to be aligned with the corresponding
    baseline of the parent. For example, this allows alphabetic
    baselines in Roman text to stay aligned across font size
    changes. It defaults to the baseline with the same name as the
    computed value of the alignment-baseline property. That is, the
    position of "ideographic" alignment-point in the
    <b>block-progression-direction</b> is the position of the
    "ideographic" baseline in the baseline-table of the object
    being aligned.</p>
    <p>Values have the following meanings:</p>
    <dl><dt><b>auto</b></dt><dd>The value is the dominant-baseline of the script to which
      the character belongs - i.e., use the dominant-baseline of
      the parent.</dd><dt><b>baseline</b></dt><dd>The alignment-point of the object being aligned is
      aligned with the dominant-baseline of the parent <a href="#intro-TermTextContentElement">text content
      element</a>.</dd><dt><b>before-edge</b></dt><dd>The alignment-point of the object being aligned is
      aligned with the "before-edge" baseline of the parent <a href="#intro-TermTextContentElement">text content
      element</a>.</dd><dt><b>text-before-edge</b></dt><dd>The alignment-point of the object being aligned is
      aligned with the "text-before-edge" baseline of the parent <a href="#intro-TermTextContentElement">text content
      element</a>.</dd><dt><b>middle</b></dt><dd>The alignment-point of the object being aligned is
      aligned with the "middle" baseline of the parent <a href="#intro-TermTextContentElement">text content
      element</a>.</dd><dt><b>central</b></dt><dd>The alignment-point of the object being aligned is
      aligned with the "central" baseline of the parent <a href="#intro-TermTextContentElement">text content
      element</a>.</dd><dt><b>after-edge</b></dt><dd>The alignment-point of the object being aligned is
      aligned with the "after-edge" baseline of the parent <a href="#intro-TermTextContentElement">text content
      element</a>.</dd><dt><b>text-after-edge</b></dt><dd>The alignment-point of the object being aligned is
      aligned with the "text-after-edge" baseline of the parent <a href="#intro-TermTextContentElement">text content
      element</a>.</dd><dt><b>ideographic</b></dt><dd>The alignment-point of the object being aligned is
      aligned with the "ideographic" baseline of the parent <a href="#intro-TermTextContentElement">text content
      element</a>.</dd><dt><b>alphabetic</b></dt><dd>The alignment-point of the object being aligned is
      aligned with the "alphabetic" baseline of the parent <a href="#intro-TermTextContentElement">text content
      element</a>.</dd><dt><b>hanging</b></dt><dd>The alignment-point of the object being aligned is
      aligned with the "hanging" baseline of the parent <a href="#intro-TermTextContentElement">text content
      element</a>.</dd><dt><b>mathematical</b></dt><dd>The alignment-point of the object being aligned is
      aligned with the "mathematical" baseline of the parent <a href="#intro-TermTextContentElement">text content
      element</a>.</dd></dl>

    <div class="propdef">
      <dl><dt id="text-BaselineShiftProperty"><span class="propdef-title prop-name">‘baseline-shift’</span></dt><dd>
          <table summary="baseline-shift property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>baseline | sub | super | <a href="#types-DataTypePercentage">&lt;percentage&gt;</a>
              | <a href="#types-DataTypeLength">&lt;length&gt;</a> |
              <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              inherit</a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>baseline</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> elements</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>refers to the "line-height" of the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element, which
              in the case of SVG is defined to be equal to the <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a></td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <p>The <a href="#text-BaselineShiftProperty"><span class="prop-name">‘baseline-shift’</span></a> property
    allows repositioning of the dominant-baseline relative to the
    dominant-baseline of the parent <a href="#intro-TermTextContentElement">text content
    element</a>. The shifted object might be a sub- or superscript.
    Within the shifted object, the whole baseline-table is offset;
    not just a single baseline. The amount of the shift is
    determined from information from the parent <a href="#intro-TermTextContentElement">text content
    element</a>, the sub- or superscript offset from the nominal
    font of the parent <a href="#intro-TermTextContentElement">text content
    element</a>, percent of the "line-height" of the parent <a href="#intro-TermTextContentElement">text content
    element</a> or an absolute value.</p>
    <p>In SVG, the <a href="#text-BaselineShiftProperty"><span class="prop-name">‘baseline-shift’</span></a>
    property represents a supplemental adjustment to the baseline
    tables. The <a href="#text-BaselineShiftProperty"><span class="prop-name">‘baseline-shift’</span></a>
    property shifts the baseline tables for each glyph to temporary
    new positions, for example to lift the glyph into superscript
    or subscript position, but it does not effect the current text
    position. When the current text position is adjusted after
    rendering a glyph to take into account glyph advance values,
    the adjustment happens as if there were no baseline shift.</p>
    <p><a href="#text-BaselineShiftProperty"><span class="prop-name">‘baseline-shift’</span></a> properties
    can nest. Each nested <a href="#text-BaselineShiftProperty"><span class="prop-name">‘baseline-shift’</span></a> is added to previous
    baseline shift values.</p>
    <p>Values for the property have the following meaning:</p>
    <dl><dt><strong>baseline</strong></dt><dd>There is no baseline shift; the dominant-baseline remains
      in its original position.</dd><dt><strong>sub</strong></dt><dd>The dominant-baseline is shifted to the default position
      for subscripts. The offset to this position is determined
      using the font data for the nominal font. Because in most
      fonts the subscript position is normally given relative to
      the "alphabetic" baseline, the user agent may compute the
      effective position for subscripts for superscripts when some
      other baseline is dominant. The suggested computation is to
      subtract the difference between the position of the dominant
      baseline and the position of the "alphabetic" baseline from
      the position of the subscript. The resulting offset is
      determined by multiplying the effective subscript position by
      the dominant baseline-table font-size. If there is no
      applicable font data the user agent may use heuristics to
      determine the offset.</dd><dt><strong>super</strong></dt><dd>The dominant-baseline is shifted to the default position
      for superscripts. The offset to this position is determined
      using the font data for the nominal font. Because in most
      fonts the superscript position is normally given relative to
      the "alphabetic" baseline, the user agent may compute the
      effective position for superscripts when some other baseline
      is dominant. The suggested computation is to subtract the
      difference between the position of the dominant baseline and
      the position of the "alphabetic" baseline from the position
      of the superscript. The resulting offset is determined by
      multiplying the effective superscript position by the
      dominant baseline-table font-size. If there is no applicable
      font data the user agent may use heuristics to determine the
      offset.</dd><dt><strong>&lt;percentage&gt;</strong></dt><dd>The computed value of the property is this percentage
      multiplied by the computed "line-height" of the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element. The
      dominant-baseline is shifted in the <a href="#text-ShiftDirection">shift direction</a> (positive
      value) or opposite to the <a href="#text-ShiftDirection">shift direction</a> (negative
      value) of the parent <a href="#intro-TermTextContentElement">text content
      element</a> by the computed value. A value of "0%" is
      equivalent to "baseline".</dd><dt><strong>&lt;length&gt;</strong></dt><dd>The dominant-baseline is shifted in the <a href="#text-ShiftDirection">shift direction</a> (positive
      value) or opposite to the <a href="#text-ShiftDirection">shift direction</a> (negative
      value) of the parent <a href="#intro-TermTextContentElement">text content
      element</a> by the &lt;length&gt; value. A value of "0cm" is
      equivalent to "baseline".</dd></dl>

<h2 id="text-FontPropertiesUsedBySVG">10.10 Font selection properties</h2>

    <p>SVG uses the following font specification properties. Except
    for any additional information provided in this specification,
    the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-specification">normative definition of these properties</a>
    is in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], chapter section 15.2).
    Any SVG-specific notes about these properties are contained in
    the descriptions below.</p>
    <p>Note also <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/about.html#property-defs">the rules for expressing the syntax of CSS property values</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 1.3.2).</p>
    <div class="propdef">
      <dl><dt id="text-FontFamilyProperty"><span class="propdef-title prop-name">‘font-family’</span></dt><dd>
          <table summary="font-family property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>[[ &lt;family-name&gt; |<br />
               &lt;generic-family&gt; ],]* [&lt;family-name&gt;
              |<br />
               &lt;generic-family&gt;] | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>depends on user agent</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <p>This property indicates which font family is to be used to
    render the text, specified as a prioritized list of font family
    names and/or generic family names. 
    Unless the family name corresponds to a CSS IDENT, it must be quoted. 
    Except for any additional
    information provided in this specification, the
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#propdef-font-family">normative definition of the property</a>
    is in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.2.2).</p>

    <div class="propdef">
      <dl><dt id="text-FontStyleProperty"><span class="propdef-title prop-name">‘font-style’</span></dt><dd>
          <table summary="font-style property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>normal | italic | oblique | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>normal</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <p>This property specifies whether the text is to be rendered
    using a normal, italic or oblique face. Except for any
    additional information provided in this specification, the
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#propdef-font-style">normative definition of the property</a>
    is in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.2.3).</p>

    <div class="propdef">
      <dl><dt id="text-FontVariantProperty"><span class="propdef-title prop-name">‘font-variant’</span></dt><dd>
          <table summary="font-variant property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>normal | small-caps | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>normal</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <p>This property indicates whether the text is to be rendered
    using the normal glyphs for lowercase characters or using
    small-caps glyphs for lowercase characters. Except for any
    additional information provided in this specification, the
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#propdef-font-variant">normative definition of the property</a>
    is in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.2.3).</p>

    <div class="propdef">
      <dl><dt id="text-FontWeightProperty"><span class="propdef-title prop-name">‘font-weight’</span></dt><dd>
          <table summary="font-weight property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>normal | bold | bolder | lighter | 100 | 200 |
              300<br />
               | 400 | 500 | 600 | 700 | 800 | 900 | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>normal</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <p>This property refers to the boldness or lightness of the
    glyphs used to render the text, relative to other fonts in the
    same font family. Except for any additional information
    provided in this specification, the
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#propdef-font-weight">normative definition of the property</a>
    is in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.2.3).</p>

    <div class="propdef">
      <dl><dt id="text-FontStretchProperty"><span class="propdef-title prop-name">‘font-stretch’</span></dt><dd>
          <table summary="font-stretch property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>normal | wider | narrower |<br />
               ultra-condensed | extra-condensed |<br />
               condensed | semi-condensed |<br />
               semi-expanded | expanded |<br />
               extra-expanded | ultra-expanded | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>normal</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <p>This property indicates the desired amount of condensing or
    expansion in the glyphs used to render the text. Except for any
    additional information provided in this specification, the
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#propdef-font-stretch">normative definition of the property</a>
    is in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.2.3).</p>

    <div class="propdef">
      <dl><dt id="text-FontSizeProperty"><span class="propdef-title prop-name">‘font-size’</span></dt><dd>
          <table summary="font-size property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>&lt;absolute-size&gt; | &lt;relative-size&gt;
              |<br />
               &lt;length&gt; | &lt;percentage&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>medium</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes, the computed value is inherited</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>refer to parent element's font size</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <p>This property refers to the size of the font from baseline
    to baseline when multiple lines of text are set solid in a
    multiline layout environment. For SVG, if a <span class="prop-value">&lt;length&gt;</span> is provided without a
    unit identifier (e.g., an unqualified number such as <span class="attr-value">128</span>), the SVG user agent processes
    the <span class="prop-value">&lt;length&gt;</span> as a height
    value in the current user coordinate system.</p>
    <p>If a <span class="prop-value">&lt;length&gt;</span> is
    provided with one of the <a href="#coords-Units">unit identifiers</a> (e.g.,
    <span class="attr-value">12pt</span> or <span class="attr-value">10%</span>), then the SVG user agent
    converts the <span class="prop-value">&lt;length&gt;</span>
    into a corresponding value in the current user coordinate
    system by applying the rules described in <a href="#coords-Units">Units</a>.</p>
    <p>Except for any additional information provided in this
    specification, the
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#propdef-font-size">normative definition of the property</a>
    is in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.2.4).</p>

    <div class="propdef">
      <dl><dt id="text-FontSizeAdjustProperty"><span class="propdef-title prop-name">‘font-size-adjust’</span></dt><dd>
          <table summary="font-size-adjust property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>&lt;number&gt; | none | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>none</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes (non-additive)</td></tr></table>
        </dd></dl>
    </div>
    <p>This property allows authors to specify an aspect value for
    an element that will preserve the x-height of the first choice
    font in a substitute font. Except for any additional
    information provided in this specification, the
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#propdef-font-size-adjust">normative definition of the property</a>
    is in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.2.4).</p>

    <div class="propdef">
      <dl><dt id="text-FontProperty"><span class="propdef-title prop-name">‘font’</span></dt><dd>
          <table summary="font property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>[ [ <span class="propinst-font-style">&lt;'font-style'&gt;</span>
              || <span class="propinst-font-variant">&lt;'font-variant'&gt;</span>
              || <span class="propinst-font-weight">&lt;'font-weight'&gt;</span>
              ]?<br />
               &lt;'font-size'&gt; [ / &lt;'line-height'&gt; ]?
              &lt;'font-family'&gt; ] |<br />
               caption | icon | menu | message-box |<br />
               small-caption | status-bar | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>see individual properties</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>allowed on 'font-size' and 'line-height' (Note:
              for the purposes of processing the <a href="#text-FontProperty"><span class="prop-name">‘font’</span></a> property in
              SVG, 'line-height' is assumed to be equal the value
              for property <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a>)</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes (non-additive)</td></tr></table>
        </dd></dl>
    </div>
    <p>Shorthand property for setting <a href="#text-FontStyleProperty"><span class="prop-name">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="prop-name">‘font-variant’</span></a>,
    <a href="#text-FontWeightProperty"><span class="prop-name">‘font-weight’</span></a>, <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a>, <span class="prop-name">‘line-height’</span> and <a href="#text-FontFamilyProperty"><span class="prop-name">‘font-family’</span></a>.
    The <span class="prop-name">‘line-height’</span> property has no effect on text layout in SVG.
    For the purposes of the <a href="#text-FontProperty"><span class="prop-name">‘font’</span></a>
    property, <span class="prop-name">‘line-height’</span> is assumed to be equal to the value of
    the <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> property. <a href="#conform-ConformingSVGViewers">Conforming SVG
    Viewers</a> are not required to support the various system font
    options (caption, icon, menu, message-box, small-caption and
    status-bar) and can use a system font or one of the generic
    fonts instead.</p>
    <p>Except for any additional information provided in this
    specification, the
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#propdef-font">normative definition of the property</a>
    is in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.2.5).</p>

<h2 id="text-SpacingProperties">10.11 Spacing properties</h2>

    <p>Three properties affect the space between characters and
    words:</p>
    <ul><li><a href="#text-KerningProperty"><span class="prop-name">‘kerning’</span></a> indicates whether the
      user agent should adjust inter-glyph spacing based on kerning
      tables that are included in the relevant font (i.e., enable
      auto-kerning) or instead disable auto-kerning and instead set
      inter-character spacing to a specific length (typically,
      zero).</li><li><a href="#text-LetterSpacingProperty"><span class="prop-name">‘letter-spacing’</span></a> indicates an
      amount of space that is to be added between text characters
      supplemental to any spacing due to the <a href="#text-KerningProperty"><span class="prop-name">‘kerning’</span></a> property.</li><li><a href="#text-WordSpacingProperty"><span class="prop-name">‘word-spacing’</span></a> indicates the
      spacing behavior between words.</li></ul>

    <div class="propdef">
      <dl><dt id="text-KerningProperty"><span class="propdef-title prop-name">‘kerning’</span></dt><dd>
          <table summary="kerning property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>auto | &lt;length&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>auto</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <p>The value of <span class="prop-value">auto</span> indicates
    that the user agent should adjust inter-glyph spacing based on
    kerning tables that are included in the font that will be used
    (i.e., enable auto-kerning).</p>
    <p>If a <span class="prop-value">&lt;length&gt;</span> is
    provided, then auto-kerning is disabled. Instead,
    inter-character spacing is set to the given <span class="prop-value">&lt;length&gt;</span>. The most common
    scenario, other than <span class="prop-value">auto</span>, is
    to set <a href="#text-KerningProperty"><span class="prop-name">‘kerning’</span></a> to a value of
    <span class="prop-value">0</span> so that auto-kerning is
    disabled.</p>
    <p>If a <span class="prop-value">&lt;length&gt;</span> is
    provided without a unit identifier (e.g., an unqualified number
    such as <span class="attr-value">128</span>), the SVG user
    agent processes the <span class="prop-value">&lt;length&gt;</span> as a width value in
    the current user coordinate system.</p>
    <p>If a <span class="prop-value">&lt;length&gt;</span> is
    provided with one of the <a href="#coords-Units">unit identifiers</a> (e.g.,
    <span class="attr-value">.25em</span> or <span class="attr-value">1%</span>), then the SVG user agent converts
    the <span class="prop-value">&lt;length&gt;</span> into a
    corresponding value in the current user coordinate system by
    applying the rules described in <a href="#coords-Units">Units</a>.</p>
    <p>When a <span class="prop-value">&lt;length&gt;</span> is
    provided, its value is added to the inter-character spacing
    value specified by the <a href="#text-LetterSpacingProperty"><span class="prop-name">‘letter-spacing’</span></a> property.</p>

    <div class="propdef">
      <dl><dt id="text-LetterSpacingProperty"><span class="propdef-title prop-name">‘letter-spacing’</span></dt><dd>
          <table summary="letter-spacing property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>normal | &lt;length&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>normal</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <p>This property specifies spacing behavior between text
    characters supplemental to any spacing due to the <a href="#text-KerningProperty"><span class="prop-name">‘kerning’</span></a> property.</p>
    <p>For SVG, if a <span class="prop-value">&lt;length&gt;</span>
    is provided without a unit identifier (e.g., an unqualified
    number such as <span class="attr-value">128</span>), the SVG
    user agent processes the <span class="prop-value">&lt;length&gt;</span> as a width value in
    the current user coordinate system.</p>
    <p>If a <span class="prop-value">&lt;length&gt;</span> is
    provided with one of the <a href="#coords-Units">unit identifiers</a> (e.g.,
    <span class="attr-value">.25em</span> or <span class="attr-value">1%</span>), then the SVG user agent converts
    the <span class="prop-value">&lt;length&gt;</span> into a
    corresponding value in the current user coordinate system by
    applying the rules described in <a href="#coords-Units">Units</a>.</p>
    <p>Except for any additional information provided in this
    specification, the
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/text.html#propdef-letter-spacing">normative definition of the property</a>
    is in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 16.4).</p>

    <div class="propdef">
      <dl><dt id="text-WordSpacingProperty"><span class="propdef-title prop-name">‘word-spacing’</span></dt><dd>
          <table summary="word-spacing property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>normal | &lt;length&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>normal</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <p>This property specifies spacing behavior between words. For
    SVG, if a <span class="prop-value">&lt;length&gt;</span> is
    provided without a unit identifier (e.g., an unqualified number
    such as <span class="attr-value">128</span>), the SVG user
    agent processes the <span class="prop-value">&lt;length&gt;</span> as a width value in
    the current user coordinate system.</p>
    <p>If a <span class="prop-value">&lt;length&gt;</span> is
    provided with one of the <a href="#coords-Units">unit identifiers</a> (e.g.,
    <span class="attr-value">.25em</span> or <span class="attr-value">1%</span>), then the SVG user agent converts
    the <span class="prop-value">&lt;length&gt;</span> into a
    corresponding value in the current user coordinate system by
    applying the rules described in <a href="#coords-Units">Units</a>.</p>
    <p>Except for any additional information provided in this
    specification, the
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/text.html#propdef-word-spacing">normative definition of the property</a>
    is in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 16.4).</p>

<h2 id="text-TextDecorationProperties">10.12 Text decoration</h2>

    <div class="propdef">
      <dl><dt id="text-TextDecorationProperty"><span class="propdef-title prop-name">‘text-decoration’</span></dt><dd>
          <table summary="text-decoration property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>none | [ underline || overline || line-through ||
              blink ] | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>none</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermTextContentElement">text
              content elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no (see prose)</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <p>This property describes decorations that are added to the
    text of an element. <a href="#conform-ConformingSVGViewers">Conforming SVG
    Viewers</a> are not required to support the
    <strong>blink</strong> value.</p>
    <p>Except for any additional information provided in this
    specification, the
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/text.html#propdef-text-decoration">normative definition of the property</a>
    is in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 16.3.1).</p>
    <p>The CSS2 specification defines the
    behavior of the <a href="#text-TextDecorationProperty"><span class="prop-name">‘text-decoration’</span></a> property using the
    terminology "block-level elements" and "inline elements". For
    the purposes of the <a href="#text-TextDecorationProperty"><span class="prop-name">‘text-decoration’</span></a> property and SVG, a
    <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element represents a
    block-level element and any of the potential children of a <a href="#text-TextElement"><span class="element-name">‘text’</span></a>
    element (e.g., a <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>) represent inline elements.</p>
    <p>Also, the CSS2 definition of <a href="#text-TextDecorationProperty"><span class="prop-name">‘text-decoration’</span></a> specifies that the
    "color of the decorations" remain the same on descendant
    elements. Since SVG offers a painting model consisting of the
    ability to apply various types of paint (see <a href="#chapter-painting">Painting: Filling, Stroking and Marker
    Symbols</a>) to both the interior (i.e., the "fill") and the
    outline (i.e., the "stroke") of text, for SVG the <a href="#text-TextDecorationProperty"><span class="prop-name">‘text-decoration’</span></a> property is defined
    such that, for an element which has a specified value for the
    <a href="#text-TextDecorationProperty"><span class="prop-name">‘text-decoration’</span></a> property, all
    decorations on its content and that of its descendants are
    rendered using the same fill and stroke properties as are
    present on the given element. If the <a href="#text-TextDecorationProperty"><span class="prop-name">‘text-decoration’</span></a> property is
    specified on a descendant, then that overrides the
    ancestor.</p>
    <p>Because SVG allows text to be both filled and stroked,
    drawing order matters in some circumstances with text
    decorations. Text decoration drawing order should be as
    follows:</p>
    <ul><li>All text decorations except line-through should be drawn
      before the text is filled and stroked; thus, the text is
      rendered on top of these decorations.</li><li>Line-through should be drawn after the text is filled and
      stroked; thus, the line-through is rendered on top of the
      text.</li></ul>
    <a id="text-ExampleTextDecoration01" name="text-ExampleTextDecoration01"></a> 
    <p><span class="example-ref">Example textdecoration01</span>
    provides examples for <a href="#text-TextDecorationProperty"><span class="prop-name">‘text-decoration’</span></a>. The first line of
    text has no value for <a href="#text-TextDecorationProperty"><span class="prop-name">‘text-decoration’</span></a>, so the initial
    value of <span class="prop-value">text-decoration:none</span>
    is used. The second line shows <span class="prop-value">text-decoration:line-through</span>. The
    third line shows <span class="prop-value">text-decoration:underline</span>. The
    fourth line illustrates the rule whereby decorations are
    rendered using the same fill and stroke properties as are
    present on the element for which the <a href="#text-TextDecorationProperty"><span class="prop-name">‘text-decoration’</span></a> is specified. Since
    <a href="#text-TextDecorationProperty"><span class="prop-name">‘text-decoration’</span></a> is specified
    on the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element, all text within
    the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element has its
    underline rendered with the same fill and stroke properties as
    exist on the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element (i.e., blue
    fill, red stroke), even though the various words have different
    fill and stroke property values. However, the word "different"
    explicitly specifies a value for <a href="#text-TextDecorationProperty"><span class="prop-name">‘text-decoration’</span></a>; thus, its underline
    is rendered using the fill and stroke properties as the <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element that surrounds
    the word "different" (i.e., yellow fill, darkgreen stroke):</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="4cm" viewBox="0 0 1200 400"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example textdecoration01 - behavior of 'text-decoration' property&lt;/desc&gt;
  &lt;rect x="1" y="1" width="1198" height="398" fill="none" stroke="blue" stroke-width="2" /&gt;
  &lt;g font-size="60" fill="blue" stroke="red" stroke-width="1" &gt;
    &lt;text x="100" y="75"&gt;Normal text&lt;/text&gt;
    &lt;text x="100" y="165" text-decoration="line-through" &gt;Text with line-through&lt;/text&gt;
    &lt;text x="100" y="255" text-decoration="underline" &gt;Underlined text&lt;/text&gt;
    &lt;text x="100" y="345" text-decoration="underline" &gt;
      &lt;tspan&gt;One &lt;/tspan&gt;
      &lt;tspan fill="yellow" stroke="purple" &gt;word &lt;/tspan&gt;
      &lt;tspan fill="yellow" stroke="black" &gt;has &lt;/tspan&gt;
      &lt;tspan fill="yellow" stroke="darkgreen" text-decoration="underline" &gt;different &lt;/tspan&gt;
      &lt;tspan fill="yellow" stroke="blue" &gt;underlining&lt;/tspan&gt;
    &lt;/text&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example textdecoration01</caption><tr><td><img alt="Example textdecoration01 — behavior of 'text-decoration' property" src="images/text/textdecoration01.png" /></td></tr></table><p class="view-as-svg"><a href="images/text/textdecoration01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<h2 id="text-TextOnAPath">10.13 Text on a path</h2>



<h3 id="text-TextOnAPathIntroduction">10.13.1 Introduction to text on a path</h3>

<p>In addition to text drawn in a straight line, SVG also includes the ability
to place text along the shape of a <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element. To specify that a
block of text is to be rendered along the shape of a <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, include
the given text within a <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> element which includes an
<a href="#text-TextPathElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> attribute with an <a href="#intro-TermIRIReference">IRI reference</a>
to a <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element.</p>

<h3 id="text-TextPathElement">10.13.2 The <span class="element-name">‘textPath’</span> element</h3>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘textPath’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermTextContentElement">Text content element</a>, <a href="#intro-TermTextContentChildElement">text content child element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#linking-AElement"><span class="element-name">‘a’</span></a></li><li><a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a></li><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li><li><a href="#text-TRefElement"><span class="element-name">‘tref’</span></a></li><li><a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#text-TextPathElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#text-TextPathElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li><li><a href="#text-TextPathElementStartOffsetAttribute"><span class="attr-name">‘startOffset’</span></a></li><li><a href="#text-TextPathElementMethodAttribute"><span class="attr-name">‘method’</span></a></li><li><a href="#text-TextPathElementSpacingAttribute"><span class="attr-name">‘spacing’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#text-InterfaceSVGTextPathElement">SVGTextPathElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="text-TextPathElementStartOffsetAttribute"><span class="adef">startOffset</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>An offset from the start of the <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> for the initial
        current text position, calculated using the user agent's <a href="#paths-DistanceAlongAPath">distance along the
        path</a> algorithm.<br />
         If a <a href="#types-DataTypeLength">&lt;length&gt;</a> other
        than a percentage is given, then the <a href="#text-TextPathElementStartOffsetAttribute"><span class="attr-name">‘startOffset’</span></a> represents a distance
        along the path measured in the current user coordinate
        system.<br />
         If a percentage is given, then the <a href="#text-TextPathElementStartOffsetAttribute"><span class="attr-name">‘startOffset’</span></a> represents a
        percentage distance along the entire path. Thus, <span class="attr-value">startOffset="0%"</span> indicates the
        start point of the <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> and <span class="attr-value">startOffset="100%"</span> indicates the
        end point of the <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>.<br />
        <br />
         If the attribute is not specified, the effect is as if a
        value of "0" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt><a id="text-TextPathElementMethodAttribute" name="text-TextPathElementMethodAttribute"></a> <span class="adef">method</span> = "<span class="attr-value">align | stretch</span>"</dt><dd>Indicates the method by which text should be rendered
        along the path.<br />
         A value of <span class="attr-value">align</span> indicates
        that the glyphs should be rendered using simple 2x3
        transformations such that there is no stretching/warping of
        the glyphs. Typically, supplemental rotation, scaling and
        translation transformations are done for each glyph to be
        rendered. As a result, with <span class="attr-value">align</span>, fonts where the glyphs are
        designed to be connected (e.g., cursive fonts), the
        connections may not align properly when text is rendered
        along a path.<br />
         A value of <span class="attr-value">stretch</span>
        indicates that the glyph outlines will be converted into
        paths, and then all end points and control points will be
        adjusted to be along the perpendicular vectors from the
        path, thereby stretching and possibly warping the glyphs.
        With this approach, connected glyphs, such as in cursive
        scripts, will maintain their connections.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">align</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt><a id="text-TextPathElementSpacingAttribute" name="text-TextPathElementSpacingAttribute"></a> <span class="adef">spacing</span> = "<span class="attr-value">auto | exact</span>"</dt><dd>Indicates how the user agent should determine the
        spacing between glyphs that are to be rendered along a
        path.<br />
         A value of <span class="attr-value">exact</span> indicates
        that the glyphs should be rendered exactly according to the
        spacing rules as specified in <a href="#text-TextpathLayoutRules">Text on a path layout
        rules</a>.<br />
         A value of <span class="attr-value">auto</span> indicates
        that the user agent should use text-on-a-path layout
        algorithms to adjust the spacing between glyphs in order to
        achieve visually appealing results.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">exact</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt><a id="text-TextPathElementHrefAttribute" name="text-TextPathElementHrefAttribute"></a> <span class="adef">xlink:href</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span>"</dt><dd>An <a href="#linking-IRIReference">IRI
        reference</a> to the <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element onto which
        the glyphs will be rendered. If &lt;iri&gt; is an invalid
        reference (e.g., no such element exists, or the referenced
        element is not a <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>), then the <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> element is
        in error and its entire contents shall not be rendered by the user
        agent.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>
    <p>The path data coordinates within the referenced <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>
    element are assumed to be in the same coordinate system as the
    current <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element, not in the coordinate system where
    the <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element is defined. The <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a>
    attribute on the referenced <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element represents a
    supplemental transformation relative to the current user coordinate
    system for the current <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element, including any
    adjustments to the current user coordinate system due to a possible
    <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute on the current <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element.
    For example, the following fragment of SVG content:</p>
<pre>
&lt;svg xmlns="http://www.w3.org/2000/svg" 
     xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"&gt;
  &lt;g <span style="font-weight:bold; color:red">transform="translate(25,25)"</span>&gt;
    &lt;defs&gt;
      &lt;path id="path1" <span style="font-weight:bold; color:green">transform="scale(2)"</span> d="..." fill="none" stroke="red"/&gt;
    &lt;/defs&gt;
  &lt;/g&gt;
  &lt;text <span style="font-weight:bold; color:blue">transform="rotate(45)"</span>&gt;
    &lt;textPath xlink:href="#path1"&gt;Text along path1&lt;/textPath&gt;
  &lt;/text&gt;
&lt;/svg&gt;
</pre>
    <p>should have the same effect as the following:</p>
<pre>
&lt;svg xmlns="http://www.w3.org/2000/svg" 
     xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"&gt;
  &lt;g <span style="font-weight:bold; color:blue">transform="rotate(45)"</span>&gt;
    &lt;defs&gt;
      &lt;path id="path1" <span style="font-weight:bold; color:green">transform="scale(2)"</span> d="..." fill="none" stroke="red"/&gt;
    &lt;/defs&gt;
    &lt;text&gt;
      &lt;textPath xlink:href="#path1"&gt;Text along path1&lt;/textPath&gt;
    &lt;/text&gt;
  &lt;/g&gt;
&lt;/svg&gt;
</pre>
    <p>Note that the <code style="font-weight:bold; color:red">transform="translate(25,25)"</code>
    has no effect on the <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> element, whereas the
    <code style="font-weight:bold; color:blue">transform="rotate(45)"</code>
    applies to both the <a href="#text-TextElement"><span class="element-name">‘text’</span></a>
    and the use of the <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>
    element as the referenced shape for text on a path.</p>

    <p id="text-ExampleToap01"><span class="example-ref">Example toap01</span> provides a
    simple example of text on a path:</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="3.6cm" viewBox="0 0 1000 300" version="1.1"
     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;defs&gt;
    &lt;path id="MyPath"
          d="M 100 200 
             C 200 100 300   0 400 100
             C 500 200 600 300 700 200
             C 800 100 900 100 900 100" /&gt;
  &lt;/defs&gt;
  &lt;desc&gt;Example toap01 - simple text on a path&lt;/desc&gt;

  &lt;use xlink:href="#MyPath" fill="none" stroke="red"  /&gt;
  &lt;text font-family="Verdana" font-size="42.5" fill="blue" &gt;
    &lt;textPath xlink:href="#MyPath"&gt;
      We go up, then we go down, then up again
    &lt;/textPath&gt;
  &lt;/text&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="998" height="298"
        fill="none" stroke="blue" stroke-width="2" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example toap01</caption><tr><td><img alt="Example toap01 — simple text on a path" src="images/text/toap01.png" /></td></tr></table><p class="view-as-svg"><a href="images/text/toap01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p id="text-ExampleToap02"><span class="example-ref">Example toap02</span> shows how <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements can be
    included within <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>
    elements to adjust styling attributes and adjust the current
    text position before rendering a particular glyph. The first
    occurrence of the word "up" is filled with the color red.
    Attribute <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> is used to lift the word "up"
    from the baseline.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="3.6cm" viewBox="0 0 1000 300" version="1.1"
     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;defs&gt;
    &lt;path id="MyPath"
          d="M 100 200 
             C 200 100 300   0 400 100
             C 500 200 600 300 700 200
             C 800 100 900 100 900 100" /&gt;
  &lt;/defs&gt;
  &lt;desc&gt;Example toap02 - tspan within textPath&lt;/desc&gt;

  &lt;use xlink:href="#MyPath" fill="none" stroke="red"  /&gt;
  &lt;text font-family="Verdana" font-size="42.5" fill="blue" &gt;
    &lt;textPath xlink:href="#MyPath"&gt;
      We go 
      &lt;tspan dy="-30" fill="red" &gt;
        up
      &lt;/tspan&gt;
      &lt;tspan dy="30"&gt;
        ,
      &lt;/tspan&gt;
      then we go down, then up again
    &lt;/textPath&gt;
  &lt;/text&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="998" height="298"
        fill="none" stroke="blue" stroke-width="2" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example toap02</caption><tr><td><img alt="Example toap02 — tspan within textPath" src="images/text/toap02.png" /></td></tr></table><p class="view-as-svg"><a href="images/text/toap02.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p id="text-ExampleToap03"><span class="example-ref">Example toap03</span> demonstrates
    the use of the <a href="#text-TextPathElementStartOffsetAttribute"><span class="attr-name">‘startOffset’</span></a>
    attribute on the <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>
    element to specify the start position of the text string as a
    particular position along the path. Notice that glyphs that
    fall off the end of the path are not rendered (see <a href="#text-TextpathLayoutRules">text on a path layout
    rules</a>).</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="3.6cm" viewBox="0 0 1000 300" version="1.1"
     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;defs&gt;
    &lt;path id="MyPath"
          d="M 100 200 
             C 200 100 300   0 400 100
             C 500 200 600 300 700 200
             C 800 100 900 100 900 100" /&gt;
  &lt;/defs&gt;
  &lt;desc&gt;Example toap03 - text on a path with startOffset attribute&lt;/desc&gt;

  &lt;use xlink:href="#MyPath" fill="none" stroke="red"  /&gt;
  &lt;text font-family="Verdana" font-size="42.5" fill="blue" &gt;
    &lt;textPath xlink:href="#MyPath" startOffset="80%"&gt;
      We go up, then we go down, then up again
    &lt;/textPath&gt;
  &lt;/text&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="998" height="298"
        fill="none" stroke="blue" stroke-width="2" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example toap03</caption><tr><td><img alt="Example toap03 — text on a path with startOffset attribute" src="images/text/toap03.png" /></td></tr></table><p class="view-as-svg"><a href="images/text/toap03.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<h3 id="text-TextpathLayoutRules">10.13.3 Text on a path layout rules</h3>

    <p>Conceptually, for text on a path the target path is
    stretched out into either a horizontal or vertical straight
    line segment. For horizontal text layout flows, the path is
    stretched out into a hypothetical horizontal line segment such
    that the start of the path is mapped to the left of the line
    segment. For vertical text layout flows, the path is stretched
    out into a hypothetical vertical line segment such that the
    start of the path is mapped to the top of the line segment. The
    standard <a href="#text-TextLayout">text layout</a> rules
    are applied to the hypothetical straight line segment and the
    result is mapped back onto the target path. Vertical and
    bidirectional <a href="#text-TextLayout">text layout</a>
    rules also apply to text on a path.</p>
    <p>The <a href="#text-ReferenceOrientation">reference
    orientation</a> is determined individually for each glyph that
    is rendered along the path. For horizontal text layout flows,
    the reference orientation for a given glyph is the vector that
    starts at the intersection point on the path to which the glyph
    is attached and which points in the direction 90 degrees
    counter-clockwise from the angle of the curve at the
    intersection point. For vertical text layout flows, the
    reference orientation for a given glyph is the vector that
    starts at the intersection point on the path to which the glyph
    is attached and which points in the direction 180 degrees from
    the angle of the curve at the intersection point.</p>

    <p id="text-ExampleToap04"><span class="example-ref">Example toap04</span> will be used
    to illustrate the particular layout rules for text on a path
    that supplement the basic <a href="#text-TextLayout">text
    layout</a> rules for straight line horizontal or vertical
    text.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="3.6cm" viewBox="0 0 1000 300" version="1.1"
     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;defs&gt;
    &lt;path id="MyPath"
          d="M 100 125 
             C 150 125 250 175 300 175
             C 350 175 450 125 500 125
             C 550 125 650 175 700 175
             C 750 175 850 125 900 125" /&gt;
  &lt;/defs&gt;
  &lt;desc&gt;Example toap04 - text on a path layout rules&lt;/desc&gt;

  &lt;use xlink:href="#MyPath" fill="none" stroke="red"  /&gt;
  &lt;text font-family="Verdana" font-size="60" fill="blue" letter-spacing="2" &gt;
    &lt;textPath xlink:href="#MyPath"&gt;
      Choose shame or get war 
    &lt;/textPath&gt;
  &lt;/text&gt;

  &lt;!-- Show outline of canvas using 'rect' element --&gt;
  &lt;rect x="1" y="1" width="998" height="298"
        fill="none" stroke="blue" stroke-width="2" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example toap04</caption><tr><td><img alt="Example toap04 — text on a path layout rules" src="images/text/toap04.png" /></td></tr></table><p class="view-as-svg"><a href="images/text/toap04.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p>The following picture does an initial zoom in on the first
    glyph in the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element.</p>
    <img alt="Image that shows text on a path" src="images/text/toap05.png" width="288" height="91" /> 
    <p>The small dot above shows the point at which the glyph is
    attached to the path. The box around the glyph shows the glyph
    is rotated such that its horizontal axis is parallel to the
    tangent of the curve at the point at which the glyph is
    attached to the path. The box also shows the glyph's
    <span id="text-CharWidth" class="SVG-Term">charwidth</span> (i.e., the amount which
    the current text position advances horizontally when the glyph
    is drawn using horizontal text layout).</p>
    <p>The next picture zooms in further to demonstrate the
    detailed layout rules.</p>
    <img alt="Image that shows text on a path" src="images/text/toap06.png" width="288" height="176" /> 
    <p>For left-to-right horizontal text layout along a path (i.e.,
    when the glyph orientation is perpendicular to the <a href="#text-SettingInlineProgressionDirection">inline-progression-direction</a>),
    the layout rules are as follows:</p>
    <ul><li>Determine the <span id="text-StartPointOnPath" class="SVG-Term">startpoint-on-the-path</span> for the
      first glyph using attribute <a href="#text-TextPathElementStartOffsetAttribute"><span class="attr-name">‘startOffset’</span></a> and property
      <a href="#text-TextAnchorProperty"><span class="prop-name">‘text-anchor’</span></a>. For <span class="prop-value">text-anchor:start</span>,
      startpoint-on-the-path is the point on the path which
      represents the point on the path which is <a href="#text-TextPathElementStartOffsetAttribute"><span class="attr-name">‘startOffset’</span></a> distance along the
      path from the start of the path, calculated using the user
      agent's <a href="#paths-DistanceAlongAPath">distance
      along the path</a> algorithm. For <span class="prop-value">text-anchor:middle</span>,
      startpoint-on-the-path is the point on the path which
      represents the point on the path which is [ <a href="#text-TextPathElementStartOffsetAttribute"><span class="attr-name">‘startOffset’</span></a> minus half of the
      total advance values for all of the glyphs in the <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> element ] distance
      along the path from the start of the path, calculated using
      the user agent's <a href="#paths-DistanceAlongAPath">distance along the
      path</a> algorithm. For <span class="prop-value">text-anchor:end</span>,
      startpoint-on-the-path is the point on the path which
      represents the point on the path which is [ <a href="#text-TextPathElementStartOffsetAttribute"><span class="attr-name">‘startOffset’</span></a> minus the total
      advance values for all of the glyphs in the <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> element ]. Before
      rendering the first glyph, the horizontal component of the
      startpoint-on-the-path is adjusted to take into account
      various horizontal alignment text properties and attributes,
      such as a <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> attribute value on a <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element. (In the
      picture above, the startpoint-on-the-path is the leftmost dot
      on the path.)</li><li>Determine the glyph's charwidth (i.e., the amount which
      the current text position advances horizontally when the
      glyph is drawn using horizontal text layout). (In the picture
      above, the charwidth is the distance between the two dots at
      the side of the box.)</li><li>Determine the point on the curve which is charwidth
      distance along the path from the startpoint-on-the-path for
      this glyph, calculated using the user agent's <a href="#paths-DistanceAlongAPath">distance along the
      path</a> algorithm. This point is the <span id="text-EndPointOnPath" class="SVG-Term">endpoint-on-the-path</span> for the
      glyph. (In the picture above, the endpoint-on-the-path for
      the glyph is the rightmost dot on the path.)</li><li>Determine the <span id="text-MidPointOnPath" class="SVG-Term">midpoint-on-the-path</span>, which is
      the point on the path which is "halfway" (user agents can
      choose either a distance calculation or a parametric
      calculation) between the startpoint-on-the-path and the
      endpoint-on-the-path. (In the picture above, the
      midpoint-on-the-path is shown as a white dot.)</li><li>Determine the <span id="text-GlyphMidline" class="SVG-Term">glyph-midline</span>, which is the
      vertical line in the glyph's coordinate system that goes
      through the glyph's x-axis midpoint. (In the picture above,
      the glyph-midline is shown as a dashed line.)</li><li>Position the glyph such that the glyph-midline passes
      through the midpoint-on-the-path and is perpendicular to the
      line through the startpoint-on-the-path and the
      endpoint-on-the-path.</li><li>Align the glyph vertically relative to the
      midpoint-on-the-path based on property <a href="#text-AlignmentBaselineProperty"><span class="prop-name">‘alignment-baseline’</span></a> and any
      specified values for attribute <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> on a <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element. In the
      example above, the <a href="#text-AlignmentBaselineProperty"><span class="prop-name">‘alignment-baseline’</span></a> property is
      unspecified, so the initial value of <span class="prop-value">alignment-baseline:baseline</span>
      will be used. There are no <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements; thus, the
      baseline of the glyph is aligned to the
      midpoint-on-the-path.</li><li>For each subsequent glyph, set a new
      startpoint-on-the-path as the previous endpoint-on-the-path,
      but with appropriate adjustments taking into account
      horizontal kerning tables in the font and current values of
      various attributes and properties, including <a href="#text-SpacingProperties">spacing properties</a> and
      <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements with values
      provided for attributes <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> and <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a>. All adjustments are
      calculated as distance adjustments along the path, calculated
      using the user agent's <a href="#paths-DistanceAlongAPath">distance along the
      path</a> algorithm.</li><li>Glyphs whose midpoint-on-the-path are off either end of
      the path are not rendered.</li><li>Continue rendering glyphs until there are no more
      glyphs.</li></ul>
    <p>Comparable rules are used for top-to-bottom vertical text
    layout along a path (i.e., when the glyph orientation is
    parallel with the <a href="#text-SettingInlineProgressionDirection">inline-progression-direction</a>),
    the layout rules are as follows:</p>
    <ul><li>Determine the startpoint-on-the-path using the same
      method as for horizontal text layout along a path, except
      that before rendering the first glyph, the horizontal
      component of the startpoint-on-the-path is adjusted to take
      into account various vertical alignment text properties and
      attributes, such as a <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> attribute value on a <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element.</li><li>Determine the glyph's charheight (i.e., the amount which
      the current text position advances vertically when the glyph
      is drawn using vertical text layout).</li><li>Determine the point on the curve which is charheight
      distance along the path from the startpoint-on-the-path for
      this glyph, calculated using the user agent's <a href="#paths-DistanceAlongAPath">distance along the
      path</a> algorithm. This point is the endpoint-on-the-path
      for the glyph.</li><li>Determine the midpoint-on-the-path, which is the point on
      the path which is "halfway" (user agents can choose either a
      distance calculation or a parametric calculation) between the
      startpoint-on-the-path and the endpoint-on-the-path.</li><li>Determine the glyph-midline, which is the horizontal line
      in the glyph's coordinate system that goes through the
      glyph's y-axis midpoint.</li><li>Position the glyph such that the glyph-midline passes
      through the midpoint-on-the-path and is perpendicular to the
      line through the startpoint-on-the-path and the
      endpoint-on-the-path.</li><li>Align the glyph horizontally (where horizontal is
      relative to the glyph's coordinate system) relative to the
      midpoint-on-the-path based on property <a href="#text-AlignmentBaselineProperty"><span class="prop-name">‘alignment-baseline’</span></a> and any
      specified values for attribute <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> on a <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element.</li><li>For each subsequent glyph, set a new
      startpoint-on-the-path as the previous endpoint-on-the-path,
      but with appropriate adjustments taking into account vertical
      kerning tables in the font and current values of various
      attributes and properties, including <a href="#text-SpacingProperties">spacing properties</a> and
      <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements with values
      provided for attributes <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> and <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a>. All adjustments are
      calculated as distance adjustments along the path, calculated
      using the user agent's <a href="#paths-DistanceAlongAPath">distance along the
      path</a> algorithm.</li><li>Glyphs whose midpoint-on-the-path are off either end of
      the path are not rendered.</li><li>Continue rendering glyphs until there are no more
      glyphs.</li></ul>
    <p>In the calculations above, if either the
    startpoint-on-the-path or the endpoint-on-the-path is off the
    end of the path, then extend the path beyond its end points
    with a straight line that is parallel to the tangent at the
    path at its end point so that the midpoint-on-the-path can
    still be calculated.</p>
    <p>When the <a href="#text-SettingInlineProgressionDirection">inline-progression-direction</a>
    is horizontal, then any <span class="attr-name">‘x’</span> attributes on
    <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> or <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> elements represent
    new absolute offsets along the path, thus providing explicit
    new values for startpoint-on-the-path. Any <span class="attr-name">‘y’</span> attributes on
    <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> or <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> elements are
    ignored. When the <a href="#text-SettingInlineProgressionDirection">inline-progression-direction</a>
    is vertical, then any <span class="attr-name">‘y’</span> attributes on
    <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> or <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> elements represent
    new absolute offsets along the path, thus providing explicit
    new values for startpoint-on-the-path. Any <span class="attr-name">‘x’</span>
    attributes on <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> or
    <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> elements are ignored.</p>



<h2 id="text-AlternateGlyphs">10.14 Alternate glyphs</h2>

<p>There are situations such as ligatures, special-purpose fonts (e.g.,
a font for music symbols) or alternate glyphs for Asian text strings
where it is required that a different set of glyphs is used than the
glyph(s) which normally corresponds to the given character data.</p>

<h3 id="text-AltGlyphElement">10.14.1 The <span class="element-name">‘altGlyph’</span> element</h3>



<p>The <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element provides control over the glyphs used to
render particular character data.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘altGlyph’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermTextContentElement">Text content element</a>, <a href="#intro-TermTextContentChildElement">text content child element</a></dd><dt>Content model:</dt><dd>
                Any elements or character data.
              </dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#text-AltGlyphElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#text-AltGlyphElementXAttribute"><span class="attr-name">‘x’</span></a></li><li><a href="#text-AltGlyphElementYAttribute"><span class="attr-name">‘y’</span></a></li><li><a href="#text-AltGlyphElementDXAttribute"><span class="attr-name">‘dx’</span></a></li><li><a href="#text-AltGlyphElementDYAttribute"><span class="attr-name">‘dy’</span></a></li><li><a href="#text-AltGlyphElementGlyphRefAttribute"><span class="attr-name">‘glyphRef’</span></a></li><li><a href="#text-AltGlyphElementFormatAttribute"><span class="attr-name">‘format’</span></a></li><li><a href="#text-AltGlyphElementRotateAttribute"><span class="attr-name">‘rotate’</span></a></li><li><a href="#text-AltGlyphElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#text-InterfaceSVGAltGlyphElement">SVGAltGlyphElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="text-AltGlyphElementHrefAttribute"><span class="adef">xlink:href</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span>"</dt><dd>An <a href="#linking-IRIReference">IRI
        reference</a> either to a <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> element in an SVG
        document fragment or to an <a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a>
        element.<br />
        <br />
         If the reference is to a <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> element and that glyph
        is available, then that glyph is rendered instead of the
        character(s) that are inside of the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element.<br />
        <br />
         If the reference is to an <a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a> element, then
        if an appropriate set of alternate glyphs is located from
        processing the <a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a> element, then
        those alternate glyphs are rendered instead of the
        character(s) that are inside of the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element.<br />
        <br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span><br />
        <br />
        </dd><dt id="text-AltGlyphElementGlyphRefAttribute"><span class="adef">glyphRef</span> = "<span class="attr-value">&lt;string&gt;</span>"</dt><dd>The glyph identifier, the format of which is dependent
        on the <a href="#text-AltGlyphElementFormatAttribute"><span class="attr-name">‘format’</span></a> of the given font.
        (Same meaning as the <a href="#text-GlyphRefElementGlyphRefAttribute"><span class="attr-name">‘glyphRef’</span></a> attribute on the
        <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a> element.)<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="text-AltGlyphElementFormatAttribute"><span class="adef">format</span> = "<span class="attr-value">&lt;string&gt;</span>"</dt><dd>The format of the given font. If the font is in <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#referencing">one of
        the formats listed in CSS2</a> ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.3.5),
        such as <em>TrueDoc™ Portable Font Resource</em> or <em>Embedded OpenType</em>,
        then the &lt;string&gt; must contain the corresponding font
        format string, such as <em>truedoc-pfr</em> or
        <em>embedded-opentype</em>. (This attribute has the same meaning as the <a href="#text-GlyphRefElementFormatAttribute"><span class="attr-name">‘format’</span></a>
        attribute on the <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a> element.)<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="text-AltGlyphElementXAttribute"><span class="adef">x</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinates">&lt;list-of-coordinates&gt;</a></span>"</dt><dd>The <a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a>
        values are processed in the same manner as the <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>
        attribute on the <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element, with the
        following exception: If the referenced alternate glyphs are
        rendered instead of the Unicode characters inside the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element, then any
        absolute X coordinates specified via an <a href="#text-AltGlyphElementXAttribute"><span class="attr-name">‘x’</span></a>
        attribute on this element or any ancestor
        <a href="#text-TextElement"><span class="element-name">‘text’</span></a> or <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements for
        Unicode characters 2 through <var>n</var> within the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element are ignored.
        Any absolute X coordinate specified via an <a href="#text-AltGlyphElementXAttribute"><span class="attr-name">‘x’</span></a> attribute on this
        element or any ancestor <a href="#text-TextElement"><span class="element-name">‘text’</span></a> or <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements for the
        first Unicode character within the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element sets a new
        absolute X coordinate for the <a href="#text-CurrentTextPosition">current text
        position</a> before rendering the first alternate
        glyph.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="text-AltGlyphElementYAttribute"><span class="adef">y</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinates">&lt;list-of-coordinates&gt;</a></span>"</dt><dd>The corresponding absolute Y coordinates for rendering
        the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>
        element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="text-AltGlyphElementDXAttribute"><span class="adef">dx</span> = "<span class="attr-value"><a href="#types-DataTypeLengths">&lt;list-of-lengths&gt;</a></span>"</dt><dd>The <a href="#types-DataTypeLength">&lt;length&gt;</a> values
        are processed in the same manner as the <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> attribute on
        the <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element, with the
        following exception: If the referenced alternate glyphs are
        rendered instead of the Unicode characters inside the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element, then any
        relative X coordinates specified via an <a href="#text-AltGlyphElementDXAttribute"><span class="attr-name">‘dx’</span></a> attribute on this element or
        any ancestor <a href="#text-TextElement"><span class="element-name">‘text’</span></a> or <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements for
        Unicode characters 2 through <var>n</var> within the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element are ignored.
        Any relative X coordinate specified via an <a href="#text-AltGlyphElementDXAttribute"><span class="attr-name">‘dx’</span></a> attribute on this element or
        any ancestor <a href="#text-TextElement"><span class="element-name">‘text’</span></a> or <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements for the
        first Unicode character within the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element sets a new
        relative X coordinate for the <a href="#text-CurrentTextPosition">current text
        position</a> before rendering the first alternate
        glyph.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="text-AltGlyphElementDYAttribute"><span class="adef">dy</span> = "<span class="attr-value"><a href="#types-DataTypeLengths">&lt;list-of-lengths&gt;</a></span>"</dt><dd>The corresponding relative Y coordinates for rendering
        the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>
        element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="text-AltGlyphElementRotateAttribute"><span class="adef">rotate</span> = "<span class="attr-value"><a href="#types-DataTypeNumbers">&lt;list-of-numbers&gt;</a></span>"</dt><dd>The <a href="#types-DataTypeNumber">&lt;number&gt;</a> values
        are processed in the same manner as the <a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a>
        attribute on the <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element, with the
        following exception: If the referenced alternate glyphs are
        rendered instead of the Unicode characters inside the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>
        element, then any supplemental rotation values specified via an
        <a href="#text-AltGlyphElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> attribute on this element or any ancestor
        <a href="#text-TextElement"><span class="element-name">‘text’</span></a> or <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements for
        Unicode characters 2 through <var>n</var> within the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>
        element are ignored.
        Supplemental rotation values specified via an <a href="#text-AltGlyphElementRotateAttribute"><span class="attr-name">‘rotate’</span></a>
        attribute on this element
        or any ancestor <a href="#text-TextElement"><span class="element-name">‘text’</span></a> or <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements for the
        first Unicode character within the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element sets a new
        supplemental rotation angle before rendering the alternate
        glyphs.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes
        (non-additive).</span></dd></dl>
    </div>

<p>If the references to alternate glyphs do not result in successful
identification of alternate glyphs to use, then the character(s)
that are inside of the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element are rendered as
if the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element were a <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> element
instead.</p> <p>An <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element either references a
<a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> element or an <a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a> element via its
<a href="#text-AltGlyphElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> attribute or identifies a glyph by means of
<a href="#text-FontPropertiesUsedBySVG">font selection properties</a>,
a glyph identifier and a font format. If the <a href="#text-AltGlyphElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>
attribute is specified, it takes precedence, and the other glyph
identification attributes and properties are ignored.</p>



<h3 id="text-AlternateGlyphDefinitions">10.14.2 The <span class="element-name">‘altGlyphDef’</span>,
<span class="element-name">‘altGlyphItem’</span> and
<span class="element-name">‘glyphRef’</span> elements</h3>

<p id="text-AltGlyphDefElement">The <a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a> element defines a set of possible glyph
substitutions.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘altGlyphDef’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>
      Either:
      <ul>
        <li>one or more <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a> elements, or</li>
        <li>one or more <a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a> elements.</li>
      </ul>
    </dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#text-InterfaceSVGAltGlyphDefElement">SVGAltGlyphDefElement</a></li></ul></dd></dl></div>

<p>An <a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a> can contain either of the following:</p>

<ul><li>In the simplest case, an <a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a> contains one or more
  <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a> elements. Each <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a> element references
  a single glyph within a particular font. If all of the referenced
  glyphs are available, then these glyphs are rendered instead of the
  character(s) inside of the referencing <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element. If
  any of the referenced glyphs are unavailable, then the character(s)
  that are inside of the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element are rendered as
  if there were not an <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element surrounding those
  characters.</li><li>In the more complex case, an <a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a> contains one
  or more <a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a> elements. Each <a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a>
  represents a candidate set of substitute glyphs. Each
  <a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a> contains one or more <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a> elements.
  Each <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a> element references a single glyph within
  a particular font. The first <a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a> in which all
  referenced glyphs are available is chosen. The glyphs referenced from
  this <a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a> are rendered instead of the character(s)
  that are inside of the referencing <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element. If none
  of the <a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a> elements result in a successful match
  (i.e., none of the <a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a> elements has all of its
  referenced glyphs available), then the character(s) that are inside
  of the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element are rendered as if there were not an
  <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element surrounding those characters.</li></ul>

<p id="text-AltGlyphItemElement">The <a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a> element
defines a candidate set of possible glyph substitutions. The first
<a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a> element whose referenced glyphs are all available
is chosen. Its glyphs are rendered instead of the character(s) that are
inside of the referencing <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘altGlyphItem’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>
      One or more <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a> elements.
    </dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#text-InterfaceSVGAltGlyphItemElement">SVGAltGlyphItemElement</a></li></ul></dd></dl></div>



<p id="text-GlyphRefElement">The <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a> element defines a
possible glyph to use.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘glyphRef’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Empty.</dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#text-GlyphRefElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#text-GlyphRefElementXAttribute"><span class="attr-name">‘x’</span></a></li><li><a href="#text-GlyphRefElementYAttribute"><span class="attr-name">‘y’</span></a></li><li><a href="#text-GlyphRefElementDXAttribute"><span class="attr-name">‘dx’</span></a></li><li><a href="#text-GlyphRefElementDYAttribute"><span class="attr-name">‘dy’</span></a></li><li><a href="#text-GlyphRefElementGlyphRefAttribute"><span class="attr-name">‘glyphRef’</span></a></li><li><a href="#text-GlyphRefElementFormatAttribute"><span class="attr-name">‘format’</span></a></li><li><a href="#text-GlyphRefElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#text-InterfaceSVGGlyphRefElement">SVGGlyphRefElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="text-GlyphRefElementHrefAttribute"><span class="adef">xlink:href</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span>"</dt><dd>An <a href="#linking-IRIReference">IRI
        reference</a> to a <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> element in an SVG
        document fragment. The referenced <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> is rendered as an
        alternate glyph.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="text-GlyphRefElementGlyphRefAttribute"><span class="adef">glyphRef</span> = "<span class="attr-value">&lt;string&gt;</span>"</dt><dd>The glyph identifier, the format of which is dependent
        on the <a href="#text-GlyphRefElementFormatAttribute"><span class="attr-name">‘format’</span></a> of the given
        font.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="text-GlyphRefElementFormatAttribute"><span class="adef">format</span> = "<span class="attr-value">&lt;string&gt;</span>"</dt><dd>The format of the given font. If the font is in <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#referencing">one of
        the formats listed in CSS2</a> ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.3.5),
        such as <em>TrueDoc™ Portable Font Resource</em> or <em>Embedded OpenType</em>,
        then the &lt;string&gt; must contain the corresponding font
        format string, such as <em>truedoc-pfr</em> or
        <em>embedded-opentype</em>.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="text-GlyphRefElementXAttribute"><span class="adef">x</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>This value represents the new absolute X coordinate
        within the font's coordinate system for this glyph.<br />
         The font coordinate system is based on the <em>em
        square</em> model described in the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html">Fonts chapter</a>
        of CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], chapter 15).<br />
         If the attribute is not specified, for the first <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a> child element, the
        effect is as if the attribute were set to "0", whereas for
        subsequent <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a>
        child elements, the effect is as if the attribute were set
        to the end X coordinate from the previous <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a> element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="text-GlyphRefElementYAttribute"><span class="adef">y</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>The corresponding new absolute Y coordinate within the
        font's coordinate system for this glyph.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="text-GlyphRefElementDXAttribute"><span class="adef">dx</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>This value represents the relative X coordinate within
        the font's coordinate system for this glyph. The glyph is
        thus shifted by <span class="attr-value">&lt;number&gt;</span> units along the
        positive X axis within the font's coordinate system
        supplemental to the absolute X coordinate established by
        the <a href="#text-GlyphRefElementXAttribute"><span class="attr-name">‘x’</span></a> attribute (either due to an
        explicit <a href="#text-GlyphRefElementXAttribute"><span class="attr-name">‘x’</span></a> attribute or due to default
        value processing for the <a href="#text-GlyphRefElementXAttribute"><span class="attr-name">‘x’</span></a> attribute).<br />
         The font coordinate system is based on the <em>em
        square</em> model described in the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html">Fonts chapter</a>
        of CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], chapter 15).<br />
         If the attribute is not specified, the effect is as if the
        attribute were set to "0".<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="text-GlyphRefElementDYAttribute"><span class="adef">dy</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>The corresponding number of units within the font's
        coordinate system to shift the glyph along the positive Y
        axis relative to the absolute Y coordinate established by
        the <a href="#text-GlyphRefElementYAttribute"><span class="attr-name">‘y’</span></a> attribute.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd></dl>
    </div>

<p>A <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a> either references a
<a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> element in an SVG document fragment via its
<a href="#text-GlyphRefElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> attribute or identifies a glyph by means of <a href="#text-FontPropertiesUsedBySVG">font selection properties</a>,
a glyph identifier and a font format. If insufficient attributes
and properties have been specified to identify a glyph, then the
<a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a> is processed in the same manner as when
a glyph reference is fully specified, but the given glyph is not
available. If the <a href="#text-GlyphRefElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> attribute is specified, it takes
precedence, and the other glyph identification attributes and properties
are ignored.</p>



<h2 id="text-WhiteSpace">10.15 White space handling</h2>

<p id="text-XMLSpaceAttribute">SVG supports the standard XML attribute
<a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a> to specify the handling of white space characters
within a given <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element's character data. 
    Note that any child element of a <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element may also 
    have an <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a> attribute which will apply to that 
    child element's text content.
The SVG user
agent has special processing rules associated with this attribute
as described below. These are behaviors that occur subsequent to
XML parsing [<a href="http://www.w3.org/TR/2008/REC-xml-20081126/">XML10</a>]
and any construction of a DOM.</p>

<p><a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a> is an inheritable attribute which can have one of
two values:</p>

<dl><dt><span class="attr-value">'default'</span></dt><dd>(The initial/default value for <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a>.) When
  <span class="attr-value">xml:space="default"</span>, the SVG user
  agent will do the following using a copy of the original character
  data content. First, it will remove all newline characters. Then
  it will convert all tab characters into space characters. Then, it
  will strip off all leading and trailing space characters. Then, all
  contiguous space characters will be consolidated.</dd><dt><span class="attr-value">'preserve'</span></dt><dd>When <span class="attr-value">xml:space="preserve"</span>,
  the SVG user agent will do the following using a copy of the
  original character data content. It will convert all newline
  and tab characters into space characters. Then, it will draw
  all space characters, including leading, trailing and multiple
  contiguous space characters. Thus, when drawn with
  <span class="attr-value">xml:space="preserve"</span>, the string
  <code>"a   b"</code> (three spaces between "a" and
  "b") will produce a larger separation between "a" and "b" than
  <code>"a b"</code> (one space between "a" and "b").</dd></dl>

<p>The following example illustrates that line
indentation can be important when using
<span class="attr-value">xml:space="default"</span>. The fragment below
show two pairs of similar <a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements, with both <a href="#text-TextElement"><span class="element-name">‘text’</span></a>
elements using <span class="attr-value">xml:space="default"</span>. For
these examples, there is no extra white space at the end of any of the
lines (i.e., the line break occurs immediately after the last visible
character).</p>

<pre>
[01]  &lt;text xml:space='default'&gt;
[02]    WS example
[03]    indented lines
[04]  &lt;/text&gt;
[05]  &lt;text xml:space='preserve'&gt;WS example indented lines&lt;/text&gt;
[06]
[07]  &lt;text xml:space='default'&gt;
[08]WS example
[09]non-indented lines
[10]  &lt;/text&gt;
[11]  &lt;text xml:space='preserve'&gt;WS examplenon-indented lines&lt;/text&gt;
</pre>

<p>The first pair of <a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements above show the
effect of indented character data. The attribute
<span class="attr-value">xml:space="default"</span> in the first
<a href="#text-TextElement"><span class="element-name">‘text’</span></a> element instructs the user agent to:</p>

<ul><li>convert all tabs (if any) to space characters,</li><li>strip out all line breaks (i.e., strip out the line
  breaks at the end of lines [01], [02] and [03]),</li><li>strip out all leading space characters (i.e., strip out
  space characters before "WS example" on line [02]),</li><li>strip out all trailing space characters (i.e., strip out
  space characters before "&lt;/text&gt;" on line [04]),</li><li>consolidate all intermediate space characters (i.e., the
  space characters before "indented lines" on line [03]) into a
  single space character.</li></ul>

<p>The second pair of <a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements above show the
effect of non-indented character data. The attribute
<span class="attr-value">xml:space="default"</span> in the third
<a href="#text-TextElement"><span class="element-name">‘text’</span></a> element instructs the user agent to:</p>

<ul><li>convert all tabs (if any) to space characters,</li><li>strip out all line breaks (i.e., strip out the line
  breaks at the end of lines [07], [08] and [09]),</li><li>strip out all leading space characters (there are no
  leading space characters in this example),</li><li>strip out all trailing space characters (i.e., strip out
  space characters before "&lt;/text&gt;" on line [10]),</li><li>consolidate all intermediate space characters into a
  single space character (in this example, there are no
  intermediate space characters).</li></ul>

<p>Note that XML parsers are required to convert the standard
representations for a newline indicator (e.g., the literal
two-character sequence "#xD#xA" or the stand-alone literals #xD
or #xA) into the single character #xA before passing character
data to the application. Thus, each newline in SVG will be
represented by the single character #xA, no matter what
representation for newlines might have been used in the
original resource. (See
<a href="http://www.w3.org/TR/2008/REC-xml-20081126/#sec-line-ends">XML end-of-line handling</a>.)</p>

<p>Any features in the SVG language or the SVG DOM that are based
on character position number, such as the <a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a>,
<a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a>, <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> and
<a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a> attributes on the <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>,
<a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> and <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> elements, are based on character
position after applying the white space handling rules described here.
In particular, if <span class="attr-value">xml:space="default"</span>,
it is often the case that white space characters are removed as part
of processing. Character position numbers index into the text string
after the white space characters have been removed per the rules in this
section.</p>

<p>
Note that a glyph corresponding to a whitespace character should only be displayed as a visible but blank space, even if the glyph itself happens to be non-blank. 
See <a href="http://www.unicode.org/faq/unsup_char.html">display of unsupported characters</a> [<a href="#refs-ref-UNICODE">UNICODE</a>].
</p>

<p>The <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a> attribute is:</p>
<p>    <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: no.</span></p>

<h2 id="text-TextSelection">10.16 Text selection and clipboard operations</h2>

<p><a href="#conform-ConformingSVGViewers">Conforming SVG
viewers</a> on systems which have the capacity for text selection (e.g.,
systems which are equipped with a pointer device such as a mouse) and
which have system clipboards for copy/paste operations are required to
support:</p>

<ul><li>user selection of text strings in SVG content</li><li>the ability to copy selected text strings to the system clipboard</li></ul>

<p>A text selection operation starts when all of the following occur:</p>

<ul><li>the user positions the pointing device over a glyph that has
  been rendered as part of a <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element, initiates a
  <em>select</em> operation (e.g., pressing the standard system mouse
  button for select operations) and then moves the pointing device while
  continuing the <em>select</em> operation (e.g., continuing to press
  the standard system mouse button for select operations)</li><li>no other visible graphics element has been painted above the glyph
  at the point at which the pointing device was clicked</li><li>no <a href="#linking-Links">links</a> or
  <a href="#script-EventHandling">events</a> have been assigned to the
  <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> or <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> element(s) (or
  their ancestors) associated with the given glyph.</li></ul>

<p>As the text selection operation proceeds (e.g., the user continues to
press the given mouse button), all associated events with other graphics
elements are ignored (i.e., the text selection operation is modal) and
the SVG user agent shall dynamically indicate which characters are
selected by an appropriate highlighting technique, such as redrawing the
selected glyphs with inverse colors. As the pointer is moved during the
text selection process, the end glyph for the text selection operation
is the glyph within the same <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element whose glyph cell is
closest to the pointer. All characters within the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element
whose position within the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element is between the start
of selection and end of selection shall be highlighted, regardless of
position on the canvas and regardless of any graphics elements that
might be above the end of selection point.</p>

<p>Once the text selection operation ends (e.g., the user releases the
given mouse button), the selected text will stay highlighted until an
event occurs which cancels text selection, such as a pointer device
activation event (e.g., pressing a mouse button).</p>

<p>Detailed rules for determining which characters to
highlight during a text selection operation are provided in
<a href="#implnote-TextSelectionImplementationNotes">Text selection
implementation notes</a>.</p>

<p>For systems which have system clipboards, the SVG user agent is
required to provide a user interface for initiating a copy of the
currently selected text to the system clipboard. It is sufficient for
the SVG user agent to post the selected text string in the system's
appropriate clipboard format for plain text, but it is preferable if the
SVG user agent also posts a rich text alternative which captures the
various <a href="#text-FontPropertiesUsedBySVG">font properties</a>
associated with the given text string.</p>

<p>For bidirectional text, the user agent must support text
selection in logical order, which will result in discontinuous
highlighting of glyphs due to the bidirectional reordering of
characters. User agents can provide an alternative ability to
select bidirectional text in visual rendering order (i.e., after
<a href="#text-RelationshipWithBiDirectionality">bidirectional</a> text
layout algorithms have been applied), with the result that selected
character data might be discontinuous logically. In this case, if the
user requests that bidirectional text be copied to the clipboard, then
the user agent is required to make appropriate adjustments to copy only
the visually selected characters to the clipboard.</p>

<p>When feasible, it is recommended that generators of SVG attempt to
order their text strings to facilitate properly ordered text selection
within SVG viewing applications such as Web browsers.</p>

<h2 id="text-DOMInterfaces">10.17 DOM interfaces</h2>

<h3 id="text-InterfaceSVGTextContentElement">10.17.1 Interface SVGTextContentElement</h3>


 <p>The <a class="idlinterface" href="#text-InterfaceSVGTextContentElement">SVGTextContentElement</a> is inherited by various text-related
 interfaces, such as <a class="idlinterface" href="#text-InterfaceSVGTextElement">SVGTextElement</a>, <a class="idlinterface" href="#text-InterfaceSVGTSpanElement">SVGTSpanElement</a>,
 <a class="idlinterface" href="#text-InterfaceSVGTRefElement">SVGTRefElement</a>, <a class="idlinterface" href="#text-InterfaceSVGAltGlyphElement">SVGAltGlyphElement</a> and
 <a class="idlinterface" href="#text-InterfaceSVGTextPathElement">SVGTextPathElement</a>.</p>

 <p>For the methods on this interface that refer to an index to a character
 or a number of characters, these references are to be interpreted as an
 index to a UTF-16 code unit or a number of UTF-16 code units, respectively.
 This is for consistency with DOM Level 2 Core, where methods on the
 <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-FF21A306">CharacterData</a> interface use UTF-16 code units as indexes and counts
 within the character data. Thus for example, if the text content of a
 <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element is a single non-BMP character, such as U+10000, then
 invoking <a class="idlattr" href="#text-__svg__SVGTextContentElement__getNumberOfChars">getNumberOfChars</a> on that element
 will return 2 since there are two UTF-16 code units (the surrogate pair)
 used to represent that one character.</p>
<pre class="idl">interface <b>SVGTextContentElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                  <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                                  <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                                  <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                                  <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {

  // lengthAdjust Types
  const unsigned short <a href="#text-__svg__SVGTextContentElement__LENGTHADJUST_UNKNOWN">LENGTHADJUST_UNKNOWN</a> = 0;
  const unsigned short <a href="#text-__svg__SVGTextContentElement__LENGTHADJUST_SPACING">LENGTHADJUST_SPACING</a> = 1;
  const unsigned short <a href="#text-__svg__SVGTextContentElement__LENGTHADJUST_SPACINGANDGLYPHS">LENGTHADJUST_SPACINGANDGLYPHS</a> = 2;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#text-__svg__SVGTextContentElement__textLength">textLength</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#text-__svg__SVGTextContentElement__lengthAdjust">lengthAdjust</a>;

  long <a href="#text-__svg__SVGTextContentElement__getNumberOfChars">getNumberOfChars</a>();
  float <a href="#text-__svg__SVGTextContentElement__getComputedTextLength">getComputedTextLength</a>();
  float <a href="#text-__svg__SVGTextContentElement__getSubStringLength">getSubStringLength</a>(in unsigned long charnum, in unsigned long nchars) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#text-__svg__SVGTextContentElement__getStartPositionOfChar">getStartPositionOfChar</a>(in unsigned long charnum) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#text-__svg__SVGTextContentElement__getEndPositionOfChar">getEndPositionOfChar</a>(in unsigned long charnum) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <a href="#text-__svg__SVGTextContentElement__getExtentOfChar">getExtentOfChar</a>(in unsigned long charnum) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  float <a href="#text-__svg__SVGTextContentElement__getRotationOfChar">getRotationOfChar</a>(in unsigned long charnum) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  long <a href="#text-__svg__SVGTextContentElement__getCharNumAtPosition">getCharNumAtPosition</a>(in <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> point);
  void <a href="#text-__svg__SVGTextContentElement__selectSubString">selectSubString</a>(in unsigned long charnum, in unsigned long nchars) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="constants-header">Constants in group “lengthAdjust Types”:</dt><dd><dl class="constants">
<dt id="text-__svg__SVGTextContentElement__LENGTHADJUST_UNKNOWN" class="constant first-child"><b>LENGTHADJUST_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The enumeration was set to a value that is not one of predefined types.
 It is invalid to attempt to define a new value of this type or to
 attempt to switch an existing value to this type.

</div></dd>
<dt id="text-__svg__SVGTextContentElement__LENGTHADJUST_SPACING" class="constant"><b>LENGTHADJUST_SPACING</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'spacing'</span>.

</div></dd>
<dt id="text-__svg__SVGTextContentElement__LENGTHADJUST_SPACINGANDGLYPHS" class="constant"><b>LENGTHADJUST_SPACINGANDGLYPHS</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'spacingAndGlyphs'</span>.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="text-__svg__SVGTextContentElement__textLength" class="attribute first-child"><b>textLength</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <span class="attr-name">‘textLength’</span> on
 the given element.
</div></dd>
<dt id="text-__svg__SVGTextContentElement__lengthAdjust" class="attribute"><b>lengthAdjust</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <span class="attr-name">‘lengthAdjust’</span> on
 the given element.  The value must be one of the length adjust constants
 defined on this interface.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="text-__svg__SVGTextContentElement__getNumberOfChars" class="operation first-child">long <b>getNumberOfChars</b>()</dt><dd class="operation"><div>
 Returns the total number of characters available for rendering within
 the current element, which includes referenced characters from
 <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> reference, regardless of whether they will be rendered.
 Effectively, this is equivalent to the length of the
 <a href="http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Node3-textContent">Node::textContent</a>
 attribute from DOM Level 3 Core ([<a href="#refs-ref-DOM3">DOM3</a>],
 section 1.4), if that attribute also expanded <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>
 elements.

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> Total number of characters.
</div></dd></dl></dd>
<dt id="text-__svg__SVGTextContentElement__getComputedTextLength" class="operation">float <b>getComputedTextLength</b>()</dt><dd class="operation"><div>
 The total sum of all of the advance values from rendering all of the
 characters within this element, including the advance value on the
 glyphs (horizontal or vertical), the effect of properties
 <a href="#text-KerningProperty"><span class="prop-name">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="prop-name">‘letter-spacing’</span></a> and <a href="#text-WordSpacingProperty"><span class="prop-name">‘word-spacing’</span></a> and
 adjustments due to attributes <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> and <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> on
 <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements. For non-rendering environments, the user agent
 shall make reasonable assumptions about glyph metrics. 

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> The text advance distance.
</div></dd></dl></dd>
<dt id="text-__svg__SVGTextContentElement__getSubStringLength" class="operation">float <b>getSubStringLength</b>(in unsigned long <var>charnum</var>, in unsigned long <var>nchars</var>)</dt><dd class="operation"><div>
 The total sum of all of the advance values from rendering the specified 
 substring of the characters, including the advance value on the glyphs 
 (horizontal or vertical), the effect of properties <a href="#text-KerningProperty"><span class="prop-name">‘kerning’</span></a>, 
 <a href="#text-LetterSpacingProperty"><span class="prop-name">‘letter-spacing’</span></a> and <a href="#text-WordSpacingProperty"><span class="prop-name">‘word-spacing’</span></a> and adjustments due to 
 attributes <a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a> and <a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a> on <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> elements. For 
 non-rendering environments, the user agent shall make reasonable 
 assumptions about glyph metrics.  If multiple consecutive characters are 
 rendered inseparably (e.g., as a single glyph or a sequence of glyphs, 
 or because the range encompasses half of a surrogate pair), and nchars 
 is greater than 0 then the measured range shall be expanded so that each 
 of the inseparable characters are included. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>charnum</var></div> <div> The index of the first character in the substring, where
   the first character has an index of 0.
</div></li><li class="parameter"><div>unsigned long <var>nchars</var></div> <div> The number of characters in the substring. If nchars 
   specifies more characters than are available, then the substring will 
   consist of all characters starting with charnum until the end of the 
   list of characters.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The text advance distance.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if <var>charnum</var> or 
   <var>nchars</var> is negative or if <var>charnum</var> is greater than 
   or equal to the number of characters at this node.
</dd></dl></dd></dl></dd>
<dt id="text-__svg__SVGTextContentElement__getStartPositionOfChar" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <b>getStartPositionOfChar</b>(in unsigned long <var>charnum</var>)</dt><dd class="operation"><div>
 Returns the current text position before rendering the character in the
 user coordinate system for rendering the glyph(s) that correspond to
 the specified character. The current text position has already taken
 into account the effects of any inter-character adjustments due to
 properties <a href="#text-KerningProperty"><span class="prop-name">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="prop-name">‘letter-spacing’</span></a> and
 <a href="#text-WordSpacingProperty"><span class="prop-name">‘word-spacing’</span></a> and adjustments due to attributes
 <span class="attr-name">‘x’</span>, <span class="attr-name">‘y’</span>,
 <span class="attr-name">‘dx’</span> and
 <span class="attr-name">‘dy’</span>. If multiple consecutive characters
 are rendered inseparably (e.g., as a single glyph or a sequence of
 glyphs), then each of the inseparable characters will return the start
 position for the first glyph. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>charnum</var></div> <div> The index of the character, where the first character has
   an index of 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The character's start position.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the <var>charnum</var> is
   negative or if <var>charnum</var> is greater than or equal to the
   number of characters at this node.
</dd></dl></dd></dl></dd>
<dt id="text-__svg__SVGTextContentElement__getEndPositionOfChar" class="operation"><a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <b>getEndPositionOfChar</b>(in unsigned long <var>charnum</var>)</dt><dd class="operation"><div>
 Returns the current text position after rendering the character in the
 user coordinate system for rendering the glyph(s) that correspond to
 the specified character. This current text position does <em>not</em> take into
 account the effects of any inter-character adjustments to prepare for
 the next character, such as properties <a href="#text-KerningProperty"><span class="prop-name">‘kerning’</span></a>,
 <a href="#text-LetterSpacingProperty"><span class="prop-name">‘letter-spacing’</span></a> and <a href="#text-WordSpacingProperty"><span class="prop-name">‘word-spacing’</span></a> and adjustments due to
 attributes <span class="attr-name">‘x’</span>,
 <span class="attr-name">‘y’</span>, <span class="attr-name">‘dx’</span>
 and <span class="attr-name">‘dy’</span>. If multiple consecutive
 characters are rendered inseparably (e.g., as a single glyph or a
 sequence of glyphs), then each of the inseparable characters will
 return the end position for the last glyph. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>charnum</var></div> <div> The index of the character, where the first character has
   an index of 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The character's end position.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the <var>charnum</var> is
   negative or if <var>charnum</var> is greater than or equal to the
   number of characters at this node.
</dd></dl></dd></dl></dd>
<dt id="text-__svg__SVGTextContentElement__getExtentOfChar" class="operation"><a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <b>getExtentOfChar</b>(in unsigned long <var>charnum</var>)</dt><dd class="operation"><div>
 Returns a tightest rectangle which defines the minimum and maximum X and
 Y values in the user coordinate system for rendering the glyph(s) that
 correspond to the specified character. The calculations assume that all
 glyphs occupy the full standard glyph cell for the font. If multiple
 consecutive characters are rendered inseparably (e.g., as a single glyph
 or a sequence of glyphs), then each of the inseparable characters will
 return the same extent.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>charnum</var></div> <div> The index of the character, where the first character has
   an index of 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The rectangle which encloses all of the rendered glyph(s).
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the <var>charnum</var> is
   negative or if <var>charnum</var> is greater than or equal to the
   number of characters at this node.
</dd></dl></dd></dl></dd>
<dt id="text-__svg__SVGTextContentElement__getRotationOfChar" class="operation">float <b>getRotationOfChar</b>(in unsigned long <var>charnum</var>)</dt><dd class="operation"><div>
 Returns the rotation value relative to the current user coordinate
 system used to render the glyph(s) corresponding to the specified
 character. If multiple glyph(s) are used to render the given character
 and the glyphs each have different rotations (e.g., due to
 text-on-a-path), the user agent shall return an average value (e.g., the
 rotation angle at the midpoint along the path for all glyphs used to
 render this character). The rotation value represents the rotation that
 is supplemental to any rotation due to properties
 <a href="#text-GlyphOrientationHorizontalProperty"><span class="prop-name">‘glyph-orientation-horizontal’</span></a> and
 <a href="#text-GlyphOrientationVerticalProperty"><span class="prop-name">‘glyph-orientation-vertical’</span></a>; thus, any glyph rotations due to
 these properties are not included into the returned rotation value. If
 multiple consecutive characters are rendered inseparably (e.g., as a
 single glyph or a sequence of glyphs), then each of the inseparable
 characters will return the same rotation value. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>charnum</var></div> <div> The index of the character, where the first character has
   an index of 0.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The rotation angle.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if the <var>charnum</var> is
   negative or if <var>charnum</var> is greater than or equal to the
   number of characters at this node.
</dd></dl></dd></dl></dd>
<dt id="text-__svg__SVGTextContentElement__getCharNumAtPosition" class="operation">long <b>getCharNumAtPosition</b>(in <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <var>point</var>)</dt><dd class="operation"><div>
 Returns the index of the character whose corresponding glyph cell
 bounding box contains the specified point. The calculations assume that
 all glyphs occupy the full standard glyph cell for the font. If no such
 character exists, a value of -1 is returned. If multiple such
 characters exist, the character within the element whose glyphs were
 rendered last (i.e., take into account any reordering such as for
 bidirectional text) is used. If multiple consecutive characters are
 rendered inseparably (e.g., as a single glyph or a sequence of glyphs),
 then the user agent shall allocate an equal percentage of the text
 advance amount to each of the contributing characters in determining
 which of the characters is chosen. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <var>point</var></div> <div> A point in user space.
</div></li></ol></dd><dt class="returns-header">Returns</dt><dd><div> The index of the character which is at the given point, where
   the first character has an index of 0.
</div></dd></dl></dd>
<dt id="text-__svg__SVGTextContentElement__selectSubString" class="operation">void <b>selectSubString</b>(in unsigned long <var>charnum</var>, in unsigned long <var>nchars</var>)</dt><dd class="operation"><div>
 Causes the specified substring to be selected just as if the user 
 selected the substring interactively. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>charnum</var></div> <div> The index of the start character which is at the given 
   point, where the first character has an index of 0.
</div></li><li class="parameter"><div>unsigned long <var>nchars</var></div> <div> The number of characters in the substring. If nchars 
   specifies more characters than are available, then the substring 
   will consist of all characters starting with charnum until the end 
   of the list of characters.
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INDEX_SIZE_ERR</dt><dd class="exception"> Raised if <var>charnum</var> or 
   <var>nchars</var> is negative or if <var>charnum</var> is greater 
   than or equal to the number of characters at this node. 
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="text-InterfaceSVGTextPositioningElement">10.17.2 Interface SVGTextPositioningElement</h3>


 The <a class="idlinterface" href="#text-InterfaceSVGTextPositioningElement">SVGTextPositioningElement</a> interface is inherited by text-related
 interfaces: <a class="idlinterface" href="#text-InterfaceSVGTextElement">SVGTextElement</a>, <a class="idlinterface" href="#text-InterfaceSVGTSpanElement">SVGTSpanElement</a>,
 <a class="idlinterface" href="#text-InterfaceSVGTRefElement">SVGTRefElement</a> and <a class="idlinterface" href="#text-InterfaceSVGAltGlyphElement">SVGAltGlyphElement</a>.
<pre class="idl">interface <b>SVGTextPositioningElement</b> : <a class="idlinterface" href="#text-InterfaceSVGTextContentElement">SVGTextContentElement</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLengthList">SVGAnimatedLengthList</a> <a href="#text-__svg__SVGTextPositioningElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLengthList">SVGAnimatedLengthList</a> <a href="#text-__svg__SVGTextPositioningElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLengthList">SVGAnimatedLengthList</a> <a href="#text-__svg__SVGTextPositioningElement__dx">dx</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLengthList">SVGAnimatedLengthList</a> <a href="#text-__svg__SVGTextPositioningElement__dy">dy</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumberList">SVGAnimatedNumberList</a> <a href="#text-__svg__SVGTextPositioningElement__rotate">rotate</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="text-__svg__SVGTextPositioningElement__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLengthList">SVGAnimatedLengthList</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <span class="attr-name">‘x’</span> on the
 given element.
</div></dd>
<dt id="text-__svg__SVGTextPositioningElement__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLengthList">SVGAnimatedLengthList</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <span class="attr-name">‘y’</span> on the
 given element.
</div></dd>
<dt id="text-__svg__SVGTextPositioningElement__dx" class="attribute"><b>dx</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLengthList">SVGAnimatedLengthList</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <span class="attr-name">‘dx’</span> on the
 given element.
</div></dd>
<dt id="text-__svg__SVGTextPositioningElement__dy" class="attribute"><b>dy</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLengthList">SVGAnimatedLengthList</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <span class="attr-name">‘dy’</span> on the
 given element.
</div></dd>
<dt id="text-__svg__SVGTextPositioningElement__rotate" class="attribute"><b>rotate</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumberList">SVGAnimatedNumberList</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <span class="attr-name">‘rotate’</span> on the
 given element.
</div></dd></dl></dd></dl>

<h3 id="text-InterfaceSVGTextElement">10.17.3 Interface SVGTextElement</h3>



 The <a class="idlinterface" href="#text-InterfaceSVGTextElement">SVGTextElement</a> interface corresponds to the <a href="#text-TextElement"><span class="element-name">‘text’</span></a>
 element.
<pre class="idl">interface <b>SVGTextElement</b> : <a class="idlinterface" href="#text-InterfaceSVGTextPositioningElement">SVGTextPositioningElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
};</pre>


<h3 id="text-InterfaceSVGTSpanElement">10.17.4 Interface SVGTSpanElement</h3>



 The <a class="idlinterface" href="#text-InterfaceSVGTSpanElement">SVGTSpanElement</a> interface corresponds to the <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>
 element.
<pre class="idl">interface <b>SVGTSpanElement</b> : <a class="idlinterface" href="#text-InterfaceSVGTextPositioningElement">SVGTextPositioningElement</a> {
};</pre>


<h3 id="text-InterfaceSVGTRefElement">10.17.5 Interface SVGTRefElement</h3>



 The <a class="idlinterface" href="#text-InterfaceSVGTRefElement">SVGTRefElement</a> interface corresponds to the <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>
 element.
<pre class="idl">interface <b>SVGTRefElement</b> : <a class="idlinterface" href="#text-InterfaceSVGTextPositioningElement">SVGTextPositioningElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a> {
};</pre>


<h3 id="text-InterfaceSVGTextPathElement">10.17.6 Interface SVGTextPathElement</h3>



 The <a class="idlinterface" href="#text-InterfaceSVGTextPathElement">SVGTextPathElement</a> interface corresponds to the <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>
 element.
<pre class="idl">interface <b>SVGTextPathElement</b> : <a class="idlinterface" href="#text-InterfaceSVGTextContentElement">SVGTextContentElement</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a> {

  // textPath Method Types
  const unsigned short <a href="#text-__svg__SVGTextPathElement__TEXTPATH_METHODTYPE_UNKNOWN">TEXTPATH_METHODTYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#text-__svg__SVGTextPathElement__TEXTPATH_METHODTYPE_ALIGN">TEXTPATH_METHODTYPE_ALIGN</a> = 1;
  const unsigned short <a href="#text-__svg__SVGTextPathElement__TEXTPATH_METHODTYPE_STRETCH">TEXTPATH_METHODTYPE_STRETCH</a> = 2;

  // textPath Spacing Types
  const unsigned short <a href="#text-__svg__SVGTextPathElement__TEXTPATH_SPACINGTYPE_UNKNOWN">TEXTPATH_SPACINGTYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#text-__svg__SVGTextPathElement__TEXTPATH_SPACINGTYPE_AUTO">TEXTPATH_SPACINGTYPE_AUTO</a> = 1;
  const unsigned short <a href="#text-__svg__SVGTextPathElement__TEXTPATH_SPACINGTYPE_EXACT">TEXTPATH_SPACINGTYPE_EXACT</a> = 2;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#text-__svg__SVGTextPathElement__startOffset">startOffset</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#text-__svg__SVGTextPathElement__method">method</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#text-__svg__SVGTextPathElement__spacing">spacing</a>;
};</pre><dl class="interface"><dt class="constants-header">Constants in group “textPath Method Types”:</dt><dd><dl class="constants">
<dt id="text-__svg__SVGTextPathElement__TEXTPATH_METHODTYPE_UNKNOWN" class="constant first-child"><b>TEXTPATH_METHODTYPE_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The enumeration was set to a value that is not one of predefined types.
 It is invalid to attempt to define a new value of this type or to
 attempt to switch an existing value to this type.

</div></dd>
<dt id="text-__svg__SVGTextPathElement__TEXTPATH_METHODTYPE_ALIGN" class="constant"><b>TEXTPATH_METHODTYPE_ALIGN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'align'</span>.

</div></dd>
<dt id="text-__svg__SVGTextPathElement__TEXTPATH_METHODTYPE_STRETCH" class="constant"><b>TEXTPATH_METHODTYPE_STRETCH</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'stretch'</span>.

</div></dd></dl></dd><dt class="constants-header">Constants in group “textPath Spacing Types”:</dt><dd><dl class="constants">
<dt id="text-__svg__SVGTextPathElement__TEXTPATH_SPACINGTYPE_UNKNOWN" class="constant first-child"><b>TEXTPATH_SPACINGTYPE_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The enumeration was set to a value that is not one of predefined types.
 It is invalid to attempt to define a new value of this type or to
 attempt to switch an existing value to this type.

</div></dd>
<dt id="text-__svg__SVGTextPathElement__TEXTPATH_SPACINGTYPE_AUTO" class="constant"><b>TEXTPATH_SPACINGTYPE_AUTO</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'auto'</span>.
 
</div></dd>
<dt id="text-__svg__SVGTextPathElement__TEXTPATH_SPACINGTYPE_EXACT" class="constant"><b>TEXTPATH_SPACINGTYPE_EXACT</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'exact'</span>.
 
</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="text-__svg__SVGTextPathElement__startOffset" class="attribute first-child"><b>startOffset</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#text-TextPathElementStartOffsetAttribute"><span class="attr-name">‘startOffset’</span></a> on the given
 <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> element.
</div></dd>
<dt id="text-__svg__SVGTextPathElement__method" class="attribute"><b>method</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#text-TextPathElementMethodAttribute"><span class="attr-name">‘method’</span></a> on the given
 <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> element.
</div></dd>
<dt id="text-__svg__SVGTextPathElement__spacing" class="attribute"><b>spacing</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#text-TextPathElementSpacingAttribute"><span class="attr-name">‘spacing’</span></a> on the given
 <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> element.
</div></dd></dl></dd></dl>


<h3 id="text-InterfaceSVGAltGlyphElement">10.17.7 Interface SVGAltGlyphElement</h3>



 The <a class="idlinterface" href="#text-InterfaceSVGAltGlyphElement">SVGAltGlyphElement</a> interface corresponds to the
 <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element.
<pre class="idl">interface <b>SVGAltGlyphElement</b> : <a class="idlinterface" href="#text-InterfaceSVGTextPositioningElement">SVGTextPositioningElement</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a> {
  attribute DOMString <a href="#text-__svg__SVGAltGlyphElement__glyphRef">glyphRef</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute DOMString <a href="#text-__svg__SVGAltGlyphElement__format">format</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="text-__svg__SVGAltGlyphElement__glyphRef" class="attribute first-child"><b>glyphRef</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#text-AltGlyphElementGlyphRefAttribute"><span class="attr-name">‘glyphRef’</span></a> on the given
 element.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="text-__svg__SVGAltGlyphElement__format" class="attribute"><b>format</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#text-AltGlyphElementFormatAttribute"><span class="attr-name">‘format’</span></a> on the given element.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>


<h3 id="text-InterfaceSVGAltGlyphDefElement">10.17.8 Interface SVGAltGlyphDefElement</h3>



 The <a class="idlinterface" href="#text-InterfaceSVGAltGlyphDefElement">SVGAltGlyphDefElement</a> interface corresponds to the
 <a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a> element.
<pre class="idl">interface <b>SVGAltGlyphDefElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};</pre>


<h3 id="text-InterfaceSVGAltGlyphItemElement">10.17.9 Interface SVGAltGlyphItemElement</h3>



 The <a class="idlinterface" href="#text-InterfaceSVGAltGlyphItemElement">SVGAltGlyphItemElement</a> interface corresponds to the
 <a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a> element.
<pre class="idl">interface <b>SVGAltGlyphItemElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};</pre>


<h3 id="text-InterfaceSVGGlyphRefElement">10.17.10 Interface SVGGlyphRefElement</h3>



 The <a class="idlinterface" href="#text-InterfaceSVGGlyphRefElement">SVGGlyphRefElement</a> interface corresponds to the
 <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a> element.
<pre class="idl">interface <b>SVGGlyphRefElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
  attribute DOMString <a href="#text-__svg__SVGGlyphRefElement__glyphRef">glyphRef</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute DOMString <a href="#text-__svg__SVGGlyphRefElement__format">format</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#text-__svg__SVGGlyphRefElement__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#text-__svg__SVGGlyphRefElement__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#text-__svg__SVGGlyphRefElement__dx">dx</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#text-__svg__SVGGlyphRefElement__dy">dy</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="text-__svg__SVGGlyphRefElement__glyphRef" class="attribute first-child"><b>glyphRef</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#text-GlyphRefElementGlyphRefAttribute"><span class="attr-name">‘glyphRef’</span></a> on the given
 element.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="text-__svg__SVGGlyphRefElement__format" class="attribute"><b>format</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#text-GlyphRefElementFormatAttribute"><span class="attr-name">‘format’</span></a> on the given element.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="text-__svg__SVGGlyphRefElement__x" class="attribute"><b>x</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#text-GlyphRefElementXAttribute"><span class="attr-name">‘x’</span></a> on the given element.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="text-__svg__SVGGlyphRefElement__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#text-GlyphRefElementYAttribute"><span class="attr-name">‘y’</span></a> on the given element.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="text-__svg__SVGGlyphRefElement__dx" class="attribute"><b>dx</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#text-GlyphRefElementDXAttribute"><span class="attr-name">‘dx’</span></a> on the given element.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="text-__svg__SVGGlyphRefElement__dy" class="attribute"><b>dy</b><span class="idl-type-parenthetical"> (float)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#text-GlyphRefElementDYAttribute"><span class="attr-name">‘dy’</span></a> on the given element.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>


</div><hr class="chapter-divider" />
<div id="chapter-painting">

<h1>11 Painting: Filling, Stroking and Marker Symbols</h1><h2 id="painting-toc">Contents</h2><ul class="toc">
<li><a href="#painting-Introduction">11.1 Introduction</a></li>
<li><a href="#painting-SpecifyingPaint">11.2 Specifying paint</a></li>
<li><a href="#painting-FillProperties">11.3 Fill Properties</a></li>
<li><a href="#painting-StrokeProperties">11.4 Stroke Properties</a></li>
<li><a href="#painting-VisibilityControl">11.5 Controlling visibility</a></li>
<li><a href="#painting-Markers">11.6 Markers</a><ul class="toc">
<li><a href="#painting-MarkersIntroduction">11.6.1 Introduction</a></li>
<li><a href="#painting-MarkerElement">11.6.2 The <span class="element-name">‘marker’</span> element</a></li>
<li><a href="#painting-MarkerProperties">11.6.3 Marker properties</a></li>
<li><a href="#painting-MarkerAlgorithm">11.6.4 Details on how markers are rendered</a></li></ul></li>
<li><a href="#painting-RenderingProperties">11.7 Rendering properties</a><ul class="toc">
<li><a href="#painting-ColorInterpolationProperties">11.7.1 Color interpolation properties:
<span class="prop-name">‘color-interpolation’</span> and
<span class="prop-name">‘color-interpolation-filters’</span></a></li>
<li><a href="#painting-ColorRenderingProperty">11.7.2 The <span class="prop-name">‘color-rendering’</span> property</a></li>
<li><a href="#painting-ShapeRenderingProperty">11.7.3 The <span class="prop-name">‘shape-rendering’</span> property</a></li>
<li><a href="#painting-TextRenderingProperty">11.7.4 The <span class="prop-name">‘text-rendering’</span> property</a></li>
<li><a href="#painting-ImageRenderingProperty">11.7.5 The <span class="prop-name">‘image-rendering’</span> property</a></li></ul></li>
<li><a href="#painting-InheritanceOfPaintingProperties">11.8 Inheritance of painting properties</a></li>
<li><a href="#painting-DOMInterfaces">11.9 DOM interfaces</a><ul class="toc">
<li><a href="#painting-InterfaceSVGPaint">11.9.1 Interface SVGPaint</a></li>
<li><a href="#painting-InterfaceSVGMarkerElement">11.9.2 Interface SVGMarkerElement</a></li></ul></li></ul>

<h2 id="painting-Introduction">11.1 Introduction</h2>

<p><a href="#paths-PathElement"><span class="element-name">‘path’</span></a> elements, <a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements and <a href="#chapter-shapes">basic shapes</a> can be
<strong>filled</strong> (which means painting the interior of
the object) and <strong>stroked</strong> (which means painting
along the outline of the object). Filling and stroking both can
be thought of in more general terms as
<strong>painting</strong> operations.</p>

<p>Certain elements (i.e., <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>
and <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a> elements) can also have
<a href="#painting-Markers">marker symbols</a> drawn at their vertices.</p>

<p>With SVG, you can paint (i.e., fill or stroke) with:</p>

<ul><li>a single color</li><li>a gradient (linear or radial)</li><li>a pattern (vector or image, possibly tiled)</li><li>custom paints available via <a href="#chapter-extend">extensibility</a></li></ul>

<p>SVG uses the general notion of a <strong>paint server</strong>. Paint
servers are specified using a <a href="#linking-IRIReference">IRI reference</a>
on a <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> or <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> property.
<a href="#chapter-pservers">Gradients and patterns</a> are just specific types of
paint servers.</p>

<h2 id="painting-SpecifyingPaint">11.2 Specifying paint</h2>

<p>Properties <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> and <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> take on a value of type
<span class="prop-value">&lt;paint&gt;</span>, which is specified as follows:</p>

    <table summary="paint specification" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><span class="prop-name">&lt;paint&gt;</span>:      </td><td><span class="prop-value">none |<br />
         currentColor |<br />
         <a href="#types-DataTypeColor">&lt;color&gt;</a>
         [<a href="#types-DataTypeICCColor">&lt;icccolor&gt;</a>] |<br />
          <a href="#types-DataTypeFuncIRI">&lt;funciri&gt;</a> [ none | currentColor | <a href="#types-DataTypeColor">&lt;color&gt;</a>
         [<a href="#types-DataTypeICCColor">&lt;icccolor&gt;</a>] ] |<br />
         <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
        <span class="value-inst-inherit noxref">inherit</span></a></span></td></tr></table>
    <dl><dt><strong>none</strong></dt><dd>Indicates that no paint is applied.</dd><dt><strong>currentColor</strong></dt><dd>Indicates that painting is done using the current animated value of the color specified
      by the <a href="#color-ColorProperty"><span class="prop-name">‘color’</span></a> property. This
      mechanism is provided to facilitate sharing of color
      attributes between parent grammars such as other (non-SVG)
      XML. This mechanism allows you to define a style in your HTML
      which sets the <span class="prop-name">‘color’</span> property and then pass that style to
      the SVG user agent so that your SVG text will draw in the
      same color.</dd><dt><strong>&lt;color&gt; [&lt;icccolor&gt;]</strong></dt><dd><a href="#types-DataTypeColor">&lt;color&gt;</a> is
      the explicit color (in the sRGB color space [<a href="#refs-ref-SRGB">SRGB</a>])
      to be used to paint the current object. SVG supports all of
      the syntax alternatives for &lt;color&gt;
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#value-def-color">defined in CSS2</a>
      ([<a href="#refs-ref-CSS2">CSS2</a>], section 4.3.6), with the
      exception that SVG contains an expanded list of <a href="#types-ColorKeywords">recognized color keywords
      names</a>. If an optional ICC color specification [<a href="#refs-ref-ICC42">ICC42</a>] is
      provided, then the user agent searches the color profile
      description database for a <a href="#color-ColorProfileDescriptions">color profile
      description</a> entry whose name descriptor matches
      the &lt;name&gt; part of the <a href="#types-DataTypeICCColor">&lt;icccolor&gt;</a>
      and uses the last matching entry that is found.
      (If no match is found, then the ICC color specification is
      ignored.) The comma and/or whitespace separated list
      of <a href="#types-DataTypeNumber">&lt;number&gt;</a>s
      is a set of ICC-profile-specific color values.
      (In most cases, the <a href="#types-DataTypeNumber">&lt;number&gt;</a>s will
      be in the range 0 to 1.) On platforms which support ICC-based
      color management, the <a href="#types-DataTypeICCColor">&lt;icccolor&gt;</a> gets
      precedence over the <a href="#types-DataTypeColor">&lt;color&gt;</a> (which is in the sRGB color
      space). Note that color interpolation occurs in an RGB color
      space even if an ICC-based color specification is provided
      (see <a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> and <a href="#painting-ColorInterpolationFiltersProperty"><span class="prop-name">‘color-interpolation-filters’</span></a>).
      For more on ICC-based colors, refer to <a href="#color-ColorProfileDescriptions">Color profile
      descriptions</a>.</dd><dt><strong><a href="#types-DataTypeFuncIRI">&lt;funciri&gt;</a><br />
          [ none |<br />
             currentColor |<br />
             &lt;color&gt;
      [&lt;icccolor&gt;] ]</strong></dt><dd>The <a href="#types-DataTypeFuncIRI">&lt;funciri&gt;</a> is used to identify a <a href="#chapter-pservers">paint server</a> such as a gradient, a
      pattern or a custom paint defined by an extension (see <a href="#chapter-extend">Extensibility</a>). The &lt;funciri&gt;
      points to the paint server (e.g., a <a href="#pservers-Gradients">gradient</a> or <a href="#pservers-Patterns">pattern</a>) to be
      used to paint the current object. If the <a href="#linking-IRIReference">IRI reference</a>
      is not valid (e.g., it points to an object that doesn't exist
      or the object is not a valid paint server), then the paint
      method following the &lt;funciri&gt; (i.e., <span class="prop-value">none |
      currentColor | &lt;color&gt; [&lt;icccolor&gt;]</span>
      is used if provided; otherwise, the document is in error (see
      <a href="#implnote-ErrorProcessing">Error
      processing</a>).</dd></dl>

<h2 id="painting-FillProperties">11.3 Fill Properties</h2>

    <div class="propdef">
      <dl><dt id="painting-FillProperty"><span class="propdef-title prop-name">‘fill’</span></dt><dd>
          <table summary="fill property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>&lt;paint&gt; (See <a href="#painting-SpecifyingPaint">Specifying
              paint</a>)</td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>black</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
              elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<p>The <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> property paints the interior of the given graphical
element. The area to be painted consists of any areas inside the outline
of the shape. To determine the inside of the shape, all subpaths are
considered, and the interior is determined according to the rules
associated with the current value of the <a href="#painting-FillRuleProperty"><span class="prop-name">‘fill-rule’</span></a> property.
The zero-width geometric outline of a shape is included in the area to
be painted.</p>

<p>The fill operation fills open subpaths by performing the fill
operation as if an additional "closepath" command were added to the
path to connect the last point of the subpath with the first point of
the subpath. Thus, fill operations apply to both open subpaths within
<a href="#paths-PathElement"><span class="element-name">‘path’</span></a> elements (i.e., subpaths without a closepath command) and
<a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> elements.</p>

    <div class="propdef">
      <dl><dt id="painting-FillRuleProperty"><span class="propdef-title prop-name">‘fill-rule’</span></dt><dd>
          <table summary="fill-rule property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>nonzero | evenodd | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>nonzero</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
              elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<p>The <a href="#painting-FillRuleProperty"><span class="prop-name">‘fill-rule’</span></a> property indicates the algorithm which is to
be used to determine what parts of the canvas are included inside the
shape. For a simple, non-intersecting path, it is intuitively clear
what region lies "inside"; however, for a more complex path, such as a
path that intersects itself or where one subpath encloses another, the
interpretation of "inside" is not so obvious.</p>

<p>The <a href="#painting-FillRuleProperty"><span class="prop-name">‘fill-rule’</span></a> property provides two options for how the
inside of a shape is determined:</p>

<dl><dt><span class="prop-value">nonzero</span></dt><dd>
    This rule determines the "insideness" of a point on the
    canvas by drawing a ray from that point to infinity in any
    direction and then examining the places where a segment of
    the shape crosses the ray. Starting with a count of zero,
    add one each time a path segment crosses the ray from left
    to right and subtract one each time a path segment crosses
    the ray from right to left. After counting the crossings,
    if the result is zero then the point is <em>outside</em>
    the path. Otherwise, it is <em>inside</em>. The following
    drawing illustrates the <span class="prop-value">nonzero</span> rule: 
    <p><img alt="Image showing nonzero fill rule" src="images/painting/fillrule-nonzero.png" width="426" height="142" /></p>
    <p class="view-as-svg"><a href="images/painting/fillrule-nonzero.svg">View this
    example as SVG (SVG-enabled browsers only)</a></p>
  </dd><dt><span class="prop-value">evenodd</span></dt><dd>
    This rule determines the "insideness" of a point on the
    canvas by drawing a ray from that point to infinity in any
    direction and counting the number of path segments from the
    given shape that the ray crosses. If this number is odd,
    the point is inside; if even, the point is outside. The
    following drawing illustrates the <span class="prop-value">evenodd</span>
    rule: 
    <p><img alt="Image showing evenodd fill rule" src="images/painting/fillrule-evenodd.png" width="426" height="142" /></p>
    <p class="view-as-svg"><a href="images/painting/fillrule-evenodd.svg">View this
    example as SVG (SVG-enabled browsers only)</a></p>
  </dd></dl>

<p>(Note: the above explanations do not specify what to do if a path
segment coincides with or is tangent to the ray. Since any ray will do,
one may simply choose a different ray that does not have such problem
intersections.)</p>

    <div class="propdef">
      <dl><dt id="painting-FillOpacityProperty"><span class="propdef-title prop-name">‘fill-opacity’</span></dt><dd>
          <table summary="fill-opacity property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>&lt;opacity-value&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>1</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
              elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<p><a href="#painting-FillOpacityProperty"><span class="prop-name">‘fill-opacity’</span></a> specifies the
opacity of the painting operation used to paint the interior
the current object. (See <a href="#render-PaintingShapesAndText">Painting shapes and
text</a>.)</p>

<dl><dt><span class="prop-value">&lt;opacity-value&gt;</span></dt><dd>The opacity of the painting operation used to fill the current
  object, as a <a href="#types-DataTypeNumber">&lt;number&gt;</a>. Any values outside the range 0.0 (fully transparent)
  to 1.0 (fully opaque) will be clamped to this range. (See
  <a href="#implnote-RangeClamping">Clamping values which are
  restricted to a particular range</a>.)</dd></dl>

<p>Related properties: <a href="#painting-StrokeOpacityProperty"><span class="prop-name">‘stroke-opacity’</span></a> and <a href="#masking-OpacityProperty"><span class="prop-name">‘opacity’</span></a>.</p>

<h2 id="painting-StrokeProperties">11.4 Stroke Properties</h2>

<p>The following are the properties which affect how an element is stroked.</p>

<p>In all cases, all stroking properties which are affected by
directionality, such as those having to do with dash patterns, must be
rendered such that the stroke operation starts at the same point at
which the graphics element starts. In particular, for <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>
elements, the start of the path is the first point of the initial
"moveto" command.</p>

<p>For stroking properties such as dash patterns whose computations
are dependent on progress along the outline of the graphics element,
distance calculations are required to utilize the SVG user agent's
standard <a href="#paths-DistanceAlongAPath">Distance along a path</a>
algorithms.</p>

<p>When stroking is performed using a complex paint server, such as a
gradient or a pattern, the stroke operation must be identical to the
result that would have occurred if the geometric shape defined by the
geometry of the current graphics element and its associated stroking
properties were converted to an equivalent <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element and
then filled using the given paint server.</p>

    <div class="propdef">
      <dl><dt id="painting-StrokeProperty"><span class="propdef-title prop-name">‘stroke’</span></dt><dd>
          <table summary="stroke property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>&lt;paint&gt; (See <a href="#painting-SpecifyingPaint">Specifying
              paint</a>)</td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>none</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
              elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<p>The <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> property paints along the outline of the given
graphical element.</p>

<p>A subpath (see <a href="#chapter-paths">Paths</a>) consisting of
a single <a href="#paths-PathDataMovetoCommands">moveto</a>
shall not be stroked. Any zero length subpath shall not be
stroked if the <a href="#painting-StrokeLinecapProperty"><span class="prop-name">‘stroke-linecap’</span></a> property has a value of
<span class="prop-value">butt</span> but shall be stroked if the
<a href="#painting-StrokeLinecapProperty"><span class="prop-name">‘stroke-linecap’</span></a> property has a value of
<span class="prop-value">round</span> or <span class="prop-value">square</span>,
producing respectively a circle or a square centered at the given point.
Examples of zero length subpaths include
<span class="attr-value">'M 10,10 L 10,10'</span>,
<span class="attr-value">'M 20,20 h 0'</span>,
<span class="attr-value">'M 30,30 z'</span> and
<span class="attr-value">'M 40,40 c 0,0 0,0 0,0'</span>.</p>

    <div class="propdef">
      <dl><dt id="painting-StrokeWidthProperty"><span class="propdef-title prop-name">‘stroke-width’</span></dt><dd>
          <table summary="stroke-width property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td><a href="#types-DataTypePercentage">&lt;percentage&gt;</a> | <a href="#types-DataTypeLength">&lt;length&gt;</a> |
              <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>1</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
              elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>Yes</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<p>This property specifies the width of the stroke on the current object.
If a <a href="#types-DataTypePercentage">&lt;percentage&gt;</a> is used, the value represents a percentage of
the current viewport.  (See <a href="#coords-Units">Units</a>.)</p>
<p>A zero value causes no stroke to be painted. A negative value
is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).</p>

    <div class="propdef">
      <dl><dt id="painting-StrokeLinecapProperty"><span class="propdef-title prop-name">‘stroke-linecap’</span></dt><dd>
          <table summary="stroke-linecap property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>butt | round | square | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>butt</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
              elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<p><a href="#painting-StrokeLinecapProperty"><span class="prop-name">‘stroke-linecap’</span></a> specifies the shape to be used at the end of
open subpaths when they are stroked. For further details see the <a href="#implnote-PathElementImplementationNotes">path implementation notes</a>.</p>

<dl><dt><span class="prop-value">butt</span></dt><dd>See drawing below.</dd><dt><span class="prop-value">round</span></dt><dd>See drawing below.</dd><dt><span class="prop-value">square</span></dt><dd>See drawing below.</dd></dl>

<p><img alt="Image showing stroke-linecap alternatives" src="images/painting/linecap.png" width="454" height="76" /></p>
<p class="view-as-svg"><a href="images/painting/linecap.svg">View this example as SVG (SVG- and CSS-enabled browsers only)</a></p>

    <div class="propdef">
      <dl><dt id="painting-StrokeLinejoinProperty"><span class="propdef-title prop-name">‘stroke-linejoin’</span></dt><dd>
          <table summary="stroke-linejoin property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>miter | round | bevel | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>miter</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
              elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<p><a href="#painting-StrokeLinejoinProperty"><span class="prop-name">‘stroke-linejoin’</span></a> specifies the shape to be used at the
corners of paths or basic shapes when they are stroked. For further details see the <a href="#implnote-PathElementImplementationNotes">path implementation notes</a>.</p>

<dl><dt><span class="prop-value">miter</span></dt><dd>See drawing below.</dd><dt><span class="prop-value">round</span></dt><dd>See drawing below.</dd><dt><span class="prop-value">bevel</span></dt><dd>See drawing below.</dd></dl>

<p><img alt="Image showing stroke-linejoin alternatives" src="images/painting/linejoin.png" width="454" height="133" /></p>
<p class="view-as-svg"><a href="images/painting/linejoin.svg">View this example as SVG (SVG- and CSS-enabled browsers only)</a></p>

    <div class="propdef">
      <dl><dt id="painting-StrokeMiterlimitProperty"><span class="propdef-title prop-name">‘stroke-miterlimit’</span></dt><dd>
          <table summary="stroke-miterlimit property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>&lt;miterlimit&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>4</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
              elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<p>When two line segments meet at a sharp angle and <span class="prop-value">miter</span> joins have been specified for
<a href="#painting-StrokeLinejoinProperty"><span class="prop-name">‘stroke-linejoin’</span></a>, it is possible for the miter to extend
far beyond the thickness of the line stroking the path. The
<a href="#painting-StrokeMiterlimitProperty"><span class="prop-name">‘stroke-miterlimit’</span></a> imposes a limit on the ratio of the miter
length to the <a href="#painting-StrokeWidthProperty"><span class="prop-name">‘stroke-width’</span></a>. When the limit is exceeded, the
join is converted from a miter to a bevel.</p>

<dl><dt><span class="prop-value">&lt;miterlimit&gt;</span></dt><dd>The limit on the ratio of the miter length to the <a href="#painting-StrokeWidthProperty"><span class="prop-name">‘stroke-width’</span></a>.
  The value of <span class="prop-value">&lt;miterlimit&gt;</span> must be a
  <a href="#types-DataTypeNumber">&lt;number&gt;</a> greater than or equal to 1. Any other value is an error (see
  <a href="#implnote-ErrorProcessing">Error processing</a>).</dd></dl>

<p>The ratio of miter length (distance between the outer tip and
the inner corner of the miter) to <a href="#painting-StrokeWidthProperty"><span class="prop-name">‘stroke-width’</span></a> is directly
related to the angle (theta) between the segments in user space by the
formula:</p>

<pre>
miterLength / stroke-width = 1 / sin ( theta / 2 )
</pre>

<p>For example, a miter limit of 1.414 converts miters to bevels for
theta less than 90 degrees, a limit of 4.0 converts them for theta less
than approximately 29 degrees, and a limit of 10.0 converts them for
theta less than approximately 11.5 degrees.</p>

    <div class="propdef">
      <dl><dt id="painting-StrokeDasharrayProperty"><span class="propdef-title prop-name">‘stroke-dasharray’</span></dt><dd>
          <table summary="stroke-dasharray property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>none | &lt;dasharray&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>none</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
              elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>yes (see below)</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes (<a href="#animate-AdditionAttributes">non-additive</a>)</td></tr></table>
        </dd></dl>
    </div>

<p><span class="prop-name">‘stroke-dasharray’</span> controls
the pattern of dashes and gaps used to stroke paths.
<span class="prop-value">&lt;dasharray&gt;</span> contains a
list of comma and/or white space separated
<a href="#types-DataTypeLength">&lt;length&gt;</a>s and
<a href="#types-DataTypePercentage">&lt;percentage&gt;</a>s that specify the
lengths of alternating dashes and gaps. If an odd number of values
is provided, then the list of values is repeated to yield an even
number of values. Thus, <span class="prop-value">stroke-dasharray: 5,3,2</span>
is equivalent to <span class="prop-value">stroke-dasharray: 5,3,2,5,3,2</span>.</p>

<dl><dt><span class="prop-value">none</span></dt><dd>Indicates that no dashing is used. If stroked, the line is drawn
  solid.</dd><dt><span class="prop-value">&lt;dasharray&gt;</span></dt><dd>
    <p>A list of comma and/or white space separated
    <a href="#types-DataTypeLength">&lt;length&gt;</a>s
    (which can have a <a href="#coords-Units">unit identifier</a>)
    and <a href="#types-DataTypePercentage">&lt;percentage&gt;</a>s.  A percentage represents a distance as a
    percentage of the current viewport (see <a href="#coords-Units">Units</a>).
    A negative value is an error (see
    <a href="#implnote-ErrorProcessing">Error processing</a>). If the
    sum of the values
    is zero, then the stroke is rendered as if a value of
    <span class="prop-value">none</span> were specified. For further details see the <a href="#implnote-PathElementImplementationNotes">path implementation notes</a>.</p>
  
    <p>The grammar for &lt;dasharray&gt; is as follows:</p>

    <pre class="grammar"><span id="painting-DashArray">dasharray</span> ::= (<a href="#types-Length">length</a> | <a href="#types-Percentage">percentage</a>) (<a href="#types-CommaWSP">comma-wsp</a> <a href="#painting-DashArray">dasharray</a>)?</pre>
  </dd></dl>

    <div class="propdef">
      <dl><dt id="painting-StrokeDashoffsetProperty"><span class="propdef-title prop-name">‘stroke-dashoffset’</span></dt><dd>
          <table summary="stroke-dashoffset property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td><a href="#types-DataTypePercentage">&lt;percentage&gt;</a> | <a href="#types-DataTypeLength">&lt;length&gt;</a> |
              <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>0</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
              elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>see prose</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<p><a href="#painting-StrokeDashoffsetProperty"><span class="prop-name">‘stroke-dashoffset’</span></a> specifies the distance into the dash
pattern to start the dash.</p>

<p>If a <a href="#types-DataTypePercentage">&lt;percentage&gt;</a> is used, the value represents a
percentage of the current viewport (see <a href="#coords-Units">Units</a>).</p>

<p>Values can be negative.</p>

    <div class="propdef">
      <dl><dt id="painting-StrokeOpacityProperty"><span class="propdef-title prop-name">‘stroke-opacity’</span></dt><dd>
          <table summary="stroke-opacity property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>&lt;opacity-value&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>1</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
              elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<p><a href="#painting-StrokeOpacityProperty"><span class="prop-name">‘stroke-opacity’</span></a> specifies the opacity of the
painting operation used to stroke the current object. (See
<a href="#render-PaintingShapesAndText">Painting shapes and text</a>.)</p>

<dl><dt><span class="prop-value">&lt;opacity-value&gt;</span></dt><dd>The opacity of the painting operation used to stroke the current
  object, as a <a href="#types-DataTypeNumber">&lt;number&gt;</a>. Any values outside the range 0.0 (fully transparent)
  to 1.0 (fully opaque) will be clamped to this range. (See
  <a href="#implnote-RangeClamping">Clamping values which are
  restricted to a particular range</a>.)</dd></dl>

<p>Related properties: <a href="#painting-FillOpacityProperty"><span class="prop-name">‘fill-opacity’</span></a> and <a href="#masking-OpacityProperty"><span class="prop-name">‘opacity’</span></a>.</p>

<h2 id="painting-VisibilityControl">11.5 Controlling visibility</h2>

<p>SVG uses two properties, <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> and <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>, to
control the visibility of graphical elements or (in the case of the
<a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property) container elements.</p>

<p>The differences between the two properties are as follows:</p>

<ul><li>When applied to a container element, setting <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a>
  to <span class="prop-value">none</span> causes the container and
  all of its children to be invisible; thus, it acts on groups of
  elements as a group. <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>, however, only applies
  to individual graphics elements. Setting <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>
  to <span class="prop-value">hidden</span> on a <a href="#struct-GElement"><span class="element-name">‘g’</span></a>
  will make its children invisible as long as the children do
  not specify their own <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> properties as <span class="prop-value">visible</span>. Note that <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> is
  <em>not</em> an inheritable property.</li><li>When the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property is set to <span class="prop-value">none</span>, then the given element does not
  become part of the rendering tree. With <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> set
  to <span class="prop-value">hidden</span>, however, processing
  occurs as if the element were part of the rendering tree and still
  taking up space, but not actually rendered onto the canvas. This
  distinction has implications for the <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> and
  <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> elements, <a href="#interact-UIEvents">event processing</a>,
  for <a href="#coords-ObjectBoundingBox">bounding box calculations</a>
  and for calculation of <a href="#masking-ClippingPaths">clipping paths</a>.
  If <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> is set to <span class="prop-value">none</span> on a
  <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> or <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element, then the
  text string is ignored for the purposes of text layout; however, if
  <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> is set to <span class="prop-value">hidden</span>,
  the text string is used for text layout (i.e., it takes up space)
  even though it is not rendered on the canvas. Regarding events, if
  <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> is set to <span class="prop-value">none</span>,
  the element receives no events; however, if <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>
  is set to <span class="prop-value">hidden</span>, the element
  might still receive events, depending on the value of property
  <a href="#interact-PointerEventsProperty"><span class="prop-name">‘pointer-events’</span></a>. The geometry of a graphics element with
  <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> set to <span class="prop-value">none</span> is
  not included in <a href="#coords-ObjectBoundingBox">bounding box</a>
  and <a href="#masking-ClippingPaths">clipping paths</a>
  calculations; however, even if <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> is to
  <span class="prop-value">hidden</span>, the geometry of the graphics element
  still contributes to bounding box and clipping path calculations.</li></ul>

    <div class="propdef">
      <dl><dt id="painting-DisplayProperty"><span class="propdef-title prop-name">‘display’</span></dt><dd>
          <table summary="display property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>inline | block | list-item |<br />
               run-in | compact | marker |<br />
               table | inline-table | table-row-group |
              table-header-group |<br />
               table-footer-group | table-row | table-column-group
              | table-column |<br />
               table-cell | table-caption | none | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>inline</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#linking-AElement"><span class="element-name">‘a’</span></a>,
              <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, graphics elements (including the
              <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element) and text sub-elements (i.e.,
              <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>,
              <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>)</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>all</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<p>A value of <span class="prop-value">display: none</span> indicates
that the given element and its children shall not be rendered directly
(i.e., those elements are not present in the rendering tree). Any
value other than <span class="prop-value">none</span> or
<span class="prop-value">inherit</span> indicates that the given element
shall be rendered by the SVG user agent.</p>

<p>The <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property only affects the direct rendering
of a given element, whereas it does not prevent elements from
being referenced by other elements. For example, setting
<span class="prop-value">display: none</span> on a <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element
will prevent that element from getting rendered directly onto the
canvas, but the <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element can still be referenced by a
<a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> element; furthermore, its geometry will be used
in text-on-a-path processing even if the <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> has
<span class="prop-value">display: none</span>.</p>

<p>The <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property affects direct rendering into
offscreen canvases also, such as occurs with the implementation model
for <a href="#masking-Masking">masks</a>. Thus, setting
<span class="prop-value">display: none</span> on a child of a <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>
will prevent the given child element from being rendered as part of the
mask. Similarly, setting <span class="prop-value">display: none</span>
on a child of a <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element will prevent the given child
element from contributing to the clipping path.</p>

<p>Elements with <span class="prop-value">display: none</span> do not
take up space in text layout operations, do not receive events, and
do not contribute to
<a href="#coords-ObjectBoundingBox">bounding box</a> and
<a href="#masking-ClippingPaths">clipping paths</a> calculations.</p>

<p>Except for any additional information provided in this specification, the
normative definition of the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property is
<a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/visuren.html#propdef-display">the CSS2 definition</a>
([<a href="#refs-ref-CSS2">CSS2</a>], section 9.2.6).</p>

    <div class="propdef">
      <dl><dt id="painting-VisibilityProperty"><span class="propdef-title prop-name">‘visibility’</span></dt><dd>
          <table summary="visibility property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>visible | hidden | collapse | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>visible</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td>graphics elements (including the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element) and
              text sub-elements (i.e., <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>,
              <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> and <a href="#linking-AElement"><span class="element-name">‘a’</span></a>)</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<dl><dt><span class="prop-value">visible</span></dt><dd>The current graphics element is visible.</dd><dt><span class="prop-value">hidden</span> or <span class="prop-value">collapse</span></dt><dd>The current graphics element is invisible (i.e., nothing is painted on
  the canvas).</dd></dl>

<p>Note that if the <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> property is set to
<span class="prop-value">hidden</span> on a <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> or
<a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element, then the text is invisible but still takes up
space in text layout calculations.</p>

<p>Depending on the value of property <a href="#interact-PointerEventsProperty"><span class="prop-name">‘pointer-events’</span></a>, graphics
elements which have their <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> property set to
<span class="prop-value">hidden</span> still might receive events.</p>

<p>Except for any additional information provided in this specification, the
normative definition of the <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> property is
<a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/visufx.html#propdef-visibility">the CSS2 definition</a>
([<a href="#refs-ref-CSS2">CSS2</a>], section 11.2).</p>


<h2 id="painting-Markers">11.6 Markers</h2>



<h3 id="painting-MarkersIntroduction">11.6.1 Introduction</h3>

<p>A marker is a symbol which is attached to one or more vertices of
<a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> and <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>
elements. Typically, markers are used to make arrowheads or polymarkers.
Arrowheads can be defined by attaching a marker to the start or end
vertices of <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a> or <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> elements.
Polymarkers can be defined by attaching a marker to all vertices of a
<a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> or <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>
element.</p>

<p>The graphics for a marker are defined by a <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element.
To indicate that a particular <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element should be
rendered at the vertices of a particular <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>,
<a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> or <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a> element, set one or more marker
properties (<a href="#painting-MarkerProperty"><span class="prop-name">‘marker’</span></a>, <a href="#painting-MarkerStartProperty"><span class="prop-name">‘marker-start’</span></a>, <a href="#painting-MarkerMidProperty"><span class="prop-name">‘marker-mid’</span></a>
or <a href="#painting-MarkerEndProperty"><span class="prop-name">‘marker-end’</span></a>) to reference the given <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>
element.</p>

<p><span class="example-ref">Example Marker</span> draws a triangular marker
symbol as an arrowhead at the end of a path.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="4in" height="2in" 
     viewBox="0 0 4000 2000" version="1.1"
     xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;defs&gt;
    &lt;marker id="Triangle"
      viewBox="0 0 10 10" refX="0" refY="5" 
      markerUnits="strokeWidth"
      markerWidth="4" markerHeight="3"
      orient="auto"&gt;
      &lt;path d="M 0 0 L 10 5 L 0 10 z" /&gt;
    &lt;/marker&gt;
  &lt;/defs&gt;
  &lt;rect x="10" y="10" width="3980" height="1980"
       fill="none" stroke="blue" stroke-width="10" /&gt;
  &lt;desc&gt;Placing an arrowhead at the end of a path.
  &lt;/desc&gt;
  &lt;path d="M 1000 750 L 2000 750 L 2500 1250"
        fill="none" stroke="black" stroke-width="100" 
        marker-end="url(#Triangle)"  /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example Marker</caption><tr><td><img alt="Example Marker — Triangular marker at the end of a path" src="images/painting/marker.png" /></td></tr></table><p class="view-as-svg"><a href="images/painting/marker.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<p>Markers can be animated. The animated effects will show on all current uses
of the markers within the document.</p>

<h3 id="painting-MarkerElement">11.6.2 The <span class="element-name">‘marker’</span> element</h3>

<p>The <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element defines the graphics that is to
be used for drawing arrowheads or polymarkers on a given <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>,
<a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> or <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a> element.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘marker’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermContainerElement">Container element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#intro-TermShapeElement">shape elements</a><span class="expanding"> — <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></span></li><li><a href="#intro-TermStructuralElement">structural elements</a><span class="expanding"> — <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></span></li><li><a href="#intro-TermGradientElement">gradient elements</a><span class="expanding"> — <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></span></li><li><a href="#linking-AElement"><span class="element-name">‘a’</span></a></li><li><a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a></li><li><a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a></li><li><a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a></li><li><a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a></li><li><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></li><li><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></li><li><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></li><li><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></li><li><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></li><li><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></li><li><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></li><li><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></li><li><a href="#script-ScriptElement"><span class="element-name">‘script’</span></a></li><li><a href="#styling-StyleElement"><span class="element-name">‘style’</span></a></li><li><a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a></li><li><a href="#text-TextElement"><span class="element-name">‘text’</span></a></li><li><a href="#linking-ViewElement"><span class="element-name">‘view’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a></li><li><a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a></li><li><a href="#painting-MarkerElementRefXAttribute"><span class="attr-name">‘refX’</span></a></li><li><a href="#painting-MarkerElementRefYAttribute"><span class="attr-name">‘refY’</span></a></li><li><a href="#painting-MarkerUnitsAttribute"><span class="attr-name">‘markerUnits’</span></a></li><li><a href="#painting-MarkerWidthAttribute"><span class="attr-name">‘markerWidth’</span></a></li><li><a href="#painting-MarkerHeightAttribute"><span class="attr-name">‘markerHeight’</span></a></li><li><a href="#painting-OrientAttribute"><span class="attr-name">‘orient’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#painting-InterfaceSVGMarkerElement">SVGMarkerElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="painting-MarkerUnitsAttribute"><span class="adef">markerUnits</span> = "<span class="attr-value">strokeWidth |
        userSpaceOnUse</span>"</dt><dd>Defines the coordinate system for attributes
        <a href="#painting-MarkerWidthAttribute"><span class="attr-name">‘markerWidth’</span></a>, <a href="#painting-MarkerHeightAttribute"><span class="attr-name">‘markerHeight’</span></a> and the
        contents of the <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>.<br />
        If <span class="attr-value">markerUnits="strokeWidth"</span>,
        <a href="#painting-MarkerWidthAttribute"><span class="attr-name">‘markerWidth’</span></a>, <a href="#painting-MarkerHeightAttribute"><span class="attr-name">‘markerHeight’</span></a> and the contents
        of the <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> represent values in a coordinate system
        which has a single unit equal the size in user units of the
        current stroke width (see the <a href="#painting-StrokeWidthProperty"><span class="prop-name">‘stroke-width’</span></a> property) in
        place for the graphic object referencing the marker.<br />
        If <span class="attr-value">markerUnits="userSpaceOnUse"</span>,
        <a href="#painting-MarkerWidthAttribute"><span class="attr-name">‘markerWidth’</span></a>, <a href="#painting-MarkerHeightAttribute"><span class="attr-name">‘markerHeight’</span></a> and the contents
        of the <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> represent values in the current
        user coordinate system in place for the graphic object
        referencing the marker (i.e., the user coordinate system for
        the element referencing the <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element via a
        <a href="#painting-MarkerProperty"><span class="prop-name">‘marker’</span></a>, <a href="#painting-MarkerStartProperty"><span class="prop-name">‘marker-start’</span></a>, <a href="#painting-MarkerMidProperty"><span class="prop-name">‘marker-mid’</span></a>
        or <a href="#painting-MarkerEndProperty"><span class="prop-name">‘marker-end’</span></a> property).<br />
        If attribute <a href="#painting-MarkerUnitsAttribute"><span class="attr-name">‘markerUnits’</span></a> is not specified, then the effect
        is as if a value of <span class="attr-value">'strokeWidth'</span>
        were specified.<br />
        <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes.</span></dd><dt id="painting-MarkerElementRefXAttribute"><span class="adef">refX</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The x-axis coordinate of the reference point which is
        to be aligned exactly at the marker position. The
        coordinate is defined in the coordinate system after
        application of the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> and <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>
        attributes.<br />
         If the attribute is not specified, the effect is as if a
        value of "0" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="painting-MarkerElementRefYAttribute"><span class="adef">refY</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The y-axis coordinate of the reference point which is
        to be aligned exactly at the marker position. The
        coordinate is defined in the coordinate system after
        application of the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> and <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>
        attributes.<br />
         If the attribute is not specified, the effect is as if a
        value of "0" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="painting-MarkerWidthAttribute"><span class="adef">markerWidth</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>Represents the width of the viewport into which the
        marker is to be fitted when it is rendered.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables rendering of the element.<br />
         If the attribute is not specified, the effect is as if a
        value of "3" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="painting-MarkerHeightAttribute"><span class="adef">markerHeight</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>Represents the height of the viewport into which the
        marker is to be fitted when it is rendered.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables rendering of the element.<br />
         If the attribute is not specified, the effect is as if a
        value of "3" were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="painting-OrientAttribute"><span class="adef">orient</span> = "<span class="attr-value">auto | <a href="#types-DataTypeAngle">&lt;angle&gt;</a></span>"</dt><dd>
          Indicates how the marker is rotated.<br />
          <br />
           A value of <span class="attr-value">'auto'</span> indicates that the marker is
          oriented such that its positive x-axis is pointing as
          follows:
          <ol type="a"><li>
              If there is a path segment coming into the
              vertex and another path segment going out of the vertex,
              the marker's positive x-axis should point toward the
              angle bisector for the angle at the given vertex, where
              that angle has one side consisting of tangent vector for
              the path segment going into the vertex and the other side
              the tangent vector for the path segment going out of the
              vertex. Note:
              <ul><li>If the tangent vectors are the same, the angle bisector equals the two tangent vectors.</li><li>If an incoming and an outgoing vertex produce a zero vector the direction of marker is undefined.</li></ul>
            </li><li>
              If there is only a path segment going into the vertex (e.g.,
              the last vertex on an open path), the marker's positive
              x-axis should point in the same direction as the tangent
              vector for the path segment going into the vertex.
            </li><li>
              If there is only a path segment going out of the vertex
              (e.g., the first vertex on an open path), the marker's
              positive x-axis should point in the same direction as the
              tangent vector for the path segment going out of the
              vertex. (Refer to <a href="#implnote-PathElementImplementationNotes"><span class="element-name">‘path’</span>
              element implementation notes</a> for a more thorough
              discussion of the directionality of path segments.)
            </li></ol>
          <br />
           In all cases for closed subpaths (e.g., subpaths which
          end with a <a href="#paths-PathDataClosePathCommand">'closepath'</a>
          command), the orientation of the marker corresponding to
          the initial point of the subpath is calculated assuming
          that: 
          <ul><li>the path segment going into the vertex is the path
            segment corresponding to the closepath</li><li>the path segment coming out of the vertex is the
            first path segment in the subpath</li></ul>
          <br />
           When a <a href="#paths-PathDataClosePathCommand">'closepath'</a>
          command is followed by a command other than a <a href="#paths-PathDataMovetoCommands">'moveto'</a>
          command, then the orientation of the marker corresponding
          to the <a href="#paths-PathDataClosePathCommand">'closepath'</a>
          command is calculated assuming that: 
          <ul><li>the path segment going into the vertex is the path
            segment corresponding to the closepath</li><li>the path segment coming out of the vertex is the
            first path segment of the subsequent subpath</li></ul>
          <br />
          A <a href="#types-DataTypeAngle">&lt;angle&gt;</a> value represents a
          particular orientation in the user space of the graphic
          object referencing the marker. For example, if a value of
          "0" is given, then the marker will be drawn such that its
          x-axis will align with the x-axis of the user space of
          the graphic object referencing the marker. If the
          attribute is not specified, the effect is as if a value
          of "0" were specified.<br />
           <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes
          (non-additive).</span>
        </dd></dl>
    </div>

<p>Markers are drawn such that their reference point (i.e.,
attributes <a href="#painting-MarkerElementRefXAttribute"><span class="attr-name">‘refX’</span></a> and <a href="#painting-MarkerElementRefYAttribute"><span class="attr-name">‘refY’</span></a>) is positioned at the
given vertex. In other words, a translation transformation is
constructed by the user agent to achieve the effect of having point
(<a href="#painting-MarkerElementRefXAttribute"><span class="attr-name">‘refX’</span></a> and <a href="#painting-MarkerElementRefYAttribute"><span class="attr-name">‘refY’</span></a>) within the marker content's coordinate
system (after any transformations due to the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> and
<a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> attributes) align exactly with the given
vertex.</p>

<p>SVG's <a href="#styling-UAStyleSheet">user agent style sheet</a> sets
the <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property for <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> elements to
<span class="prop-value">hidden</span>, which causes a rectangular clipping
path to be created at the bounds of the marker tile.  Unless the
<a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property is overridden, any graphics within the marker which
goes outside of the marker rectangle will be clipped.</p>

<p>The contents of the <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> are relative to a new
coordinate system. Attribute <a href="#painting-MarkerUnitsAttribute"><span class="attr-name">‘markerUnits’</span></a> determines an initial
scale factor for transforming the graphics in the marker into the user
coordinate system for the referencing element. An additional set of
transformations might occur if there is a <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute, in
which case the coordinate system for the contents of the <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>
will be transformed due to the processing of attributes <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>
and <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>. If there is no <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>
attribute, then the assumed default value for the the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>
attribute has the origin of the viewBox coincident with the origin
of the viewport and the width/height of the viewBox the same as the
width/height of the viewport.</p>

<p><a href="#styling-SVGStylingProperties">Properties</a> inherit into the
<a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element from its ancestors; properties do <em>not</em>
inherit from the element referencing the <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element.</p>

<p><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> elements are never rendered directly;
their only usage is as something that can be referenced using the
<a href="#painting-MarkerProperty"><span class="prop-name">‘marker’</span></a>, <a href="#painting-MarkerStartProperty"><span class="prop-name">‘marker-start’</span></a>, <a href="#painting-MarkerEndProperty"><span class="prop-name">‘marker-end’</span></a> and
<a href="#painting-MarkerMidProperty"><span class="prop-name">‘marker-mid’</span></a> properties. The <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property does not
apply to the <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element; thus, <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> elements
are not directly rendered even if the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property is
set to a value other than <span class="prop-value">none</span>, and
<a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> elements are available for referencing even when the
<a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property on the <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element or any of its
ancestors is set to <span class="prop-value">none</span>.</p>

<p><a href="#script-EventAttributes">Event attributes</a> and
<a href="#svgdom-EventListeners">event listeners</a> attached
to the contents of a <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element are not processed;
only the rendering aspects of <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> elements are
processed.</p>

<h3 id="painting-MarkerProperties">11.6.3 Marker properties</h3>

<p><a href="#painting-MarkerStartProperty"><span class="prop-name">‘marker-start’</span></a> defines the arrowhead or polymarker that shall
be drawn at the first vertex of the given <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element or
<a href="#chapter-shapes">basic shape</a>. <a href="#painting-MarkerEndProperty"><span class="prop-name">‘marker-end’</span></a> defines
the arrowhead or polymarker that shall be drawn at the final vertex.
<a href="#painting-MarkerMidProperty"><span class="prop-name">‘marker-mid’</span></a> defines the arrowhead or polymarker that shall be
drawn at every other vertex (i.e., every vertex except the first and
last). Note that for a <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element which ends with a closed
sub-path, the last vertex is the same as the initial vertex on the given
sub-path. In this case, if <a href="#painting-MarkerEndProperty"><span class="prop-name">‘marker-end’</span></a> does not equal
<span class="prop-value">none</span>, then it is possible that two markers
will be rendered on the given vertex. One way to prevent this is to set
<a href="#painting-MarkerEndProperty"><span class="prop-name">‘marker-end’</span></a> to <span class="prop-value">none</span>. (Note that
the same comment applies to <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a> elements.)</p>

    <div class="propdef">
      <dl><dt id="painting-MarkerStartProperty"><span class="propdef-title prop-name">‘marker-start’</span></dt><dt id="painting-MarkerMidProperty"><span class="propdef-title prop-name">‘marker-mid’</span></dt><dt id="painting-MarkerEndProperty"><span class="propdef-title prop-name">‘marker-end’</span></dt><dd>
          <table summary="marker properties" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>none | &lt;funciri&gt; |
              <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit"><span class="value-inst-inherit noxref">inherit</span></a>
              </td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>none</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> and
              <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a> elements</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<dl><dt><span class="prop-value">none</span></dt><dd>Indicates that no marker symbol shall be drawn at the given
  vertex (vertices).</dd><dt><span class="prop-value">&lt;funciri&gt;</span></dt><dd>The &lt;funciri&gt; is a <a href="#types-DataTypeFuncIRI">Functional IRI reference</a>
  to the <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element which shall be used as the arrowhead
  symbol or polymarker at the given vertex or vertices. If the
  <a href="#linking-IRIReference">IRI reference</a> is not valid (e.g.,
  it points to an object that is undefined or the object is not a
  <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element), then the marker(s) shall not
  be drawn.</dd></dl>

<p id="painting-MarkerProperty">The <a href="#painting-MarkerProperty"><span class="prop-name">‘marker’</span></a> property specifies
the marker symbol that shall be used for all points on the sets the
value for all vertices on the given <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element or
<a href="#chapter-shapes">basic shape</a>. It is a short-hand for the three
individual marker properties:</p>

    <div class="propdef">
      <dl><dt><span class="propdef-title prop-name">‘marker’</span></dt><dd>
          <table summary="marker property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>see individual properties</td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>see individual properties</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> and
              <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a> elements</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<h3 id="painting-MarkerAlgorithm">11.6.4 Details on how markers are rendered</h3>

<p>Markers are drawn after the given object is filled and stroked.</p>

<p>For each marker that is drawn, a temporary new user coordinate
system is established so that the marker will be positioned and sized
correctly, as follows:</p>

<ul><li>The axes of the temporary new user coordinate system are aligned
  according to the <a href="#painting-OrientAttribute"><span class="attr-name">‘orient’</span></a> attribute on the
  <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element and the slope of the curve at the given vertex.
  (Note: if there is a discontinuity at a vertex, the slope is the
  average of the slopes of the two segments of the curve that join
  at the given vertex. If a slope cannot be determined, the slope is
  assumed to be zero.)</li><li>A temporary new coordinate system is established by attribute
  <a href="#painting-MarkerUnitsAttribute"><span class="attr-name">‘markerUnits’</span></a>. If <a href="#painting-MarkerUnitsAttribute"><span class="attr-name">‘markerUnits’</span></a> equals
  <span class="attr-value">'strokeWidth'</span>, then the temporary new
  user coordinate system is the result of scaling the current
  user coordinate system by the current value of property
  <a href="#painting-StrokeWidthProperty"><span class="prop-name">‘stroke-width’</span></a>. If <a href="#painting-MarkerUnitsAttribute"><span class="attr-name">‘markerUnits’</span></a> equals
  <span class="attr-value">'userSpaceOnUse'</span>, then no extra scale
  transformation is applied.</li><li>An additional set of transformations might occur if the
  <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element includes a <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute, in
  which case additional transformations are set up to produce the necessary
  result due to attributes <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> and <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.</li><li>If the <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property on the <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element
  indicates that the marker needs to be clipped to its viewport, then an
  implicit clipping path is established at the bounds of the viewport.</li></ul>

<p>The rendering effect of a marker is as if the contents of the
referenced <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element were deeply cloned
into a separate non-exposed DOM tree for each instance of the
marker. Because the cloned DOM tree is non-exposed, the SVG DOM
does not show the cloned instance of the marker.</p> <p>For user
agents that support <a href="#styling-StylingWithCSS">Styling
with CSS</a>, the conceptual deep cloning of the referenced
<a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element into a non-exposed DOM tree also
copies any property values resulting from
<a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html">the CSS cascade</a>
([<a href="#refs-ref-CSS2">CSS2</a>], chapter 6) and
property inheritance on the referenced element and its contents. CSS2
selectors can be applied to the original (i.e., referenced) elements
because they are part of the formal document structure. CSS2 selectors
cannot be applied to the (conceptually) cloned DOM tree because its
contents are not part of the formal document structure.</p>

<p>For illustrative purposes, we'll repeat the marker example shown earlier:</p>

<pre>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="4in" height="2in" 
     viewBox="0 0 4000 2000" version="1.1"
     xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;defs&gt;
    &lt;marker id="Triangle"
      viewBox="0 0 10 10" refX="0" refY="5" 
      markerUnits="strokeWidth"
      markerWidth="4" markerHeight="3"
      orient="auto"&gt;
      &lt;path d="M 0 0 L 10 5 L 0 10 z" /&gt;
    &lt;/marker&gt;
  &lt;/defs&gt;
  &lt;rect x="10" y="10" width="3980" height="1980"
       fill="none" stroke="blue" stroke-width="10" /&gt;
  &lt;desc&gt;Placing an arrowhead at the end of a path.
  &lt;/desc&gt;
  &lt;path d="M 1000 750 L 2000 750 L 2500 1250"
        fill="none" stroke="black" stroke-width="100" 
        marker-end="url(#Triangle)"  /&gt;
&lt;/svg&gt;
</pre>

<p>The rendering effect of the above file will be visually identical to
the following:</p>

<pre>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="4in" height="2in" 
     viewBox="0 0 4000 2000" version="1.1"
     xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;desc&gt;File which produces the same effect
      as the marker example file, but without
      using markers.
  &lt;/desc&gt;
  &lt;rect x="10" y="10" width="3980" height="1980"
       fill="none" stroke="blue" stroke-width="10" /&gt;
  &lt;!-- The path draws as before, but without the marker properties --&gt;
  &lt;path d="M 1000 750 L 2000 750 L 2500 1250"
        fill="none" stroke="black" stroke-width="100"  /&gt;
  &lt;!-- The following logic simulates drawing a marker 
       at final vertex of the path. --&gt;
  &lt;!-- First off, move the origin of the user coordinate system
       so that the origin is now aligned with the end point of the path. --&gt;
  <strong>&lt;g transform="translate(2500,1250)" &gt;</strong>
    &lt;!-- Rotate the coordinate system 45 degrees because
         the marker specified orient="auto" and the final segment
         of the path is going in the direction of 45 degrees. --&gt;
    <strong>&lt;g transform="rotate(45)" &gt;</strong>
      &lt;!-- Scale the coordinate system to match the coordinate system
           indicated by the 'markerUnits' attributes, which in this case has
           a value of 'strokeWidth'. Therefore, scale the coordinate system
           by the current value of the 'stroke-width' property, which is 100. --&gt;
      <strong>&lt;g transform="scale(100)" &gt;</strong>
        &lt;!-- Translate the coordinate system by 
             (-refX*viewBoxToMarkerUnitsScaleX, -refY*viewBoxToMarkerUnitsScaleY)
             in order that (refX,refY) within the marker will align with the vertex.
             In this case, we use the default value for preserveAspectRatio
             ('xMidYMid meet'), which means find a uniform scale factor
             (i.e., viewBoxToMarkerUnitsScaleX=viewBoxToMarkerUnitsScaleY)
             such that the viewBox fits entirely within the viewport ('meet') and 
             is center-aligned ('xMidYMid'). In this case, the uniform scale factor
             is markerHeight/viewBoxHeight=3/10=.3. Therefore, translate by
             (-refX*.3,-refY*.3)=(0*.3,-5*.3)=(0,-1.5). --&gt;
        <strong>&lt;g transform="translate(0,-1.5)" &gt;</strong>
          &lt;!-- There is an implicit clipping path because the user agent style
               sheet says that the 'overflow' property for markers has the value
               'hidden'. To achieve this, create a clipping path at the bounds
               of the viewport. Note that in this case the viewport extends
               0.5 units to the left and right of the viewBox due to 
               a uniform scale factor, different ratios for markerWidth/viewBoxWidth
               and markerHeight/viewBoxHeight, and 'xMidYMid' alignment --&gt;
          <strong>&lt;clipPath id="cp1" &gt;
            &lt;rect x="-0.5" y="0" width="4" height="3" /&gt;
          &lt;/clipPath&gt;</strong>
          <strong>&lt;g clip-path="url(#cp1)" &gt;</strong>
            &lt;!-- Scale the coordinate system by the uniform scale factor
                 markerHeight/viewBoxHeight=3/10=.3 to set the coordinate
                 system to viewBox units. --&gt;
            <strong>&lt;g transform="scale(.3)" &gt;</strong>
              &lt;!-- This 'g' element carries all property values that result from
                   cascading and inheritance of properties on the original 'marker' element.
                   In this example, neither fill nor stroke was specified on the 'marker'
                   element or any ancestors of the 'marker', so the initial values of
                   "black" and "none" are used, respectively. --&gt;
             <strong>&lt;g fill="black" stroke="none" &gt;</strong>
                &lt;!-- Expand out the contents of the 'marker' element. --&gt;
                <strong>&lt;path d="M 0 0 L 10 5 L 0 10 z" /&gt;</strong>
              <strong>&lt;/g&gt;</strong>
            <strong>&lt;/g&gt;</strong>
          <strong>&lt;/g&gt;</strong>
        <strong>&lt;/g&gt;</strong>
      <strong>&lt;/g&gt;</strong>
    <strong>&lt;/g&gt;</strong>
  <strong>&lt;/g&gt;</strong>
&lt;/svg&gt;
</pre>
<p class="view-as-svg"><a href="images/painting/marker-simulated.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h2 id="painting-RenderingProperties">11.7 Rendering properties</h2>

<h3 id="painting-ColorInterpolationProperties">11.7.1 Color interpolation properties:
<span class="prop-name">‘color-interpolation’</span> and
<span class="prop-name">‘color-interpolation-filters’</span></h3>

<p>The SVG user agent performs color interpolations and compositing
at various points as it processes SVG content. Two properties,
<a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> and <a href="#painting-ColorInterpolationFiltersProperty"><span class="prop-name">‘color-interpolation-filters’</span></a>,
control which color space is used for particular categories of graphics
operations. The following table shows which property applies to which
graphics operations:</p>

    <table class="vert" summary="applicability of color interpolation properties"><tr><th>Graphics operation</th><th>Corresponding property</th></tr><tr><td>interpolating between gradient stops (see <a href="#pservers-Gradients">Gradient</a>)</td><td><a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a></td></tr><tr><td>interpolating color when performing color
        animations with either <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a> or <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a></td><td><a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a></td></tr><tr><td><a href="#masking-SimpleAlphaBlending">alpha
        compositing</a> of <a href="#intro-TermGraphicsElement">graphics elements</a>
        into the current background</td><td><a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a></td></tr><tr><td><a href="#chapter-filters">filter effects</a></td><td><a href="#painting-ColorInterpolationFiltersProperty"><span class="prop-name">‘color-interpolation-filters’</span></a></td></tr></table>

<p>Both properties choose between color operations occurring in the
sRGB color space or in a (light
energy linear) linearized RGB color space. Having chosen the appropriate
color space, component-wise linear interpolation is used.</p>

<p id="painting-sRGBlinearRGBConversionFormulas">The conversion formulas between the
sRGB color space (i.e., nonlinear with 2.2 gamma curve) and the linearized RGB
color space (i.e., color values expressed as sRGB tristimulus values without a
gamma curve) can be found in <a href="http://webstore.iec.ch/webstore/webstore.nsf/artnum/025408">the sRGB specification</a>
[<a href="#refs-ref-SRGB">SRGB</a>].
For illustrative purposes, the following formula shows the conversion from
sRGB to linearized RGB:</p>

<pre>
  R[sRGB] = R[sRGB-8bit] / 255
  G[sRGB] = G[sRGB-8bit] / 255
  B[sRGB] = B[sRGB-8bit] / 255
If R[sRGB], G[sRGB], B[sRGB] &lt;= 0.04045
  R[linearRGB] = R[sRGB] / 12.92
  G[linearRGB] = G[sRGB] / 12.92
  B[linearRGB] = B[sRGB] / 12.92
else if R[sRGB], G[sRGB], B[sRGB] &gt; 0.04045
  R[linearRGB] = ((R[sRGB] + 0.055) / 1.055) ^ 2.4
  G[linearRGB] = ((G[sRGB] + 0.055) / 1.055) ^ 2.4
  B[linearRGB] = ((B[sRGB] + 0.055) / 1.055) ^ 2.4
  R[linearRGB-8bit] = R[linearRGB] * 255
  G[linearRGB-8bit] = G[linearRGB] * 255
  B[linearRGB-8bit] = B[linearRGB] * 255
</pre>

<p>Out-of-range color values, if supported by the user agent, also are
converted using the above formulas. (See
<a href="#implnote-RangeClamping">Clamping values which are restricted to a particular range</a>.)</p>

    <div class="propdef">
      <dl><dt id="painting-ColorInterpolationProperty"><span class="propdef-title prop-name">‘color-interpolation’</span></dt><dd>
          <table summary="color-interpolation property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>auto | sRGB | linearRGB | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>sRGB</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermContainerElement">container
              elements</a>, <a href="#intro-TermGraphicsElement">graphics
              elements</a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a> and <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<dl><dt><span class="prop-value">auto</span></dt><dd>Indicates that the user agent can choose either the
  <span class="prop-value">sRGB</span> or
  <span class="prop-value">linearRGB</span> spaces for color interpolation.
  This option indicates that the author doesn't require that color
  interpolation occur in a particular color space.</dd><dt><span class="prop-value">sRGB</span></dt><dd>Indicates that color interpolation should occur in the sRGB
  color space.</dd><dt><span class="prop-value">linearRGB</span></dt><dd>Indicates that color interpolation should occur in the
  linearized RGB color space as described above.</dd></dl>

<p>The <a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> property specifies the color space for
gradient interpolations, color animations and alpha compositing.</p>

<p>When a child element is blended into a background, the value of the
<a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> property on the child determines the type of
blending, not the value of the <a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> on the parent.
For <a href="#pservers-Gradients">gradients</a> which make use of the
<span class="attr-name">‘xlink:href’</span> attribute to reference another
gradient, the gradient uses the <a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> property value
from the gradient element which is directly referenced by the <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> or
<a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> property. When animating colors, color interpolation is
performed according to the value of the <a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> property
on the element being animated.</p>

    <div class="propdef">
      <dl><dt id="painting-ColorInterpolationFiltersProperty"><span class="propdef-title prop-name">‘color-interpolation-filters’</span></dt><dd>
          <table summary="color-interpolation-filters property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>auto | sRGB | linearRGB | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>linearRGB</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#filters-TermFilterPrimitive">filter
              primitives</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<dl><dt><span class="prop-value">auto</span></dt><dd>Indicates that the user agent can choose either the
  <span class="prop-value">sRGB</span> or
  <span class="prop-value">linearRGB</span> spaces for filter effects color
  operations. This option indicates that the author doesn't require that color
  operations occur in a particular color space.</dd><dt><span class="prop-value">sRGB</span></dt><dd>Indicates that filter effects color operations should occur in the sRGB
  color space.</dd><dt><span class="prop-value">linearRGB</span></dt><dd>Indicates that filter effects color operations should occur in the
  linearized RGB color space.</dd></dl>

<p>The <a href="#painting-ColorInterpolationFiltersProperty"><span class="prop-name">‘color-interpolation-filters’</span></a> property specifies the color space
for imaging operations performed via <a href="#chapter-filters">filter effects</a>.</p>

<p>Note that <a href="#painting-ColorInterpolationFiltersProperty"><span class="prop-name">‘color-interpolation-filters’</span></a> has a different initial
value than <a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a>. <a href="#painting-ColorInterpolationFiltersProperty"><span class="prop-name">‘color-interpolation-filters’</span></a>
has an initial value of <span class="prop-value">linearRGB</span>, whereas
<a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> has an initial value of
<span class="prop-value">sRGB</span>.  Thus, in the default case, filter
effects operations occur in the linearRGB color space, whereas all other color
interpolations occur by default in the sRGB color space.</p>

<h3 id="painting-ColorRenderingProperty">11.7.2 The <span class="prop-name">‘color-rendering’</span> property</h3>

<p>The creator of SVG content might want to provide a hint
to the implementation about how to make speed vs. quality
tradeoffs as it performs color interpolation and compositing. The
<a href="#painting-ColorRenderingProperty"><span class="prop-name">‘color-rendering’</span></a> property provides a hint to the SVG user
agent about how to optimize its color interpolation and compositing
operations.</p>

<p><a href="#painting-ColorRenderingProperty"><span class="prop-name">‘color-rendering’</span></a> takes precedence over
<a href="#painting-ColorInterpolationFiltersProperty"><span class="prop-name">‘color-interpolation-filters’</span></a>. For example, assume
<span class="prop-value">color-rendering: optimizeSpeed</span> and
<span class="prop-value">color-interpolation-filters: linearRGB</span>.
In this case, the SVG user agent should perform color operations in a way that
optimizes performance, which might mean sacrificing the color interpolation
precision as specified by <span class="prop-value">color-interpolation-filters: linearRGB</span>.</p>

    <div class="propdef">
      <dl><dt><span class="propdef-title prop-name">‘color-rendering’</span></dt><dd>
          <table summary="color-rendering property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>auto | optimizeSpeed | optimizeQuality | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>auto</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermContainerElement">container
              elements</a>, <a href="#intro-TermGraphicsElement">graphics
              elements</a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a> and <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<dl><dt><span class="prop-value">auto</span></dt><dd>Indicates that the user agent shall make appropriate
  tradeoffs to balance speed and quality, but quality shall be
  given more importance than speed.</dd><dt><span class="prop-value">optimizeSpeed</span></dt><dd>Indicates that the user agent shall emphasize rendering
  speed over quality. For RGB display devices, this option will
  sometimes cause the user agent to perform color interpolation
  and compositing in the device RGB color space.</dd><dt><span class="prop-value">optimizeQuality</span></dt><dd>Indicates that the user agent shall emphasize quality
  over rendering speed.</dd></dl>

<h3 id="painting-ShapeRenderingProperty">11.7.3 The <span class="prop-name">‘shape-rendering’</span> property</h3>

<p>The creator of SVG content might want to provide a hint to the
implementation about what tradeoffs to make as it renders vector graphics
elements such as <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> elements and <a href="#chapter-shapes">basic shapes</a>
such as circles and rectangles. The <a href="#painting-ShapeRenderingProperty"><span class="prop-name">‘shape-rendering’</span></a> property provides
these hints.</p>

    <div class="propdef">
      <dl><dt><span class="propdef-title prop-name">‘shape-rendering’</span></dt><dd>
          <table summary="shape-rendering property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>auto | optimizeSpeed | crispEdges |<br />
               geometricPrecision | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>auto</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermShape">shapes</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<dl><dt><span class="prop-value">auto</span></dt><dd>Indicates that the user agent shall make appropriate
  tradeoffs to balance speed, crisp edges and geometric
  precision, but with geometric precision given more importance
  than speed and crisp edges.</dd><dt><span class="prop-value">optimizeSpeed</span></dt><dd>Indicates that the user agent shall emphasize rendering
  speed over geometric precision and crisp edges. This option
  will sometimes cause the user agent to turn off shape
  anti-aliasing.</dd><dt><span class="prop-value">crispEdges</span></dt><dd>Indicates that the user agent shall attempt to emphasize
  the contrast between clean edges of artwork over rendering
  speed and geometric precision. To achieve crisp edges, the
  user agent might turn off anti-aliasing for all lines and
  curves or possibly just for straight lines which are close to
  vertical or horizontal. Also, the user agent might adjust
  line positions and line widths to align edges with device
  pixels.</dd><dt><span class="prop-value">geometricPrecision</span></dt><dd>Indicates that the user agent shall emphasize geometric
  precision over speed and crisp edges.</dd></dl>

<h3 id="painting-TextRenderingProperty">11.7.4 The <span class="prop-name">‘text-rendering’</span> property</h3>

<p>The creator of SVG content might want to provide a hint to the
implementation about what tradeoffs to make as it renders text. The
<a href="#painting-TextRenderingProperty"><span class="prop-name">‘text-rendering’</span></a> property provides these hints.</p>

    <div class="propdef">
      <dl><dt><span class="propdef-title prop-name">‘text-rendering’</span></dt><dd>
          <table summary="text-rendering property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>auto | optimizeSpeed | optimizeLegibility |<br />
               geometricPrecision | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>auto</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<dl><dt><span class="prop-value">auto</span></dt><dd>Indicates that the user agent shall make appropriate
  tradeoffs to balance speed, legibility and geometric
  precision, but with legibility given more importance than
  speed and geometric precision.</dd><dt><span class="prop-value">optimizeSpeed</span></dt><dd>Indicates that the user agent shall emphasize rendering
  speed over legibility and geometric precision. This option
  will sometimes cause the user agent to turn off text
  anti-aliasing.</dd><dt><span class="prop-value">optimizeLegibility</span></dt><dd>Indicates that the user agent shall emphasize legibility
  over rendering speed and geometric precision. The user agent
  will often choose whether to apply anti-aliasing techniques,
  built-in font hinting or both to produce the most legible
  text.</dd><dt><span class="prop-value">geometricPrecision</span></dt><dd>Indicates that the user agent shall emphasize geometric
  precision over legibility and rendering speed. This option
  will usually cause the user agent to suspend the use of
  hinting so that glyph outlines are drawn with comparable
  geometric precision to the rendering of path data.</dd></dl>

<h3 id="painting-ImageRenderingProperty">11.7.5 The <span class="prop-name">‘image-rendering’</span> property</h3>

<p>The creator of SVG content might want to provide a hint to the
implementation about how to make speed vs. quality tradeoffs as it performs
image processing. The <a href="#painting-ImageRenderingProperty"><span class="prop-name">‘image-rendering’</span></a> property provides a hint to the
SVG user agent about how to optimize its image rendering.</p>

    <div class="propdef">
      <dl><dt><span class="propdef-title prop-name">‘image-rendering’</span></dt><dd>
          <table summary="image-rendering property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>auto | optimizeSpeed | optimizeQuality | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>auto</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td>images</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<dl><dt><span class="prop-value">auto</span></dt><dd>Indicates that the user agent shall make appropriate
  tradeoffs to balance speed and quality, but quality shall be
  given more importance than speed. The user agent shall employ
  a resampling algorithm at least as good as nearest neighbor
  resampling, but bilinear resampling is strongly preferred.
  For <a href="#conform-ConformingHighQualitySVGViewers">Conforming
  High-Quality SVG Viewers</a>, the user agent shall employ a
  resampling algorithm at least as good as bilinear
  resampling.</dd><dt><span class="prop-value">optimizeQuality</span></dt><dd>Indicates that the user agent shall emphasize quality
  over rendering speed. The user agent shall employ a
  resampling algorithm at least as good as bilinear
  resampling.</dd><dt><span class="prop-value">optimizeSpeed</span></dt><dd>Indicates that the user agent shall emphasize rendering
  speed over quality. The user agent should use a resampling
  algorithm which achieves the goal of fast rendering, with the
  requirement that the resampling algorithm shall be at least
  as good as nearest neighbor resampling. If performance goals
  can be achieved with higher quality algorithms, then the user
  agent should use the higher quality algorithms instead of
  nearest neighbor resampling.</dd></dl>

<p>In all cases, resampling must be done in a truecolor (e.g.,
24-bit) color space even if the original data and/or the target
device is indexed color.</p>

<h2 id="painting-InheritanceOfPaintingProperties">11.8 Inheritance of painting properties</h2>

<p>The values of any of the painting properties described in this chapter can
be inherited from a given object's parent.  Painting, however, is always done
on each <a href="#intro-TermGraphicsElement">graphics element</a>
individually, never at the <a href="#intro-TermContainerElement">container element</a>
(e.g., a <a href="#struct-GElement"><span class="element-name">‘g’</span></a>) level. Thus, for the following SVG, even though the
gradient fill is specified on the <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, the gradient is simply inherited
through the <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element down into each rectangle, each of which is
rendered such that its interior is painted with the gradient.</p>

<p><span class="example-ref">Example Inheritance</span></p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="7cm" height="2cm" viewBox="0 0 700 200"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Gradients apply to leaf nodes
  &lt;/desc&gt;
  &lt;g&gt;
    &lt;defs&gt;
      &lt;linearGradient id="MyGradient" gradientUnits="objectBoundingBox"&gt;
        &lt;stop offset="0%" stop-color="#F60" /&gt;
        &lt;stop offset="100%" stop-color="#FF6" /&gt;
      &lt;/linearGradient&gt;
    &lt;/defs&gt;
    &lt;rect x="1" y="1" width="698" height="198"
          fill="none" stroke="blue" stroke-width="2" /&gt;
    &lt;g fill="url(#MyGradient)" &gt;
      &lt;rect x="100" y="50" width="200" height="100"/&gt;
      &lt;rect x="400" y="50" width="200" height="100"/&gt;
   &lt;/g&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example Inheritance</caption><tr><td><img alt="Example Inheritance" src="images/painting/inheritance.png" /></td></tr></table><p class="view-as-svg"><a href="images/painting/inheritance.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<p>Any painting properties defined in terms of the
<a href="#coords-ObjectBoundingBoxUnits">object's bounding box</a> use the
bounding box of the <a href="#intro-TermGraphicsElement">graphics element</a>
to which the operation applies. Note that <a href="#chapter-text">text elements</a>
are defined such that any painting operations defined in terms of the
<a href="#coords-ObjectBoundingBoxUnits">object's bounding box</a> use the
bounding box of the entire <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element. (See the discussion of
<a href="#text-ObjectBoundingBoxUnitsTextObjects">object bounding box units and text elements</a>.)</p>

<h2 id="painting-DOMInterfaces">11.9 DOM interfaces</h2>

<h3 id="painting-InterfaceSVGPaint">11.9.1 Interface SVGPaint</h3>


 <p>The <a class="idlinterface" href="#painting-InterfaceSVGPaint">SVGPaint</a> interface corresponds to basic type
 <a href="#painting-SpecifyingPaint">&lt;paint&gt;</a> and represents
 the values of properties <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> and <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>.</p>

 <p>Note: The <a class="idlinterface" href="#painting-InterfaceSVGPaint">SVGPaint</a> interface is deprecated, and may be 
 dropped from future versions of the SVG specification.</p>
<pre class="idl">interface <b>SVGPaint</b> : <a class="idlinterface" href="#types-InterfaceSVGColor">SVGColor</a> {

  // Paint Types
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_UNKNOWN">SVG_PAINTTYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_RGBCOLOR">SVG_PAINTTYPE_RGBCOLOR</a> = 1;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR">SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR</a> = 2;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_NONE">SVG_PAINTTYPE_NONE</a> = 101;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_CURRENTCOLOR">SVG_PAINTTYPE_CURRENTCOLOR</a> = 102;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_URI_NONE">SVG_PAINTTYPE_URI_NONE</a> = 103;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_URI_CURRENTCOLOR">SVG_PAINTTYPE_URI_CURRENTCOLOR</a> = 104;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_URI_RGBCOLOR">SVG_PAINTTYPE_URI_RGBCOLOR</a> = 105;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR">SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR</a> = 106;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_URI">SVG_PAINTTYPE_URI</a> = 107;

  readonly attribute unsigned short <a href="#painting-__svg__SVGPaint__paintType">paintType</a>;
  readonly attribute DOMString <a href="#painting-__svg__SVGPaint__uri">uri</a>;

  void <a href="#painting-__svg__SVGPaint__setUri">setUri</a>(in DOMString uri);
  void <a href="#painting-__svg__SVGPaint__setPaint">setPaint</a>(in unsigned short paintType, in DOMString uri, in DOMString rgbColor, in DOMString iccColor) raises(<a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>);
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Paint Types”:</dt><dd><dl class="constants">
<dt id="painting-__svg__SVGPaint__SVG_PAINTTYPE_UNKNOWN" class="constant first-child"><b>SVG_PAINTTYPE_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The paint type is not one of predefined types. It is invalid to attempt
 to define a new value of this type or to attempt to switch an existing
 value to this type.

</div></dd>
<dt id="painting-__svg__SVGPaint__SVG_PAINTTYPE_RGBCOLOR" class="constant"><b>SVG_PAINTTYPE_RGBCOLOR</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 An sRGB color has been specified without an alternative ICC color
 specification.

</div></dd>
<dt id="painting-__svg__SVGPaint__SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR" class="constant"><b>SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 An sRGB color has been specified along with an alternative ICC color
 specification.

</div></dd>
<dt id="painting-__svg__SVGPaint__SVG_PAINTTYPE_NONE" class="constant"><b>SVG_PAINTTYPE_NONE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a <span class="prop-value">none</span> value on a
 <a href="#painting-SpecifyingPaint">&lt;paint&gt;</a> specification.

</div></dd>
<dt id="painting-__svg__SVGPaint__SVG_PAINTTYPE_CURRENTCOLOR" class="constant"><b>SVG_PAINTTYPE_CURRENTCOLOR</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to a <span class="prop-value">currentColor</span> value on a
 <a href="#painting-SpecifyingPaint">&lt;paint&gt;</a> specification.

</div></dd>
<dt id="painting-__svg__SVGPaint__SVG_PAINTTYPE_URI_NONE" class="constant"><b>SVG_PAINTTYPE_URI_NONE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A URI has been specified, along with an explicit
 <span class="prop-value">none</span> as the backup paint method in case
 the URI is unavailable or invalid.

</div></dd>
<dt id="painting-__svg__SVGPaint__SVG_PAINTTYPE_URI_CURRENTCOLOR" class="constant"><b>SVG_PAINTTYPE_URI_CURRENTCOLOR</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A URI has been specified, along with an sRGB color as the backup paint
 method in case the URI is unavailable or invalid.

</div></dd>
<dt id="painting-__svg__SVGPaint__SVG_PAINTTYPE_URI_RGBCOLOR" class="constant"><b>SVG_PAINTTYPE_URI_RGBCOLOR</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A URI has been specified, along with an sRGB color as the backup paint
 method in case the URI is unavailable or invalid.

</div></dd>
<dt id="painting-__svg__SVGPaint__SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR" class="constant"><b>SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 A URI has been specified, along with both an sRGB color and alternate
 ICC color as the backup paint method in case the URI is unavailable or
 invalid.

</div></dd>
<dt id="painting-__svg__SVGPaint__SVG_PAINTTYPE_URI" class="constant"><b>SVG_PAINTTYPE_URI</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Only a URI has been specified.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="painting-__svg__SVGPaint__paintType" class="attribute first-child"><b>paintType</b><span class="idl-type-parenthetical"> (readonly unsigned short)</span></dt><dd class="attribute"><div>
 The type of paint, identified by one of the SVG_PAINTTYPE_* constants
 defined on this interface.
</div></dd>
<dt id="painting-__svg__SVGPaint__uri" class="attribute"><b>uri</b><span class="idl-type-parenthetical"> (readonly DOMString)</span></dt><dd class="attribute"><div>
 When the <a class="idlattr" href="#painting-__svg__SVGPaint__paintType">paintType</a> specifies a URI, this attribute holds the URI
 string. When the <a class="idlattr" href="#painting-__svg__SVGPaint__paintType">paintType</a> does not specify a URI, this attribute
 is null.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="painting-__svg__SVGPaint__setUri" class="operation first-child">void <b>setUri</b>(in DOMString <var>uri</var>)</dt><dd class="operation"><div>
 Sets the <a class="idlattr" href="#painting-__svg__SVGPaint__paintType">paintType</a> to SVG_PAINTTYPE_URI_NONE and sets <a class="idlattr" href="#painting-__svg__SVGPaint__uri">uri</a>
 to the specified value. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>DOMString <var>uri</var></div> <div> The URI for the desired paint server.
</div></li></ol></dd></dl></dd>
<dt id="painting-__svg__SVGPaint__setPaint" class="operation">void <b>setPaint</b>(in unsigned short <var>paintType</var>, in DOMString <var>uri</var>, in DOMString <var>rgbColor</var>, in DOMString <var>iccColor</var>)</dt><dd class="operation"><div>
 Sets the paint as specified by the parameters. If
 <var>paintType</var> requires a URI, then <var>uri</var> must be non-null;
 otherwise, <var>uri</var> must be null. If
 <var>paintType</var> requires an <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-RGBColor">RGBColor</a>, then <var>rgbColor</var> must
 be a string that matches <a href="#types-DataTypeColor">&lt;color&gt;</a>;
 otherwise, <var>rgbColor</var> must be null. If <var>paintType</var>
 requires an <a class="idlinterface" href="#types-InterfaceSVGICCColor">SVGICCColor</a>, then <var>iccColor</var> must be a
 string that matches <a href="#types-DataTypeICCColor">&lt;icccolor&gt;</a>;
 otherwise, <var>iccColor</var> must be null. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned short <var>paintType</var></div> <div> One of the defined constants for <a class="idlattr" href="#painting-__svg__SVGPaint__paintType">paintType</a>.
</div></li><li class="parameter"><div>DOMString <var>uri</var></div> <div> The URI for the desired paint server, or null.
</div></li><li class="parameter"><div>DOMString <var>rgbColor</var></div> <div> The specification of an sRGB color, or null.
</div></li><li class="parameter"><div>DOMString <var>iccColor</var></div> <div> The specification of an ICC color, or null.
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>, code SVG_INVALID_VALUE_ERR</dt><dd class="exception"> Raised if one of the
  parameters has an invalid value.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="painting-InterfaceSVGMarkerElement">11.9.2 Interface SVGMarkerElement</h3>



 The <a class="idlinterface" href="#painting-InterfaceSVGMarkerElement">SVGMarkerElement</a> interface corresponds to the
 <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element.
<pre class="idl">interface <b>SVGMarkerElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGFitToViewBox">SVGFitToViewBox</a> {

  // Marker Unit Types
  const unsigned short <a href="#painting-__svg__SVGMarkerElement__SVG_MARKERUNITS_UNKNOWN">SVG_MARKERUNITS_UNKNOWN</a> = 0;
  const unsigned short <a href="#painting-__svg__SVGMarkerElement__SVG_MARKERUNITS_USERSPACEONUSE">SVG_MARKERUNITS_USERSPACEONUSE</a> = 1;
  const unsigned short <a href="#painting-__svg__SVGMarkerElement__SVG_MARKERUNITS_STROKEWIDTH">SVG_MARKERUNITS_STROKEWIDTH</a> = 2;

  // Marker Orientation Types
  const unsigned short <a href="#painting-__svg__SVGMarkerElement__SVG_MARKER_ORIENT_UNKNOWN">SVG_MARKER_ORIENT_UNKNOWN</a> = 0;
  const unsigned short <a href="#painting-__svg__SVGMarkerElement__SVG_MARKER_ORIENT_AUTO">SVG_MARKER_ORIENT_AUTO</a> = 1;
  const unsigned short <a href="#painting-__svg__SVGMarkerElement__SVG_MARKER_ORIENT_ANGLE">SVG_MARKER_ORIENT_ANGLE</a> = 2;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#painting-__svg__SVGMarkerElement__refX">refX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#painting-__svg__SVGMarkerElement__refY">refY</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#painting-__svg__SVGMarkerElement__markerUnits">markerUnits</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#painting-__svg__SVGMarkerElement__markerWidth">markerWidth</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#painting-__svg__SVGMarkerElement__markerHeight">markerHeight</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#painting-__svg__SVGMarkerElement__orientType">orientType</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedAngle">SVGAnimatedAngle</a> <a href="#painting-__svg__SVGMarkerElement__orientAngle">orientAngle</a>;

  void <a href="#painting-__svg__SVGMarkerElement__setOrientToAuto">setOrientToAuto</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  void <a href="#painting-__svg__SVGMarkerElement__setOrientToAngle">setOrientToAngle</a>(in <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> angle) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Marker Unit Types”:</dt><dd><dl class="constants">
<dt id="painting-__svg__SVGMarkerElement__SVG_MARKERUNITS_UNKNOWN" class="constant first-child"><b>SVG_MARKERUNITS_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The marker unit type is not one of predefined types. It is invalid to
 attempt to define a new value of this type or to attempt to switch an
 existing value to this type.

</div></dd>
<dt id="painting-__svg__SVGMarkerElement__SVG_MARKERUNITS_USERSPACEONUSE" class="constant"><b>SVG_MARKERUNITS_USERSPACEONUSE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The value of attribute <a href="#painting-MarkerUnitsAttribute"><span class="attr-name">‘markerUnits’</span></a> is
 <span class="attr-value">'userSpaceOnUse'</span>.

</div></dd>
<dt id="painting-__svg__SVGMarkerElement__SVG_MARKERUNITS_STROKEWIDTH" class="constant"><b>SVG_MARKERUNITS_STROKEWIDTH</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The value of attribute <a href="#painting-MarkerUnitsAttribute"><span class="attr-name">‘markerUnits’</span></a> is
 <span class="attr-value">'strokeWidth'</span>.

</div></dd></dl></dd><dt class="constants-header">Constants in group “Marker Orientation Types”:</dt><dd><dl class="constants">
<dt id="painting-__svg__SVGMarkerElement__SVG_MARKER_ORIENT_UNKNOWN" class="constant first-child"><b>SVG_MARKER_ORIENT_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The marker orientation is not one of predefined types. It is invalid to
 attempt to define a new value of this type or to attempt to switch an
 existing value to this type.

</div></dd>
<dt id="painting-__svg__SVGMarkerElement__SVG_MARKER_ORIENT_AUTO" class="constant"><b>SVG_MARKER_ORIENT_AUTO</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Attribute <a href="#painting-OrientAttribute"><span class="attr-name">‘orient’</span></a> has value
 <span class="attr-value">'auto'</span>.

</div></dd>
<dt id="painting-__svg__SVGMarkerElement__SVG_MARKER_ORIENT_ANGLE" class="constant"><b>SVG_MARKER_ORIENT_ANGLE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Attribute <a href="#painting-OrientAttribute"><span class="attr-name">‘orient’</span></a> has an angle value.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="painting-__svg__SVGMarkerElement__refX" class="attribute first-child"><b>refX</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#painting-MarkerElementRefXAttribute"><span class="attr-name">‘refX’</span></a> on the given
 <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element.
</div></dd>
<dt id="painting-__svg__SVGMarkerElement__refY" class="attribute"><b>refY</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#painting-MarkerElementRefYAttribute"><span class="attr-name">‘refY’</span></a> on the given
 <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element.
</div></dd>
<dt id="painting-__svg__SVGMarkerElement__markerUnits" class="attribute"><b>markerUnits</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#painting-MarkerUnitsAttribute"><span class="attr-name">‘markerUnits’</span></a> on the given
 <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element.  One of the Marker Unit Types
 defined on this interface.
</div></dd>
<dt id="painting-__svg__SVGMarkerElement__markerWidth" class="attribute"><b>markerWidth</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#painting-MarkerWidthAttribute"><span class="attr-name">‘markerWidth’</span></a> on the given
 <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element.
</div></dd>
<dt id="painting-__svg__SVGMarkerElement__markerHeight" class="attribute"><b>markerHeight</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#painting-MarkerHeightAttribute"><span class="attr-name">‘markerHeight’</span></a> on the given
 <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element.
</div></dd>
<dt id="painting-__svg__SVGMarkerElement__orientType" class="attribute"><b>orientType</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#painting-OrientAttribute"><span class="attr-name">‘orient’</span></a> on the given
 <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element.  One of the Marker Orientation
 Types defined on this interface.
</div></dd>
<dt id="painting-__svg__SVGMarkerElement__orientAngle" class="attribute"><b>orientAngle</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedAngle">SVGAnimatedAngle</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#painting-OrientAttribute"><span class="attr-name">‘orient’</span></a> on the given
 <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element.  If <a class="idlattr" href="#painting-__svg__SVGMarkerElement__markerUnits">markerUnits</a> is
 SVG_MARKER_ORIENT_ANGLE, the angle value for attribute <a href="#painting-OrientAttribute"><span class="attr-name">‘orient’</span></a>;
 otherwise, it will be set to zero.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="painting-__svg__SVGMarkerElement__setOrientToAuto" class="operation first-child">void <b>setOrientToAuto</b>()</dt><dd class="operation"><div>
 Sets the value of attribute <a href="#painting-OrientAttribute"><span class="attr-name">‘orient’</span></a> to
 <span class="attr-value">'auto'</span>.

</div><dl class="operation"><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="painting-__svg__SVGMarkerElement__setOrientToAngle" class="operation">void <b>setOrientToAngle</b>(in <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> <var>angle</var>)</dt><dd class="operation"><div>
 Sets the value of attribute <a href="#painting-OrientAttribute"><span class="attr-name">‘orient’</span></a> to the given angle.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div><a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> <var>angle</var></div> <div> The angle value to use for attribute <a href="#painting-OrientAttribute"><span class="attr-name">‘orient’</span></a>.
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>


</div><hr class="chapter-divider" />
<div id="chapter-color">

<h1>12 Color</h1><h2 id="color-toc">Contents</h2><ul class="toc">
<li><a href="#color-ColorIntroduction">12.1 Introduction</a></li>
<li><a href="#color-ColorProperty">12.2 The <span class="prop-name">‘color’</span> property</a></li>
<li><a href="#color-ColorProfileDescriptions">12.3 Color profile descriptions</a><ul class="toc">
<li><a href="#color-ColorProfileDescriptionsOverview">12.3.1 Overview of color profile descriptions</a></li>
<li><a href="#color-ColorProfileAlternatives">12.3.2 Alternative ways of defining a color profile description</a></li>
<li><a href="#color-ColorProfileElement">12.3.3 The <span class="element-name">‘color-profile’</span> element</a></li>
<li><a href="#color-ColorProfileAtRule">12.3.4 The CSS <strong>@color-profile</strong> rule</a></li>
<li><a href="#color-ColorProfileProperty">12.3.5 The <span class="prop-name">‘color-profile’</span> property</a></li></ul></li>
<li><a href="#color-DOMInterfaces">12.4 DOM interfaces</a><ul class="toc">
<li><a href="#color-InterfaceSVGColorProfileElement">12.4.1 Interface SVGColorProfileElement</a></li>
<li><a href="#color-InterfaceSVGColorProfileRule">12.4.2 Interface SVGColorProfileRule</a></li></ul></li></ul>

<h2 id="color-ColorIntroduction">12.1 Introduction</h2>

<p>All SVG colors are specified in the sRGB color space
[<a href="#refs-ref-SRGB">SRGB</a>]. At a minimum, SVG user
agents shall conform to the color behavior requirements specified in the
<a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#color-units">color units section</a>
and the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/colors.html#gamma-correction">minimal gamma correction rules</a>
defined in the CSS2 specification.</p>

<p>Additionally, SVG content can specify an alternate color specification
using an ICC profile [<a href="#refs-ref-ICC42">ICC42</a>]
as described in <a href="#painting-SpecifyingPaint">Specifying paint</a>.
If ICC-based colors are provided and the SVG user agent supports ICC color,
then the ICC-based color takes precedence over the sRGB color specification;
otherwise, the RGB fallback colors must be used.
Note that, in this specification, color interpolation occurs in an RGB color space even if an
ICC-based color specification is provided (see <a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a>).</p>

<h2 id="color-ColorProperty">12.2 The <span class="prop-name">‘color’</span> property</h2>

<p>The <a href="#color-ColorProperty"><span class="prop-name">‘color’</span></a> property is used to provide a potential indirect value
(<span class="prop-value">currentColor</span>) for the <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>,
<a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>, <a href="#pservers-StopColorProperty"><span class="prop-name">‘stop-color’</span></a>, <a href="#filters-FloodColorProperty"><span class="prop-name">‘flood-color’</span></a> and
<a href="#filters-LightingColorProperty"><span class="prop-name">‘lighting-color’</span></a> properties.</p>

    <div class="propdef">
      <dl><dt><span class="propdef-title prop-name">‘color’</span></dt><dd>
          <table summary="color property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td><a href="#types-DataTypeColor">&lt;color&gt;</a> |
              <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>depends on user agent</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td>elements to which properties <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>, <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>,
              <a href="#pservers-StopColorProperty"><span class="prop-name">‘stop-color’</span></a>, <a href="#filters-FloodColorProperty"><span class="prop-name">‘flood-color’</span></a> and <a href="#filters-LightingColorProperty"><span class="prop-name">‘lighting-color’</span></a>
              apply</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<p>Except for any additional information provided in this
specification, the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/colors.html#propdef-color">normative definition of the property</a>
is in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 14.1).</p>

<h2 id="color-ColorProfileDescriptions">12.3 Color profile descriptions</h2>

<h3 id="color-ColorProfileDescriptionsOverview">12.3.1 Overview of color profile descriptions</h3>

<p>The <a href="http://www.color.org/">International Color
Consortium</a> has established a standard, the ICC Profile
[<a href="#refs-ref-ICC42">ICC42</a>], for
documenting the color characteristics of input and output
devices. Using these profiles, it is possible to build a
transform and correct visual data for viewing on different
devices.</p>

<p>A <span class="SVG-Term">color profile description</span>
provides the bridge between an ICC profile and references to
that ICC profile within SVG content. The color profile
description is added to the user agent's list of known color
profiles and then used to select the relevant profile. The
color profile description contains descriptors for the location
of the color profile on the Web, a name to reference the
profile and information about rendering intent.</p>

<h3 id="color-ColorProfileAlternatives">12.3.2 Alternative ways of defining a color profile description</h3>

<p>Color profile descriptions can be specified in either of the following ways:</p>

<ul><li>a <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a> element</li><li>an <em>@color-profile</em> rule within a CSS style sheet (only
  applicable for user agents which support using CSS to style the SVG
  content [<a href="#refs-ref-CSS2">CSS2</a>])</li></ul>

<p>If a color profile with the same <em>name</em> value has
been identified by both a <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a> element and
<em>@color-profile</em> rules within a CSS style sheet, then
the user agent shall first attempt to locate the profile by
using the specifications in the <em>@color-profile</em> rules
first.</p>

<h3 id="color-ColorProfileElement">12.3.3 The <span class="element-name">‘color-profile’</span> element</h3>



<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘color-profile’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#color-ColorProfileElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#color-ColorProfileElementLocalAttribute"><span class="attr-name">‘local’</span></a></li><li><a href="#color-ColorProfileElementNameAttribute"><span class="attr-name">‘name’</span></a></li><li><a href="#color-ColorProfileElementRenderingIntentAttribute"><span class="attr-name">‘rendering-intent’</span></a></li><li><a href="#color-ColorProfileElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#color-InterfaceSVGColorProfileElement">SVGColorProfileElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="color-ColorProfileElementHrefAttribute"><span class="adef">xlink:href</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span>"</dt><dd>The location of an ICC profile resource.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="color-ColorProfileElementLocalAttribute"><span class="adef">local</span> = "<span class="attr-value">&lt;string&gt;</span>"</dt><dd>The unique ID for a locally stored color profile.
        &lt;string&gt; is the profile's unique ID as specified by
        <a href="http://www.color.org/">International Color
        Consortium</a>. If both the <a href="#color-ColorProfileElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> and the <a href="#color-ColorProfileElementLocalAttribute"><span class="attr-name">‘local’</span></a>
        attributes are specified,
        then the user agent shall search the local system for the
        locally stored color profile first, and, if not available
        locally, then attempt to use the resource identified by the
        <a href="#color-ColorProfileElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> attribute. (Note:
        Profile description fields do <em>not</em> represent a
        profile's unique ID. With current ICC proposals, the
        profile's unique ID is an MD5-encoded value within the
        profile header.)<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="color-ColorProfileElementNameAttribute"><span class="adef">name</span> = "<span class="attr-value">&lt;name&gt;</span>"</dt><dd>The name which is used as the first parameter for <span class="prop-value">icc-color</span> specifications within
        <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>, <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>, <a href="#pservers-StopColorProperty"><span class="prop-name">‘stop-color’</span></a>,
        <a href="#filters-FloodColorProperty"><span class="prop-name">‘flood-color’</span></a> and <a href="#filters-LightingColorProperty"><span class="prop-name">‘lighting-color’</span></a> property
        values to identify the color profile to use for the ICC
        color specification and the name which can be the value of
        the <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a> property. Note
        that if &lt;name&gt; is not provided, it will be impossible
        to reference the given color profile description. The name
        "sRGB" is predefined; any color profile descriptions with
        <span class="attr-value">&lt;name&gt;</span> set to "sRGB"
        will be ignored. For consistency with <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/grammar.html#q2">CSS
        lexical scanning and parsing rules</a>
        ([<a href="#refs-ref-CSS2">CSS2</a>], section D.2), the keyword "sRGB"
        is case-insensitive; however, it is recommended that the
        mixed capitalization "sRGB" be used for consistency with
        common industry practice.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="color-ColorProfileElementRenderingIntentAttribute"><span class="adef">rendering-intent</span> = "<span class="attr-value">auto | perceptual |
        relative-colorimetric | saturation |
        absolute-colorimetric</span>"</dt><dd>
          <p><a href="#color-ColorProfileElementRenderingIntentAttribute"><span class="attr-name">‘rendering-intent’</span></a>
          permits the specification of a color profile rendering
          intent other than the default. <a href="#color-ColorProfileElementRenderingIntentAttribute"><span class="attr-name">‘rendering-intent’</span></a> is applicable
          primarily to color profiles corresponding to CMYK color
          spaces. The different options cause different methods to
          be used for translating colors to the color gamut of the
          target rendering device:</p>
          <dl><dt><span class="prop-value">auto</span></dt><dd>This is the default behavior. The user agent
            determines the best intent based on the content type.
            For image content containing an embedded profile, it
            shall be assumed that the intent specified within the
            profile is the desired intent. Otherwise, the user
            agent shall use the current profile and force the
            intent, overriding any intent that might be stored in
            the profile itself.</dd><dt><span class="prop-value">perceptual</span></dt><dd>This method, often the preferred choice for images,
            preserves the relationship between colors. It attempts
            to maintain relative color values among the pixels as
            they are mapped to the target device gamut. Sometimes
            pixel values that were originally within the target
            device gamut are changed in order to avoid hue shifts
            and discontinuities and to preserve as much as possible
            the overall appearance of the scene.</dd><dt><span class="prop-value">saturation</span></dt><dd>Preserves the relative saturation (chroma) values
            of the original pixels. Out of gamut colors are
            converted to colors that have the same saturation but
            fall just inside the gamut.</dd><dt><span class="prop-value">relative-colorimetric</span></dt><dd>Leaves colors that fall inside the gamut unchanged.
            This method usually converts out of gamut colors to
            colors that have the same lightness but fall just
            inside the gamut.</dd><dt><span class="prop-value">absolute-colorimetric</span></dt><dd>Disables white point matching when converting
            colors. This option is generally not recommended.</dd></dl>
          <br />
           <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: no.</span>
        </dd></dl>
    </div>



<h3 id="color-ColorProfileAtRule">12.3.4 The CSS <strong>@color-profile</strong> rule</h3>

<p>When the document is styled using CSS, the
<strong>@color-profile</strong> rule can be used to specify a color
profile description. The general form is:</p>

<pre>
@color-profile { &lt;color-profile-description&gt; }
</pre>
    where the &lt;color-profile-description&gt; has the form: 
<pre>
descriptor: value;
[...]
descriptor: value;
</pre>

<p>Each @color-profile rule specifies a value for every color
profile descriptor, either implicitly or explicitly. Those not
given explicit values in the rule take the initial value listed
with each descriptor in this specification. These descriptors
apply solely within the context of the @color-profile rule in
which they are defined, and do not apply to document language
elements. Thus, there is no notion of which elements the
descriptors apply to, or whether the values are inherited by
child elements.</p>

<p>The following are the descriptors for a &lt;color-profile-description&gt;:</p>

    <div class="propdef">
      <dl><dt id="color-ColorProfileSrcProperty"><span class="descdef-title prop-name">‘src’</span></dt><dd>
          <table summary="src descriptor definition for @color-profile" class="propinfo" cellspacing="0" cellpadding="0"><tr><td><em>Values:</em></td><td>sRGB | &lt;local-profile&gt; | <a href="#types-DataTypeIRI">&lt;iri&gt;</a> |
              (&lt;local-profile&gt; <a href="#types-DataTypeIRI">&lt;iri&gt;</a>) | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr><td><em>Initial:</em></td><td>sRGB</td></tr><tr><td><em>Media:</em></td><td>visual</td></tr></table>
        </dd></dl>
    </div>
    <dl><dt><span class="prop-value">sRGB</span></dt><dd>The source profile is the sRGB color space. For
      consistency with
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/grammar.html#q2">CSS lexical scanning and parsing rules</a>
      ([<a href="#refs-ref-CSS2">CSS2</a>], section D.2), the keyword "sRGB" is
      case-insensitive; however, it is recommended that the mixed
      capitalization "sRGB" be used for consistency with common
      industry practice.</dd><dt><span class="prop-value">&lt;local-profile&gt;</span></dt><dd>
        The source profile is a locally-stored profile. The syntax
        for &lt;local-profile&gt; is: 
<pre>
"local(" + &lt;string&gt; + ")"
</pre>
        where &lt;string&gt; is the profile's unique ID as
        specified by <a href="http://www.color.org/">International
        Color Consortium</a>. (Note: Profile description fields do
        <em>not</em> represent a profile's unique ID. With current
        ICC proposals, the profile's unique ID is an MD5-encoded
        value within the profile header.)
      </dd><dt><span class="prop-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span></dt><dd>The source profile is a <a href="#linking-IRIReference">IRI reference</a>
      to a color profile.</dd><dt>(<span class="prop-value">&lt;local-profile&gt; <a href="#types-DataTypeIRI">&lt;iri&gt;</a>)</span></dt><dd>Two profiles are specified. If &lt;local-profile&gt;
      cannot be found on the local system, then the <a href="#types-DataTypeIRI">&lt;iri&gt;</a> is used.</dd></dl>

    <div class="propdef">
      <dl><dt id="color-ColorProfileNameProperty"><span class="descdef-title prop-name">‘name’</span></dt><dd>
          <table summary="name descriptor definition for @color-profile" class="propinfo" cellspacing="0" cellpadding="0"><tr><td><em>Values:</em></td><td>&lt;name&gt;</td></tr><tr><td><em>Initial:</em></td><td>undefined</td></tr><tr><td><em>Media:</em></td><td>visual</td></tr></table>
        </dd></dl>
    </div>
    <dl><dt><span class="prop-value">&lt;name&gt;</span></dt><dd>See the description for the <a href="#color-ColorProfileElementNameAttribute"><span class="attr-name">‘name’</span></a> attribute on the
      <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a> element. Note that if &lt;name&gt; is not
      provided, it will be impossible to reference the given @color-profile
      definition.</dd></dl>

    <div class="propdef">
      <dl><dt id="color-RenderingIntentProperty"><span class="descdef-title prop-name">‘rendering-intent’</span></dt><dd>
          <table summary="rendering-intent descriptor definition for @color-profile" class="propinfo" cellspacing="0" cellpadding="0"><tr><td><em>Values:</em></td><td>auto | perceptual | relative-colorimetric |<br />
               saturation | absolute-colorimetric</td></tr><tr><td><em>Initial:</em></td><td>auto</td></tr><tr><td><em>Media:</em></td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>no</td></tr></table>
        </dd></dl>
    </div>

<p>See the description for the <a href="#color-ColorProfileElementRenderingIntentAttribute"><span class="attr-name">‘rendering-intent’</span></a> attribute on the
<a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a> element.</p>

<h3 id="color-ColorProfileProperty">12.3.5 The <span class="prop-name">‘color-profile’</span> property</h3>

    <div class="propdef">
      <dl><dt><span class="propdef-title prop-name">‘color-profile’</span></dt><dd>
          <table summary="color-profile property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>auto | sRGB | &lt;name&gt; | <a href="#types-DataTypeIRI">&lt;iri&gt;</a> | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>auto</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> elements that
              refer to raster images</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<dl><dt><span class="prop-value">auto</span></dt><dd>This is the default behavior. All colors are presumed to
  be defined in the sRGB color space unless a more precise
  embedded profile is specified within content data. For images
  that do have a profile built into their data, that profile is
  used. For images that do not have a profile, the sRGB profile
  is used.</dd><dt><span class="prop-value">sRGB</span></dt><dd>The source profile is assumed to be sRGB. This differs
  from auto in that it overrides an embedded profile inside an
  image.<br />
  <br />
  For consistency with <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/grammar.html#q2">CSS lexical scanning and parsing rules</a>
  ([<a href="#refs-ref-CSS2">CSS2</a>], section D.2), the keyword "sRGB" is
  case-insensitive; however, it is recommended that the mixed
  capitalization "sRGB" be used for consistency with common
  industry practice.</dd><dt><span class="prop-value">&lt;name&gt;</span></dt><dd>A name corresponding to a defined color profile that is
  in the user agent's color profile description database. The
  user agent searches the color profile description database
  for a <a href="#color-ColorProfileDescriptions">color
  profile description</a> entry whose name descriptor matches
  &lt;name&gt; and uses the last matching entry that is found.
  If a match is found, the corresponding profile overrides an
  embedded profile inside an image. If no match is found, then
  the embedded profile inside the image is used.</dd><dt><span class="prop-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span></dt><dd>A <a href="#linking-IRIReference">IRI
  reference</a> to the source color profile. The referenced
  color profile overrides an embedded profile inside the
  image.</dd></dl>

<h2 id="color-DOMInterfaces">12.4 DOM interfaces</h2>

<h3 id="color-InterfaceSVGColorProfileElement">12.4.1 Interface SVGColorProfileElement</h3>



 The <a class="idlinterface" href="#color-InterfaceSVGColorProfileElement">SVGColorProfileElement</a> interface corresponds to the
 <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a> element.
<pre class="idl">interface <b>SVGColorProfileElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                   <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                                   <a class="idlinterface" href="#types-InterfaceSVGRenderingIntent">SVGRenderingIntent</a> {
  attribute DOMString <a href="#color-__svg__SVGColorProfileElement__local">local</a>;
  attribute DOMString <a href="#color-__svg__SVGColorProfileElement__name">name</a>;
  attribute unsigned short <a href="#color-__svg__SVGColorProfileElement__renderingIntent">renderingIntent</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="color-__svg__SVGColorProfileElement__local" class="attribute first-child"><b>local</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#color-ColorProfileElementLocalAttribute"><span class="attr-name">‘local’</span></a> on the given element.

</div></dd>
<dt id="color-__svg__SVGColorProfileElement__name" class="attribute"><b>name</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#color-ColorProfileElementNameAttribute"><span class="attr-name">‘name’</span></a> on the given element.

</div></dd>
<dt id="color-__svg__SVGColorProfileElement__renderingIntent" class="attribute"><b>renderingIntent</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#color-ColorProfileElementRenderingIntentAttribute"><span class="attr-name">‘rendering-intent’</span></a> on the given element.
 The value of this attribute is the value of the the RENDERING_INTENT_*
 constant defined on <a class="idlinterface" href="#types-InterfaceSVGRenderingIntent">SVGRenderingIntent</a> that corresponds to the
 value of the <a href="#color-ColorProfileElementRenderingIntentAttribute"><span class="attr-name">‘rendering-intent’</span></a> attribute.

</div></dd></dl></dd></dl>


<h3 id="color-InterfaceSVGColorProfileRule">12.4.2 Interface SVGColorProfileRule</h3>


 <p>The <a class="idlinterface" href="#color-InterfaceSVGColorProfileRule">SVGColorProfileRule</a> interface represents an @color-profile
 rule in a CSS style sheet. An @color-profile rule identifies a ICC
 profile which can be referenced within a given document.</p>

 <p>Support for the <a class="idlinterface" href="#color-InterfaceSVGColorProfileRule">SVGColorProfileRule</a> interface is only required
 in user agents that support <a href="#styling-StylingWithCSS">styling with CSS</a>.</p>
<pre class="idl">interface <b>SVGColorProfileRule</b> : <a class="idlinterface" href="#types-InterfaceSVGCSSRule">SVGCSSRule</a>,
                                <a class="idlinterface" href="#types-InterfaceSVGRenderingIntent">SVGRenderingIntent</a> {
  attribute DOMString <a href="#color-__svg__SVGColorProfileRule__src">src</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute DOMString <a href="#color-__svg__SVGColorProfileRule__name">name</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute unsigned short <a href="#color-__svg__SVGColorProfileRule__renderingIntent">renderingIntent</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="color-__svg__SVGColorProfileRule__src" class="attribute first-child"><b>src</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to descriptor <span class="prop-name">src</span> within an
 @color-profile rule.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="color-__svg__SVGColorProfileRule__name" class="attribute"><b>name</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to descriptor <span class="prop-name">‘name’</span> within an
 @color-profile rule.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd>
<dt id="color-__svg__SVGColorProfileRule__renderingIntent" class="attribute"><b>renderingIntent</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="attribute"><div>
 The type of rendering intent, identified by one of the
 <a class="idlinterface" href="#types-InterfaceSVGRenderingIntent">SVGRenderingIntent</a> constants.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>

</div><hr class="chapter-divider" />
<div id="chapter-pservers">

<h1>13 Gradients and Patterns</h1><h2 id="pservers-toc">Contents</h2><ul class="toc">
<li><a href="#pservers-Introduction">13.1 Introduction</a></li>
<li><a href="#pservers-Gradients">13.2 Gradients</a><ul class="toc">
<li><a href="#pservers-GradientsIntroduction">13.2.1 Introduction</a></li>
<li><a href="#pservers-LinearGradients">13.2.2 Linear gradients</a></li>
<li><a href="#pservers-RadialGradients">13.2.3 Radial gradients</a></li>
<li><a href="#pservers-GradientStops">13.2.4 Gradient stops</a></li></ul></li>
<li><a href="#pservers-Patterns">13.3 Patterns</a></li>
<li><a href="#pservers-DOMInterfaces">13.4 DOM interfaces</a><ul class="toc">
<li><a href="#pservers-InterfaceSVGGradientElement">13.4.1 Interface SVGGradientElement</a></li>
<li><a href="#pservers-InterfaceSVGLinearGradientElement">13.4.2 Interface SVGLinearGradientElement</a></li>
<li><a href="#pservers-InterfaceSVGRadialGradientElement">13.4.3 Interface SVGRadialGradientElement</a></li>
<li><a href="#pservers-InterfaceSVGStopElement">13.4.4 Interface SVGStopElement</a></li>
<li><a href="#pservers-InterfaceSVGPatternElement">13.4.5 Interface SVGPatternElement</a></li></ul></li></ul>

<h2 id="pservers-Introduction">13.1 Introduction</h2>

<p>With SVG, you can fill (i.e., paint the interior) or stroke (i.e.,
paint the outline) of shapes and text using one of the following:</p>

<ul><li><a href="#chapter-color">color</a> (using &lt;color&gt;)</li><li><a href="#pservers-Gradients">gradients</a> (linear or radial)</li><li><a href="#pservers-Patterns">patterns</a> (vector or image, possibly tiled)</li></ul>

<p>SVG uses the general notion of a <strong>paint server</strong>.
Gradients and patterns are just specific types of built-in paint
servers.</p>

<p>Paint servers are referenced using an
<a href="#linking-IRIReference">IRI reference</a> on a <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> or
<a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> property.</p>

<h2 id="pservers-Gradients">13.2 Gradients</h2>

<h3 id="pservers-GradientsIntroduction">13.2.1 Introduction</h3>

<p>Gradients consist of continuously smooth color transitions
along a vector from one color to another, possibly
followed by additional transitions along the same vector
to other colors. SVG provides for two types of gradients:
<a href="#pservers-LinearGradients"><strong>linear
gradients</strong></a> and <a href="#pservers-RadialGradients"><strong>radial
gradients</strong></a>.</p>

<p>Once defined, gradients are then referenced using <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> or
<a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> properties on a given
<a href="#intro-TermGraphicsElement">graphics element</a> to indicate that
the given element shall be filled or stroked with the referenced gradient.</p>

<p>
The angle of the color transitions along the gradient vector is defined by the
gradient normal. Before any transforms are applied to the gradient or its
referencing <a href="#intro-TermGraphicsElement">graphics element</a>, the
gradient normal is perpendicular with the gradient vector. If a
<a href="#intro-TermGraphicsElement">graphics element</a> references a
gradient, conceptually the <a href="#intro-TermGraphicsElement">graphics
element</a> should take a copy of the gradient vector and gradient normal and
treat it as part of its own geometry. Any transformations applied to the
<a href="#intro-TermGraphicsElement">graphics element</a> geometry also
apply to the copied gradient vector and gradient normal. Any gradient transforms
that are specified on the reference gradient are applied before any
<a href="#intro-TermGraphicsElement">graphics element</a> transformations
are applied to the gradient.
</p>

<img src="images/pservers/gradient_vector_and_normal.png" alt="linear and radial gradient vectors and normals" width="1000" height="500" />

<h3 id="pservers-LinearGradients">13.2.2 Linear gradients</h3>



<p id="pservers-LinearGradientElement">Linear gradients are defined by a
<a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> element.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘linearGradient’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermGradientElement">Gradient element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li><li><a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#pservers-LinearGradientElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#pservers-LinearGradientElementX1Attribute"><span class="attr-name">‘x1’</span></a></li><li><a href="#pservers-LinearGradientElementY1Attribute"><span class="attr-name">‘y1’</span></a></li><li><a href="#pservers-LinearGradientElementX2Attribute"><span class="attr-name">‘x2’</span></a></li><li><a href="#pservers-LinearGradientElementY2Attribute"><span class="attr-name">‘y2’</span></a></li><li><a href="#pservers-LinearGradientElementGradientUnitsAttribute"><span class="attr-name">‘gradientUnits’</span></a></li><li><a href="#pservers-LinearGradientElementGradientTransformAttribute"><span class="attr-name">‘gradientTransform’</span></a></li><li><a href="#pservers-LinearGradientElementSpreadMethodAttribute"><span class="attr-name">‘spreadMethod’</span></a></li><li><a href="#pservers-LinearGradientElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#pservers-InterfaceSVGLinearGradientElement">SVGLinearGradientElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="pservers-LinearGradientElementGradientUnitsAttribute"><span class="adef">gradientUnits</span> =
        "<em>userSpaceOnUse</em> | <em>objectBoundingBox</em>"</dt><dd>Defines the coordinate system for attributes <a href="#pservers-LinearGradientElementX1Attribute"><span class="attr-name">‘x1’</span></a>,
        <a href="#pservers-LinearGradientElementY1Attribute"><span class="attr-name">‘y1’</span></a>, <a href="#pservers-LinearGradientElementX2Attribute"><span class="attr-name">‘x2’</span></a> and <a href="#pservers-LinearGradientElementY2Attribute"><span class="attr-name">‘y2’</span></a>.<br />
         If <span class="attr-value">gradientUnits="userSpaceOnUse"</span>,
        <a href="#pservers-LinearGradientElementX1Attribute"><span class="attr-name">‘x1’</span></a>, <a href="#pservers-LinearGradientElementY1Attribute"><span class="attr-name">‘y1’</span></a>, <a href="#pservers-LinearGradientElementX2Attribute"><span class="attr-name">‘x2’</span></a> and <a href="#pservers-LinearGradientElementY2Attribute"><span class="attr-name">‘y2’</span></a> represent
        values in the coordinate system that results from taking
        the current user coordinate system in place at the time
        when the gradient element is referenced (i.e., the user
        coordinate system for the element referencing the gradient
        element via a <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> or <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> property) and then
        applying the transform specified by attribute <a href="#pservers-LinearGradientElementGradientTransformAttribute"><span class="attr-name">‘gradientTransform’</span></a>.<br />
         If <span class="attr-value">gradientUnits="objectBoundingBox"</span>,
        the user coordinate system for attributes
        <a href="#pservers-LinearGradientElementX1Attribute"><span class="attr-name">‘x1’</span></a>, <a href="#pservers-LinearGradientElementY1Attribute"><span class="attr-name">‘y1’</span></a>, <a href="#pservers-LinearGradientElementX2Attribute"><span class="attr-name">‘x2’</span></a> and <a href="#pservers-LinearGradientElementY2Attribute"><span class="attr-name">‘y2’</span></a> is established
        using the bounding box of the element to which the gradient
        is applied (see <a href="#coords-ObjectBoundingBox">Object bounding box
        units</a>) and then applying the transform specified by
        attribute <a href="#pservers-LinearGradientElementGradientTransformAttribute"><span class="attr-name">‘gradientTransform’</span></a>.<br />
         When <span class="attr-value">gradientUnits="objectBoundingBox"</span>
        and <a href="#pservers-LinearGradientElementGradientTransformAttribute"><span class="attr-name">‘gradientTransform’</span></a> is the
        identity matrix, the normal of the linear gradient is
        perpendicular to the gradient vector in object bounding box
        space (i.e., the abstract coordinate system where (0,0) is
        at the top/left of the object bounding box and (1,1) is at
        the bottom/right of the object bounding box). When the object's bounding
        box is not square, the gradient normal which is initially perpendicular
        to the gradient vector within object bounding box space may render
        non-perpendicular relative to the gradient vector in user space. If the
        gradient vector is parallel to one of the axes of the bounding box, the
        gradient normal will remain perpendicular. This transformation is due to
        application of the non-uniform scaling transformation from bounding box
        space to user space.<br />
         If attribute <a href="#pservers-LinearGradientElementGradientUnitsAttribute"><span class="attr-name">‘gradientUnits’</span></a>
        is not specified, then the effect is as if a value of <span class="attr-value">'objectBoundingBox'</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-LinearGradientElementGradientTransformAttribute"><span class="adef">gradientTransform</span> = "<span class="attr-value"><a href="#types-DataTypeTransformList">&lt;transform-list&gt;</a></span>"</dt><dd>Contains the definition of an optional additional
        transformation from the gradient coordinate system onto the
        target coordinate system (i.e., userSpaceOnUse or
        objectBoundingBox). This allows for things such as skewing
        the gradient. This additional transformation matrix is
        post-multiplied to (i.e., inserted to the right of) any
        previously defined transformations, including the implicit
        transformation necessary to convert from <a href="#coords-ObjectBoundingBox">object bounding box
        units</a> to user space.<br />
         If attribute <a href="#pservers-LinearGradientElementGradientTransformAttribute"><span class="attr-name">‘gradientTransform’</span></a> is not
        specified, then the effect is as if an identity transform
        were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-LinearGradientElementX1Attribute"><span class="adef">x1</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd><a href="#pservers-LinearGradientElementX1Attribute"><span class="attr-name">‘x1’</span></a>, <a href="#pservers-LinearGradientElementY1Attribute"><span class="attr-name">‘y1’</span></a>, <a href="#pservers-LinearGradientElementX2Attribute"><span class="attr-name">‘x2’</span></a> and <a href="#pservers-LinearGradientElementY2Attribute"><span class="attr-name">‘y2’</span></a> define a <em>gradient
        vector</em> for the linear gradient. This <em>gradient
        vector</em> provides starting and ending points onto which
        the <a href="#pservers-GradientStops">gradient stops</a> are mapped.
        The values of <a href="#pservers-LinearGradientElementX1Attribute"><span class="attr-name">‘x1’</span></a>, <a href="#pservers-LinearGradientElementY1Attribute"><span class="attr-name">‘y1’</span></a>, <a href="#pservers-LinearGradientElementX2Attribute"><span class="attr-name">‘x2’</span></a> and <a href="#pservers-LinearGradientElementY2Attribute"><span class="attr-name">‘y2’</span></a> can be either
        numbers or percentages.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'0%'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-LinearGradientElementY1Attribute"><span class="adef">y1</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>See <a href="#pservers-LinearGradientElementX1Attribute"><span class="attr-name">‘x1’</span></a>.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'0%'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-LinearGradientElementX2Attribute"><span class="adef">x2</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>See <a href="#pservers-LinearGradientElementX1Attribute"><span class="attr-name">‘x1’</span></a>.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'100%'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-LinearGradientElementY2Attribute"><span class="adef">y2</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>See <a href="#pservers-LinearGradientElementX1Attribute"><span class="attr-name">‘x1’</span></a>.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'0%'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-LinearGradientElementSpreadMethodAttribute"><span class="adef">spreadMethod</span> = "pad | reflect |
        repeat"</dt><dd>Indicates what happens if the gradient starts or ends
        inside the bounds of the <em>target rectangle</em>.
        Possible values are: <span class="attr-value">'pad'</span>, which says to use the
        terminal colors of the gradient to fill the remainder of
        the target region, <span class="attr-value">'reflect'</span>, which says to reflect
        the gradient pattern start-to-end, end-to-start,
        start-to-end, etc. continuously until the <em>target
        rectangle</em> is filled, and <span class="attr-value">repeat</span>, which says
        to repeat the gradient pattern start-to-end, start-to-end,
        start-to-end, etc. continuously until the target region is
        filled.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'pad'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-LinearGradientElementHrefAttribute"><span class="adef">xlink:href</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span>"</dt><dd>An <a href="#linking-IRIReference">IRI
        reference</a> to a different <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> or
        <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> element within
        the current SVG document fragment. Any <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> attributes
        which are defined on the referenced element which are not
        defined on this element are inherited by this element. If
        this element has no defined gradient stops, and the
        referenced element does (possibly due to its own <a href="#pservers-LinearGradientElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>
        attribute), then this element
        inherits the gradient stop from the referenced element.
        Inheritance can be indirect to an arbitrary level; thus, if
        the referenced element inherits attribute or gradient stops
        due to its own <a href="#pservers-LinearGradientElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>
        attribute, then the current element can inherit those
        attributes or gradient stops.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>

<p>Percentages are allowed for <a href="#pservers-LinearGradientElementX1Attribute"><span class="attr-name">‘x1’</span></a>,
<a href="#pservers-LinearGradientElementY1Attribute"><span class="attr-name">‘y1’</span></a>, <a href="#pservers-LinearGradientElementX2Attribute"><span class="attr-name">‘x2’</span></a> and <a href="#pservers-LinearGradientElementY2Attribute"><span class="attr-name">‘y2’</span></a>. For
<span class="attr-value">gradientUnits="userSpaceOnUse"</span>,
percentages represent values relative to the current viewport. For
<span class="attr-value">gradientUnits="objectBoundingBox"</span>,
percentages represent values relative to the bounding box for the
object.</p>

<p>If <a href="#pservers-LinearGradientElementX1Attribute"><span class="attr-name">‘x1’</span></a> = <a href="#pservers-LinearGradientElementX2Attribute"><span class="attr-name">‘x2’</span></a> and <a href="#pservers-LinearGradientElementY1Attribute"><span class="attr-name">‘y1’</span></a> =
<a href="#pservers-LinearGradientElementY2Attribute"><span class="attr-name">‘y2’</span></a>, then the area to be painted will be painted as
a single color using the color and opacity of the last
<a href="#pservers-GradientStops">gradient stop</a>.</p>

<p><a href="#styling-SVGStylingProperties">Properties</a> inherit
into the <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> element from its ancestors;
properties do <em>not</em> inherit from the element referencing the
<a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> element.</p>

<p><a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> elements are never rendered directly;
their only usage is as something that can be referenced using the
<a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> and <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> properties. The <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a>
property does not apply to the <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> element; thus,
<a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> elements are not directly rendered even if
the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property is set to a value other than
<span class="prop-value">none</span>, and <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>
elements are available for referencing even when the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a>
property on the <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> element or any of its ancestors
is set to <span class="prop-value">none</span>.</p>

<p id="pservers-ExampleLinGrad01"><span class="example-ref">Example lingrad01</span>
shows how to fill a rectangle by referencing a linear gradient paint
server.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="8cm" height="4cm" viewBox="0 0 800 400" version="1.1"
     xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;desc&gt;Example lingrad01 - fill a rectangle using a 
           linear gradient paint server&lt;/desc&gt;
  &lt;g&gt;
    &lt;defs&gt;
      &lt;linearGradient id="MyGradient"&gt;
        &lt;stop offset="5%" stop-color="#F60" /&gt;
        &lt;stop offset="95%" stop-color="#FF6" /&gt;
      &lt;/linearGradient&gt;
    &lt;/defs&gt;

    &lt;!-- Outline the drawing area in blue --&gt;
    &lt;rect fill="none" stroke="blue" 
          x="1" y="1" width="798" height="398"/&gt;

    &lt;!-- The rectangle is filled using a linear gradient paint server --&gt;
    &lt;rect fill="url(#MyGradient)" stroke="black" stroke-width="5"  
          x="100" y="100" width="600" height="200"/&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example lingrad01</caption><tr><td><img alt="Example lingrad01 — fill a rectangle using a linear gradient paint server" src="images/pservers/lingrad01.png" /></td></tr></table><p class="view-as-svg"><a href="images/pservers/lingrad01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h3 id="pservers-RadialGradients">13.2.3 Radial gradients</h3>



<p id="pservers-RadialGradientElement">Radial gradients are defined by a
<a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> element.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘radialGradient’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermGradientElement">Gradient element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li><li><a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#pservers-RadialGradientElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#pservers-RadialGradientElementCXAttribute"><span class="attr-name">‘cx’</span></a></li><li><a href="#pservers-RadialGradientElementCYAttribute"><span class="attr-name">‘cy’</span></a></li><li><a href="#pservers-RadialGradientElementRAttribute"><span class="attr-name">‘r’</span></a></li><li><a href="#pservers-RadialGradientElementFXAttribute"><span class="attr-name">‘fx’</span></a></li><li><a href="#pservers-RadialGradientElementFYAttribute"><span class="attr-name">‘fy’</span></a></li><li><a href="#pservers-RadialGradientElementGradientUnitsAttribute"><span class="attr-name">‘gradientUnits’</span></a></li><li><a href="#pservers-RadialGradientElementGradientTransformAttribute"><span class="attr-name">‘gradientTransform’</span></a></li><li><a href="#pservers-RadialGradientElementSpreadMethodAttribute"><span class="attr-name">‘spreadMethod’</span></a></li><li><a href="#pservers-RadialGradientElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#pservers-InterfaceSVGRadialGradientElement">SVGRadialGradientElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="pservers-RadialGradientElementGradientUnitsAttribute"><span class="adef">gradientUnits</span> =
        "<em>userSpaceOnUse</em> | <em>objectBoundingBox</em>"</dt><dd>Defines the coordinate system for attributes
        <a href="#pservers-RadialGradientElementCXAttribute"><span class="attr-name">‘cx’</span></a>, <a href="#pservers-RadialGradientElementCYAttribute"><span class="attr-name">‘cy’</span></a>, <a href="#pservers-RadialGradientElementRAttribute"><span class="attr-name">‘r’</span></a>, <a href="#pservers-RadialGradientElementFXAttribute"><span class="attr-name">‘fx’</span></a> and <a href="#pservers-RadialGradientElementFYAttribute"><span class="attr-name">‘fy’</span></a>.<br />
         If <span class="attr-value">gradientUnits="userSpaceOnUse"</span>,
        <a href="#pservers-RadialGradientElementCXAttribute"><span class="attr-name">‘cx’</span></a>, <a href="#pservers-RadialGradientElementCYAttribute"><span class="attr-name">‘cy’</span></a>, <a href="#pservers-RadialGradientElementRAttribute"><span class="attr-name">‘r’</span></a>, <a href="#pservers-RadialGradientElementFXAttribute"><span class="attr-name">‘fx’</span></a> and <a href="#pservers-RadialGradientElementFYAttribute"><span class="attr-name">‘fy’</span></a>
        represent values in the coordinate system that results from taking
        the current user coordinate system in place at the time
        when the gradient element is referenced (i.e., the user
        coordinate system for the element referencing the gradient
        element via a <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> or <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> property) and then
        applying the transform specified by attribute <a href="#pservers-RadialGradientElementGradientTransformAttribute"><span class="attr-name">‘gradientTransform’</span></a>.<br />
         If <span class="attr-value">gradientUnits="objectBoundingBox"</span>,
        the user coordinate system for attributes
        <a href="#pservers-RadialGradientElementCXAttribute"><span class="attr-name">‘cx’</span></a>, <a href="#pservers-RadialGradientElementCYAttribute"><span class="attr-name">‘cy’</span></a>, <a href="#pservers-RadialGradientElementRAttribute"><span class="attr-name">‘r’</span></a>, <a href="#pservers-RadialGradientElementFXAttribute"><span class="attr-name">‘fx’</span></a> and <a href="#pservers-RadialGradientElementFYAttribute"><span class="attr-name">‘fy’</span></a>
         is established
        using the bounding box of the element to which the gradient
        is applied (see <a href="#coords-ObjectBoundingBox">Object bounding box
        units</a>) and then applying the transform specified by
        attribute <a href="#pservers-RadialGradientElementGradientTransformAttribute"><span class="attr-name">‘gradientTransform’</span></a>.<br />
         When <span class="attr-value">gradientUnits="objectBoundingBox"</span>
        and <a href="#pservers-RadialGradientElementGradientTransformAttribute"><span class="attr-name">‘gradientTransform’</span></a> is the
        identity matrix, then the rings of the radial gradient are
        circular with respect to the object bounding box space
        (i.e., the abstract coordinate system where (0,0) is at the
        top/left of the object bounding box and (1,1) is at the
        bottom/right of the object bounding box). When the object's
        bounding box is not square, the rings that are conceptually
        circular within object bounding box space will render as
        elliptical due to application of the non-uniform scaling
        transformation from bounding box space to user space.<br />
         If attribute <a href="#pservers-RadialGradientElementGradientUnitsAttribute"><span class="attr-name">‘gradientUnits’</span></a>
        is not specified, then the effect is as if a value of <span class="attr-value">'objectBoundingBox'</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-RadialGradientElementGradientTransformAttribute"><span class="adef">gradientTransform</span> = "<span class="attr-value"><a href="#types-DataTypeTransformList">&lt;transform-list&gt;</a></span>"</dt><dd>Contains the definitions of an optional additional
        transformation from the gradient coordinate system onto the
        target coordinate system (i.e., userSpaceOnUse or
        objectBoundingBox). This allows for things such as skewing
        the gradient. This additional transformation matrix is
        post-multiplied to (i.e., inserted to the right of) any
        previously defined transformations, including the implicit
        transformation necessary to convert from <a href="#coords-ObjectBoundingBox">object bounding box
        units</a> to user space.<br />
         If attribute <a href="#pservers-RadialGradientElementGradientTransformAttribute"><span class="attr-name">‘gradientTransform’</span></a> is not
        specified, then the effect is as if an identity transform
        were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-RadialGradientElementCXAttribute"><span class="adef">cx</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd><a href="#pservers-RadialGradientElementCXAttribute"><span class="attr-name">‘cx’</span></a>, <a href="#pservers-RadialGradientElementCYAttribute"><span class="attr-name">‘cy’</span></a> and <a href="#pservers-RadialGradientElementRAttribute"><span class="attr-name">‘r’</span></a> define the largest (i.e.,
        outermost) circle for the radial gradient. The gradient
        will be drawn such that the 100% <a href="#pservers-GradientStops">gradient stop</a> is mapped to the
        perimeter of this largest (i.e., outermost) circle.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'50%'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-RadialGradientElementCYAttribute"><span class="adef">cy</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>See <a href="#pservers-RadialGradientElementCXAttribute"><span class="attr-name">‘cx’</span></a>.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'50%'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-RadialGradientElementRAttribute"><span class="adef">r</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>See <a href="#pservers-RadialGradientElementCXAttribute"><span class="attr-name">‘cx’</span></a>.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero will cause the area to be painted as a
        single color using the color and opacity of the last <a href="#pservers-GradientStops">gradient stop</a>.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'50%'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-RadialGradientElementFXAttribute"><span class="adef">fx</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd><a href="#pservers-RadialGradientElementFXAttribute"><span class="attr-name">‘fx’</span></a> and <a href="#pservers-RadialGradientElementFYAttribute"><span class="attr-name">‘fy’</span></a> define the focal point for the
        radial gradient. The gradient will be drawn such that the
        0% <a href="#pservers-GradientStops">gradient stop</a> is mapped to
        (fx, fy).<br />
         If attribute <a href="#pservers-RadialGradientElementFXAttribute"><span class="attr-name">‘fx’</span></a> is not specified, <a href="#pservers-RadialGradientElementFXAttribute"><span class="attr-name">‘fx’</span></a> will coincide
        with the presentational value of <a href="#pservers-RadialGradientElementCXAttribute"><span class="attr-name">‘cx’</span></a> for the element whether the
        value for 'cx' was inherited or not. If the element references an
        element that specifies a value for 'fx', then the value of 'fx' is
        inherited from the referenced element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-RadialGradientElementFYAttribute"><span class="adef">fy</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>See <a href="#pservers-RadialGradientElementFXAttribute"><span class="attr-name">‘fx’</span></a>.<br />
         If attribute <a href="#pservers-RadialGradientElementFYAttribute"><span class="attr-name">‘fy’</span></a> is not specified, <a href="#pservers-RadialGradientElementFYAttribute"><span class="attr-name">‘fy’</span></a> will coincide
        with the presentational value of <a href="#pservers-RadialGradientElementCYAttribute"><span class="attr-name">‘cy’</span></a> for the element whether the
        value for 'cy' was inherited or not. If the element references an
        element that specifies a value for 'fy', then the value of 'fy' is
        inherited from the referenced element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-RadialGradientElementSpreadMethodAttribute"><span class="adef">spreadMethod</span> = "pad | reflect |
        repeat"</dt><dd>Indicates what happens if the gradient starts or ends
        inside the bounds of the object(s) being painted by the
        gradient. Has the same values and meanings as the <a href="#pservers-RadialGradientElementSpreadMethodAttribute"><span class="attr-name">‘spreadMethod’</span></a>
        attribute on <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-RadialGradientElementHrefAttribute"><span class="adef">xlink:href</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span>"</dt><dd>An <a href="#linking-IRIReference">IRI
        reference</a> to a different <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> or
        <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> element within
        the current SVG document fragment. Any <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> attributes
        which are defined on the referenced element which are not
        defined on this element are inherited by this element. If
        this element has no defined gradient stops, and the
        referenced element does (possibly due to its own <a href="#pservers-RadialGradientElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>
        attribute), then this element inherits the gradient stop from the referenced element.
        Inheritance can be indirect to an arbitrary level; thus, if
        the referenced element inherits attribute or gradient stops
        due to its own <a href="#pservers-RadialGradientElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>
        attribute, then the current element can inherit those
        attributes or gradient stops.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>

<p>Percentages are allowed for attributes <a href="#pservers-RadialGradientElementCXAttribute"><span class="attr-name">‘cx’</span></a>, <a href="#pservers-RadialGradientElementCYAttribute"><span class="attr-name">‘cy’</span></a>,
<a href="#pservers-RadialGradientElementRAttribute"><span class="attr-name">‘r’</span></a>, <a href="#pservers-RadialGradientElementFXAttribute"><span class="attr-name">‘fx’</span></a> and <a href="#pservers-RadialGradientElementFYAttribute"><span class="attr-name">‘fy’</span></a>. For
<span class="attr-value">gradientUnits="userSpaceOnUse"</span>, percentages
represent values relative to the current viewport.  For
<span class="attr-value">gradientUnits="objectBoundingBox"</span>, percentages
represent values relative to the bounding box for the object.</p>

<p>If the point defined by <a href="#pservers-RadialGradientElementFXAttribute"><span class="attr-name">‘fx’</span></a> and <a href="#pservers-RadialGradientElementFYAttribute"><span class="attr-name">‘fy’</span></a> lies outside the
circle defined by <a href="#pservers-RadialGradientElementCXAttribute"><span class="attr-name">‘cx’</span></a>, <a href="#pservers-RadialGradientElementCYAttribute"><span class="attr-name">‘cy’</span></a> and <a href="#pservers-RadialGradientElementRAttribute"><span class="attr-name">‘r’</span></a>, then the user
agent shall set the focal point to the intersection of the line from
(<a href="#pservers-RadialGradientElementCXAttribute"><span class="attr-name">‘cx’</span></a>, <a href="#pservers-RadialGradientElementCYAttribute"><span class="attr-name">‘cy’</span></a>) to (<a href="#pservers-RadialGradientElementFXAttribute"><span class="attr-name">‘fx’</span></a>, <a href="#pservers-RadialGradientElementFYAttribute"><span class="attr-name">‘fy’</span></a>) with the circle
defined by <a href="#pservers-RadialGradientElementCXAttribute"><span class="attr-name">‘cx’</span></a>, <a href="#pservers-RadialGradientElementCYAttribute"><span class="attr-name">‘cy’</span></a> and <a href="#pservers-RadialGradientElementRAttribute"><span class="attr-name">‘r’</span></a>.</p>

<p><a href="#styling-SVGStylingProperties">Properties</a>
inherit into the <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> element from its ancestors;
properties do <em>not</em> inherit from the element referencing the
<a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> element.</p>

<p><a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> elements are never rendered directly;
their only usage is as something that can be referenced using the
<a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> and <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> properties. The <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a>
property does not apply to the <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> element; thus,
<a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> elements are not directly rendered even if
the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property is set to a value other than
<span class="prop-value">none</span>, and <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> elements
are available for referencing even when the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property on
the <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> element or any of its ancestors is set to
<span class="prop-value">none</span>.</p>

<p id="pservers-ExampleRadGrad01"><span class="example-ref">Example radgrad01</span>
shows how to fill a rectangle by referencing a radial gradient paint
server.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="8cm" height="4cm" viewBox="0 0 800 400" version="1.1"
     xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;desc&gt;Example radgrad01 - fill a rectangle by referencing a 
           radial gradient paint server&lt;/desc&gt;
  &lt;g&gt;
    &lt;defs&gt;
      &lt;radialGradient id="MyGradient" gradientUnits="userSpaceOnUse"
                      cx="400" cy="200" r="300" fx="400" fy="200"&gt;
        &lt;stop offset="0%" stop-color="red" /&gt;
        &lt;stop offset="50%" stop-color="blue" /&gt;
        &lt;stop offset="100%" stop-color="red" /&gt;
      &lt;/radialGradient&gt;
    &lt;/defs&gt;

    &lt;!-- Outline the drawing area in blue --&gt;
    &lt;rect fill="none" stroke="blue" 
          x="1" y="1" width="798" height="398"/&gt;

    &lt;!-- The rectangle is filled using a radial gradient paint server --&gt;
    &lt;rect fill="url(#MyGradient)" stroke="black" stroke-width="5"  
          x="100" y="100" width="600" height="200"/&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example radgrad01</caption><tr><td><img alt="Example radgrad01 — fill a rectangle by referencing a radial gradient paint server" src="images/pservers/radgrad01.png" /></td></tr></table><p class="view-as-svg"><a href="images/pservers/radgrad01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h3 id="pservers-GradientStops">13.2.4 Gradient stops</h3>



<p id="pservers-StopElement">The ramp of colors to use on a gradient is defined
by the <a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a> elements that are child elements to either the
<a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> element or the <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a>
element.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘stop’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#pservers-StopElementOffsetAttribute"><span class="attr-name">‘offset’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#pservers-InterfaceSVGStopElement">SVGStopElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="pservers-StopElementOffsetAttribute"><span class="adef">offset</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a> | <a href="#types-DataTypePercentage">&lt;percentage&gt;</a></em>"</dt><dd>The <a href="#pservers-StopElementOffsetAttribute"><span class="attr-name">‘offset’</span></a> attribute is
        either a <a href="#types-DataTypeNumber">&lt;number&gt;</a>
        (usually ranging from 0 to 1) or a <a href="#types-DataTypePercentage">&lt;percentage&gt;</a>
        (usually ranging from 0% to 100%) which indicates where the
        gradient stop is placed. For linear gradients, the <a href="#pservers-StopElementOffsetAttribute"><span class="attr-name">‘offset’</span></a> attribute represents a
        location along the <em>gradient vector</em>. For radial
        gradients, it represents a percentage distance from (fx,fy)
        to the edge of the outermost/largest circle.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>

<p>The <a href="#pservers-StopColorProperty"><span class="prop-name">‘stop-color’</span></a> property indicates what color to use at that
gradient stop. The keyword <span class="attr-value">currentColor</span> and
ICC colors can be specified in the same manner as within a
<a href="#painting-SpecifyingPaint">&lt;paint&gt;</a> specification for
the <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> and <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> properties.</p>

    <div class="propdef">
      <dl><dt id="pservers-StopColorProperty"><span class="propdef-title prop-name">‘stop-color’</span></dt><dd>
          <table summary="stop-color property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>currentColor |<br />
               <a href="#types-DataTypeColor">&lt;color&gt;</a>
               <a href="#types-DataTypeICCColor">&lt;icccolor&gt;</a>
              |<br />
               <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>black</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a> elements</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<p>The <a href="#pservers-StopOpacityProperty"><span class="prop-name">‘stop-opacity’</span></a> property defines the opacity of a given
gradient stop.</p>

    <div class="propdef">
      <dl><dt id="pservers-StopOpacityProperty"><span class="propdef-title prop-name">‘stop-opacity’</span></dt><dd>
          <table summary="stop-opacity property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>&lt;opacity-value&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>1</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a> elements</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<p>Some notes on gradients:</p>

<ul><li>Gradient offset values less than 0 (or less than 0%) are
  rounded up to 0%. Gradient offset values greater than 1 (or
  greater than 100%) are rounded down to 100%.</li><li>It is necessary that at least two stops defined to have a
  gradient effect. If no stops are defined, then painting shall
  occur as if 'none' were specified as the paint style. If one
  stop is defined, then paint with the solid color fill using
  the color defined for that gradient stop.</li><li>Each gradient offset value is required to be equal to or
  greater than the previous gradient stop's offset value. If a
  given gradient stop's offset value is not equal to or greater
  than all previous offset values, then the offset value is
  adjusted to be equal to the largest of all previous offset
  values.</li><li>
    If two gradient stops have the same offset value, then the
    latter gradient stop controls the color value at the
    overlap point. In particular: 
<pre>
&lt;stop offset="0" stop-color="white"/&gt;
&lt;stop offset=".2" stop-color="red"/&gt;
&lt;stop offset=".2" stop-color="blue"/&gt;
&lt;stop offset="1" stop-color="black"/&gt;
</pre>
    will have approximately the same effect as: 
<pre>
&lt;stop offset="0" stop-color="white"/&gt;
&lt;stop offset=".1999999999" stop-color="red"/&gt;
&lt;stop offset=".2" stop-color="blue"/&gt;
&lt;stop offset="1" stop-color="black"/&gt;
</pre>
    which is a gradient that goes smoothly from white to red,
    then abruptly shifts from red to blue, and then goes
    smoothly from blue to black.
  </li></ul>



<h2 id="pservers-Patterns">13.3 Patterns</h2>



<p id="pservers-PatternElement">A pattern is used to fill or stroke an object
using a pre-defined graphic object which can be replicated ("tiled") at
fixed intervals in <em>x</em> and <em>y</em> to cover the areas to be
painted. Patterns are defined using a <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element and then
referenced by properties <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> and <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> on a given
<a href="#intro-TermGraphicsElement">graphics element</a> to indicate
that the given element shall be filled or stroked with the referenced
pattern.</p>

<p>Attributes <a href="#pservers-PatternElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#pservers-PatternElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#pservers-PatternElementWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#pservers-PatternElementHeightAttribute"><span class="attr-name">‘height’</span></a>
and <a href="#pservers-PatternElementPatternUnitsAttribute"><span class="attr-name">‘patternUnits’</span></a> define a reference rectangle somewhere
on the infinite canvas. The reference rectangle has its
top/left at (<var>x</var>, <var>y</var>) and its bottom/right at
(<var>x</var> + <var>width</var>, <var>y</var> + <var>height</var>). The tiling
theoretically extends a series of such rectangles to infinity
in X and Y (positive and negative), with rectangles starting at
(<var>x</var> + m*<var>width</var>, <var>y</var> + n*
<var>height</var>) for each possible integer value for <em>m</em> and
<em>n</em>.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘pattern’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermContainerElement">Container element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#intro-TermShapeElement">shape elements</a><span class="expanding"> — <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></span></li><li><a href="#intro-TermStructuralElement">structural elements</a><span class="expanding"> — <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></span></li><li><a href="#intro-TermGradientElement">gradient elements</a><span class="expanding"> — <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></span></li><li><a href="#linking-AElement"><span class="element-name">‘a’</span></a></li><li><a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a></li><li><a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a></li><li><a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a></li><li><a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a></li><li><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></li><li><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></li><li><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></li><li><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></li><li><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></li><li><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></li><li><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></li><li><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></li><li><a href="#script-ScriptElement"><span class="element-name">‘script’</span></a></li><li><a href="#styling-StyleElement"><span class="element-name">‘style’</span></a></li><li><a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a></li><li><a href="#text-TextElement"><span class="element-name">‘text’</span></a></li><li><a href="#linking-ViewElement"><span class="element-name">‘view’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#pservers-PatternElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a></li><li><a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a></li><li><a href="#pservers-PatternElementXAttribute"><span class="attr-name">‘x’</span></a></li><li><a href="#pservers-PatternElementYAttribute"><span class="attr-name">‘y’</span></a></li><li><a href="#pservers-PatternElementWidthAttribute"><span class="attr-name">‘width’</span></a></li><li><a href="#pservers-PatternElementHeightAttribute"><span class="attr-name">‘height’</span></a></li><li><a href="#pservers-PatternElementPatternUnitsAttribute"><span class="attr-name">‘patternUnits’</span></a></li><li><a href="#pservers-PatternElementPatternContentUnitsAttribute"><span class="attr-name">‘patternContentUnits’</span></a></li><li><a href="#pservers-PatternElementPatternTransformAttribute"><span class="attr-name">‘patternTransform’</span></a></li><li><a href="#pservers-PatternElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#pservers-InterfaceSVGPatternElement">SVGPatternElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="pservers-PatternElementPatternUnitsAttribute"><span class="adef">patternUnits</span> = "<em>userSpaceOnUse</em>
        | <em>objectBoundingBox</em>"</dt><dd>Defines the coordinate system for attributes
        <a href="#pservers-PatternElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#pservers-PatternElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#pservers-PatternElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#pservers-PatternElementHeightAttribute"><span class="attr-name">‘height’</span></a>.<br />
         If <span class="attr-value">patternUnits="userSpaceOnUse"</span>,
        <a href="#pservers-PatternElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#pservers-PatternElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#pservers-PatternElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#pservers-PatternElementHeightAttribute"><span class="attr-name">‘height’</span></a>
        represent values in the coordinate system that results from
        taking the current user coordinate system in place at the
        time when the <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>
        element is referenced (i.e., the user coordinate system for
        the element referencing the <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element via a
        <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> or <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> property) and then
        applying the transform specified by attribute <a href="#pservers-PatternElementPatternTransformAttribute"><span class="attr-name">‘patternTransform’</span></a>.<br />
         If <span class="attr-value">patternUnits="objectBoundingBox"</span>,
        the user coordinate system for attributes
        <a href="#pservers-PatternElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#pservers-PatternElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#pservers-PatternElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#pservers-PatternElementHeightAttribute"><span class="attr-name">‘height’</span></a>
        is established
        using the bounding box of the element to which the pattern
        is applied (see <a href="#coords-ObjectBoundingBox">Object bounding box
        units</a>) and then applying the transform specified by
        attribute <a href="#pservers-PatternElementPatternTransformAttribute"><span class="attr-name">‘patternTransform’</span></a>.<br />
         If attribute <a href="#pservers-PatternElementPatternUnitsAttribute"><span class="attr-name">‘patternUnits’</span></a>
        is not specified, then the effect is as if a value of <span class="attr-value">'objectBoundingBox'</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-PatternElementPatternContentUnitsAttribute"><span class="adef">patternContentUnits</span> =
        "<em>userSpaceOnUse</em> | <em>objectBoundingBox</em>"</dt><dd>Defines the coordinate system for the contents of the
        <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>. Note that this
        attribute has no effect if attribute <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> is specified.<br />
         If <span class="attr-value">patternContentUnits="userSpaceOnUse"</span>,
        the user coordinate system for the contents of the <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>
        element is the coordinate system that results from taking
        the current user coordinate system in place at the time
        when the <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element is referenced (i.e., the
        user coordinate system for the element referencing the
        <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element via a <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> or <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>
        property) and then applying the transform specified by attribute
        <a href="#pservers-PatternElementPatternTransformAttribute"><span class="attr-name">‘patternTransform’</span></a>.<br />
         If <span class="attr-value">patternContentUnits="objectBoundingBox"</span>,
        the user coordinate system for the contents of the <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element is
        established using the bounding box of the element to which
        the pattern is applied (see <a href="#coords-ObjectBoundingBox">Object bounding box
        units</a>) and then applying the transform specified by
        attribute <a href="#pservers-PatternElementPatternTransformAttribute"><span class="attr-name">‘patternTransform’</span></a>.<br />
         If attribute <a href="#pservers-PatternElementPatternContentUnitsAttribute"><span class="attr-name">‘patternContentUnits’</span></a> is not
        specified, then the effect is as if a value of
        <span class="attr-value">'userSpaceOnUse'</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-PatternElementPatternTransformAttribute"><span class="adef">patternTransform</span> = "<span class="attr-value"><a href="#types-DataTypeTransformList">&lt;transform-list&gt;</a></span>"</dt><dd>Contains the definition of an optional additional
        transformation from the pattern coordinate system onto the
        target coordinate system (i.e., <span class="attr-value">'userSpaceOnUse'</span> or
        <span class="attr-value">'objectBoundingBox'</span>). This allows for things such as skewing
        the pattern tiles. This additional transformation matrix is
        post-multiplied to (i.e., inserted to the right of) any
        previously defined transformations, including the implicit
        transformation necessary to convert from <a href="#coords-ObjectBoundingBox">object bounding box
        units</a> to user space.<br />
         If attribute <a href="#pservers-PatternElementPatternTransformAttribute"><span class="attr-name">‘patternTransform’</span></a> is not specified,
        then the effect is as if an identity transform were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-PatternElementXAttribute"><span class="adef">x</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd><a href="#pservers-PatternElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#pservers-PatternElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#pservers-PatternElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#pservers-PatternElementHeightAttribute"><span class="attr-name">‘height’</span></a> indicate how the
        pattern tiles are placed and spaced. These attributes
        represent coordinates and values in the coordinate space
        specified by the combination of attributes <a href="#pservers-PatternElementPatternUnitsAttribute"><span class="attr-name">‘patternUnits’</span></a>
        and <a href="#pservers-PatternElementPatternTransformAttribute"><span class="attr-name">‘patternTransform’</span></a>.<br />
         If the attribute is not specified, the effect is as if a
        value of zero were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-PatternElementYAttribute"><span class="adef">y</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>See <a href="#pservers-PatternElementXAttribute"><span class="attr-name">‘x’</span></a>.<br />
         If the attribute is not specified, the effect is as if a
        value of zero were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-PatternElementWidthAttribute"><span class="adef">width</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>See <a href="#pservers-PatternElementXAttribute"><span class="attr-name">‘x’</span></a>.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables rendering of the element (i.e., no
        paint is applied).<br />
         If the attribute is not specified, the effect is as if a
        value of zero were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-PatternElementHeightAttribute"><span class="adef">height</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>See <a href="#pservers-PatternElementXAttribute"><span class="attr-name">‘x’</span></a>.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables rendering of the element (i.e., no
        paint is applied).<br />
         If the attribute is not specified, the effect is as if a
        value of zero were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-PatternElementHrefAttribute"><span class="adef">xlink:href</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span>"</dt><dd>An <a href="#linking-IRIReference">IRI
        reference</a> to a different <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element within the
        current SVG document fragment. Any attributes which are
        defined on the referenced element which are not defined on
        this element are inherited by this element. If this element
        has no children, and the referenced element does (possibly
        due to its own <a href="#pservers-PatternElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>
        attribute), then this element inherits the children from
        the referenced element. Inheritance can be indirect to an
        arbitrary level; thus, if the referenced element inherits
        attributes or children due to its own <a href="#pservers-PatternElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> attribute, then the current
        element can inherit those attributes or children.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="pservers-PatternElementPreserveAspectRatioAttribute">
          <span class="adef">preserveAspectRatio</span> = "<span class="attr-value"><a href="#coords-PreserveAspectRatioAttribute">[defer] &lt;align&gt; [&lt;meetOrSlice&gt;]</a></span>"
        </dt><dd>
          <p>
            See <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.
          </p>
          <p>
            If the attribute is not specified, then the effect is as if a value of <span class="attr-value">xMidYMid meet</span> were specified.
          </p>
          <p><span class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes.</span></p>
        </dd></dl>
    </div>

<p>SVG's <a href="#styling-UAStyleSheet">user agent style sheet</a> sets
the <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property for <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> elements to
<span class="prop-value">hidden</span>, which causes a rectangular clipping
path to be created at the bounds of the pattern tile.  Unless the
<a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property is overridden, any graphics within the pattern
which goes outside of the pattern rectangle will be clipped.  Note that if
the <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property is set to <span class="prop-value">visible</span>
the rendering behavior for the pattern is undefined. 
<a href="#pservers-ExamplePattern01">Example pattern01</a> below shows the
effect of clipping to the pattern tile.</p>

<p>The contents of the <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> are relative to a new coordinate
system. If there is a <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute, then the new coordinate
system is fitted into the region defined by the <a href="#pservers-PatternElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#pservers-PatternElementYAttribute"><span class="attr-name">‘y’</span></a>,
<a href="#pservers-PatternElementWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#pservers-PatternElementHeightAttribute"><span class="attr-name">‘height’</span></a> and <a href="#pservers-PatternElementPatternUnitsAttribute"><span class="attr-name">‘patternUnits’</span></a> attributes on the
<a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element using the standard rules for <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> and
<a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>. If there is no <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute, then
the new coordinate system has its origin at (<var>x</var>, <var>y</var>),
where <var>x</var> is established by the <a href="#pservers-PatternElementXAttribute"><span class="attr-name">‘x’</span></a> attribute on the
<a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element, and <var>y</var> is established by the <a href="#pservers-PatternElementYAttribute"><span class="attr-name">‘y’</span></a>
attribute on the <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element. Thus, in the following example:</p>

<pre>
&lt;pattern x="10" y="10" width="20" height="20"&gt;
   &lt;rect x="5" y="5" width="10" height="10"/&gt;
&lt;/pattern&gt;
</pre>

<p>the rectangle has its top/left located 5 units to the right and 5
units down from the origin of the pattern tile.</p>

<p>The <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute introduces a supplemental transformation
which is applied on top of any transformations necessary to create a new
pattern coordinate system due to attributes <a href="#pservers-PatternElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#pservers-PatternElementYAttribute"><span class="attr-name">‘y’</span></a>,
<a href="#pservers-PatternElementWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#pservers-PatternElementHeightAttribute"><span class="attr-name">‘height’</span></a> and <a href="#pservers-PatternElementPatternUnitsAttribute"><span class="attr-name">‘patternUnits’</span></a>.</p>

<p><a href="#styling-SVGStylingProperties">Properties</a> inherit into the
<a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element from its ancestors; properties do <em>not</em>
inherit from the element referencing the <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element.</p>

<p><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> elements are never rendered directly; their only usage is
as something that can be referenced using the <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> and
<a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> properties. The <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property does not apply to
the <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element; thus, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> elements are not directly
rendered even if the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property is set to a value other than
<span class="prop-value">none</span>, and <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> elements are
available for referencing even when the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property on the
<a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element or any of its ancestors is set to
<span class="prop-value">none</span>.</p>

<p><a href="#script-EventAttributes">Event attributes</a> and
<a href="#svgdom-EventListeners">event listeners</a> attached to the
contents of a <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element are not processed; only the rendering
aspects of <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> elements are processed.</p>

<p id="pservers-ExamplePattern01"><span class="example-ref">Example pattern01</span>
shows how to fill a rectangle by referencing a pattern paint server. Note how
the blue stroke of each triangle has been clipped at the top and the left.
This is due to SVG's <a href="#styling-UAStyleSheet">user agent style sheet</a>
setting the <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property for <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> elements to
<span class="prop-value">hidden</span>, which causes the pattern to be clipped
to the bounds of the pattern tile.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="8cm" height="4cm" viewBox="0 0 800 400" version="1.1"
     xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;defs&gt;
    &lt;pattern id="TrianglePattern" patternUnits="userSpaceOnUse"
             x="0" y="0" width="100" height="100"
             viewBox="0 0 10 10" &gt;
      &lt;path d="M 0 0 L 7 0 L 3.5 7 z" fill="red" stroke="blue" /&gt;
    &lt;/pattern&gt; 
  &lt;/defs&gt;

  &lt;!-- Outline the drawing area in blue --&gt;
  &lt;rect fill="none" stroke="blue" 
        x="1" y="1" width="798" height="398"/&gt;

  &lt;!-- The ellipse is filled using a triangle pattern paint server
       and stroked with black --&gt;
  &lt;ellipse fill="url(#TrianglePattern)" stroke="black" stroke-width="5"  
           cx="400" cy="200" rx="350" ry="150" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example pattern01</caption><tr><td><img alt="Example pattern01 — fill a rectangle by referencing a pattern paint server" src="images/pservers/pattern01.png" /></td></tr></table><p class="view-as-svg"><a href="images/pservers/pattern01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h2 id="pservers-DOMInterfaces">13.4 DOM interfaces</h2>

<h3 id="pservers-InterfaceSVGGradientElement">13.4.1 Interface SVGGradientElement</h3>


 The <a class="idlinterface" href="#pservers-InterfaceSVGGradientElement">SVGGradientElement</a> interface is a base interface used by
 <a class="idlinterface" href="#pservers-InterfaceSVGLinearGradientElement">SVGLinearGradientElement</a> and <a class="idlinterface" href="#pservers-InterfaceSVGRadialGradientElement">SVGRadialGradientElement</a>.
<pre class="idl">interface <b>SVGGradientElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a> {

  // Spread Method Types
  const unsigned short <a href="#pservers-__svg__SVGGradientElement__SVG_SPREADMETHOD_UNKNOWN">SVG_SPREADMETHOD_UNKNOWN</a> = 0;
  const unsigned short <a href="#pservers-__svg__SVGGradientElement__SVG_SPREADMETHOD_PAD">SVG_SPREADMETHOD_PAD</a> = 1;
  const unsigned short <a href="#pservers-__svg__SVGGradientElement__SVG_SPREADMETHOD_REFLECT">SVG_SPREADMETHOD_REFLECT</a> = 2;
  const unsigned short <a href="#pservers-__svg__SVGGradientElement__SVG_SPREADMETHOD_REPEAT">SVG_SPREADMETHOD_REPEAT</a> = 3;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#pservers-__svg__SVGGradientElement__gradientUnits">gradientUnits</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGAnimatedTransformList">SVGAnimatedTransformList</a> <a href="#pservers-__svg__SVGGradientElement__gradientTransform">gradientTransform</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#pservers-__svg__SVGGradientElement__spreadMethod">spreadMethod</a>;
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Spread Method Types”:</dt><dd><dl class="constants">
<dt id="pservers-__svg__SVGGradientElement__SVG_SPREADMETHOD_UNKNOWN" class="constant first-child"><b>SVG_SPREADMETHOD_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The type is not one of predefined types. It is invalid to attempt to
 define a new value of this type or to attempt to switch an existing
 value to this type.

</div></dd>
<dt id="pservers-__svg__SVGGradientElement__SVG_SPREADMETHOD_PAD" class="constant"><b>SVG_SPREADMETHOD_PAD</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'pad'</span>.

</div></dd>
<dt id="pservers-__svg__SVGGradientElement__SVG_SPREADMETHOD_REFLECT" class="constant"><b>SVG_SPREADMETHOD_REFLECT</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'reflect'</span>.

</div></dd>
<dt id="pservers-__svg__SVGGradientElement__SVG_SPREADMETHOD_REPEAT" class="constant"><b>SVG_SPREADMETHOD_REPEAT</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'repeat'</span>.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="pservers-__svg__SVGGradientElement__gradientUnits" class="attribute first-child"><b>gradientUnits</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <span class="attr-name">‘gradientUnits’</span>
 on the given element.  Takes one of the constants defined in
 <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a>.
</div></dd>
<dt id="pservers-__svg__SVGGradientElement__gradientTransform" class="attribute"><b>gradientTransform</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGAnimatedTransformList">SVGAnimatedTransformList</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <span class="attr-name">‘gradientTransform’</span>
 on the given element.
</div></dd>
<dt id="pservers-__svg__SVGGradientElement__spreadMethod" class="attribute"><b>spreadMethod</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <span class="attr-name">‘spreadMethod’</span>
 on the given element.  One of the Spread Method Types defined on
 this interface.
</div></dd></dl></dd></dl>

<h3 id="pservers-InterfaceSVGLinearGradientElement">13.4.2 Interface SVGLinearGradientElement</h3>



 The <a class="idlinterface" href="#pservers-InterfaceSVGLinearGradientElement">SVGLinearGradientElement</a> interface corresponds to the
 <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> element.
<pre class="idl">interface <b>SVGLinearGradientElement</b> : <a class="idlinterface" href="#pservers-InterfaceSVGGradientElement">SVGGradientElement</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGLinearGradientElement__x1">x1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGLinearGradientElement__y1">y1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGLinearGradientElement__x2">x2</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGLinearGradientElement__y2">y2</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="pservers-__svg__SVGLinearGradientElement__x1" class="attribute first-child"><b>x1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-LinearGradientElementX1Attribute"><span class="attr-name">‘x1’</span></a> on the given
 <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> element.
</div></dd>
<dt id="pservers-__svg__SVGLinearGradientElement__y1" class="attribute"><b>y1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-LinearGradientElementY1Attribute"><span class="attr-name">‘y1’</span></a> on the given
 <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> element.
</div></dd>
<dt id="pservers-__svg__SVGLinearGradientElement__x2" class="attribute"><b>x2</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-LinearGradientElementX2Attribute"><span class="attr-name">‘x2’</span></a> on the given
 <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> element.
</div></dd>
<dt id="pservers-__svg__SVGLinearGradientElement__y2" class="attribute"><b>y2</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-LinearGradientElementY2Attribute"><span class="attr-name">‘y2’</span></a> on the given
 <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> element.
</div></dd></dl></dd></dl>


<h3 id="pservers-InterfaceSVGRadialGradientElement">13.4.3 Interface SVGRadialGradientElement</h3>



 The <a class="idlinterface" href="#pservers-InterfaceSVGRadialGradientElement">SVGRadialGradientElement</a> interface corresponds to the
 <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> element.
<pre class="idl">interface <b>SVGRadialGradientElement</b> : <a class="idlinterface" href="#pservers-InterfaceSVGGradientElement">SVGGradientElement</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGRadialGradientElement__cx">cx</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGRadialGradientElement__cy">cy</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGRadialGradientElement__r">r</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGRadialGradientElement__fx">fx</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGRadialGradientElement__fy">fy</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="pservers-__svg__SVGRadialGradientElement__cx" class="attribute first-child"><b>cx</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-RadialGradientElementCXAttribute"><span class="attr-name">‘cx’</span></a> on the given
 <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> element.
</div></dd>
<dt id="pservers-__svg__SVGRadialGradientElement__cy" class="attribute"><b>cy</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-RadialGradientElementCYAttribute"><span class="attr-name">‘cy’</span></a> on the given
 <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> element.
</div></dd>
<dt id="pservers-__svg__SVGRadialGradientElement__r" class="attribute"><b>r</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-RadialGradientElementRAttribute"><span class="attr-name">‘r’</span></a> on the given
 <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> element.
</div></dd>
<dt id="pservers-__svg__SVGRadialGradientElement__fx" class="attribute"><b>fx</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-RadialGradientElementFXAttribute"><span class="attr-name">‘fx’</span></a> on the given
 <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> element.
</div></dd>
<dt id="pservers-__svg__SVGRadialGradientElement__fy" class="attribute"><b>fy</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-RadialGradientElementFYAttribute"><span class="attr-name">‘fy’</span></a> on the given
 <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> element.
</div></dd></dl></dd></dl>


<h3 id="pservers-InterfaceSVGStopElement">13.4.4 Interface SVGStopElement</h3>



 The <a class="idlinterface" href="#pservers-InterfaceSVGStopElement">SVGStopElement</a> interface corresponds to the <a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a>
 element.
<pre class="idl">interface <b>SVGStopElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#pservers-__svg__SVGStopElement__offset">offset</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="pservers-__svg__SVGStopElement__offset" class="attribute first-child"><b>offset</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-StopElementOffsetAttribute"><span class="attr-name">‘offset’</span></a> on the given <a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a>
 element.
</div></dd></dl></dd></dl>


<h3 id="pservers-InterfaceSVGPatternElement">13.4.5 Interface SVGPatternElement</h3>



 The <a class="idlinterface" href="#pservers-InterfaceSVGPatternElement">SVGPatternElement</a> interface corresponds to the <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>
 element.
<pre class="idl">interface <b>SVGPatternElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGFitToViewBox">SVGFitToViewBox</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#pservers-__svg__SVGPatternElement__patternUnits">patternUnits</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#pservers-__svg__SVGPatternElement__patternContentUnits">patternContentUnits</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGAnimatedTransformList">SVGAnimatedTransformList</a> <a href="#pservers-__svg__SVGPatternElement__patternTransform">patternTransform</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGPatternElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGPatternElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGPatternElement__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGPatternElement__height">height</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="pservers-__svg__SVGPatternElement__patternUnits" class="attribute first-child"><b>patternUnits</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-PatternElementPatternUnitsAttribute"><span class="attr-name">‘patternUnits’</span></a> on the given
 <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element. Takes one of the constants defined in
 <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a>.
</div></dd>
<dt id="pservers-__svg__SVGPatternElement__patternContentUnits" class="attribute"><b>patternContentUnits</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-PatternElementPatternContentUnitsAttribute"><span class="attr-name">‘patternContentUnits’</span></a> on the given
 <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element. Takes one of the constants defined in
 <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a>.
</div></dd>
<dt id="pservers-__svg__SVGPatternElement__patternTransform" class="attribute"><b>patternTransform</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGAnimatedTransformList">SVGAnimatedTransformList</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-PatternElementPatternTransformAttribute"><span class="attr-name">‘patternTransform’</span></a> on the given
 <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element.
</div></dd>
<dt id="pservers-__svg__SVGPatternElement__x" class="attribute"><b>x</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-PatternElementXAttribute"><span class="attr-name">‘x’</span></a> on the given <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>
 element.
</div></dd>
<dt id="pservers-__svg__SVGPatternElement__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-PatternElementYAttribute"><span class="attr-name">‘y’</span></a> on the given <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>
 element.
</div></dd>
<dt id="pservers-__svg__SVGPatternElement__width" class="attribute"><b>width</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-PatternElementWidthAttribute"><span class="attr-name">‘width’</span></a> on the given <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>
 element.
</div></dd>
<dt id="pservers-__svg__SVGPatternElement__height" class="attribute"><b>height</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#pservers-PatternElementHeightAttribute"><span class="attr-name">‘height’</span></a> on the given <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>
 element.
</div></dd></dl></dd></dl>


</div><hr class="chapter-divider" />
<div id="chapter-masking">

<h1>14 Clipping, Masking and Compositing</h1><h2 id="masking-toc">Contents</h2><ul class="toc">
<li><a href="#masking-Introduction">14.1 Introduction</a></li>
<li><a href="#masking-SimpleAlphaBlending">14.2 Simple alpha compositing</a></li>
<li><a href="#masking-ClippingPaths">14.3 Clipping paths</a><ul class="toc">
<li><a href="#masking-ClippingPathsIntro">14.3.1 Introduction</a></li>
<li><a href="#masking-InitialClippingPath">14.3.2 The initial clipping path</a></li>
<li><a href="#masking-OverflowAndClipProperties">14.3.3 The <span class="prop-name">‘overflow’</span>
and <span class="prop-name">‘clip’</span> properties</a></li>
<li><a href="#masking-AutoClipAtViewportNotViewBox">14.3.4 Clip to viewport vs. clip to
<span class="attr-name">‘viewBox’</span></a></li>
<li><a href="#masking-EstablishingANewClippingPath">14.3.5 Establishing a new clipping path: the <span class="element-name">‘clipPath’</span> element</a></li>
<li><a href="#masking-clipPath-geometry">14.3.6 Clipping paths, geometry, and pointer events</a></li></ul></li>
<li><a href="#masking-Masking">14.4 Masking</a></li>
<li><a href="#masking-ObjectAndGroupOpacityProperties">14.5 Object and group opacity: the
<span class="prop-name">‘opacity’</span> property</a></li>
<li><a href="#masking-DOMInterfaces">14.6 DOM interfaces</a><ul class="toc">
<li><a href="#masking-InterfaceSVGClipPathElement">14.6.1 Interface SVGClipPathElement</a></li>
<li><a href="#masking-InterfaceSVGMaskElement">14.6.2 Interface SVGMaskElement</a></li></ul></li></ul>

<h2 id="masking-Introduction">14.1 Introduction</h2>

<p>SVG supports the following clipping/masking features:</p>

<ul><li><a href="#masking-ClippingPaths">clipping paths</a>, which uses
  any combination of <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a> and
  <a href="#intro-TermBasicShape">basic shapes</a> to serve as
  the outline of a (in the absence of anti-aliasing) 1-bit
  mask, where everything on the "inside" of the outline is
  allowed to show through but everything on the outside is
  masked out</li><li><a href="#masking-Masking">masks</a>, which are
  <a href="#intro-TermContainerElement">container elements</a>
  which can contain <a href="#intro-TermGraphicsElement">graphics elements</a>
  or other container elements which define a set of graphics
  that is to be used as a semi-transparent mask for compositing
  foreground objects into the current background.</li></ul>

<p>One key distinction between a <a href="#masking-ClippingPaths">clipping path</a>
and a <a href="#masking-Masking">mask</a> is that clipping paths are hard masks
(i.e., the silhouette consists of either fully opaque pixels or
fully transparent pixels, with the possible exception of
anti-aliasing along the edge of the silhouette) whereas masks
consist of an image where each pixel value indicates the degree
of transparency vs. opacity. In a mask, each pixel value can
range from fully transparent to fully opaque.</p>

<p>SVG supports only simple alpha blending compositing (see
<a href="#masking-SimpleAlphaBlending">Simple Alpha Compositing</a>).</p>

<h2 id="masking-SimpleAlphaBlending">14.2 Simple alpha compositing</h2>

<p>Graphics elements are blended into the elements already
rendered on the canvas using simple alpha compositing, in which
the resulting color and opacity at any given pixel on the
canvas is the result of the following formulas (all color
values use premultiplied alpha):</p>

<pre>
Er, Eg, Eb    - Element color value
Ea            - Element alpha value
Cr, Cg, Cb    - Canvas color value (before blending)
Ca            - Canvas alpha value (before blending)
Cr', Cg', Cb' - Canvas color value (after blending)
Ca'           - Canvas alpha value (after blending)
Ca' = 1 - (1 - Ea) * (1 - Ca)
Cr' = (1 - Ea) * Cr + Er
Cg' = (1 - Ea) * Cg + Eg
Cb' = (1 - Ea) * Cb + Eb
</pre>

<p>The following rendering properties, which provide
information about the color space in which to perform the
compositing operations, apply to compositing operations:</p>

<ul><li><a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a></li><li><a href="#painting-ColorRenderingProperty"><span class="prop-name">‘color-rendering’</span></a></li></ul>

<h2 id="masking-ClippingPaths">14.3 Clipping paths</h2>

<h3 id="masking-ClippingPathsIntro">14.3.1 Introduction</h3>

<p>The clipping path restricts the region to which paint can be
applied. Conceptually, any parts of the drawing that lie
outside of the region bounded by the currently active clipping
path are not drawn. A clipping path can be thought of as a mask
wherein those pixels outside the clipping path are black with
an alpha value of zero and those pixels inside the clipping
path are white with an alpha value of one (with the possible
exception of anti-aliasing along the edge of the
silhouette).</p>

<h3 id="masking-InitialClippingPath">14.3.2 The initial clipping path</h3>

<p>When an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element is either the root element in the
document or is embedded within a document whose layout is determined
according to the layout rules of CSS or XSL, then the user agent must
establish an initial clipping path for the SVG document fragment. The
<a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> and <a href="#masking-ClipProperty"><span class="prop-name">‘clip’</span></a> properties along with additional SVG
user agent processing rules determine the initial clipping path which
the user agent establishes for the SVG document fragment:</p>

<h3 id="masking-OverflowAndClipProperties">14.3.3 The <span class="prop-name">‘overflow’</span>
and <span class="prop-name">‘clip’</span> properties</h3>

    <div class="propdef">
      <dl><dt id="masking-OverflowProperty"><span class="propdef-title prop-name">‘overflow’</span></dt><dd>
          <table summary="overflow property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>visible | hidden | scroll | auto | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>see prose</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#coords-ElementsThatEstablishViewports">elements
              which establish a new viewport</a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> elements
              and <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> elements</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<p>The <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property has the same parameter values and has the
same meaning <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/visufx.html#overflow">as defined in CSS2</a>
([<a href="#refs-ref-CSS2">CSS2</a>], section 11.1.1);
however, the following additional points apply:</p>

<ul><li>The <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property applies to
  <a href="#coords-ElementsThatEstablishViewports">elements that establish new viewports</a>
  (e.g., <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> elements), <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> elements and <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>
  elements. For all other elements, the property has no effect (i.e., a clipping
  rectangle is not created).</li><li>For those elements to which the <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property can apply, if
  the <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property has the value <span class="prop-value">hidden</span> or <span class="prop-value">scroll</span>,
  the effect is that a new clipping path in the shape of a rectangle is created.
  The result is equivalent to defining a <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element whose
  content is a <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> element which defines the equivalent rectangle,
  and then specifying the &lt;uri&gt; of this <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element on the
  <a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a> property for the given element.</li><li>If the <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property has a value other than
  <span class="prop-value">hidden</span> or <span class="prop-value">scroll</span>,
  the property has no effect (i.e., a clipping rectangle is not created).</li><li>Within SVG content, the value <span class="prop-value">auto</span> is
  equivalent to the value <span class="prop-value">visible</span>.</li><li>When an <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a> is embedded inline within a
  parent XML grammar which uses <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/visuren.html">CSS layout</a>
  ([<a href="#refs-ref-CSS2">CSS2</a>], chapter 9)
  or <a href="http://www.w3.org/TR/2006/REC-xsl11-20061205/">XSL formatting</a>
  [<a href="#refs-ref-XSL">XSL</a>], if the
  <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property has the value <span class="prop-value">hidden</span>
  or <span class="prop-value">scroll</span>, then the user agent will
  establish an initial clipping path equal to the bounds of the initial
  <a href="#coords-SVGViewport">viewport</a>; otherwise, the initial
  clipping path is set according to the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/visufx.html#overflow">clipping rules as defined in CSS2</a>
  ([<a href="#refs-ref-CSS2">CSS2</a>], section 11.1.1).</li><li>When an <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a> is stand-alone or embedded
  inline within a parent XML grammar which does not use CSS layout
  or XSL formatting, the
  <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property on the <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a> is ignored
  for the purposes of visual rendering and the initial clipping path is set to
  the bounds of the initial <a href="#coords-SVGViewport">viewport</a>.</li><li>The initial value for <span class="prop-name">‘overflow’</span> as defined in [<a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/visufx.html#overflow">CSS2-overflow</a>] is 'visible', and this applies also to the root <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element;  however, for child elements of an SVG document, SVG's <a href="#styling-UAStyleSheet">user agent style sheet</a> overrides this initial value and sets the <span class="prop-name">‘overflow’</span> property on <a href="#coords-ElementsThatEstablishViewports">elements that establish new viewports</a> (e.g., <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> elements), <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> elements and <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> elements to the value 'hidden'.</li></ul>

<p>As a result of the above, the default behavior of SVG user agents is to
establish a clipping path to the bounds of the initial
<a href="#coords-SVGViewport">viewport</a> and to establish a new clipping
path for each <a href="#coords-ElementsThatEstablishViewports">element which
establishes a new viewport</a> and each <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> and
<a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element.</p>

<p>For related information, see <a href="#masking-AutoClipAtViewportNotViewBox">Clip
to viewport vs. clip to <span class="attr-name">‘viewBox’</span></a>.</p>

    <div class="propdef">
      <dl><dt id="masking-ClipProperty"><span class="propdef-title prop-name">‘clip’</span></dt><dd>
          <table summary="clip property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>&lt;shape&gt; | auto | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>auto</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#coords-ElementsThatEstablishViewports">elements
              which establish a new viewport</a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> elements
              and <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> elements</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<p>The <a href="#masking-ClipProperty"><span class="prop-name">‘clip’</span></a> property has the same parameter values
<a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/visufx.html#clipping">as defined in CSS2</a>
([<a href="#refs-ref-CSS2">CSS2</a>], section 11.1.2).
Unitless values, which indicate current user coordinates, are
permitted on the coordinate values on the &lt;shape&gt;. The
value of <span class="prop-value">auto</span> defines a clipping path along
the bounds of the viewport created by the given element.</p>

<h3 id="masking-AutoClipAtViewportNotViewBox">14.3.4 Clip to viewport vs. clip to
<span class="attr-name">‘viewBox’</span></h3>

<p>It is important to note that initial values for the <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> and
<a href="#masking-ClipProperty"><span class="prop-name">‘clip’</span></a> properties and the <a href="#styling-UAStyleSheet">user agent
style sheet</a> will result in an initial clipping path that is set to the
bounds of the initial viewport. When attributes <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> and
<a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> attributes are specified, it is sometime
desirable that the clipping path be set to the bounds of the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>
instead of the viewport (or reference rectangle, in the case of
<a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> and <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> elements), particularly when
<a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> specifies uniform scaling and the aspect ratio of
the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> does not match the aspect ratio of the viewport.</p>

<p>To set the initial clipping path to the bounds of the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>, set
the bounds of <a href="#masking-ClipProperty"><span class="prop-name">‘clip’</span></a> property to the same rectangle as specified on the
<a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute. (Note that the parameters do not match.
<a href="#masking-ClipProperty"><span class="prop-name">‘clip’</span></a> takes values &lt;top&gt;, &lt;right&gt;,&lt;bottom&gt; and
&lt;left&gt;, whereas <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> takes values &lt;min-x&gt;,
&lt;min-y&gt;, &lt;width&gt; and &lt;height&gt;.)</p>

<h3 id="masking-EstablishingANewClippingPath">14.3.5 Establishing a new clipping path: the <span class="element-name">‘clipPath’</span> element</h3>



<p id="masking-ClipPathElement">A clipping path is defined with a <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>
element. A clipping path is used/referenced using the <a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a>
property.</p>

<p>A <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element can contain <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> elements,
<a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements, <a href="#chapter-shapes">basic shapes</a> (such as
<a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>) or a <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element. If a <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element is a
child of a <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element, it must directly reference
<a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a> or <a href="#chapter-shapes">basic shape</a> elements.
Indirect references are an error (see
<a href="#implnote-ErrorProcessing">Error processing</a>).</p>

<p>The raw geometry of each child element exclusive of rendering properties
such as <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>, <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="prop-name">‘stroke-width’</span></a> within a
<a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> conceptually defines a 1-bit mask (with the possible
exception of anti-aliasing along the edge of the geometry) which represents
the silhouette of the graphics associated with that element. Anything outside
the outline of the object is masked out. If a child element is 
made invisible by <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> or <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> it does not contribute
to the clipping path. When the <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element
contains multiple child elements, the silhouettes of the child elements are
logically OR'd together to create a single silhouette which is then used to
restrict the region onto which paint can be applied. Thus, a point is inside
the clipping path if it is inside any of the children of the
<a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>.</p>

<p>For a given graphics element, the actual clipping path used
will be the intersection of the clipping path specified by its
<a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a> property (if any) with any clipping paths on its
ancestors, as specified by the <a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a> property on the
ancestor elements, or by the <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> property on ancestor
<a href="#coords-ElementsThatEstablishViewports">elements
which establish a new viewport</a>. Also, see the discussion of
<a href="#masking-InitialClippingPath">the initial clipping path</a>.)</p>

<p>A couple of notes:</p>

<ul><li>The <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element itself and its child elements do
  <em>not</em> inherit clipping paths from the ancestors of the
  <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element.</li><li>The <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element or any of its children can specify
  property <a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a>.<br /> If a valid <a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a> reference
  is placed on a <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element, the resulting clipping path is the
  intersection of the contents of the <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element with the
  referenced clipping path.<br />
  If a valid <a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a> reference is placed on one of the children of
  a <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element, then the given child element is clipped by the
  referenced clipping path before OR'ing the silhouette of the child element
  with the silhouettes of the other child elements.</li><li>An empty clipping path will completely clip away the element that had the <a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a> property applied.</li></ul>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘clipPath’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermShapeElement">shape elements</a><span class="expanding"> — <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></span></li><li><a href="#text-TextElement"><span class="element-name">‘text’</span></a></li><li><a href="#struct-UseElement"><span class="element-name">‘use’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></li><li><a href="#masking-ClipPathElementClipPathUnitsAttribute"><span class="attr-name">‘clipPathUnits’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#masking-InterfaceSVGClipPathElement">SVGClipPathElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="masking-ClipPathElementClipPathUnitsAttribute"><span class="adef">clipPathUnits</span> =
        "<em>userSpaceOnUse</em> | <em>objectBoundingBox</em>"</dt><dd>Defines the coordinate system for the contents of the
        <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>.<br />
         If <span class="attr-value">clipPathUnits="userSpaceOnUse"</span>,
        the contents of the <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> represent values in
        the current user coordinate system in place at the time
        when the <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>
        element is referenced (i.e., the user coordinate system for
        the element referencing the <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element via the
        <a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a> property).<br />
         If <span class="attr-value">clipPathUnits="objectBoundingBox"</span>,
        then the user coordinate system for the contents of the
        <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element is established using the bounding box of
        the element to which the clipping path is applied (see <a href="#coords-ObjectBoundingBox">Object bounding box
        units</a>).<br />
         If attribute <a href="#masking-ClipPathElementClipPathUnitsAttribute"><span class="attr-name">‘clipPathUnits’</span></a>
        is not specified, then the effect is as if a value of <span class="attr-value">'userSpaceOnUse'</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>

<p><a href="#styling-SVGStylingProperties">Properties</a> inherit into the
<a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element from its ancestors; properties do <em>not</em>
inherit from the element referencing the <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element.</p>

<p><a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> elements are never rendered directly; their only usage is
as something that can be referenced using the <a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a> property. The
<a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property does not apply to the <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element;
thus, <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> elements are not directly rendered even if the
<a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property is set to a value other than
<span class="prop-value">none</span>, and <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> elements are
available for referencing even when the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property on the
<a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element or any of its ancestors is set to
<span class="prop-value">none</span>.</p>

    <div class="propdef">
      <dl><dt id="masking-ClipPathProperty"><span class="propdef-title prop-name">‘clip-path’</span></dt><dd>
          <table summary="clip-path property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td><a href="#types-DataTypeFuncIRI">&lt;funciri&gt;</a>
              | none | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>none</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermContainerElement">container
              elements</a>, <a href="#intro-TermGraphicsElement">graphics
              elements</a>
              and <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<dl><dt><span class="prop-value"><a href="#types-DataTypeFuncIRI">&lt;funciri&gt;</a></span></dt><dd>An <a href="#linking-IRIReference">IRI reference</a> to another
  graphical object within the same SVG document fragment which will be used as
  the clipping path. If the <a href="#linking-IRIReference">IRI reference</a> is not valid 
	(e.g it points to an object that doesn't exist or the object is not a <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element) the
	<a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a> property must be treated as if it hadn't been specified.</dd></dl>

    <div class="propdef">
      <dl><dt id="masking-ClipRuleProperty"><span class="propdef-title prop-name">‘clip-rule’</span></dt><dd>
          <table summary="clip-rule property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>nonzero | evenodd | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>nonzero</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td>graphics elements within a <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>
              element</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>yes</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<dl><dt><span class="prop-value">nonzero</span></dt><dd>See description of <a href="#painting-FillRuleProperty"><span class="prop-name">‘fill-rule’</span></a> property.</dd><dt><span class="prop-value">evenodd</span></dt><dd>See description of <a href="#painting-FillRuleProperty"><span class="prop-name">‘fill-rule’</span></a> property.</dd></dl>

<p>The <a href="#masking-ClipRuleProperty"><span class="prop-name">‘clip-rule’</span></a> property only applies to graphics elements that are
contained within a <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element. The following fragment of code
will cause an evenodd clipping rule to be applied to the clipping path because
<a href="#masking-ClipRuleProperty"><span class="prop-name">‘clip-rule’</span></a> is specified on the <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element that defines the
clipping shape:</p>

<pre>
&lt;g clip-rule="nonzero"&gt;
  &lt;clipPath id="MyClip"&gt;
    &lt;path d="..." clip-rule="evenodd" /&gt;
  &lt;/clipPath&gt;
  &lt;rect clip-path="url(#MyClip)" ... /&gt;
&lt;/g&gt;
</pre>

<p>whereas the following fragment of code will <em>not</em> cause an
evenodd clipping rule to be applied because the <a href="#masking-ClipRuleProperty"><span class="prop-name">‘clip-rule’</span></a> is
specified on the referencing element, not on the object defining the
clipping shape:</p>

<pre>
&lt;g clip-rule="nonzero"&gt;
  &lt;clipPath id="MyClip"&gt;
    &lt;path d="..." /&gt;
  &lt;/clipPath&gt;
  &lt;rect clip-path="url(#MyClip)" clip-rule="evenodd" ... /&gt;
&lt;/g&gt;
</pre>

<h3 id="masking-clipPath-geometry">14.3.6 Clipping paths, geometry, and pointer events</h3>

  <p>
    A clipping path is conceptually equivalent to a custom viewport for
    the referencing element.  Thus, it affects the rendering of an element,
    but not the element's inherent geometry. The bounding box of a clipped
    element (that is, an element which references a 
    <span class="element-name">‘clipPath’</span> element via a
    <span class="prop-name">‘clip-path’</span> property, or a child of the 
    referencing element) must remain the same as if it were not clipped.
  </p>

  <p>By default, <a href="#interact-PointerEventsProperty">pointer-events</a> must not be dispatched on the clipped (non-visible) regions of a shape.  For example, a circle with a radius of 10 which is clipped to a circle with a radius of 5 will not receive <span class="event-name">'click'</span> events outside the smaller radius.  Later versions of SVG may define new properties to enable fine-grained control over the interactions between hit testing and clipping.</p>



<h2 id="masking-Masking">14.4 Masking</h2>



<p id="masking-MaskElement">In SVG, you can specify that any other graphics
object or <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element can be used as an alpha mask for
compositing the current object into the background.</p>

<p>A mask is defined with a <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element. A mask is
used/referenced using the <a href="#masking-MaskProperty"><span class="prop-name">‘mask’</span></a> property.</p>

<p>A <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> can contain any graphical elements or
<a href="#intro-TermContainerElement">container elements</a> such as
a <a href="#struct-GElement"><span class="element-name">‘g’</span></a>.</p>

<p>It is an error if the <a href="#masking-MaskProperty"><span class="prop-name">‘mask’</span></a> property references a
non-existent object or if the referenced object is not a <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>
element (see <a href="#implnote-ErrorProcessing">Error Processing</a>).</p>

<p>The effect is as if the child elements of the <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> are
rendered into an offscreen image which has been initialized to transparent
black. Any graphical object which uses/references the given
<a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element will be painted onto the background through the
mask, thus completely or partially masking out parts of the graphical
object.</p>

<p>For any graphics object that is used as a mask, the mask value at any point
is computed from the color channel values and alpha channel value as follows.
First a luminance value is computed from the color channel values:
</p>
<ul><li>If the computed value of <a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> on the <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element is <span class="attr-value">linearRGB</span>, 
first convert the original image color values (potentially in the sRGB color space) to the linear RGB color space (see
<a href="#painting-RenderingProperties">Rendering properties</a>). Then,
using non-premultiplied linear RGB color values, apply the luminance-to-alpha
coefficients (as defined in the <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a> filter primitive) to
convert the linear RGB color values to linear luminance values.
</li><li>
If the computed value of <a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> on the <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element is <span class="attr-value">sRGB</span> then the luminance value
is calculated by taking the non-premultiplied RGB color values, applying the luminance-to-alpha
coefficients (as defined in the <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a> filter primitive) to
convert the RGB color values to luminance values.</li></ul>
<p>Finally if the
graphics object also includes an alpha channel, then the computed
luminance value is multiplied by the corresponding alpha value to produce the
mask value.
</p>

<p>For a four-channel RGBA graphics object that is used as a mask, both
the color channels and the alpha channel of the mask contribute to the
masking operation. The alpha mask that is used to composite the current
object into the background represents the product of the luminance of
the color channels (see previous paragraph) and the alpha channel from
the mask.</p>

<p>For a three-channel RGB graphics object that is used as a mask (e.g.,
when referencing a 3-channel image file), the effect is as if the object
were converted into a 4-channel RGBA image with the alpha channel
uniformly set to 1.</p>

<p>For a single-channel image that is used as a mask (e.g., when
referencing a 1-channel grayscale image file), the effect is as if the
object were converted into a 4-channel RGBA image, where the single
channel from the referenced object is used to compute the three color
channels and the alpha channel is uniformly set to 1. Note that when
referencing a grayscale image file, the transfer curve relating the
encoded grayscale values to linear light values must be taken into
account when computing the color channels.</p>

<p>The effect of a mask is identical to what would have happened if
there were no mask but instead the alpha channel of the given object
were multiplied with the mask's resulting alpha values (i.e., the
product of the mask's luminance from its color channels multiplied by
the mask's alpha channel).</p>

<p>Note that SVG <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>s, shapes (e.g., <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>) and
<a href="#text-TextElement"><span class="element-name">‘text’</span></a> are all treated as four-channel RGBA images for the purposes
of masking operations.</p>

<p id="masking-ExampleMask01"><span class="example-ref">Example mask01</span> uses
an image to mask a rectangle.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="8cm" height="3cm" viewBox="0 0 800 300" version="1.1"
     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;desc&gt;Example mask01 - blue text masked with gradient against red background
  &lt;/desc&gt;
  &lt;defs&gt;
    &lt;linearGradient id="Gradient" gradientUnits="userSpaceOnUse"
                    x1="0" y1="0" x2="800" y2="0"&gt;
      &lt;stop offset="0" stop-color="white" stop-opacity="0" /&gt;
      &lt;stop offset="1" stop-color="white" stop-opacity="1" /&gt;
    &lt;/linearGradient&gt;
    &lt;mask id="Mask" maskUnits="userSpaceOnUse"
          x="0" y="0" width="800" height="300"&gt;
      &lt;rect x="0" y="0" width="800" height="300" fill="url(#Gradient)"  /&gt;
    &lt;/mask&gt;
    &lt;text id="Text" x="400" y="200" 
          font-family="Verdana" font-size="100" text-anchor="middle" &gt;
      Masked text
    &lt;/text&gt;
  &lt;/defs&gt;

  &lt;!-- Draw a pale red rectangle in the background --&gt;
  &lt;rect x="0" y="0" width="800" height="300" fill="#FF8080" /&gt;
  
  &lt;!-- Draw the text string twice. First, filled blue, with the mask applied.
       Second, outlined in black without the mask. --&gt;
  &lt;use xlink:href="#Text" fill="blue" mask="url(#Mask)" /&gt;
  &lt;use xlink:href="#Text" fill="none" stroke="black" stroke-width="2" /&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example mask01</caption><tr><td><img alt="Example mask01 — blue text masked with gradient against red background" src="images/masking/mask01.png" /></td></tr></table><p class="view-as-svg"><a href="images/masking/mask01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘mask’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermContainerElement">Container element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#intro-TermShapeElement">shape elements</a><span class="expanding"> — <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></span></li><li><a href="#intro-TermStructuralElement">structural elements</a><span class="expanding"> — <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></span></li><li><a href="#intro-TermGradientElement">gradient elements</a><span class="expanding"> — <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></span></li><li><a href="#linking-AElement"><span class="element-name">‘a’</span></a></li><li><a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a></li><li><a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a></li><li><a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a></li><li><a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a></li><li><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></li><li><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></li><li><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></li><li><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></li><li><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></li><li><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></li><li><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></li><li><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></li><li><a href="#script-ScriptElement"><span class="element-name">‘script’</span></a></li><li><a href="#styling-StyleElement"><span class="element-name">‘style’</span></a></li><li><a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a></li><li><a href="#text-TextElement"><span class="element-name">‘text’</span></a></li><li><a href="#linking-ViewElement"><span class="element-name">‘view’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#masking-MaskElementXAttribute"><span class="attr-name">‘x’</span></a></li><li><a href="#masking-MaskElementYAttribute"><span class="attr-name">‘y’</span></a></li><li><a href="#masking-MaskElementWidthAttribute"><span class="attr-name">‘width’</span></a></li><li><a href="#masking-MaskElementHeightAttribute"><span class="attr-name">‘height’</span></a></li><li><a href="#masking-MaskElementMaskUnitsAttribute"><span class="attr-name">‘maskUnits’</span></a></li><li><a href="#masking-MaskElementMaskContentUnitsAttribute"><span class="attr-name">‘maskContentUnits’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#masking-InterfaceSVGMaskElement">SVGMaskElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="masking-MaskElementMaskUnitsAttribute"><span class="adef">maskUnits</span> = "<em>userSpaceOnUse</em> |
        <em>objectBoundingBox</em>"</dt><dd>Defines the coordinate system for attributes
        <a href="#masking-MaskElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#masking-MaskElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#masking-MaskElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#masking-MaskElementHeightAttribute"><span class="attr-name">‘height’</span></a>.<br />
         If <span class="attr-value">maskUnits="userSpaceOnUse"</span>,
        <a href="#masking-MaskElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#masking-MaskElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#masking-MaskElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#masking-MaskElementHeightAttribute"><span class="attr-name">‘height’</span></a>
        represent values in the current user coordinate system in place at
        the time when the <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>
        element is referenced (i.e., the user coordinate system for
        the element referencing the <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element via the
        <a href="#masking-MaskProperty"><span class="prop-name">‘mask’</span></a> property).<br />
         If <span class="attr-value">maskUnits="objectBoundingBox"</span>,
        <a href="#masking-MaskElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#masking-MaskElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#masking-MaskElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#masking-MaskElementHeightAttribute"><span class="attr-name">‘height’</span></a>
        represent fractions or percentages of the bounding box of
        the element to which the mask is applied. (See <a href="#coords-ObjectBoundingBox">Object bounding box
        units</a>.)<br />
         If attribute <a href="#masking-MaskElementMaskUnitsAttribute"><span class="attr-name">‘maskUnits’</span></a> is
        not specified, then the effect is as if a value of <span class="attr-value">'objectBoundingBox'</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="masking-MaskElementMaskContentUnitsAttribute"><span class="adef">maskContentUnits</span> =
        "<em>userSpaceOnUse</em> | <em>objectBoundingBox</em>"</dt><dd>Defines the coordinate system for the contents of the
        <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>.<br />
         If <span class="attr-value">maskContentUnits="userSpaceOnUse"</span>,
        the user coordinate system for the contents of the
        <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element is the current
        user coordinate system in place at the time when the
        <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element is referenced
        (i.e., the user coordinate system for the element
        referencing the <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>
        element via the <a href="#masking-MaskProperty"><span class="prop-name">‘mask’</span></a>
        property).<br />
         If <span class="attr-value">maskContentUnits="objectBoundingBox"</span>,
        the user coordinate system for the contents of the <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> is established using the
        bounding box of the element to which the mask is applied.
        (See <a href="#coords-ObjectBoundingBox">Object
        bounding box units</a>.)<br />
         If attribute <a href="#masking-MaskElementMaskContentUnitsAttribute"><span class="attr-name">‘maskContentUnits’</span></a> is not specified,
        then the effect is as if a value of <span class="attr-value">'userSpaceOnUse'</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="masking-MaskElementXAttribute"><span class="adef">x</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The x-axis coordinate of one corner of the rectangle
        for the largest possible offscreen buffer. Note that the
        clipping path used to render any graphics within the mask
        will consist of the intersection of the current clipping
        path associated with the given object and the rectangle
        defined by 
        <a href="#masking-MaskElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#masking-MaskElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#masking-MaskElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#masking-MaskElementHeightAttribute"><span class="attr-name">‘height’</span></a>.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'-10%'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="masking-MaskElementYAttribute"><span class="adef">y</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The y-axis coordinate of one corner of the rectangle
        for the largest possible offscreen buffer.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'-10%'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="masking-MaskElementWidthAttribute"><span class="adef">width</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>The width of the largest possible offscreen buffer.
        Note that the clipping path used to render any graphics
        within the mask will consist of the intersection of the
        current clipping path associated with the given object and
        the rectangle defined by
        <a href="#masking-MaskElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#masking-MaskElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#masking-MaskElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#masking-MaskElementHeightAttribute"><span class="attr-name">‘height’</span></a>.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables rendering of the element.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'120%'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="masking-MaskElementHeightAttribute"><span class="adef">height</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>The height of the largest possible offscreen
        buffer.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables rendering of the element.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'120%'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>

<p><a href="#styling-SVGStylingProperties">Properties</a> inherit into the
<a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element from its ancestors; properties do <em>not</em>
inherit from the element referencing the <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element.</p>

<p><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> elements are never rendered directly; their only
usage is as something that can be referenced using the <a href="#masking-MaskProperty"><span class="prop-name">‘mask’</span></a>
property. The <a href="#masking-OpacityProperty"><span class="prop-name">‘opacity’</span></a>, <a href="#filters-FilterProperty"><span class="prop-name">‘filter’</span></a> and <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> properties do not apply to the
<a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element; thus, <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> elements are not
directly rendered even if the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property is set to a value
other than <span class="prop-value">none</span>, and <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>
elements are available for referencing even when the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property
on the <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element or any of its ancestors is set to
<span class="prop-value">none</span>.</p>

<p>The following is a description of the <a href="#masking-MaskProperty"><span class="prop-name">‘mask’</span></a> property.</p>

    <div class="propdef">
      <dl><dt id="masking-MaskProperty"><span class="propdef-title prop-name">‘mask’</span></dt><dd>
          <table summary="mask property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td><a href="#types-DataTypeFuncIRI">&lt;funciri&gt;</a> | none | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>none</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermContainerElement">container
              elements</a> and <a href="#intro-TermGraphicsElement">graphics
              elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<dl><dt><span class="prop-value"><a href="#types-DataTypeFuncIRI">&lt;funciri&gt;</a></span></dt><dd>A <a href="#linking-IRIReference">IRI reference</a> to another
  graphical object which will be used as the mask.</dd></dl>



<h2 id="masking-ObjectAndGroupOpacityProperties">14.5 Object and group opacity: the
<span class="prop-name">‘opacity’</span> property</h2>

<p>There are several opacity properties within SVG:</p>

<ul><li><a href="#painting-FillOpacityProperty"><span class="prop-name">‘fill-opacity’</span></a>, which specifies the opacity of a fill
  operation;</li><li><a href="#painting-StrokeOpacityProperty"><span class="prop-name">‘stroke-opacity’</span></a>, which specifies the opacity of a stroking
  operation;</li><li><a href="#pservers-StopOpacityProperty"><span class="prop-name">‘stop-opacity’</span></a>, which specifies the opacity of a gradient stop; and</li><li><a href="#masking-OpacityProperty"><span class="prop-name">‘opacity’</span></a>, which specifies object/group opacity and which is
  described in this section.</li></ul>

<p>Except for object/group opacity (described just below), all other opacity
properties are involved in intermediate rendering operations. Object/group
opacity can be thought of conceptually as a postprocessing operation.
Conceptually, after the object/group is rendered into an RGBA offscreen image,
the object/group opacity setting specifies how to blend the offscreen image
into the current background.</p>

    <div class="propdef">
      <dl><dt id="masking-OpacityProperty"><span class="propdef-title prop-name">‘opacity’</span></dt><dd>
          <table summary="opacity property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>&lt;opacity-value&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>1</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermContainerElement">container
              elements</a> (except <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>) and <a href="#intro-TermGraphicsElement">graphics
              elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<dl><dt><span class="prop-value">&lt;opacity-value&gt;</span></dt><dd>The uniform opacity setting to be applied across an
  entire object, as a <a href="#types-DataTypeNumber">&lt;number&gt;</a>. Any values outside the range 0.0 (fully
  transparent) to 1.0 (fully opaque) will be clamped to this
  range. (See <a href="#implnote-RangeClamping">Clamping
  values which are restricted to a particular range</a>.) If
  the object is a container element such as a <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, then
  the effect is as if the contents of the <a href="#struct-GElement"><span class="element-name">‘g’</span></a> were
  blended against the current background using a mask where the
  value of each pixel of the mask is &lt;opacity-value&gt;.
  (See <a href="#masking-SimpleAlphaBlending">Simple alpha
  compositing</a>.)</dd></dl>

<p id="masking-ExampleOpacity01"><span class="example-ref">Example opacity01</span>
illustrates various usage of the <a href="#masking-OpacityProperty"><span class="prop-name">‘opacity’</span></a> property on elements and
groups.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="12cm" height="3.5cm" viewBox="0 0 1200 350"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example opacity01 - opacity property&lt;/desc&gt;

  &lt;rect x="1" y="1" width="1198" height="348"
        fill="none" stroke="blue" /&gt;

  &lt;!-- Background blue rectangle --&gt;
  &lt;rect x="100" y="100" width="1000" height="150" fill="#0000ff"  /&gt;

  &lt;!-- Red circles going from opaque to nearly transparent --&gt;
  &lt;circle cx="200" cy="100" r="50" fill="red" opacity="1"  /&gt;
  &lt;circle cx="400" cy="100" r="50" fill="red" opacity=".8"  /&gt;
  &lt;circle cx="600" cy="100" r="50" fill="red" opacity=".6"  /&gt;
  &lt;circle cx="800" cy="100" r="50" fill="red" opacity=".4"  /&gt;
  &lt;circle cx="1000" cy="100" r="50" fill="red" opacity=".2"  /&gt;

  &lt;!-- Opaque group, opaque circles --&gt;
  &lt;g opacity="1" &gt;
    &lt;circle cx="182.5" cy="250" r="50" fill="red" opacity="1"  /&gt;
    &lt;circle cx="217.5" cy="250" r="50" fill="green" opacity="1"  /&gt;
  &lt;/g&gt;
  &lt;!-- Group opacity: .5, opacity circles --&gt;
  &lt;g opacity=".5" &gt;
    &lt;circle cx="382.5" cy="250" r="50" fill="red" opacity="1"  /&gt;
    &lt;circle cx="417.5" cy="250" r="50" fill="green" opacity="1"  /&gt;
  &lt;/g&gt;
  &lt;!-- Opaque group, semi-transparent green over red --&gt;
  &lt;g opacity="1" &gt;
    &lt;circle cx="582.5" cy="250" r="50" fill="red" opacity=".5"  /&gt;
    &lt;circle cx="617.5" cy="250" r="50" fill="green" opacity=".5"  /&gt;
  &lt;/g&gt;
  &lt;!-- Opaque group, semi-transparent red over green --&gt;
  &lt;g opacity="1" &gt;
    &lt;circle cx="817.5" cy="250" r="50" fill="green" opacity=".5"  /&gt;
    &lt;circle cx="782.5" cy="250" r="50" fill="red" opacity=".5"  /&gt;
  &lt;/g&gt;
  &lt;!-- Group opacity .5, semi-transparent green over red --&gt;
  &lt;g opacity=".5" &gt;
    &lt;circle cx="982.5" cy="250" r="50" fill="red" opacity=".5"  /&gt;
    &lt;circle cx="1017.5" cy="250" r="50" fill="green" opacity=".5"  /&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example opacity01</caption><tr><td><img alt="Example opacity01 — opacity property" src="images/masking/opacity01.png" /></td></tr></table><p class="view-as-svg"><a href="images/masking/opacity01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<p>In the example above, the top row of circles have differing opacities,
ranging from 1.0 to 0.2. The bottom row illustrates five <a href="#struct-GElement"><span class="element-name">‘g’</span></a> elements,
each of which contains overlapping red and green circles, as follows:</p>

<ul><li>The first group shows the opaque case for reference. The group has
  opacity of 1, as do the circles.</li><li>The second group shows group opacity when the elements in the group are
  opaque.</li><li>The third and fourth group show that opacity is not commutative. In the
  third group (which has opacity of 1), a semi-transparent green circle is
  drawn on top of a semi-transparent red circle, whereas in the fourth group a
  semi-transparent red circle is drawn on top of a semi-transparent green
  circle. Note that area where the two circles intersect display different
  colors. The third group shows more green color in the intersection area,
  whereas the fourth group shows more red color.</li><li>The fifth group shows the multiplicative effect of opacity settings.
  Both the circles and the group itself have opacity settings of .5. The
  result is that the portion of the red circle which does not overlap with the
  green circle (i.e., the top/right of the red circle) will blend into the
  blue rectangle with accumulative opacity of .25 (i.e., .5*.5), which, after
  blending into the blue rectangle, results in a blended color which is 25%
  red and 75% blue.</li></ul>

<h2 id="masking-DOMInterfaces">14.6 DOM interfaces</h2>

<h3 id="masking-InterfaceSVGClipPathElement">14.6.1 Interface SVGClipPathElement</h3>



 The <a class="idlinterface" href="#masking-InterfaceSVGClipPathElement">SVGClipPathElement</a> interface corresponds to the
 <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element.
<pre class="idl">interface <b>SVGClipPathElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#masking-__svg__SVGClipPathElement__clipPathUnits">clipPathUnits</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="masking-__svg__SVGClipPathElement__clipPathUnits" class="attribute first-child"><b>clipPathUnits</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#masking-ClipPathElementClipPathUnitsAttribute"><span class="attr-name">‘clipPathUnits’</span></a> on the given
 <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element.  Takes one of the constants defined in
 <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a>.
</div></dd></dl></dd></dl>


<h3 id="masking-InterfaceSVGMaskElement">14.6.2 Interface SVGMaskElement</h3>



 The <a class="idlinterface" href="#masking-InterfaceSVGMaskElement">SVGMaskElement</a> interface corresponds to the
 <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element.
<pre class="idl">interface <b>SVGMaskElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#masking-__svg__SVGMaskElement__maskUnits">maskUnits</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#masking-__svg__SVGMaskElement__maskContentUnits">maskContentUnits</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#masking-__svg__SVGMaskElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#masking-__svg__SVGMaskElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#masking-__svg__SVGMaskElement__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#masking-__svg__SVGMaskElement__height">height</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="masking-__svg__SVGMaskElement__maskUnits" class="attribute first-child"><b>maskUnits</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#masking-MaskElementMaskUnitsAttribute"><span class="attr-name">‘maskUnits’</span></a> on the given
 <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element.  Takes one of the constants defined in
 <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a>.
</div></dd>
<dt id="masking-__svg__SVGMaskElement__maskContentUnits" class="attribute"><b>maskContentUnits</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#masking-MaskElementMaskContentUnitsAttribute"><span class="attr-name">‘maskContentUnits’</span></a> on the given
 <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element.  Takes one of the constants defined in
 <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a>.
</div></dd>
<dt id="masking-__svg__SVGMaskElement__x" class="attribute"><b>x</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#masking-MaskElementXAttribute"><span class="attr-name">‘x’</span></a> on the given <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>
 element.
</div></dd>
<dt id="masking-__svg__SVGMaskElement__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#masking-MaskElementYAttribute"><span class="attr-name">‘y’</span></a> on the given <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>
 element.
</div></dd>
<dt id="masking-__svg__SVGMaskElement__width" class="attribute"><b>width</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#masking-MaskElementWidthAttribute"><span class="attr-name">‘width’</span></a> on the given
 <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element.
</div></dd>
<dt id="masking-__svg__SVGMaskElement__height" class="attribute"><b>height</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#masking-MaskElementHeightAttribute"><span class="attr-name">‘height’</span></a> on the given
 <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element.
</div></dd></dl></dd></dl>


</div><hr class="chapter-divider" />
<div id="chapter-filters">

<h1>15 Filter Effects</h1><h2 id="filters-toc">Contents</h2><ul class="toc">
<li><a href="#filters-Introduction">15.1 Introduction</a></li>
<li><a href="#filters-AnExample">15.2 An example</a></li>
<li><a href="#filters-FilterElement">15.3 The <span class="element-name">‘filter’</span> element</a></li>
<li><a href="#filters-FilterProperty">15.4 The <span class="prop-name">‘filter’</span>
    property</a></li>
<li><a href="#filters-FilterEffectsRegion">15.5 Filter effects region</a></li>
<li><a href="#filters-AccessingBackgroundImage">15.6 Accessing the background image</a></li>
<li><a href="#filters-FilterPrimitivesOverview">15.7 Filter primitives overview</a><ul class="toc">
<li><a href="#filters-FilterPrimitivesOverviewIntro">15.7.1 Overview</a></li>
<li><a href="#filters-CommonAttributes">15.7.2 Common attributes</a></li>
<li><a href="#filters-FilterPrimitiveSubRegion">15.7.3 Filter primitive subregion</a></li></ul></li>
<li><a href="#filters-LightSourceDefinitions">15.8 Light source elements and properties</a><ul class="toc">
<li><a href="#filters-LightSourceIntro">15.8.1 Introduction</a></li>
<li><a href="#filters-feDistantLightElement">15.8.2 Light source <span class="element-name">‘feDistantLight’</span></a></li>
<li><a href="#filters-fePointLightElement">15.8.3 Light source <span class="element-name">‘fePointLight’</span></a></li>
<li><a href="#filters-feSpotLightElement">15.8.4 Light source <span class="element-name">‘feSpotLight’</span></a></li>
<li><a href="#filters-LightingColorProperty">15.8.5 The <span class="prop-name">‘lighting-color’</span> property</a></li></ul></li>
<li><a href="#filters-feBlendElement">15.9 Filter primitive <span class="element-name">‘feBlend’</span></a></li>
<li><a href="#filters-feColorMatrixElement">15.10 Filter primitive <span class="element-name">‘feColorMatrix’</span></a></li>
<li><a href="#filters-feComponentTransferElement">15.11 Filter primitive <span class="element-name">‘feComponentTransfer’</span></a></li>
<li><a href="#filters-feCompositeElement">15.12 Filter primitive <span class="element-name">‘feComposite’</span></a></li>
<li><a href="#filters-feConvolveMatrixElement">15.13 Filter primitive <span class="element-name">‘feConvolveMatrix’</span></a></li>
<li><a href="#filters-feDiffuseLightingElement">15.14 Filter primitive <span class="element-name">‘feDiffuseLighting’</span></a></li>
<li><a href="#filters-feDisplacementMapElement">15.15 Filter primitive <span class="element-name">‘feDisplacementMap’</span></a></li>
<li><a href="#filters-feFloodElement">15.16 Filter primitive <span class="element-name">‘feFlood’</span></a></li>
<li><a href="#filters-feGaussianBlurElement">15.17 Filter primitive <span class="element-name">‘feGaussianBlur’</span></a></li>
<li><a href="#filters-feImageElement">15.18 Filter primitive <span class="element-name">‘feImage’</span></a></li>
<li><a href="#filters-feMergeElement">15.19 Filter primitive <span class="element-name">‘feMerge’</span></a></li>
<li><a href="#filters-feMorphologyElement">15.20 Filter primitive <span class="element-name">‘feMorphology’</span></a></li>
<li><a href="#filters-feOffsetElement">15.21 Filter primitive <span class="element-name">‘feOffset’</span></a></li>
<li><a href="#filters-feSpecularLightingElement">15.22 Filter primitive <span class="element-name">‘feSpecularLighting’</span></a></li>
<li><a href="#filters-feTileElement">15.23 Filter primitive <span class="element-name">‘feTile’</span></a></li>
<li><a href="#filters-feTurbulenceElement">15.24 Filter primitive <span class="element-name">‘feTurbulence’</span></a></li>
<li><a href="#filters-DOMInterfaces">15.25 DOM interfaces</a><ul class="toc">
<li><a href="#filters-InterfaceSVGFilterElement">15.25.1 Interface SVGFilterElement</a></li>
<li><a href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">15.25.2 Interface SVGFilterPrimitiveStandardAttributes</a></li>
<li><a href="#filters-InterfaceSVGFEBlendElement">15.25.3 Interface SVGFEBlendElement</a></li>
<li><a href="#filters-InterfaceSVGFEColorMatrixElement">15.25.4 Interface SVGFEColorMatrixElement</a></li>
<li><a href="#filters-InterfaceSVGFEComponentTransferElement">15.25.5 Interface SVGFEComponentTransferElement</a></li>
<li><a href="#filters-InterfaceSVGComponentTransferFunctionElement">15.25.6 Interface SVGComponentTransferFunctionElement</a></li>
<li><a href="#filters-InterfaceSVGFEFuncRElement">15.25.7 Interface SVGFEFuncRElement</a></li>
<li><a href="#filters-InterfaceSVGFEFuncGElement">15.25.8 Interface SVGFEFuncGElement</a></li>
<li><a href="#filters-InterfaceSVGFEFuncBElement">15.25.9 Interface SVGFEFuncBElement</a></li>
<li><a href="#filters-InterfaceSVGFEFuncAElement">15.25.10 Interface SVGFEFuncAElement</a></li>
<li><a href="#filters-InterfaceSVGFECompositeElement">15.25.11 Interface SVGFECompositeElement</a></li>
<li><a href="#filters-InterfaceSVGFEConvolveMatrixElement">15.25.12 Interface SVGFEConvolveMatrixElement</a></li>
<li><a href="#filters-InterfaceSVGFEDiffuseLightingElement">15.25.13 Interface SVGFEDiffuseLightingElement</a></li>
<li><a href="#filters-InterfaceSVGFEDistantLightElement">15.25.14 Interface SVGFEDistantLightElement</a></li>
<li><a href="#filters-InterfaceSVGFEPointLightElement">15.25.15 Interface SVGFEPointLightElement</a></li>
<li><a href="#filters-InterfaceSVGFESpotLightElement">15.25.16 Interface SVGFESpotLightElement</a></li>
<li><a href="#filters-InterfaceSVGFEDisplacementMapElement">15.25.17 Interface SVGFEDisplacementMapElement</a></li>
<li><a href="#filters-InterfaceSVGFEFloodElement">15.25.18 Interface SVGFEFloodElement</a></li>
<li><a href="#filters-InterfaceSVGFEGaussianBlurElement">15.25.19 Interface SVGFEGaussianBlurElement</a></li>
<li><a href="#filters-InterfaceSVGFEImageElement">15.25.20 Interface SVGFEImageElement</a></li>
<li><a href="#filters-InterfaceSVGFEMergeElement">15.25.21 Interface SVGFEMergeElement</a></li>
<li><a href="#filters-InterfaceSVGFEMergeNodeElement">15.25.22 Interface SVGFEMergeNodeElement</a></li>
<li><a href="#filters-InterfaceSVGFEMorphologyElement">15.25.23 Interface SVGFEMorphologyElement</a></li>
<li><a href="#filters-InterfaceSVGFEOffsetElement">15.25.24 Interface SVGFEOffsetElement</a></li>
<li><a href="#filters-InterfaceSVGFESpecularLightingElement">15.25.25 Interface SVGFESpecularLightingElement</a></li>
<li><a href="#filters-InterfaceSVGFETileElement">15.25.26 Interface SVGFETileElement</a></li>
<li><a href="#filters-InterfaceSVGFETurbulenceElement">15.25.27 Interface SVGFETurbulenceElement</a></li></ul></li></ul>

<h2 id="filters-Introduction">15.1 Introduction</h2>

    <p>This chapter describes SVG's declarative filter effects
    feature set, which when combined with the 2D power of SVG can
    describe much of the common artwork on the Web in such a way
    that client-side generation and alteration can be performed
    easily. In addition, the ability to apply filter effects to SVG
    <a href="#intro-TermGraphicsElement">graphics elements</a>
    and <a href="#intro-TermContainerElement">container
    elements</a> helps to maintain the semantic structure of the
    document, instead of resorting to images which aside from
    generally being a fixed resolution tend to obscure the original
    semantics of the elements they replace. This is especially true
    for effects applied to text.</p>
    <p>A filter effect consists of a series of graphics operations
    that are applied to a given <span id="filters-TermSourceGraphic" class="SVG-Term">source
    graphic</span> to produce a modified graphical result. The
    result of the filter effect is rendered to the target device
    instead of the original source graphic. The following
    illustrates the process:</p>
    <p><img alt="Image showing source graphic transformed by filter effect" src="images/filters/filters00.png" width="401" height="78" /></p>
    <p class="view-as-svg"><a href="images/filters/filters00.svg">View this example as SVG
    (SVG-enabled browsers only)</a></p>
    <p>Filter effects are defined by <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> elements. To apply a
    filter effect to a <a href="#intro-TermGraphicsElement">graphics element</a> or a
    <a href="#intro-TermContainerElement">container
    element</a>, you set the value of the <a href="#filters-FilterProperty"><span class="prop-name">‘filter’</span></a> property on the given
    element such that it references the filter effect.</p>
    <p>Each <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element contains a set
    of <span id="filters-TermFilterPrimitive" class="SVG-Term">filter primitives</span> as its children.
    Each filter primitive performs a single fundamental graphical
    operation (e.g., a blur or a lighting effect) on one or more
    inputs, producing a graphical result. Because most of the
    filter primitives represent some form of image processing, in
    most cases the output from a filter primitive is a single RGBA
    image.</p>
    <p>The original source graphic or the result from a filter
    primitive can be used as input into one or more other filter
    primitives. A common application is to use the source graphic
    multiple times. For example, a simple filter could replace one
    graphic by two by adding a black copy of original source
    graphic offset to create a drop shadow. In effect, there are
    now two layers of graphics, both with the same original source
    graphics.</p>
    <p>When applied to <a href="#intro-TermContainerElement">container elements</a>
    such as <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, the <a href="#filters-FilterProperty"><span class="prop-name">‘filter’</span></a> property applies to the
    contents of the group as a whole. The group's children do not
    render to the screen directly; instead, the graphics commands
    necessary to render the children are stored temporarily.
    Typically, the graphics commands are executed as part of the
    processing of the referenced <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element via use of the
    keywords <a href="#filters-SourceGraphic"><span class="attr-value">SourceGraphic</span></a> or <a href="#filters-SourceAlpha"><span class="attr-value">SourceAlpha</span></a>. Filter effects can
    be applied to <a href="#intro-TermContainerElement">container elements</a>
    with no content (e.g., an empty <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element), in which case the
    <a href="#filters-SourceGraphic"><span class="attr-value">SourceGraphic</span></a> or <a href="#filters-SourceAlpha"><span class="attr-value">SourceAlpha</span></a> consist of a
    transparent black rectangle that is the size of the <a href="#filters-FilterEffectsRegion"><span class="attr-value">filter effects region</span></a>.</p>
    <p>Sometimes filter primitives result in undefined pixels. For
    example, filter primitive <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a> can shift an image
    down and to the right, leaving undefined pixels at the top and
    left. In these cases, the undefined pixels are set to
    transparent black.</p>

    <h2 id="filters-AnExample">15.2 An example</h2>
    <p>The following shows an example of a filter effect.</p>
    <p><span class="example-ref">Example filters01</span> -
    introducing filter effects.</p>

<pre class="xml">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
              "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="7.5cm" height="5cm" viewBox="0 0 200 120"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;title&gt;Example filters01.svg - introducing filter effects&lt;/title&gt;
  &lt;desc&gt;An example which combines multiple filter primitives
        to produce a 3D lighting effect on a graphic consisting
        of the string "SVG" sitting on top of oval filled in red
        and surrounded by an oval outlined in red.&lt;/desc&gt;
  &lt;defs&gt;
    &lt;filter id="MyFilter" filterUnits="userSpaceOnUse" x="0" y="0" width="200" height="120"&gt;
      &lt;feGaussianBlur in="SourceAlpha" stdDeviation="4" result="blur"/&gt;
      &lt;feOffset in="blur" dx="4" dy="4" result="offsetBlur"/&gt;
      &lt;feSpecularLighting in="blur" surfaceScale="5" specularConstant=".75" 
                          specularExponent="20" lighting-color="#bbbbbb"  
                          result="specOut"&gt;
        &lt;fePointLight x="-5000" y="-10000" z="20000"/&gt;
      &lt;/feSpecularLighting&gt;
      &lt;feComposite in="specOut" in2="SourceAlpha" operator="in" result="specOut"/&gt;
      &lt;feComposite in="SourceGraphic" in2="specOut" operator="arithmetic" 
                   k1="0" k2="1" k3="1" k4="0" result="litPaint"/&gt;
      &lt;feMerge&gt;
        &lt;feMergeNode in="offsetBlur"/&gt;
        &lt;feMergeNode in="litPaint"/&gt;
      &lt;/feMerge&gt;
    &lt;/filter&gt;
  &lt;/defs&gt;
  &lt;rect x="1" y="1" width="198" height="118" fill="#888888" stroke="blue" /&gt;
  &lt;g filter="url(#MyFilter)" &gt;
	  &lt;g&gt;
      &lt;path fill="none" stroke="#D90000" stroke-width="10" 
            d="M50,90 C0,90 0,30 50,30 L150,30 C200,30 200,90 150,90 z" /&gt;
      &lt;path fill="#D90000" 
            d="M60,80 C30,80 30,40 60,40 L140,40 C170,40 170,80 140,80 z" /&gt;
      &lt;g fill="#FFFFFF" stroke="black" font-size="45" font-family="Verdana" &gt;
        &lt;text x="52" y="76"&gt;SVG&lt;/text&gt;
      &lt;/g&gt;
    &lt;/g&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example introducing filter effects"><caption align="bottom">Example filters01</caption><tr><td><img alt="Example filters01" src="images/filters/filters01.png" /></td></tr></table><p class="view-as-svg"><a href="images/filters/filters01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p>The filter effect used in the example above is repeated here
    with reference numbers in the left column before each of the
    six filter primitives:</p>
    <table summary="filter example with reference numbers"><tr><td valign="top">
<pre style="color:black">
 
 
1
2
3
 
 
 
 
4
5
 
6
 
 
 
</pre>
        </td><td valign="top">
<pre>
&lt;filter id="MyFilter" filterUnits="userSpaceOnUse" x="0" y="0" width="200" height="120"&gt;
  &lt;desc&gt;Produces a 3D lighting effect.&lt;/desc&gt;
  &lt;feGaussianBlur in="SourceAlpha" stdDeviation="4" result="blur"/&gt;
  &lt;feOffset in="blur" dx="4" dy="4" result="offsetBlur"/&gt;
  &lt;feSpecularLighting in="blur" surfaceScale="5" specularConstant=".75" 
                      specularExponent="20" lighting-color="#bbbbbb" 
                      result="specOut"&gt;
    &lt;fePointLight x="-5000" y="-10000" z="20000"/&gt;
  &lt;/feSpecularLighting&gt;
  &lt;feComposite in="specOut" in2="SourceAlpha" operator="in" result="specOut"/&gt;
  &lt;feComposite in="SourceGraphic" in2="specOut" operator="arithmetic" 
               k1="0" k2="1" k3="1" k4="0" result="litPaint"/&gt;
  &lt;feMerge&gt;
    &lt;feMergeNode in="offsetBlur"/&gt;
    &lt;feMergeNode in="litPaint"/&gt;
  &lt;/feMerge&gt;
&lt;/filter&gt;
</pre>
        </td></tr></table>
    <p>The following pictures show the intermediate image results
    from each of the six filter elements:</p>
    <table summary="filter example intermediate results"><tr><td>
          <p><img width="115" height="70" alt="filters01 - original source graphic" src="images/filters/filters01-0.png" /><br />
           Source graphic</p>
        </td><td> </td><td>
          <p><img width="115" height="70" alt="filters01 - after filter element 1" src="images/filters/filters01-1.png" /><br />
           After filter primitive 1</p>
        </td><td> </td><td>
          <p><img width="115" height="70" alt="filters01 - after filter element 2" src="images/filters/filters01-2.png" /><br />
           After filter primitive 2</p>
        </td><td> </td><td>
          <p><img width="115" height="70" alt="filters01 - after filter element 3" src="images/filters/filters01-3.png" /><br />
           After filter primitive 3</p>
        </td></tr><tr><td> </td><td> </td></tr><tr><td> </td><td> </td><td>
          <p><img width="115" height="70" alt="filters01 - after filter element 4" src="images/filters/filters01-4.png" /><br />
           After filter primitive 4</p>
        </td><td> </td><td>
          <p><img width="115" height="70" alt="filters01 - after filter element 5" src="images/filters/filters01-5.png" /><br />
           After filter primitive 5</p>
        </td><td> </td><td>
          <p><img width="115" height="70" alt="filters01 - after filter element 6" src="images/filters/filters01-6.png" /><br />
           After filter primitive 6</p>
        </td></tr></table>
    <ol><li>Filter primitive <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a> takes input
      <a href="#filters-SourceAlpha"><span class="attr-value">SourceAlpha</span></a>, which is the alpha
      channel of the source graphic. The result is stored in a
      temporary buffer named "blur". Note that "blur" is used as
      input to both filter primitives 2 and 3.</li><li>Filter primitive <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a> takes buffer
      "blur", shifts the result in a positive direction in both x
      and y, and creates a new buffer named "offsetBlur". The
      effect is that of a drop shadow.</li><li>Filter primitive <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, uses
      buffer "blur" as a model of a surface elevation and generates
      a lighting effect from a single point source. The result is
      stored in buffer "specOut".</li><li>Filter primitive <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a> masks out the
      result of filter primitive 3 by the original source graphics
      alpha channel so that the intermediate result is no bigger
      than the original source graphic.</li><li>Filter primitive <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a> composites the
      result of the specular lighting with the original source
      graphic.</li><li>Filter primitive <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a> composites two
      layers together. The lower layer consists of the drop shadow
      result from filter primitive 2. The upper layer consists of
      the specular lighting result from filter primitive 5.</li></ol>

<h2 id="filters-FilterElement">15.3 The <span class="element-name">‘filter’</span> element</h2>



<p>The description of the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element follows:</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘filter’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveElement">filter primitive elements</a><span class="expanding"> — <a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a>, <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>, <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a>, <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a></span></li><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#filters-FilterElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#filters-FilterElementXAttribute"><span class="attr-name">‘x’</span></a></li><li><a href="#filters-FilterElementYAttribute"><span class="attr-name">‘y’</span></a></li><li><a href="#filters-FilterElementWidthAttribute"><span class="attr-name">‘width’</span></a></li><li><a href="#filters-FilterElementHeightAttribute"><span class="attr-name">‘height’</span></a></li><li><a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a></li><li><a href="#filters-FilterElementFilterUnitsAttribute"><span class="attr-name">‘filterUnits’</span></a></li><li><a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a></li><li><a href="#filters-FilterElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFilterElement">SVGFilterElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-FilterElementFilterUnitsAttribute"><span class="adef">filterUnits</span> = "<em>userSpaceOnUse</em>
        | <em>objectBoundingBox</em>"</dt><dd>See <a href="#filters-FilterEffectsRegion">Filter effects
        region</a>.</dd><dt id="filters-FilterElementPrimitiveUnitsAttribute"><span class="adef">primitiveUnits</span> =
        "<em>userSpaceOnUse</em> | <em>objectBoundingBox</em>"</dt><dd>Specifies the coordinate system for the various length
        values within the filter primitives and for the attributes
        that define the <a href="#filters-FilterPrimitiveSubRegion">filter
        primitive subregion</a>.<br />
         If <span class="attr-value">primitiveUnits="userSpaceOnUse"</span>, any
        length values within the filter definitions represent
        values in the current user coordinate system in place at
        the time when the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element is
        referenced (i.e., the user coordinate system for the
        element referencing the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element via a <a href="#filters-FilterProperty"><span class="prop-name">‘filter’</span></a> property).<br />
         If <span class="attr-value">primitiveUnits="objectBoundingBox"</span>,
        then any length values within the filter definitions
        represent fractions or percentages of the bounding box on
        the referencing element (see <a href="#coords-ObjectBoundingBox">Object bounding box
        units</a>). Note that if only one number was specified in a <a href="#types-DataTypeNumberOptionalNumber">&lt;number-optional-number&gt;</a> value
		this number is expanded out before the <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> computation takes place.
		<br />
         If attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a>
        is not specified, then the effect is as if a value of <span class="attr-value">userSpaceOnUse</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-FilterElementXAttribute"><span class="adef">x</span> = "<em><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></em>"</dt><dd>See <a href="#filters-FilterEffectsRegion">Filter effects
        region</a>.</dd><dt id="filters-FilterElementYAttribute"><span class="adef">y</span> = "<em><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></em>"</dt><dd>See <a href="#filters-FilterEffectsRegion">Filter effects
        region</a>.</dd><dt id="filters-FilterElementWidthAttribute"><span class="adef">width</span> = "<em><a href="#types-DataTypeLength">&lt;length&gt;</a></em>"</dt><dd>See <a href="#filters-FilterEffectsRegion">Filter effects
        region</a>.</dd><dt id="filters-FilterElementHeightAttribute"><span class="adef">height</span> = "<em><a href="#types-DataTypeLength">&lt;length&gt;</a></em>"</dt><dd>See <a href="#filters-FilterEffectsRegion">Filter effects
        region</a>.</dd><dt id="filters-FilterElementFilterResAttribute"><span class="adef">filterRes</span> = "<em><a href="#types-DataTypeNumberOptionalNumber">&lt;number-optional-number&gt;</a></em>"</dt><dd>See <a href="#filters-FilterEffectsRegion">Filter effects
        region</a>.</dd><dt id="filters-FilterElementHrefAttribute"><span class="adef">xlink:href</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span>"</dt><dd>An <a href="#linking-IRIReference">IRI
        reference</a> to another <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element within the
        current SVG document fragment. Any attributes which are
        defined on the referenced <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element which are not
        defined on this element are inherited by this element. If
        this element has no defined filter nodes, and the
        referenced element has defined filter nodes (possibly due
        to its own <a href="#filters-FilterElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> attribute),
        then this element inherits the filter nodes defined from
        the referenced <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>
        element. Inheritance can be indirect to an arbitrary level;
        thus, if the referenced <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element inherits
        attributes or its filter node specification due to its own
        <a href="#filters-FilterElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> attribute, then the
        current element can inherit those attributes or filter node
        specifications.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>
    <p><a href="#styling-SVGStylingProperties">Properties</a>
    inherit into the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>
    element from its ancestors; properties do <em>not</em> inherit
    from the element referencing the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element.</p>
    <p><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> elements are
    never rendered directly; their only usage is as something that
    can be referenced using the <a href="#filters-FilterProperty"><span class="prop-name">‘filter’</span></a> property. The <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property does not apply
    to the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element;
    thus, <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> elements are
    not directly rendered even if the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property is set to a
    value other than <span class="prop-value">none</span>, and
    <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> elements are
    available for referencing even when the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element or any of its
    ancestors is set to <span class="prop-value">none</span>.</p>

    <h2 id="filters-FilterProperty">15.4 The <span class="prop-name">‘filter’</span>
    property</h2>
    <p>The description of the <a href="#filters-FilterProperty"><span class="prop-name">‘filter’</span></a> property is as follows:</p>
    <div class="propdef">
      <dl><dt><span class="propdef-title prop-name">‘filter’</span></dt><dd>
          <table summary="filter property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td><a href="#types-DataTypeFuncIRI">&lt;funciri&gt;</a> | none | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>none</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermContainerElement">container
              elements</a> (except <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>) and <a href="#intro-TermGraphicsElement">graphics
              elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <dl><dt><span class="prop-value">&lt;funciri&gt;</span></dt><dd>An <a href="#types-DataTypeFuncIRI">Functional IRI
      reference</a> to a <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element which
      defines the filter effects that shall be applied to this
      element.</dd><dt><span class="prop-value">none</span></dt><dd>Do not apply any filter effects to this element.</dd></dl>

    <h2 id="filters-FilterEffectsRegion">15.5 Filter effects region</h2>
    <p>A <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element can define a
    region on the canvas to which a given filter effect applies and
    can provide a resolution for any intermediate continuous tone
    images used to process any raster-based filter primitives. The
    <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element has the
    following attributes which work together to define the filter
    effects region:</p>

    <dl class="definitions unemphasized-names"><dt id="filters-FilterUnitsAttribute"><a href="#filters-FilterElementFilterUnitsAttribute"><span class="attr-name">‘filterUnits’</span></a></dt><dd>
        <p>Defines the coordinate system for attributes <a href="#filters-FilterElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterElementYAttribute"><span class="attr-name">‘y’</span></a>,
        <a href="#filters-FilterElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#filters-FilterElementHeightAttribute"><span class="attr-name">‘height’</span></a>.</p>

        <p>If <span class="attr-value">filterUnits="userSpaceOnUse"</span>,
        <a href="#filters-FilterElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#filters-FilterElementHeightAttribute"><span class="attr-name">‘height’</span></a> represent
        values in the current user coordinate system in place at the time
        when the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> is referenced (i.e., the user
        coordinate system for the element referencing the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>
        via a <a href="#filters-FilterProperty"><span class="prop-name">‘filter’</span></a> property).</p>

        <p>If <span class="attr-value">filterUnits="objectBoundingBox"</span>,
        then <a href="#filters-FilterElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#filters-FilterElementHeightAttribute"><span class="attr-name">‘height’</span></a>
        represent fractions or percentages of the bounding box on the referencing
        element (see <a href="#coords-ObjectBoundingBox">Object bounding box units</a>).</p>
        
        <p>If attribute <a href="#filters-FilterElementFilterUnitsAttribute"><span class="attr-name">‘filterUnits’</span></a> is not specified, then the effect
        is if a value of <span class="attr-value">'objectBoundingBox'</span>
        were specified.</p>

        <p><span class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes.</span></p>
      </dd><dt id="filters-FilterRegionXYWidthHeightAttributes"><a href="#filters-FilterElementXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterElementYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#filters-FilterElementHeightAttribute"><span class="attr-name">‘height’</span></a></dt><dd>
        <p>These attributes define a rectangular region on the canvas to
        which this filter applies.</p>

        <p>The amount of memory and processing time required to apply
        the filter are related to the size of this rectangle and the
        <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a> attribute of the filter.</p>

        <p>The coordinate system for these attributes depends on the
        value for attribute <a href="#filters-FilterElementFilterUnitsAttribute"><span class="attr-name">‘filterUnits’</span></a>.</p>

        <p>Negative values for <a href="#filters-FilterElementWidthAttribute"><span class="attr-name">‘width’</span></a> or <a href="#filters-FilterElementHeightAttribute"><span class="attr-name">‘height’</span></a> are an error
        (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        Zero values disable rendering of the element which referenced
        the filter.</p>

        <p>The bounds of this rectangle act as a hard clipping region for each
        <a href="#filters-FilterPrimitivesOverview">filter primitive</a>
        included with a given <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element; thus, if
        the effect of a given filter primitive would extend beyond
        the bounds of the rectangle (this sometimes happens when
        using a <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a> filter
        primitive with a very large <a href="#filters-feGaussianBlurStdDeviationAttribute"><span class="attr-name">‘stdDeviation’</span></a>),
        parts of the effect will get clipped.</p>

        <p>If <a href="#filters-FilterElementXAttribute"><span class="attr-name">‘x’</span></a> or <a href="#filters-FilterElementYAttribute"><span class="attr-name">‘y’</span></a> is not specified, the effect is as if a
        value of <span class="attr-value">-10%</span> were specified.</p>

        <p>If <a href="#filters-FilterElementWidthAttribute"><span class="attr-name">‘width’</span></a> or <a href="#filters-FilterElementHeightAttribute"><span class="attr-name">‘height’</span></a> is not specified, the effect is as if a
        value of <span class="attr-value">120%</span> were specified.</p>

        <p><span class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes.</span></p>
      </dd><dt><a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a></dt><dd>
        <p>This attribute takes the form <code>x-pixels [y-pixels]</code>,
        and indicates the width and height of the intermediate images in
        pixels. If not provided, then the user agent will use reasonable values 
        to produce a high-quality result on the output device.
        </p>

        <p>Care should be taken when assigning a non-default value to
        this attribute. Too small of a value may result in unwanted
        pixelation in the result. Too large of a value may result in
        slow processing and large memory usage.</p>

        <p>Negative values are an error (see
        <a href="#implnote-ErrorProcessing">Error processing</a>).
        Zero values disable rendering of the element which referenced
        the filter.</p>
        
        <p>Non-integer values are truncated, i.e rounded to the closest integer value towards zero.</p>

        <p><span class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes.</span></p>
      </dd></dl>

    <p>Note that both of the two possible value for <a href="#filters-FilterElementFilterUnitsAttribute"><span class="attr-name">‘filterUnits’</span></a>
    (i.e., <span class="attr-value">'objectBoundingBox'</span> and
    <span class="attr-value">'userSpaceOnUse'</span>) result in a filter
    region whose coordinate system has its X-axis and Y-axis each
    parallel to the X-axis and Y-axis, respectively, of the user
    coordinate system for the element to which the filter will be
    applied.</p>
    <p>Sometimes implementers can achieve faster performance when
    the <a href="#filters-FilterEffectsRegion"><span class="svg-term">filter region</span></a> can be mapped directly to device pixels;
    thus, for best performance on display devices, it is suggested
    that authors define their region such that SVG user agent can
    align the <a href="#filters-FilterEffectsRegion"><span class="svg-term">filter region</span></a> pixel-for-pixel with the background. In
    particular, for best filter effects performance, avoid rotating
    or skewing the user coordinate system. Explicit values for
    attribute <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a> can either
    help or harm performance. If <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a> is smaller than the
    automatic (i.e., default) filter resolution, then filter effect
    might have faster performance (usually at the expense of
    quality). If <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a> is larger
    than the automatic (i.e., default) filter resolution, then
    filter effects performance will usually be slower.</p>
    <p>It is often necessary to provide padding space because the
    filter effect might impact bits slightly outside the
    tight-fitting bounding box on a given object. For these
    purposes, it is possible to provide negative percentage values
    for <a href="#filters-FilterElementXAttribute"><span class="attr-name">‘x’</span></a> and <a href="#filters-FilterElementYAttribute"><span class="attr-name">‘y’</span></a>, and percentages values greater than
    100% for <a href="#filters-FilterElementWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#filters-FilterElementHeightAttribute"><span class="attr-name">‘height’</span></a>. This, for example, is
    why the defaults for the filter effects region are <span class="attr-value">x="-10%"
    y="-10%" width="120%" height="120%"</span>.</p>



    <h2 id="filters-AccessingBackgroundImage">15.6 Accessing the background image</h2>
    <p>Two possible pseudo input images for filter effects are <a href="#filters-BackgroundImage">BackgroundImage</a> and <a href="#filters-BackgroundAlpha">BackgroundAlpha</a>, which each
    represent an image snapshot of the canvas under the filter
    region at the time that the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element is invoked. <a href="#filters-BackgroundImage">BackgroundImage</a> represents both the
    color values and alpha channel of the canvas (i.e., RGBA pixel
    values), whereas <a href="#filters-BackgroundAlpha">BackgroundAlpha</a>
    represents only the alpha channel.</p>
    <p>Implementations of SVG user agents often will need to
    maintain supplemental background image buffers in order to
    support the <a href="#filters-BackgroundImage">BackgroundImage</a> and
    <a href="#filters-BackgroundAlpha">BackgroundAlpha</a> pseudo input
    images. Sometimes, the background image buffers will contain an
    in-memory copy of the accumulated painting operations on the
    current canvas.</p>
    <p>Because in-memory image buffers can take up significant
    system resources, SVG content must explicitly indicate to the
    SVG user agent that the document needs access to the background
    image before <a href="#filters-BackgroundImage">BackgroundImage</a> and
    <a href="#filters-BackgroundAlpha">BackgroundAlpha</a> pseudo input
    images can be used. The property which enables access to the
    background image is <a href="#filters-EnableBackgroundProperty"><span class="prop-name">‘enable-background’</span></a>, defined below:</p>

    <div class="propdef">
      <dl><dt id="filters-EnableBackgroundProperty"><span class="propdef-title prop-name">‘enable-background’</span></dt><dd>
          <table summary="enable-background property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>accumulate | new [ &lt;x&gt; &lt;y&gt;
              &lt;width&gt; &lt;height&gt; ] | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>accumulate</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#intro-TermContainerElement">container
              elements</a></td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>no</td></tr></table>
        </dd></dl>
    </div>
    <p><a href="#filters-EnableBackgroundProperty"><span class="prop-name">‘enable-background’</span></a> is only
    applicable to <a href="#intro-TermContainerElement">container elements</a>
    and specifies how the SVG user agents manages the accumulation
    of the background image.</p>
    <p>A value of <span class="prop-value">new</span> indicates two things:</p>
    <ul><li>It enables the ability of children of the current <a href="#intro-TermContainerElement">container element</a>
      to access the background image.</li><li>It indicates that a new (i.e., initially transparent
      black) background image canvas is established and that (in
      effect) all children of the current <a href="#intro-TermContainerElement">container element</a>
      shall be rendered into the new background image canvas in
      addition to being rendered onto the target device.</li></ul>
    <p>A meaning of <span class="prop-value">enable-background: accumulate</span>
    (the initial/default value) depends on context:</p>
    <ul><li>If an ancestor <a href="#intro-TermContainerElement">container element</a>
      has a property value of <span class="prop-value">enable-background: new</span>, then all <a href="#intro-TermGraphicsElement">graphics elements</a>
      within the current <a href="#intro-TermContainerElement">container element</a>
      are rendered both onto the parent <a href="#intro-TermContainerElement">container
      element</a>'s background image canvas and onto the target
      device.</li><li>Otherwise, there is no current background image canvas,
      so it is only necessary to render <a href="#intro-TermGraphicsElement">graphics elements</a>
      onto the target device. (No need to render to the background
      image canvas.)</li></ul>
    <p>If a filter effect specifies either the <a href="#filters-BackgroundImage">BackgroundImage</a> or the <a href="#filters-BackgroundAlpha">BackgroundAlpha</a> pseudo input images
    and no ancestor <a href="#intro-TermContainerElement">container element</a>
    has a property value of <span class="prop-value">enable-background: new</span>, then the
    background image request is technically in error. Processing
    will proceed without interruption (i.e., no error message) and
    a transparent black image shall be provided in response to the
    request.</p>
    <p>The optional
    <span class="prop-value">&lt;x&gt;,&lt;y&gt;,&lt;width&gt;,&lt;height&gt;</span>
    parameters on the <span class="prop-value">new</span> value are
    <a href="#types-DataTypeNumber">&lt;number&gt;</a> values that indicate the
    subregion of the <a href="#intro-TermContainerElement">container element</a>'s
    <a href="#intro-TermUserSpace">user space</a> where access
    to the background image is allowed to happen. These parameters
    enable the SVG user agent potentially to allocate smaller
    temporary image buffers than the default values. Thus, the values
    <span class="prop-value">&lt;x&gt;,&lt;y&gt;,&lt;width&gt;,&lt;height&gt;</span> act as a
    clipping rectangle on the background image canvas. Negative
    values for <span class="prop-value">&lt;width&gt;</span> or <span class="prop-value">&lt;height&gt;</span> are an error (see <a href="#implnote-ErrorProcessing">Error processing</a>). If
    more than zero but less than four of the values
    <span class="prop-value">&lt;x&gt;,&lt;y&gt;,&lt;width&gt;</span> and <span class="prop-value">&lt;height&gt;</span> are
    specified or if zero values are specified for <span class="prop-value">&lt;width&gt;</span> or
    <span class="prop-value">&lt;height&gt;</span>, <a href="#filters-BackgroundImage">BackgroundImage</a>
    and <a href="#filters-BackgroundAlpha">BackgroundAlpha</a> are
    processed as if background image processing were not
    enabled.</p>
    <p>Assume you have an element E in the document and that E has
    a series of ancestors A<sub>1</sub> (its immediate parent),
    A<sub>2</sub>, etc. (Note: A<sub>0</sub> is E.) Each ancestor
    A<sub>i</sub> will have a corresponding temporary background
    image offscreen buffer BUF<sub>i</sub>. The contents of the
    <em>background image</em> available to a <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> referenced by E is
    defined as follows:</p>
    <ul><li>Find the element A<sub>i</sub> with the smallest
      subscript i (including A<sub>0</sub>=E) for which the <a href="#filters-EnableBackgroundProperty"><span class="prop-name">‘enable-background’</span></a> property has
      the value <span class="prop-value">new</span>. (Note: if
      there is no such ancestor element, then there is no
      background image available to E, in which case a transparent
      black image will be used as E's background image.)</li><li>For each A<sub>i</sub> (from i=n to 1), initialize
      BUF<sub>i</sub> to transparent black. Render all children of
      A<sub>i</sub> up to but not including A<sub>i-1</sub> into
      BUF<sub>i</sub>. The children are painted, then filtered,
      clipped, masked and composited using the various painting,
      filtering, clipping, masking and object opacity settings on
      the given child. Any filter effects, masking and group
      opacity that might be set on A<sub>i</sub> do <em>not</em>
      apply when rendering the children of A<sub>i</sub> into
      BUF<sub>i</sub>.<br />
       (Note that for the case of A<sub>0</sub>=E, the graphical
      contents of E are not rendered into BUF<sub>1</sub> and thus
      are not part of the background image available to E. Instead,
      the graphical contents of E are available via the <a href="#filters-SourceGraphic">SourceGraphic</a> and <a href="#filters-SourceAlpha">SourceAlpha</a> pseudo input
      images.)</li><li>Then, for each A<sub>i</sub> (from i=1 to n-1), composite
      BUF<sub>i</sub> into BUF<sub>i+1</sub>.</li><li>The accumulated result (i.e., BUF<sub>n</sub>) represents
      the background image available to E.</li></ul>
    <p><span class="example-ref">Example
    enable-background-01</span> illustrates the rules for
    background image processing.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="13.5cm" height="2.7cm" viewBox="0 0 1350 270"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;title&gt;Example enable-background01&lt;/title&gt;
  &lt;desc&gt;This test case shows five pictures which illustrate the rules
        for background image processing.&lt;/desc&gt;

  &lt;defs&gt;
    &lt;filter id="ShiftBGAndBlur" 
            filterUnits="userSpaceOnUse" x="0" y="0" width="1200" height="400"&gt;
      &lt;desc&gt;
        This filter discards the SourceGraphic, if any, and just produces
        a result consisting of the BackgroundImage shifted down 125 units
        and then blurred.
      &lt;/desc&gt;
      &lt;feOffset in="BackgroundImage" dx="0" dy="125" /&gt;
      &lt;feGaussianBlur stdDeviation="8" /&gt;
    &lt;/filter&gt;
    &lt;filter id="ShiftBGAndBlur_WithSourceGraphic" 
            filterUnits="userSpaceOnUse" x="0" y="0" width="1200" height="400"&gt;
      &lt;desc&gt;
        This filter takes the BackgroundImage, shifts it down 125 units, blurs it,
        and then renders the SourceGraphic on top of the shifted/blurred background.
      &lt;/desc&gt;
      &lt;feOffset in="BackgroundImage" dx="0" dy="125" /&gt;
      &lt;feGaussianBlur stdDeviation="8" result="blur" /&gt;
      &lt;feMerge&gt;
        &lt;feMergeNode in="blur"/&gt;
        &lt;feMergeNode in="SourceGraphic"/&gt;
      &lt;/feMerge&gt;
    &lt;/filter&gt;
  &lt;/defs&gt;

  &lt;g transform="translate(0,0)"&gt;
    &lt;desc&gt;The first picture is our reference graphic without filters.&lt;/desc&gt;
    &lt;rect x="25" y="25" width="100" height="100" fill="red"/&gt;
    &lt;g opacity=".5"&gt;
      &lt;circle cx="125" cy="75" r="45" fill="green"/&gt;
      &lt;polygon points="160,25 160,125 240,75" fill="blue"/&gt;
    &lt;/g&gt;
    &lt;rect x="5" y="5" width="260" height="260" fill="none" stroke="blue"/&gt;
  &lt;/g&gt;

  &lt;g enable-background="new" transform="translate(270,0)"&gt;
    &lt;desc&gt;The second adds an empty 'g' element which invokes ShiftBGAndBlur.&lt;/desc&gt;
    &lt;rect x="25" y="25" width="100" height="100" fill="red"/&gt;
    &lt;g opacity=".5"&gt;
      &lt;circle cx="125" cy="75" r="45" fill="green"/&gt;
      &lt;polygon points="160,25 160,125 240,75" fill="blue"/&gt;
    &lt;/g&gt;
    &lt;g filter="url(#ShiftBGAndBlur)"/&gt;
    &lt;rect x="5" y="5" width="260" height="260" fill="none" stroke="blue"/&gt;
  &lt;/g&gt;

  &lt;g enable-background="new" transform="translate(540,0)"&gt;
    &lt;desc&gt;The third invokes ShiftBGAndBlur on the inner group.&lt;/desc&gt;
    &lt;rect x="25" y="25" width="100" height="100" fill="red"/&gt;
    &lt;g filter="url(#ShiftBGAndBlur)" opacity=".5"&gt;
      &lt;circle cx="125" cy="75" r="45" fill="green"/&gt;
      &lt;polygon points="160,25 160,125 240,75" fill="blue"/&gt;
    &lt;/g&gt;
    &lt;rect x="5" y="5" width="260" height="260" fill="none" stroke="blue"/&gt;
  &lt;/g&gt;

  &lt;g enable-background="new" transform="translate(810,0)"&gt;
    &lt;desc&gt;The fourth invokes ShiftBGAndBlur on the triangle.&lt;/desc&gt;
    &lt;rect x="25" y="25" width="100" height="100" fill="red"/&gt;
    &lt;g opacity=".5"&gt;
      &lt;circle cx="125" cy="75" r="45" fill="green"/&gt;
      &lt;polygon points="160,25 160,125 240,75" fill="blue"
               filter="url(#ShiftBGAndBlur)"/&gt;
    &lt;/g&gt;
    &lt;rect x="5" y="5" width="260" height="260" fill="none" stroke="blue"/&gt;
  &lt;/g&gt;

  &lt;g enable-background="new" transform="translate(1080,0)"&gt;
    &lt;desc&gt;The fifth invokes ShiftBGAndBlur_WithSourceGraphic on the triangle.&lt;/desc&gt;
    &lt;rect x="25" y="25" width="100" height="100" fill="red"/&gt;
    &lt;g opacity=".5"&gt;
      &lt;circle cx="125" cy="75" r="45" fill="green"/&gt;
      &lt;polygon points="160,25 160,125 240,75" fill="blue"
               filter="url(#ShiftBGAndBlur_WithSourceGraphic)"/&gt;
    &lt;/g&gt;
    &lt;rect x="5" y="5" width="260" height="260" fill="none" stroke="blue"/&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example enable-background-01</caption><tr><td><img alt="Example enable-background-01 — illustrate the rules for background image processing" src="images/filters/enable-background-01.png" /></td></tr></table><p class="view-as-svg"><a href="images/filters/enable-background-01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p>The example above contains five parts, described as
    follows:</p>
    <ol><li>The first set is the reference graphic. The reference
      graphic consists of a red rectangle followed by a 50%
      transparent <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element. Inside the <a href="#struct-GElement"><span class="element-name">‘g’</span></a> is a green circle that
      partially overlaps the rectangle and a a blue triangle that
      partially overlaps the circle. The three objects are then
      outlined by a rectangle stroked with a thin blue line. No
      filters are applied to the reference graphic.</li><li>The second set enables background image processing and
      adds an empty <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element which invokes the
      ShiftBGAndBlur filter. This filter takes the current
      accumulated background image (i.e., the entire reference
      graphic) as input, shifts its offscreen down, blurs it, and
      then writes the result to the canvas. Note that the offscreen
      for the filter is initialized to transparent black, which
      allows the already rendered rectangle, circle and triangle to
      show through after the filter renders its own result to the
      canvas.</li><li>The third set enables background image processing and
      instead invokes the ShiftBGAndBlur filter on the inner <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element. The accumulated
      background at the time the filter is applied contains only
      the red rectangle. Because the children of the inner <a href="#struct-GElement"><span class="element-name">‘g’</span></a> (i.e., the circle and
      triangle) are not part of the inner <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element's background and
      because ShiftBGAndBlur ignores SourceGraphic, the children of
      the inner <a href="#struct-GElement"><span class="element-name">‘g’</span></a> do not appear in the
      result.</li><li>The fourth set enables background image processing and
      invokes the ShiftBGAndBlur on the <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a> element that draws
      the triangle. The accumulated background at the time the
      filter is applied contains the red rectangle plus the green
      circle ignoring the effect of the <a href="#masking-OpacityProperty"><span class="prop-name">‘opacity’</span></a> property on the inner
      <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element. (Note that the
      blurred green circle at the bottom does not let the red
      rectangle show through on its left side. This is due to
      ignoring the effect of the <a href="#masking-OpacityProperty"><span class="prop-name">‘opacity’</span></a> property.) Because the
      triangle itself is not part of the accumulated background and
      because ShiftBGAndBlur ignores SourceGraphic, the triangle
      does not appear in the result.</li><li>The fifth set is the same as the fourth except that
      filter ShiftBGAndBlur_WithSourceGraphic is invoked instead of
      ShiftBGAndBlur. ShiftBGAndBlur_WithSourceGraphic performs the
      same effect as ShiftBGAndBlur, but then renders the
      SourceGraphic on top of the shifted, blurred background
      image. In this case, SourceGraphic is the blue triangle;
      thus, the result is the same as in the fourth case except
      that the blue triangle now appears.</li></ol>

    <h2 id="filters-FilterPrimitivesOverview">15.7 Filter primitives overview</h2>

    <h3 id="filters-FilterPrimitivesOverviewIntro">15.7.1 Overview</h3>

    <p>This section describes the various filter primtives that can
    be assembled to achieve a particular filter effect.</p>
    <p>Unless otherwise stated, all image filters operate on
    premultiplied RGBA samples. Filters which work more naturally
    on non-premultiplied data (feColorMatrix and
    feComponentTransfer) will temporarily undo and redo
    premultiplication as specified. All raster effect filtering
    operations take 1 to N input RGBA images, additional attributes
    as parameters, and produce a single output RGBA image.</p>
    <p>The RGBA result from each filter primitive will be clamped
    into the allowable ranges for colors and opacity values. Thus,
    for example, the result from a given filter primitive will have
    any negative color values or opacity values adjusted up to
    color/opacity of zero.</p>
    <p>The color space in which a particular filter primitive
    performs its operations is determined by the value of property
    <a href="#painting-ColorInterpolationFiltersProperty"><span class="prop-name">‘color-interpolation-filters’</span></a> on
    the given filter primitive. A different property, <a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> determines
    the color space for other color operations. Because these two
    properties have different initial values (<a href="#painting-ColorInterpolationFiltersProperty"><span class="prop-name">‘color-interpolation-filters’</span></a> has
    an initial value of <span class="prop-value">linearRGB</span>
    whereas <a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> has an
    initial value of <span class="prop-value">sRGB</span>), in some
    cases to achieve certain results (e.g., when coordinating
    gradient interpolation with a filtering operation) it will be
    necessary to explicitly set <a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> to <span class="prop-value">linearRGB</span> or <a href="#painting-ColorInterpolationFiltersProperty"><span class="prop-name">‘color-interpolation-filters’</span></a> to
    <span class="prop-value">sRGB</span> on particular elements.
    Note that the examples below do not explicitly set either <a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> or <a href="#painting-ColorInterpolationFiltersProperty"><span class="prop-name">‘color-interpolation-filters’</span></a>, so
    the initial values for these properties apply to the
    examples.</p>

<h3 id="filters-CommonAttributes">15.7.2 Common attributes</h3>

<p>With the exception of the <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> attribute, all of the following
attributes are available on all filter primitive elements:</p>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-FilterPrimitiveXAttribute"><span class="adef">x</span> = "<em><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></em>"</dt><dd>The minimum x coordinate for the subregion which
        restricts calculation and rendering of the given filter
        primitive. See <a href="#filters-FilterPrimitiveSubRegion">filter
        primitive subregion</a>.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-FilterPrimitiveYAttribute"><span class="adef">y</span> = "<em><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></em>"</dt><dd>The minimum y coordinate for the subregion which
        restricts calculation and rendering of the given filter
        primitive. See <a href="#filters-FilterPrimitiveSubRegion">filter
        primitive subregion</a>.<br /><span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-FilterPrimitiveWidthAttribute"><span class="adef">width</span> = "<em><a href="#types-DataTypeLength">&lt;length&gt;</a></em>"</dt><dd>The width of the subregion which restricts calculation
        and rendering of the given filter primitive. See <a href="#filters-FilterPrimitiveSubRegion">filter
        primitive subregion</a>.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables the effect of the given filter
        primitive (i.e., the result is a transparent black
        image).<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-FilterPrimitiveHeightAttribute"><span class="adef">height</span> = "<em><a href="#types-DataTypeLength">&lt;length&gt;</a></em>"</dt><dd>The height of the subregion which restricts calculation
        and rendering of the given filter primitive. See <a href="#filters-FilterPrimitiveSubRegion">filter
        primitive subregion</a>.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables the effect of the given filter
        primitive (i.e., the result is a transparent black
        image).<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-FilterPrimitiveResultAttribute"><span class="adef">result</span> =
        "<em>&lt;filter-primitive-reference&gt;</em>"</dt><dd>Assigned name for this filter primitive. If supplied,
        then graphics that result from processing this filter
        primitive can be referenced by an <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> attribute on a subsequent
        filter primitive within the same <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element. If no
        value is provided, the output will only be available for
        re-use as the implicit input into the next filter primitive
        if that filter primitive provides no value for its <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> attribute.<br />
         Note that a <em>&lt;filter-primitive-reference&gt;</em> is
        not an XML ID; instead, a
        <em>&lt;filter-primitive-reference&gt;</em> is only
        meaningful within a given <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element and thus
        have only local scope. It is legal for the same
        <em>&lt;filter-primitive-reference&gt;</em> to appear
        multiple times within the same <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element. When
        referenced, the <em>&lt;filter-primitive-reference&gt;</em>
        will use the closest preceding filter primitive with the
        given result.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-FilterPrimitiveInAttribute"><span class="adef">in</span> = "<em><a href="#filters-SourceGraphic">SourceGraphic</a> | <a href="#filters-SourceAlpha">SourceAlpha</a> | <a href="#filters-BackgroundImage">BackgroundImage</a> |
        <a href="#filters-BackgroundAlpha">BackgroundAlpha</a>
        | <a href="#filters-FillPaint">FillPaint</a> | <a href="#filters-StrokePaint">StrokePaint</a> |
        &lt;filter-primitive-reference&gt;</em>"</dt><dd>
          Identifies input for the given filter primitive. The
          value can be either one of six keywords or can be a
          string which matches a previous <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a> attribute value
          within the same <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element. If no
          value is provided and this is the first filter primitive,
          then this filter primitive will use <a href="#filters-SourceGraphic"><span class="attr-value">SourceGraphic</span></a> as its input.
          If no value is provided and this is a subsequent filter
          primitive, then this filter primitive will use the result
          from the previous filter primitive as its input.<br />
          <br />
          If the value for <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a>
          appears multiple times within a given <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element, then a
          reference to that result will use the closest preceding
          filter primitive with the given value for attribute <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a>. Forward references to
          results are <a href="#implnote-ErrorProcessing">an
          error</a>.<br />
          <br />
           Definitions for the six keywords: 
          <dl><dt id="filters-SourceGraphic"><span class="attr-value">SourceGraphic</span></dt><dd>This keyword represents the <a href="#intro-TermGraphicsElement">graphics
            elements</a> that were the original input into the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element. For
            raster effects filter primitives, the <a href="#intro-TermGraphicsElement">graphics
            elements</a> will be rasterized into an initially clear
            RGBA raster in image space. Pixels left untouched by
            the original graphic will be left clear. The image is
            specified to be rendered in linear RGBA pixels. The
            alpha channel of this image captures any anti-aliasing
            specified by SVG. (Since the raster is linear, the
            alpha channel of this image will represent the exact
            percent coverage of each pixel.)</dd><dt id="filters-SourceAlpha"><span class="attr-value">SourceAlpha</span></dt><dd>This keyword represents the <a href="#intro-TermGraphicsElement">graphics
            elements</a> that were the original input into the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element. <span class="attr-value">SourceAlpha</span> has all of the
            same rules as <a href="#filters-SourceGraphic"><span class="attr-value">SourceGraphic</span></a> except that
            only the alpha channel is used. The input image is an
            RGBA image consisting of implicitly black color values
            for the RGB channels, but whose alpha channel is the
            same as <a href="#filters-SourceGraphic"><span class="attr-value">SourceGraphic</span></a>. If this
            option is used, then some implementations might need to
            rasterize the <a href="#intro-TermGraphicsElement">graphics
            elements</a> in order to extract the alpha
            channel.</dd><dt id="filters-BackgroundImage"><span class="attr-value">BackgroundImage</span></dt><dd>This keyword represents an image snapshot of the
            canvas under the <a href="#filters-FilterEffectsRegion"><span class="svg-term">filter region</span></a> at the time that the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element was
            invoked. See <a href="#filters-AccessingBackgroundImage">Accessing the
            background image</a>.</dd><dt id="filters-BackgroundAlpha"><span class="attr-value">BackgroundAlpha</span></dt><dd>Same as <a href="#filters-BackgroundImage">BackgroundImage</a> except only
            the alpha channel is used. See <a href="#filters-SourceAlpha"><span class="attr-value">SourceAlpha</span></a> and <a href="#filters-AccessingBackgroundImage">Accessing the
            background image</a>.</dd><dt id="filters-FillPaint"><span class="attr-value">FillPaint</span></dt><dd>This keyword represents the value of the <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> property on the
            target element for the filter effect. The FillPaint
            image has conceptually infinite extent. Frequently this
            image is opaque everywhere, but it might not be if the
            "paint" itself has alpha, as in the case of a gradient
            or pattern which itself includes transparent or
            semi-transparent parts.</dd><dt id="filters-StrokePaint"><span class="attr-value">StrokePaint</span></dt><dd>This keyword represents the value of the <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> property on the
            target element for the filter effect. The StrokePaint
            image has conceptually infinite extent. Frequently this
            image is opaque everywhere, but it might not be if the
            "paint" itself has alpha, as in the case of a gradient
            or pattern which itself includes transparent or
            semi-transparent parts.</dd></dl>
          <p>The <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> attribute is available on all filter
          primitive elements that require an input.</p>
          <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
          yes.</span>
        </dd></dl>
    </div>

    <h3 id="filters-FilterPrimitiveSubRegion">15.7.3 Filter primitive subregion</h3>



    <p>All filter primitives have attributes <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>,
    <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a> and
    <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a> which identify a subregion which
    restricts calculation and rendering of the given filter
    primitive. These attributes are defined according to the same
    rules as other filter primitives' coordinate and length
    attributes and thus represent values in the coordinate system
    established by attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element.</p>
    <p><a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a> default to
    the union (i.e., tightest fitting bounding box) of the
    subregions defined for all referenced nodes. If there are no
    referenced nodes (e.g., for <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a> or <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a>), or one or more
    of the referenced nodes is a standard input (one of <a href="#filters-SourceGraphic"><span class="attr-value">SourceGraphic</span></a>, <a href="#filters-SourceAlpha"><span class="attr-value">SourceAlpha</span></a>, <a href="#filters-BackgroundImage"><span class="attr-value">BackgroundImage</span></a>, <a href="#filters-BackgroundAlpha"><span class="attr-value">BackgroundAlpha</span></a>, <a href="#filters-FillPaint"><span class="attr-value">FillPaint</span></a> or <a href="#filters-StrokePaint"><span class="attr-value">StrokePaint</span></a>), or for <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a> (which is special
    because its principal function is to replicate the referenced
    node in X and Y and thereby produce a usually larger result),
    the default subregion is <span class="attr-value">0%</span>,<span class="attr-value">0%</span>,<span class="attr-value">100%</span>,<span class="attr-value">100%</span>, 
    where as a special-case the percentages are relative to the dimensions of the <a href="#filters-FilterEffectsRegion"><span class="svg-term">filter region</span></a>, thus making the 
    the default <a href="#filters-FilterPrimitiveSubRegion"><span class="svg-term">filter primitive subregion</span></a> equal to the <a href="#filters-FilterEffectsRegion"><span class="svg-term">filter region</span></a>.</p>
    <p><a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>,
    <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a> act as a
    hard clip clipping rectangle on both the filter primitive's input image(s) and the filter primitive result.</p>
    <p>All intermediate offscreens are defined to not exceed the
    intersection of <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>,
    <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a> with the <a href="#filters-FilterEffectsRegion"><span class="svg-term">filter region</span></a>. The
    <a href="#filters-FilterEffectsRegion"><span class="svg-term">filter region</span></a> and any of the <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>,
    <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a> and
    <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a> subregions are to be set up such that
    all offscreens are made big enough to accommodate any pixels
    which even partly intersect with either the <a href="#filters-FilterEffectsRegion"><span class="svg-term">filter region</span></a> or
    the x,y,width,height subregions.</p>
    <p><a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a> references a previous
    filter primitive and then stitches the tiles together based on
    the <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>,
    <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a> values of
    the referenced filter primitive in order to fill its own 
    <a href="#filters-FilterPrimitiveSubRegion"><span class="svg-term">filter primitive subregion</span></a>.</p>



<p><span class="example-ref">Example primitive-subregion-01</span> demonstrates the effect
of specifying a filter primitive subregion:</p>

<pre class="xml">&lt;svg width="400" height="400" xmlns="http://www.w3.org/2000/svg"&gt; 
  &lt;defs&gt;
    &lt;filter id="flood" x="0" y="0" width="100%" height="100%" primitiveUnits="objectBoundingBox"&gt;
       &lt;feFlood x="25%" y="25%" width="50%" height="50%"
          flood-color="green" flood-opacity="0.75"/&gt;
    &lt;/filter&gt;
    &lt;filter id="blend" primitiveUnits="objectBoundingBox"&gt;
       &lt;feBlend x="25%" y="25%" width="50%" height="50%"
          in2="SourceGraphic" mode="multiply"/&gt;
    &lt;/filter&gt;
    &lt;filter id="merge" primitiveUnits="objectBoundingBox"&gt;
       &lt;feMerge x="25%" y="25%" width="50%" height="50%"&gt;
        &lt;feMergeNode in="SourceGraphic"/&gt;
        &lt;feMergeNode in="FillPaint"/&gt;
       &lt;/feMerge&gt;
    &lt;/filter&gt;
  &lt;/defs&gt;
  
  &lt;g fill="none" stroke="blue" stroke-width="4"&gt;
     &lt;rect width="200" height="200"/&gt;
     &lt;line x2="200" y2="200"/&gt;
     &lt;line x1="200" y2="200"/&gt;
  &lt;/g&gt;
  &lt;circle fill="green" filter="url(#flood)" cx="100" cy="100" r="90"/&gt;

  &lt;g transform="translate(200 0)"&gt;
    &lt;g fill="none" stroke="blue" stroke-width="4"&gt;
       &lt;rect width="200" height="200"/&gt;
       &lt;line x2="200" y2="200"/&gt;
       &lt;line x1="200" y2="200"/&gt;
    &lt;/g&gt;
    &lt;circle fill="green" filter="url(#blend)" cx="100" cy="100" r="90"/&gt;
  &lt;/g&gt;
  
  &lt;g transform="translate(0 200)"&gt;
    &lt;g fill="none" stroke="blue" stroke-width="4"&gt;
       &lt;rect width="200" height="200"/&gt;
       &lt;line x2="200" y2="200"/&gt;
       &lt;line x1="200" y2="200"/&gt;
    &lt;/g&gt;
    &lt;circle fill="green" fill-opacity="0.5" filter="url(#merge)" cx="100" cy="100" r="90"/&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example primitive-subregion-01</caption><tr><td><img alt="Example primitive-subregion-01" src="images/filters/primitive-subregion-01.png" /></td></tr></table><p class="view-as-svg"><a href="images/filters/primitive-subregion-01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <p>
      In the example above there are three rects that each have a cross and a circle in them. 
      The circle element in each one has a different filter applied, but with the same <a href="#filters-FilterPrimitiveSubRegion"><span class="svg-term">filter primitive subregion</span></a>. 
      The filter output should be limited to the <a href="#filters-FilterPrimitiveSubRegion"><span class="svg-term">filter primitive subregion</span></a>, so you should never see the circles themselves, 
      just the rects that make up the <a href="#filters-FilterPrimitiveSubRegion"><span class="svg-term">filter primitive subregion</span></a>. 
    </p>
    <ul><li>
        The upper left rect shows an <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a> with <span class="attr-value">flood-opacity="75%"</span> so the cross should be visible through the green rect in the middle.
      </li><li>
        The lower left rect shows an <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a> that merges <span class="attr-value">SourceGraphic</span> with <span class="attr-value">FillPaint</span>. Since the circle has <span class="attr-value">fill-opacity="0.5"</span> it will also be transparent so that the cross is visible through the green rect in the middle.
      </li><li>
        The upper right rect shows an <a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a> that has <span class="attr-value">mode="multiply"</span>. Since the circle in this case isn't transparent the result is totally opaque. The rect should be dark green and the cross should not be visible through it.
      </li></ul>

    <h2 id="filters-LightSourceDefinitions">15.8 Light source elements and properties</h2>

    <h3 id="filters-LightSourceIntro">15.8.1 Introduction</h3>

    <p>The following sections define the elements that define a
    light source, <a href="#filters-feDistantLightElement"><span class="element-name">‘feDistantLight’</span></a>, <a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a> and <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a>, and property <a href="#filters-LightingColorProperty"><span class="prop-name">‘lighting-color’</span></a>, which defines
    the color of the light.</p>

<h3 id="filters-feDistantLightElement">15.8.2 Light source <span class="element-name">‘feDistantLight’</span></h3>



<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feDistantLight’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermLightSourceElement">Light source element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#filters-feDistantLightAzimuthAttribute"><span class="attr-name">‘azimuth’</span></a></li><li><a href="#filters-feDistantLightElevationAttribute"><span class="attr-name">‘elevation’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEDistantLightElement">SVGFEDistantLightElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-feDistantLightAzimuthAttribute"><span class="adef">azimuth</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>Direction angle for the light source on the XY plane (clockwise),
        in degrees from the x axis.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feDistantLightElevationAttribute"><span class="adef">elevation</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>Direction angle for the light source from the XY plane towards the z
        axis, in degrees. Note the positive Z-axis points towards the viewer of
        the content.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
      <p>
        The following diagram illustrates the angles which <a href="#filters-feDistantLightAzimuthAttribute"><span class="attr-name">‘azimuth’</span></a>
        and <a href="#filters-feDistantLightElevationAttribute"><span class="attr-name">‘elevation’</span></a> represent in an XYZ coordinate system.
      </p>
      <img src="images/filters/azimuth-elevation.png" alt="Angles which azimuth and elevation represent" width="480" height="360" />
    </div>



<h3 id="filters-fePointLightElement">15.8.3 Light source <span class="element-name">‘fePointLight’</span></h3>



<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘fePointLight’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermLightSourceElement">Light source element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#filters-fePointLightXAttribute"><span class="attr-name">‘x’</span></a></li><li><a href="#filters-fePointLightYAttribute"><span class="attr-name">‘y’</span></a></li><li><a href="#filters-fePointLightZAttribute"><span class="attr-name">‘z’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEPointLightElement">SVGFEPointLightElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-fePointLightXAttribute"><span class="adef">x</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>X location for the light source in the coordinate
        system established by attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-fePointLightYAttribute"><span class="adef">y</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>Y location for the light source in the coordinate
        system established by attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-fePointLightZAttribute"><span class="adef">z</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>Z location for the light source in the coordinate
        system established by attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element, assuming
        that, in the <a href="#coords-InitialCoordinateSystem">initial
        coordinate system</a>, the positive Z-axis comes out
        towards the person viewing the content and assuming that
        one unit along the Z-axis equals <a href="#coords-Units_viewport_percentage">one unit in X and Y</a>.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>



<h3 id="filters-feSpotLightElement">15.8.4 Light source <span class="element-name">‘feSpotLight’</span></h3>



<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feSpotLight’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermLightSourceElement">Light source element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#filters-feSpotLightXAttribute"><span class="attr-name">‘x’</span></a></li><li><a href="#filters-feSpotLightYAttribute"><span class="attr-name">‘y’</span></a></li><li><a href="#filters-feSpotLightZAttribute"><span class="attr-name">‘z’</span></a></li><li><a href="#filters-feSpotLightPointsAtXAttribute"><span class="attr-name">‘pointsAtX’</span></a></li><li><a href="#filters-feSpotLightPointsAtYAttribute"><span class="attr-name">‘pointsAtY’</span></a></li><li><a href="#filters-feSpotLightPointsAtZAttribute"><span class="attr-name">‘pointsAtZ’</span></a></li><li><a href="#filters-feSpotLightSpecularExponentAttribute"><span class="attr-name">‘specularExponent’</span></a></li><li><a href="#filters-feSpotLightLimitingConeAngleAttribute"><span class="attr-name">‘limitingConeAngle’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFESpotLightElement">SVGFESpotLightElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-feSpotLightXAttribute"><span class="adef">x</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>X location for the light source in the coordinate
        system established by attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feSpotLightYAttribute"><span class="adef">y</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>Y location for the light source in the coordinate
        system established by attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feSpotLightZAttribute"><span class="adef">z</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>Z location for the light source in the coordinate
        system established by attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element, assuming
        that, in the <a href="#coords-InitialCoordinateSystem">initial
        coordinate system</a>, the positive Z-axis comes out
        towards the person viewing the content and assuming that
        one unit along the Z-axis equals <a href="#coords-Units_viewport_percentage">one unit in X and Y</a>.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feSpotLightPointsAtXAttribute"><span class="adef">pointsAtX</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>X location in the coordinate system established by
        attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element of the
        point at which the light source is pointing.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feSpotLightPointsAtYAttribute"><span class="adef">pointsAtY</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>Y location in the coordinate system established by
        attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element of the
        point at which the light source is pointing.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feSpotLightPointsAtZAttribute"><span class="adef">pointsAtZ</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>Z location in the coordinate system established by
        attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element of the
        point at which the light source is pointing, assuming that, in the <a href="#coords-InitialCoordinateSystem">initial
        coordinate system</a>, the positive Z-axis comes out
        towards the person viewing the content and assuming that
        one unit along the Z-axis equals <a href="#coords-Units_viewport_percentage">one unit in X and Y</a>.
        <br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feSpotLightSpecularExponentAttribute"><span class="adef">specularExponent</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>Exponent value controlling the focus for the light
        source.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">1</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feSpotLightLimitingConeAngleAttribute"><span class="adef">limitingConeAngle</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>A limiting cone which restricts the region where the
        light is projected. No light is projected outside the cone.
        <a href="#filters-feSpotLightLimitingConeAngleAttribute"><span class="attr-name">‘limitingConeAngle’</span></a> represents
        the angle in degrees between the spot light axis (i.e. the axis
        between the light source and the point to which it is
        pointing at) and the spot light cone. User agents should
        apply a smoothing technique such as anti-aliasing at the
        boundary of the cone.<br />
         If no value is specified, then no limiting cone will be
        applied.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>



<h3 id="filters-LightingColorProperty">15.8.5 The <span class="prop-name">‘lighting-color’</span> property</h3>

    <p>The <a href="#filters-LightingColorProperty"><span class="prop-name">‘lighting-color’</span></a> property
    defines the color of the light source for filter primitives <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a> and <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>.</p>
    <div class="propdef">
      <dl><dt><span class="propdef-title prop-name">‘lighting-color’</span></dt><dd>
          <table summary="lighting-color property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>currentColor |<br />
               <a href="#types-DataTypeColor">&lt;color&gt;</a>
               [<a href="#types-DataTypeICCColor">&lt;icccolor&gt;</a>]
              |<br />
               <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>white</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>
              and <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>
              elements</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>

<h2 id="filters-feBlendElement">15.9 Filter primitive <span class="element-name">‘feBlend’</span></h2>



    <p>This filter composites two objects together using commonly
    used imaging software blending modes. It performs a pixel-wise
    combination of two input images.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feBlend’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermFilterPrimitiveElement">Filter primitive element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveAttributes">filter primitive attributes</a><span class="expanding"> — <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a></li><li><a href="#filters-feBlendIn2Attribute"><span class="attr-name">‘in2’</span></a></li><li><a href="#filters-feBlendModeAttribute"><span class="attr-name">‘mode’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEBlendElement">SVGFEBlendElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-feBlendModeAttribute"><span class="adef">mode</span> = "<em>normal | multiply | screen
        | darken | lighten</em>"</dt><dd>One of the image blending modes (see <a href="#filters-BlendingTable">table</a> below). If attribute <a href="#filters-feBlendModeAttribute"><span class="attr-name">‘mode’</span></a> is not specified, then the effect is as if a value of <span class="attr-value">normal</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feBlendIn2Attribute"><span class="adef">in2</span> = "<em>(see <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> attribute)</em>"</dt><dd>The second input image to the blending operation. This
        attribute can take on the same values as the <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> attribute.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>
    <p>For all feBlend modes, the result opacity is computed as
    follows:</p>
<pre>
qr = 1 - (1-qa)*(1-qb)
</pre>
    <p>For the compositing formulas below, the following
    definitions apply:</p>
<pre>
cr = Result color (RGB) - premultiplied 
qa = Opacity value at a given pixel for image A 
qb = Opacity value at a given pixel for image B 
ca = Color (RGB) at a given pixel for image A - premultiplied 
cb = Color (RGB) at a given pixel for image B - premultiplied 
</pre>
    <p id="filters-BlendingTable">The following
    table provides the list of available image blending modes:</p>
    <table summary="blending modes" width="500" border="1"><tr><td width="33%">Image Blending Mode</td><td width="67%">Formula for computing result color</td></tr><tr><td width="33%">normal</td><td width="67%">cr = (1 - qa) * cb + ca</td></tr><tr><td width="33%">multiply</td><td width="67%">cr = (1-qa)*cb + (1-qb)*ca + ca*cb</td></tr><tr><td width="33%">screen</td><td width="67%">cr = cb + ca - ca * cb</td></tr><tr><td width="33%">darken</td><td width="67%">cr = Min ((1 - qa) * cb + ca, (1 - qb) * ca
        + cb)</td></tr><tr><td width="33%">lighten</td><td width="67%">cr = Max ((1 - qa) * cb + ca, (1 - qb) * ca
        + cb)</td></tr></table>
    <p><span class="attr-value">'normal'</span> blend mode is
    equivalent to <a href="#filters-feCompositeOperatorAttribute"><span class="attr-value">operator="over"</span></a> on the <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a> filter primitive,
    matches the blending method used by <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a> and matches the <a href="#masking-SimpleAlphaBlending">simple alpha
    compositing</a> technique used in SVG for all compositing
    outside of filter effects.</p>
    <p><span class="example-ref">Example feBlend</span> shows
    examples of the five blend modes.</p>

<pre class="xml">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
          "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="5cm" height="5cm" viewBox="0 0 500 500"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;title&gt;Example feBlend - Examples of feBlend modes&lt;/title&gt;
  &lt;desc&gt;Five text strings blended into a gradient,
        with one text string for each of the five feBlend modes.&lt;/desc&gt;
  &lt;defs&gt;
    &lt;linearGradient id="MyGradient" gradientUnits="userSpaceOnUse"
            x1="100" y1="0" x2="300" y2="0"&gt;
      &lt;stop offset="0" stop-color="#000000" /&gt;
      &lt;stop offset=".33" stop-color="#ffffff" /&gt;
      &lt;stop offset=".67" stop-color="#ff0000" /&gt;
      &lt;stop offset="1" stop-color="#808080" /&gt;
    &lt;/linearGradient&gt;
    &lt;filter id="Normal"&gt;
      &lt;feBlend mode="normal" in2="BackgroundImage" in="SourceGraphic"/&gt;
    &lt;/filter&gt;
    &lt;filter id="Multiply"&gt;
      &lt;feBlend mode="multiply" in2="BackgroundImage" in="SourceGraphic"/&gt;
    &lt;/filter&gt;
    &lt;filter id="Screen"&gt;
      &lt;feBlend mode="screen" in2="BackgroundImage" in="SourceGraphic"/&gt;
    &lt;/filter&gt;
    &lt;filter id="Darken"&gt;
      &lt;feBlend mode="darken" in2="BackgroundImage" in="SourceGraphic"/&gt;
    &lt;/filter&gt;
    &lt;filter id="Lighten"&gt;
      &lt;feBlend mode="lighten" in2="BackgroundImage" in="SourceGraphic"/&gt;
    &lt;/filter&gt;
  &lt;/defs&gt;
  &lt;rect fill="none" stroke="blue"  
        x="1" y="1" width="498" height="498"/&gt;
  &lt;g enable-background="new" &gt;
    &lt;rect x="100" y="20" width="300" height="460" fill="url(#MyGradient)" /&gt;
    &lt;g font-family="Verdana" font-size="75" fill="#888888" fill-opacity=".6" &gt;
      &lt;text x="50" y="90" filter="url(#Normal)" &gt;Normal&lt;/text&gt;
      &lt;text x="50" y="180" filter="url(#Multiply)" &gt;Multiply&lt;/text&gt;
      &lt;text x="50" y="270" filter="url(#Screen)" &gt;Screen&lt;/text&gt;
      &lt;text x="50" y="360" filter="url(#Darken)" &gt;Darken&lt;/text&gt;
      &lt;text x="50" y="450" filter="url(#Lighten)" &gt;Lighten&lt;/text&gt;
    &lt;/g&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example feBlend</caption><tr><td><img alt="Example feBlend — Examples of feBlend modes" src="images/filters/feBlend.png" /></td></tr></table><p class="view-as-svg"><a href="images/filters/feBlend.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h2 id="filters-feColorMatrixElement">15.10 Filter primitive <span class="element-name">‘feColorMatrix’</span></h2>



    <p>This filter applies a matrix transformation:</p>
<pre>
| R' |     | a00 a01 a02 a03 a04 |   | R |
| G' |     | a10 a11 a12 a13 a14 |   | G |
| B' |  =  | a20 a21 a22 a23 a24 | * | B |
| A' |     | a30 a31 a32 a33 a34 |   | A |
| 1  |     |  0   0   0   0   1  |   | 1 |
</pre>
    <p>on the RGBA color and alpha values of every pixel on the
    input graphics to produce a result with a new set of RGBA color
    and alpha values.</p>
    <p>The calculations are performed on non-premultiplied color
    values. If the input graphics consists of premultiplied color
    values, those values are automatically converted into
    non-premultiplied color values for this operation.</p>
    <p>These matrices often perform an identity mapping in the
    alpha channel. If that is the case, an implementation can avoid
    the costly undoing and redoing of the premultiplication for all
    pixels with A = 1.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feColorMatrix’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermFilterPrimitiveElement">Filter primitive element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveAttributes">filter primitive attributes</a><span class="expanding"> — <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a></li><li><a href="#filters-feColorMatrixTypeAttribute"><span class="attr-name">‘type’</span></a></li><li><a href="#filters-feColorMatrixValuesAttribute"><span class="attr-name">‘values’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEColorMatrixElement">SVGFEColorMatrixElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-feColorMatrixTypeAttribute"><span class="adef">type</span> = "<em>matrix | saturate |
        hueRotate | luminanceToAlpha</em>"</dt><dd>Indicates the type of matrix operation. The keyword
        <span class="attr-value">'matrix'</span> indicates that a full
        5x4 matrix of values will be provided. The other keywords
        represent convenience shortcuts to allow commonly used
        color operations to be performed without specifying a
        complete matrix. If attribute <a href="#filters-feColorMatrixTypeAttribute"><span class="attr-name">‘type’</span></a> is not specified, then the effect is as if a value of <span class="attr-value">matrix</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feColorMatrixValuesAttribute"><span class="adef">values</span> = "<em>list of <a href="#types-DataTypeNumber">&lt;number&gt;</a>s</em>"</dt><dd>
          The contents of <a href="#filters-feColorMatrixValuesAttribute"><span class="attr-name">‘values’</span></a>
          depends on the value of attribute <a href="#filters-feColorMatrixTypeAttribute"><span class="attr-name">‘type’</span></a>: 
          <ul><li>
              For <span class="attr-value">type="matrix"</span>,
              <a href="#filters-feColorMatrixValuesAttribute"><span class="attr-name">‘values’</span></a> is a list of 20
              matrix values (a00 a01 a02 a03 a04 a10 a11 ... a34),
              separated by whitespace and/or a comma. For example,
              the identity matrix could be expressed as: 
<pre>
type="matrix" 
values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0"
</pre>
            </li><li>
              For <span class="attr-value">type="saturate"</span>,
              <a href="#filters-feColorMatrixValuesAttribute"><span class="attr-name">‘values’</span></a> is a single
              real number value (0 to 1). A <span class="attr-value">saturate</span> operation is
              equivalent to the following matrix operation: 
<pre>
| R' |     |0.213+0.787s  0.715-0.715s  0.072-0.072s 0  0 |   | R |
| G' |     |0.213-0.213s  0.715+0.285s  0.072-0.072s 0  0 |   | G |
| B' |  =  |0.213-0.213s  0.715-0.715s  0.072+0.928s 0  0 | * | B |
| A' |     |           0            0             0  1  0 |   | A |
| 1  |     |           0            0             0  0  1 |   | 1 |
</pre>
            </li><li>
              For <span class="attr-value">type="hueRotate"</span>,
              <a href="#filters-feColorMatrixValuesAttribute"><span class="attr-name">‘values’</span></a> is a single one
              real number value (degrees). A <span class="attr-value">hueRotate</span> operation is
              equivalent to the following matrix operation: 
<pre>
| R' |     | a00  a01  a02  0  0 |   | R |
| G' |     | a10  a11  a12  0  0 |   | G |
| B' |  =  | a20  a21  a22  0  0 | * | B |
| A' |     | 0    0    0    1  0 |   | A |
| 1  |     | 0    0    0    0  1 |   | 1 |
</pre>
              where the terms a00, a01, etc. are calculated as
              follows: 
<pre>
| a00 a01 a02 |    [+0.213 +0.715 +0.072]
| a10 a11 a12 | =  [+0.213 +0.715 +0.072] +
| a20 a21 a22 |    [+0.213 +0.715 +0.072]
                        [+0.787 -0.715 -0.072]
cos(hueRotate value) *  [-0.213 +0.285 -0.072] +
                        [-0.213 -0.715 +0.928]
                        [-0.213 -0.715+0.928]
sin(hueRotate value) *  [+0.143 +0.140-0.283]
                        [-0.787 +0.715+0.072]
</pre>
              Thus, the upper left term of the hue matrix turns out
              to be: 
<pre>
.213 + cos(hueRotate value)*.787 - sin(hueRotate value)*.213
</pre>
            </li><li>
              For <span class="attr-value">type="luminanceToAlpha"</span>,
              <a href="#filters-feColorMatrixValuesAttribute"><span class="attr-name">‘values’</span></a> is not
              applicable. A <span class="attr-value">luminanceToAlpha</span> operation
              is equivalent to the following matrix operation: 
<pre>
   | R' |     |      0        0        0  0  0 |   | R |
   | G' |     |      0        0        0  0  0 |   | G |
   | B' |  =  |      0        0        0  0  0 | * | B |
   | A' |     | 0.2125   0.7154   0.0721  0  0 |   | A |
   | 1  |     |      0        0        0  0  1 |   | 1 |
</pre>
            </li></ul>
          If the attribute is not specified, then the default
          behavior depends on the value of attribute <a href="#filters-feColorMatrixTypeAttribute"><span class="attr-name">‘type’</span></a>. If <span class="attr-value">type="matrix"</span>, then this
          attribute defaults to the identity matrix. If <span class="attr-value">type="saturate"</span>, then this
          attribute defaults to the value <span class="attr-value">1</span>, which results in the
          identity matrix. If <span class="attr-value">type="hueRotate"</span>, then this
          attribute defaults to the value <span class="attr-value">0</span>, which results in the
          identity matrix.<br />
           <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
          yes.</span>
        </dd></dl>
    </div>
    <p><span class="example-ref">Example feColorMatrix</span> shows
    examples of the four types of feColorMatrix operations.</p>

<pre class="xml">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
          "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="8cm" height="5cm" viewBox="0 0 800 500"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;title&gt;Example feColorMatrix - Examples of feColorMatrix operations&lt;/title&gt;
  &lt;desc&gt;Five text strings showing the effects of feColorMatrix: 
        an unfiltered text string acting as a reference, 
        use of the feColorMatrix matrix option to convert to grayscale,
        use of the feColorMatrix saturate option,
        use of the feColorMatrix hueRotate option,
        and use of the feColorMatrix luminanceToAlpha option.&lt;/desc&gt;
  &lt;defs&gt;
    &lt;linearGradient id="MyGradient" gradientUnits="userSpaceOnUse"
            x1="100" y1="0" x2="500" y2="0"&gt;
      &lt;stop offset="0" stop-color="#ff00ff" /&gt;
      &lt;stop offset=".33" stop-color="#88ff88" /&gt;
      &lt;stop offset=".67" stop-color="#2020ff" /&gt;
      &lt;stop offset="1" stop-color="#d00000" /&gt;
    &lt;/linearGradient&gt;
    &lt;filter id="Matrix" filterUnits="objectBoundingBox" 
            x="0%" y="0%" width="100%" height="100%"&gt;
      &lt;feColorMatrix type="matrix" in="SourceGraphic"
           values=".33 .33 .33 0 0 
                   .33 .33 .33 0 0 
                   .33 .33 .33 0 0 
                   .33 .33 .33 0 0"/&gt;
    &lt;/filter&gt;
    &lt;filter id="Saturate40" filterUnits="objectBoundingBox" 
            x="0%" y="0%" width="100%" height="100%"&gt;
      &lt;feColorMatrix type="saturate" in="SourceGraphic" values="0.4"/&gt;
    &lt;/filter&gt;
    &lt;filter id="HueRotate90" filterUnits="objectBoundingBox" 
            x="0%" y="0%" width="100%" height="100%"&gt;
      &lt;feColorMatrix type="hueRotate" in="SourceGraphic" values="90"/&gt;
    &lt;/filter&gt;
    &lt;filter id="LuminanceToAlpha" filterUnits="objectBoundingBox" 
            x="0%" y="0%" width="100%" height="100%"&gt;
      &lt;feColorMatrix type="luminanceToAlpha" in="SourceGraphic" result="a"/&gt;
      &lt;feComposite in="SourceGraphic" in2="a" operator="in" /&gt;
    &lt;/filter&gt;
  &lt;/defs&gt;
  &lt;rect fill="none" stroke="blue"  
        x="1" y="1" width="798" height="498"/&gt;
  &lt;g font-family="Verdana" font-size="75" 
            font-weight="bold" fill="url(#MyGradient)" &gt;
    &lt;rect x="100" y="0" width="500" height="20" /&gt;
    &lt;text x="100" y="90"&gt;Unfiltered&lt;/text&gt;
    &lt;text x="100" y="190" filter="url(#Matrix)" &gt;Matrix&lt;/text&gt;
    &lt;text x="100" y="290" filter="url(#Saturate40)" &gt;Saturate&lt;/text&gt;
    &lt;text x="100" y="390" filter="url(#HueRotate90)" &gt;HueRotate&lt;/text&gt;
    &lt;text x="100" y="490" filter="url(#LuminanceToAlpha)" &gt;Luminance&lt;/text&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example feColorMatrix</caption><tr><td><img alt="Example feColorMatrix — Examples of feColorMatrix operations" src="images/filters/feColorMatrix.png" /></td></tr></table><p class="view-as-svg"><a href="images/filters/feColorMatrix.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h2 id="filters-feComponentTransferElement">15.11 Filter primitive <span class="element-name">‘feComponentTransfer’</span></h2>



    <p>This filter primitive performs component-wise remapping of
    data as follows:</p>
<pre>
R' = <a href="#filters-feFuncRElement">feFuncR</a>( R )
G' = <a href="#filters-feFuncGElement">feFuncG</a>( G )
B' = <a href="#filters-feFuncBElement">feFuncB</a>( B )
A' = <a href="#filters-feFuncAElement">feFuncA</a>( A )
</pre>
    <p>for every pixel. It allows operations like brightness
    adjustment, contrast adjustment, color balance or
    thresholding.</p>
    <p>The calculations are performed on non-premultiplied color
    values. If the input graphics consists of premultiplied color
    values, those values are automatically converted into
    non-premultiplied color values for this operation. (Note that
    the undoing and redoing of the premultiplication can be avoided
    if <a href="#filters-feFuncAElement">feFuncA</a> is the
    identity transform and all alpha values on the source graphic
    are set to 1.)</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feComponentTransfer’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermFilterPrimitiveElement">Filter primitive element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a></li><li><a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a></li><li><a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a></li><li><a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveAttributes">filter primitive attributes</a><span class="expanding"> — <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEComponentTransferElement">SVGFEComponentTransferElement</a></li></ul></dd></dl></div>

<p>The child elements of a <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a> element specify the
transfer functions for the four channels:</p>

<ul id="filters-transferFuncElements"><li><a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a> — transfer function for the red component of the input graphic</li><li><a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a> — transfer function for the green component of the input graphic</li><li><a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a> — transfer function for the blue component of the input graphic</li><li><a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a> — transfer function for the alpha component of the input graphic</li></ul>

<p>The following rules apply to the processing of the <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a> element:</p>
<ul><li>If more than one <a href="#filters-transferFuncElements">transfer function element</a> of the same kind is specified, the last occurrence is to be used.</li><li>If any of the <a href="#filters-transferFuncElements">transfer function elements</a> are unspecified, the <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a> must be processed as if those <a href="#filters-transferFuncElements">transfer function elements</a> were specified with their <a href="#filters-feComponentTransferTypeAttribute"><span class="attr-name">‘type’</span></a> attributes set to <span class="attr-value">'identity'</span>.</li></ul>
	


<div id="filters-feFuncRElement">
<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feFuncR’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#filters-TransferFunctionElementAttributes">transfer function element attributes</a><span class="expanding"> — <a href="#filters-feComponentTransferTypeAttribute"><span class="attr-name">‘type’</span></a>, <a href="#filters-feComponentTransferTableValuesAttribute"><span class="attr-name">‘tableValues’</span></a>, <a href="#filters-feComponentTransferSlopeAttribute"><span class="attr-name">‘slope’</span></a>, <a href="#filters-feComponentTransferInterceptAttribute"><span class="attr-name">‘intercept’</span></a>, <a href="#filters-feComponentTransferAmplitudeAttribute"><span class="attr-name">‘amplitude’</span></a>, <a href="#filters-feComponentTransferExponentAttribute"><span class="attr-name">‘exponent’</span></a>, <a href="#filters-feComponentTransferOffsetAttribute"><span class="attr-name">‘offset’</span></a></span></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEFuncRElement">SVGFEFuncRElement</a></li></ul></dd></dl></div>
</div>

<div id="filters-feFuncGElement">
<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feFuncG’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#filters-TransferFunctionElementAttributes">transfer function element attributes</a><span class="expanding"> — <a href="#filters-feComponentTransferTypeAttribute"><span class="attr-name">‘type’</span></a>, <a href="#filters-feComponentTransferTableValuesAttribute"><span class="attr-name">‘tableValues’</span></a>, <a href="#filters-feComponentTransferSlopeAttribute"><span class="attr-name">‘slope’</span></a>, <a href="#filters-feComponentTransferInterceptAttribute"><span class="attr-name">‘intercept’</span></a>, <a href="#filters-feComponentTransferAmplitudeAttribute"><span class="attr-name">‘amplitude’</span></a>, <a href="#filters-feComponentTransferExponentAttribute"><span class="attr-name">‘exponent’</span></a>, <a href="#filters-feComponentTransferOffsetAttribute"><span class="attr-name">‘offset’</span></a></span></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEFuncGElement">SVGFEFuncGElement</a></li></ul></dd></dl></div>
</div>

<div id="filters-feFuncBElement">
<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feFuncB’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#filters-TransferFunctionElementAttributes">transfer function element attributes</a><span class="expanding"> — <a href="#filters-feComponentTransferTypeAttribute"><span class="attr-name">‘type’</span></a>, <a href="#filters-feComponentTransferTableValuesAttribute"><span class="attr-name">‘tableValues’</span></a>, <a href="#filters-feComponentTransferSlopeAttribute"><span class="attr-name">‘slope’</span></a>, <a href="#filters-feComponentTransferInterceptAttribute"><span class="attr-name">‘intercept’</span></a>, <a href="#filters-feComponentTransferAmplitudeAttribute"><span class="attr-name">‘amplitude’</span></a>, <a href="#filters-feComponentTransferExponentAttribute"><span class="attr-name">‘exponent’</span></a>, <a href="#filters-feComponentTransferOffsetAttribute"><span class="attr-name">‘offset’</span></a></span></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEFuncBElement">SVGFEFuncBElement</a></li></ul></dd></dl></div>
</div>

<div id="filters-feFuncAElement">
<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feFuncA’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#filters-TransferFunctionElementAttributes">transfer function element attributes</a><span class="expanding"> — <a href="#filters-feComponentTransferTypeAttribute"><span class="attr-name">‘type’</span></a>, <a href="#filters-feComponentTransferTableValuesAttribute"><span class="attr-name">‘tableValues’</span></a>, <a href="#filters-feComponentTransferSlopeAttribute"><span class="attr-name">‘slope’</span></a>, <a href="#filters-feComponentTransferInterceptAttribute"><span class="attr-name">‘intercept’</span></a>, <a href="#filters-feComponentTransferAmplitudeAttribute"><span class="attr-name">‘amplitude’</span></a>, <a href="#filters-feComponentTransferExponentAttribute"><span class="attr-name">‘exponent’</span></a>, <a href="#filters-feComponentTransferOffsetAttribute"><span class="attr-name">‘offset’</span></a></span></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEFuncAElement">SVGFEFuncAElement</a></li></ul></dd></dl></div>
</div>

<p id="filters-TransferFunctionElementAttributes">The attributes below are the
<span class="SVG-TermDefine">transfer function element attributes</span>,
which apply to sub-elements <a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a>, <a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a>, <a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a>
and <a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a> that define the transfer functions.</p>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-feComponentTransferTypeAttribute"><span class="adef">type</span> = "<em>identity | table | discrete
        | linear | gamma</em>"</dt><dd>
          <p>Indicates the type of component transfer function. The
          type of function determines the applicability of the
          other attributes.</p>
	  <p>In the following, C is the initial component (e.g.,
	  <a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a>), C' is the remapped component; both
	  in the closed interval [0,1].</p>
          <ul><li>
              For <span class="attr-value">identity</span>: 
<pre>
C' = C
</pre>
            </li><li>
              For <span class="attr-value">table</span>, the
              function is defined by linear interpolation
	      between values given in the attribute
	      <a href="#filters-feComponentTransferTableValuesAttribute"><span class="attr-name">‘tableValues’</span></a>. The table has <em>n+1</em>
	      values (i.e., v<sub>0</sub> to v<sub>n</sub>)
	      specifying the start and end values for <em>n</em>
	      evenly sized interpolation regions. Interpolations
	      use the following formula:

              <p>For a value <code>C &lt; 1</code> find <code>k</code>
              such that:</p>

              <p class="filterformula">k/n &lt;= C &lt; (k+1)/n</p>

              <p>The result <code>C'</code> is given by:</p>

              <p class="filterformula">C' = v<sub>k</sub> + (C -
              k/n)*n * (v<sub>k+1</sub> - v<sub>k</sub>)</p>

	      <p>If <code>C = 1</code> then:</p>

	      <p class="filterformula">C' = v<sub>n</sub>.</p>

            </li><li>
              For <span class="attr-value">discrete</span>, the
              function is defined by the step function given in the
              attribute <a href="#filters-feComponentTransferTableValuesAttribute"><span class="attr-name">‘tableValues’</span></a>, which
              provides a list of <em>n</em> values (i.e.,
              v<sub>0</sub> to v<sub>n-1</sub>) in order to
              identify a step function consisting of <em>n</em>
              steps. The step function is defined by the following
              formula:

              <p>For a value <code>C &lt; 1</code> find <code>k</code>
              such that:</p>

              <p class="filterformula">k/n &lt;= C &lt; (k+1)/n</p>

              <p>The result <code>C'</code> is given by:</p>


              <p class="filterformula">C' = v<sub>k</sub></p>
	      <p>If <code>C = 1</code> then:</p>

	      <p class="filterformula">C' = v<sub>n-1</sub>.</p>

            </li><li>
              For <span class="attr-value">linear</span>, the
              function is defined by the following linear equation:
              
              <p class="filterformula">C' = <a href="#filters-feComponentTransferSlopeAttribute">
              <span class="attr-name">slope</span></a> * C + <a href="#filters-feComponentTransferInterceptAttribute">
              <span class="attr-name">intercept</span></a></p>
            </li><li>
              For <span class="attr-value">gamma</span>, the
              function is defined by the following exponential
              function: 
              <p class="filterformula">C' = <a href="#filters-feComponentTransferAmplitudeAttribute">
              <span class="attr-name">amplitude</span></a> * pow(C,
              <a href="#filters-feComponentTransferExponentAttribute">
              <span class="attr-name">exponent</span></a>) + <a href="#filters-feComponentTransferOffsetAttribute">
              <span class="attr-name">offset</span></a></p>
            </li></ul>
          <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
          yes.</span>
        </dd><dt id="filters-feComponentTransferTableValuesAttribute"><span class="adef">tableValues</span> = "<em>(list of <a href="#types-DataTypeNumber">&lt;number&gt;</a>s)</em>"</dt><dd>When <span class="attr-value">type="table"</span>, the
        list of <a href="#types-DataTypeNumber">&lt;number&gt;</a>s
        <em>v0,v1,...vn</em>, separated by white space and/or a
        comma, which define the lookup table. An empty list results
        in an identity transfer function.
        If the attribute is not
        specified, then the effect is as if an empty list were
        provided.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feComponentTransferSlopeAttribute"><span class="adef">slope</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>When <span class="attr-value">type="linear"</span>, the
        slope of the linear function.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">1</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feComponentTransferInterceptAttribute"><span class="adef">intercept</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>When <span class="attr-value">type="linear"</span>, the
        intercept of the linear function.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feComponentTransferAmplitudeAttribute"><span class="adef">amplitude</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>When <span class="attr-value">type="gamma"</span>, the
        amplitude of the gamma function.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">1</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feComponentTransferExponentAttribute"><span class="adef">exponent</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>When <span class="attr-value">type="gamma"</span>, the
        exponent of the gamma function.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">1</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feComponentTransferOffsetAttribute"><span class="adef">offset</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>When <span class="attr-value">type="gamma"</span>, the
        offset of the gamma function.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>



<p><span class="example-ref">Example feComponentTransfer</span> shows
examples of the four types of feComponentTransfer operations.</p>

<pre class="xml">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
          "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="8cm" height="4cm" viewBox="0 0 800 400"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;title&gt;Example feComponentTransfer - Examples of feComponentTransfer operations&lt;/title&gt;
  &lt;desc&gt;Four text strings showing the effects of feComponentTransfer: 
        an identity function acting as a reference, 
        use of the feComponentTransfer table option,
        use of the feComponentTransfer linear option,
        and use of the feComponentTransfer gamma option.&lt;/desc&gt;
  &lt;defs&gt;
    &lt;linearGradient id="MyGradient" gradientUnits="userSpaceOnUse"
            x1="100" y1="0" x2="600" y2="0"&gt;
      &lt;stop offset="0" stop-color="#ff0000" /&gt;
      &lt;stop offset=".33" stop-color="#00ff00" /&gt;
      &lt;stop offset=".67" stop-color="#0000ff" /&gt;
      &lt;stop offset="1" stop-color="#000000" /&gt;
    &lt;/linearGradient&gt;
    &lt;filter id="Identity" filterUnits="objectBoundingBox" 
            x="0%" y="0%" width="100%" height="100%"&gt;
      &lt;feComponentTransfer&gt;
        &lt;feFuncR type="identity"/&gt;
        &lt;feFuncG type="identity"/&gt;
        &lt;feFuncB type="identity"/&gt;
        &lt;feFuncA type="identity"/&gt;
      &lt;/feComponentTransfer&gt;
    &lt;/filter&gt;
    &lt;filter id="Table" filterUnits="objectBoundingBox" 
            x="0%" y="0%" width="100%" height="100%"&gt;
      &lt;feComponentTransfer&gt;
        &lt;feFuncR type="table" tableValues="0 0 1 1"/&gt;
        &lt;feFuncG type="table" tableValues="1 1 0 0"/&gt;
        &lt;feFuncB type="table" tableValues="0 1 1 0"/&gt;
      &lt;/feComponentTransfer&gt;
    &lt;/filter&gt;
    &lt;filter id="Linear" filterUnits="objectBoundingBox" 
            x="0%" y="0%" width="100%" height="100%"&gt;
      &lt;feComponentTransfer&gt;
        &lt;feFuncR type="linear" slope=".5" intercept=".25"/&gt;
        &lt;feFuncG type="linear" slope=".5" intercept="0"/&gt;
        &lt;feFuncB type="linear" slope=".5" intercept=".5"/&gt;
      &lt;/feComponentTransfer&gt;
    &lt;/filter&gt;
    &lt;filter id="Gamma" filterUnits="objectBoundingBox" 
            x="0%" y="0%" width="100%" height="100%"&gt;
      &lt;feComponentTransfer&gt;
        &lt;feFuncR type="gamma" amplitude="2" exponent="5" offset="0"/&gt;
        &lt;feFuncG type="gamma" amplitude="2" exponent="3" offset="0"/&gt;
        &lt;feFuncB type="gamma" amplitude="2" exponent="1" offset="0"/&gt;
      &lt;/feComponentTransfer&gt;
    &lt;/filter&gt;
  &lt;/defs&gt;
  &lt;rect fill="none" stroke="blue"  
        x="1" y="1" width="798" height="398"/&gt;
  &lt;g font-family="Verdana" font-size="75" 
            font-weight="bold" fill="url(#MyGradient)" &gt;
    &lt;rect x="100" y="0" width="600" height="20" /&gt;
    &lt;text x="100" y="90"&gt;Identity&lt;/text&gt;
    &lt;text x="100" y="190" filter="url(#Table)" &gt;TableLookup&lt;/text&gt;
    &lt;text x="100" y="290" filter="url(#Linear)" &gt;LinearFunc&lt;/text&gt;
    &lt;text x="100" y="390" filter="url(#Gamma)" &gt;GammaFunc&lt;/text&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example feComponentTransfer</caption><tr><td><img alt="Example feComponentTransfer — Examples of feComponentTransfer operations" src="images/filters/feComponentTransfer.png" /></td></tr></table><p class="view-as-svg"><a href="images/filters/feComponentTransfer.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h2 id="filters-feCompositeElement">15.12 Filter primitive <span class="element-name">‘feComposite’</span></h2>



    <p>This filter performs the combination of the two input images
    pixel-wise in image space using one of the Porter-Duff [<a href="#refs-ref-PORTERDUFF">PORTERDUFF</a>] compositing
    operations: <em>over, in, atop, out, xor</em> [<a href="#refs-ref-SVG-COMPOSITING">SVG-COMPOSITING</a>]. Additionally, a
    component-wise <em>arithmetic</em> operation (with the result
    clamped between [0..1]) can be applied.</p>
    <p>The <em>arithmetic</em> operation is useful for combining
    the output from the <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a> and <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a> filters
    with texture data. It is also useful for implementing
    <em>dissolve</em>. If the <em>arithmetic</em> operation is
    chosen, each result pixel is computed using the following
    formula:</p>
<pre>
result = k1*i1*i2 + k2*i1 + k3*i2 + k4
</pre>
where:
  <ul><li>
    <code>i1</code> and <code>i2</code> indicate the corresponding pixel channel values of the input image, which map to in and in2 respectively
    </li><li>
    <code>k1, k2, k3</code> and <code>k4</code> indicate the values of the attributes with the same name
    </li></ul>
    <p>For this filter primitive, the extent of the resulting image
    might grow as described in the section that describes the <a href="#filters-FilterPrimitiveSubRegion">filter primitive
    subregion</a>.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feComposite’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermFilterPrimitiveElement">Filter primitive element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveAttributes">filter primitive attributes</a><span class="expanding"> — <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a></li><li><a href="#filters-feCompositeIn2Attribute"><span class="attr-name">‘in2’</span></a></li><li><a href="#filters-feCompositeOperatorAttribute"><span class="attr-name">‘operator’</span></a></li><li><a href="#filters-feCompositeK1Attribute"><span class="attr-name">‘k1’</span></a></li><li><a href="#filters-feCompositeK2Attribute"><span class="attr-name">‘k2’</span></a></li><li><a href="#filters-feCompositeK3Attribute"><span class="attr-name">‘k3’</span></a></li><li><a href="#filters-feCompositeK4Attribute"><span class="attr-name">‘k4’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFECompositeElement">SVGFECompositeElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-feCompositeOperatorAttribute"><span class="adef">operator</span> = "<em>over | in | out | atop
        | xor | arithmetic</em>"</dt><dd>The compositing operation that is to be performed. All
        of the <a href="#filters-feCompositeOperatorAttribute"><span class="attr-name">‘operator’</span></a> types except
        <span class="attr-value">arithmetic</span> match the
        corresponding operation as described in [<a href="#refs-ref-PORTERDUFF">PORTERDUFF</a>]. The <span class="attr-value">arithmetic</span> operator is described
        above. If attribute <a href="#filters-feCompositeOperatorAttribute"><span class="attr-name">‘operator’</span></a> is not specified, then the effect is as if a value of <span class="attr-value">over</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feCompositeK1Attribute"><span class="adef">k1</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>Only applicable if <span class="attr-value">operator="arithmetic"</span>.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">0</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feCompositeK2Attribute"><span class="adef">k2</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>Only applicable if <span class="attr-value">operator="arithmetic"</span>.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">0</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feCompositeK3Attribute"><span class="adef">k3</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>Only applicable if <span class="attr-value">operator="arithmetic"</span>.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">0</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feCompositeK4Attribute"><span class="adef">k4</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>Only applicable if <span class="attr-value">operator="arithmetic"</span>.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">0</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feCompositeIn2Attribute"><span class="adef">in2</span> = "<em>(see <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> attribute)</em>"</dt><dd>The second input image to the compositing operation.
        This attribute can take on the same values as the <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> attribute.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>
    <p><span class="example-ref">Example feComposite</span> shows
    examples of the six types of feComposite operations. It also
    shows two different techniques to using the <a href="#filters-BackgroundImage">BackgroundImage</a> as part of the
    compositing operation.</p>
    <p>The first two rows render bluish triangles into the
    background. A filter is applied which composites reddish
    triangles into the bluish triangles using one of the
    compositing operations. The result from compositing is drawn
    onto an opaque white temporary surface, and then that result is
    written to the canvas. (The opaque white temporary surface
    obliterates the original bluish triangle.)</p>
    <p>The last two rows apply the same compositing operations of
    reddish triangles into bluish triangles. However, the
    compositing result is directly blended into the canvas (the
    opaque white temporary surface technique is not used). In some
    cases, the results are different than when a temporary opaque
    white surface is used. The original bluish triangle from the
    background shines through wherever the compositing operation
    results in completely transparent pixel. In other cases, the
    result from compositing is blended into the bluish triangle,
    resulting in a different final color value.</p>

<pre class="xml">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
          "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="330" height="195" viewBox="0 0 1100 650" version="1.1"
     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;title&gt;Example feComposite - Examples of feComposite operations&lt;/title&gt;
  &lt;desc&gt;Four rows of six pairs of overlapping triangles depicting
        the six different feComposite operators under different
        opacity values and different clearing of the background.&lt;/desc&gt;
	&lt;defs&gt;
    &lt;desc&gt;Define two sets of six filters for each of the six compositing operators.
          The first set wipes out the background image by flooding with opaque white.
          The second set does not wipe out the background, with the result
          that the background sometimes shines through and is other cases
          is blended into itself (i.e., "double-counting").&lt;/desc&gt;
    &lt;filter id="overFlood" filterUnits="objectBoundingBox" x="-5%" y="-5%" width="110%" height="110%"&gt;
      &lt;feFlood flood-color="#ffffff" flood-opacity="1" result="flood"/&gt;
      &lt;feComposite in="SourceGraphic" in2="BackgroundImage" operator="over" result="comp"/&gt;
      &lt;feMerge&gt; &lt;feMergeNode in="flood"/&gt; &lt;feMergeNode in="comp"/&gt; &lt;/feMerge&gt;
    &lt;/filter&gt;
    &lt;filter id="inFlood" filterUnits="objectBoundingBox" x="-5%" y="-5%" width="110%" height="110%"&gt;
      &lt;feFlood flood-color="#ffffff" flood-opacity="1" result="flood"/&gt;
      &lt;feComposite in="SourceGraphic" in2="BackgroundImage" operator="in" result="comp"/&gt;
      &lt;feMerge&gt; &lt;feMergeNode in="flood"/&gt; &lt;feMergeNode in="comp"/&gt; &lt;/feMerge&gt;
    &lt;/filter&gt;
    &lt;filter id="outFlood" filterUnits="objectBoundingBox" x="-5%" y="-5%" width="110%" height="110%"&gt;
      &lt;feFlood flood-color="#ffffff" flood-opacity="1" result="flood"/&gt;
      &lt;feComposite in="SourceGraphic" in2="BackgroundImage" operator="out" result="comp"/&gt;
      &lt;feMerge&gt; &lt;feMergeNode in="flood"/&gt; &lt;feMergeNode in="comp"/&gt; &lt;/feMerge&gt;
    &lt;/filter&gt;
    &lt;filter id="atopFlood" filterUnits="objectBoundingBox" x="-5%" y="-5%" width="110%" height="110%"&gt;
      &lt;feFlood flood-color="#ffffff" flood-opacity="1" result="flood"/&gt;
      &lt;feComposite in="SourceGraphic" in2="BackgroundImage" operator="atop" result="comp"/&gt;
      &lt;feMerge&gt; &lt;feMergeNode in="flood"/&gt; &lt;feMergeNode in="comp"/&gt; &lt;/feMerge&gt;
    &lt;/filter&gt;
    &lt;filter id="xorFlood" filterUnits="objectBoundingBox" x="-5%" y="-5%" width="110%" height="110%"&gt;
      &lt;feFlood flood-color="#ffffff" flood-opacity="1" result="flood"/&gt;
      &lt;feComposite in="SourceGraphic" in2="BackgroundImage" operator="xor" result="comp"/&gt;
      &lt;feMerge&gt; &lt;feMergeNode in="flood"/&gt; &lt;feMergeNode in="comp"/&gt; &lt;/feMerge&gt;
    &lt;/filter&gt;
    &lt;filter id="arithmeticFlood" filterUnits="objectBoundingBox" 
            x="-5%" y="-5%" width="110%" height="110%"&gt;
      &lt;feFlood flood-color="#ffffff" flood-opacity="1" result="flood"/&gt;
      &lt;feComposite in="SourceGraphic" in2="BackgroundImage" result="comp"
                   operator="arithmetic" k1=".5" k2=".5" k3=".5" k4=".5"/&gt;
      &lt;feMerge&gt; &lt;feMergeNode in="flood"/&gt; &lt;feMergeNode in="comp"/&gt; &lt;/feMerge&gt;
    &lt;/filter&gt;
    &lt;filter id="overNoFlood" filterUnits="objectBoundingBox" x="-5%" y="-5%" width="110%" height="110%"&gt;
      &lt;feComposite in="SourceGraphic" in2="BackgroundImage" operator="over" result="comp"/&gt;
    &lt;/filter&gt;
    &lt;filter id="inNoFlood" filterUnits="objectBoundingBox" x="-5%" y="-5%" width="110%" height="110%"&gt;
      &lt;feComposite in="SourceGraphic" in2="BackgroundImage" operator="in" result="comp"/&gt;
    &lt;/filter&gt;
    &lt;filter id="outNoFlood" filterUnits="objectBoundingBox" x="-5%" y="-5%" width="110%" height="110%"&gt;
      &lt;feComposite in="SourceGraphic" in2="BackgroundImage" operator="out" result="comp"/&gt;
    &lt;/filter&gt;
    &lt;filter id="atopNoFlood" filterUnits="objectBoundingBox" x="-5%" y="-5%" width="110%" height="110%"&gt;
      &lt;feComposite in="SourceGraphic" in2="BackgroundImage" operator="atop" result="comp"/&gt;
    &lt;/filter&gt;
    &lt;filter id="xorNoFlood" filterUnits="objectBoundingBox" x="-5%" y="-5%" width="110%" height="110%"&gt;
      &lt;feComposite in="SourceGraphic" in2="BackgroundImage" operator="xor" result="comp"/&gt;
    &lt;/filter&gt;
    &lt;filter id="arithmeticNoFlood" filterUnits="objectBoundingBox" 
            x="-5%" y="-5%" width="110%" height="110%"&gt;
      &lt;feComposite in="SourceGraphic" in2="BackgroundImage" result="comp"
                   operator="arithmetic" k1=".5" k2=".5" k3=".5" k4=".5"/&gt;
    &lt;/filter&gt;
    &lt;path id="Blue100" d="M 0 0 L 100 0 L 100 100 z" fill="#00ffff" /&gt;
    &lt;path id="Red100" d="M 0 0 L 0 100 L 100 0 z" fill="#ff00ff" /&gt;
    &lt;path id="Blue50" d="M 0 125 L 100 125 L 100 225 z" fill="#00ffff" fill-opacity=".5" /&gt;
    &lt;path id="Red50" d="M 0 125 L 0 225 L 100 125 z" fill="#ff00ff" fill-opacity=".5" /&gt;
    &lt;g id="TwoBlueTriangles"&gt;
      &lt;use xlink:href="#Blue100"/&gt;
      &lt;use xlink:href="#Blue50"/&gt;
    &lt;/g&gt;
    &lt;g id="BlueTriangles"&gt;
      &lt;use transform="translate(275,25)" xlink:href="#TwoBlueTriangles"/&gt;
      &lt;use transform="translate(400,25)" xlink:href="#TwoBlueTriangles"/&gt;
      &lt;use transform="translate(525,25)" xlink:href="#TwoBlueTriangles"/&gt;
      &lt;use transform="translate(650,25)" xlink:href="#TwoBlueTriangles"/&gt;
      &lt;use transform="translate(775,25)" xlink:href="#TwoBlueTriangles"/&gt;
      &lt;use transform="translate(900,25)" xlink:href="#TwoBlueTriangles"/&gt;
    &lt;/g&gt;
  &lt;/defs&gt;

  &lt;rect fill="none" stroke="blue" x="1" y="1" width="1098" height="648"/&gt;
  &lt;g font-family="Verdana" font-size="40" shape-rendering="crispEdges"&gt;
    &lt;desc&gt;Render the examples using the filters that draw on top of
          an opaque white surface, thus obliterating the background.&lt;/desc&gt;
    &lt;g enable-background="new"&gt;
      &lt;text x="15" y="75"&gt;opacity 1.0&lt;/text&gt;
      &lt;text x="15" y="115" font-size="27"&gt;(with feFlood)&lt;/text&gt;
      &lt;text x="15" y="200"&gt;opacity 0.5&lt;/text&gt;
      &lt;text x="15" y="240" font-size="27"&gt;(with feFlood)&lt;/text&gt;
      &lt;use xlink:href="#BlueTriangles"/&gt;
      &lt;g transform="translate(275,25)"&gt;
        &lt;use xlink:href="#Red100" filter="url(#overFlood)" /&gt;
        &lt;use xlink:href="#Red50" filter="url(#overFlood)" /&gt;
        &lt;text x="5" y="275"&gt;over&lt;/text&gt;
      &lt;/g&gt;
      &lt;g transform="translate(400,25)"&gt;
        &lt;use xlink:href="#Red100" filter="url(#inFlood)" /&gt;
        &lt;use xlink:href="#Red50" filter="url(#inFlood)" /&gt;
        &lt;text x="35" y="275"&gt;in&lt;/text&gt;
      &lt;/g&gt;
      &lt;g transform="translate(525,25)"&gt;
        &lt;use xlink:href="#Red100" filter="url(#outFlood)" /&gt;
        &lt;use xlink:href="#Red50" filter="url(#outFlood)" /&gt;
        &lt;text x="15" y="275"&gt;out&lt;/text&gt;
      &lt;/g&gt;
      &lt;g transform="translate(650,25)"&gt;
        &lt;use xlink:href="#Red100" filter="url(#atopFlood)" /&gt;
        &lt;use xlink:href="#Red50" filter="url(#atopFlood)" /&gt;
        &lt;text x="10" y="275"&gt;atop&lt;/text&gt;
      &lt;/g&gt;
      &lt;g transform="translate(775,25)"&gt;
        &lt;use xlink:href="#Red100" filter="url(#xorFlood)" /&gt;
        &lt;use xlink:href="#Red50" filter="url(#xorFlood)" /&gt;
        &lt;text x="15" y="275"&gt;xor&lt;/text&gt;
      &lt;/g&gt;
      &lt;g transform="translate(900,25)"&gt;
        &lt;use xlink:href="#Red100" filter="url(#arithmeticFlood)" /&gt;
        &lt;use xlink:href="#Red50" filter="url(#arithmeticFlood)" /&gt;
        &lt;text x="-25" y="275"&gt;arithmetic&lt;/text&gt;
      &lt;/g&gt;
    &lt;/g&gt;
    &lt;g transform="translate(0,325)" enable-background="new"&gt;
    &lt;desc&gt;Render the examples using the filters that do not obliterate
          the background, thus sometimes causing the background to continue
          to appear in some cases, and in other cases the background
          image blends into itself ("double-counting").&lt;/desc&gt;
      &lt;text x="15" y="75"&gt;opacity 1.0&lt;/text&gt;
      &lt;text x="15" y="115" font-size="27"&gt;(without feFlood)&lt;/text&gt;
      &lt;text x="15" y="200"&gt;opacity 0.5&lt;/text&gt;
      &lt;text x="15" y="240" font-size="27"&gt;(without feFlood)&lt;/text&gt;
      &lt;use xlink:href="#BlueTriangles"/&gt;
      &lt;g transform="translate(275,25)"&gt;
        &lt;use xlink:href="#Red100" filter="url(#overNoFlood)" /&gt;
        &lt;use xlink:href="#Red50" filter="url(#overNoFlood)" /&gt;
        &lt;text x="5" y="275"&gt;over&lt;/text&gt;
      &lt;/g&gt;
      &lt;g transform="translate(400,25)"&gt;
        &lt;use xlink:href="#Red100" filter="url(#inNoFlood)" /&gt;
        &lt;use xlink:href="#Red50" filter="url(#inNoFlood)" /&gt;
        &lt;text x="35" y="275"&gt;in&lt;/text&gt;
      &lt;/g&gt;
      &lt;g transform="translate(525,25)"&gt;
        &lt;use xlink:href="#Red100" filter="url(#outNoFlood)" /&gt;
        &lt;use xlink:href="#Red50" filter="url(#outNoFlood)" /&gt;
        &lt;text x="15" y="275"&gt;out&lt;/text&gt;
      &lt;/g&gt;
      &lt;g transform="translate(650,25)"&gt;
        &lt;use xlink:href="#Red100" filter="url(#atopNoFlood)" /&gt;
        &lt;use xlink:href="#Red50" filter="url(#atopNoFlood)" /&gt;
        &lt;text x="10" y="275"&gt;atop&lt;/text&gt;
      &lt;/g&gt;
      &lt;g transform="translate(775,25)"&gt;
        &lt;use xlink:href="#Red100" filter="url(#xorNoFlood)" /&gt;
        &lt;use xlink:href="#Red50" filter="url(#xorNoFlood)" /&gt;
        &lt;text x="15" y="275"&gt;xor&lt;/text&gt;
      &lt;/g&gt;
      &lt;g transform="translate(900,25)"&gt;
        &lt;use xlink:href="#Red100" filter="url(#arithmeticNoFlood)" /&gt;
        &lt;use xlink:href="#Red50" filter="url(#arithmeticNoFlood)" /&gt;
        &lt;text x="-25" y="275"&gt;arithmetic&lt;/text&gt;
      &lt;/g&gt;
    &lt;/g&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example feComposite</caption><tr><td><img alt="Example feComposite — Examples of feComposite operations" src="images/filters/feComposite.png" /></td></tr></table><p class="view-as-svg"><a href="images/filters/feComposite.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h2 id="filters-feConvolveMatrixElement">15.13 Filter primitive <span class="element-name">‘feConvolveMatrix’</span></h2>



    <p>feConvolveMatrix applies a matrix convolution filter effect.
    A convolution combines pixels in the input image with
    neighboring pixels to produce a resulting image. A wide variety
    of imaging operations can be achieved through convolutions,
    including blurring, edge detection, sharpening, embossing and
    beveling.</p>
    <p>A matrix convolution is based on an n-by-m matrix (the
    convolution kernel) which describes how a given pixel value in
    the input image is combined with its neighboring pixel values
    to produce a resulting pixel value. Each result pixel is
    determined by applying the kernel matrix to the corresponding
    source pixel and its neighboring pixels. The basic convolution
    formula which is applied to each color value for a given pixel
    is:</p>
    <p class="filterformula" id="filters-feConvolveMatrixElementFormula">
    COLOR<sub>X,Y</sub> = ( <br />
                   SUM
    <sub>I=0 to [<a href="#filters-feConvolveMatrixElementOrderAttribute">orderY</a>-1]</sub> { <br />
                     SUM
    <sub>J=0 to [<a href="#filters-feConvolveMatrixElementOrderAttribute">orderX</a>-1]</sub> { <br />
                       SOURCE
    <sub>X-<a href="#filters-feConvolveMatrixElementTargetXAttribute">targetX</a>+J, Y-<a href="#filters-feConvolveMatrixElementTargetYAttribute">targetY</a>+I</sub> * 
    <a href="#filters-feConvolveMatrixElementKernelMatrixAttribute">
    kernelMatrix</a><sub><a href="#filters-feConvolveMatrixElementOrderAttribute">orderX</a>-J-1, 
    <a href="#filters-feConvolveMatrixElementOrderAttribute">orderY</a>-I-1</sub> <br />
                     } <br />
                   } <br />
                 ) / 
    <a href="#filters-feConvolveMatrixElementDivisorAttribute">divisor</a> + 
    <a href="#filters-feConvolveMatrixElementBiasAttribute">bias</a> * ALPHA<sub>X,Y</sub>
    <br />
    </p>
    <p>where "orderX" and "orderY" represent the X and Y values for
    the <a href="#filters-feConvolveMatrixElementOrderAttribute"><span class="attr-name">‘order’</span></a> attribute, "targetX"
    represents the value of the <a href="#filters-feConvolveMatrixElementTargetXAttribute"><span class="attr-name">‘targetX’</span></a> attribute, "targetY"
    represents the value of the <a href="#filters-feConvolveMatrixElementTargetYAttribute"><span class="attr-name">‘targetY’</span></a> attribute, "kernelMatrix"
    represents the value of the <a href="#filters-feConvolveMatrixElementKernelMatrixAttribute"><span class="attr-name">‘kernelMatrix’</span></a> attribute,
    "divisor" represents the value of the <a href="#filters-feConvolveMatrixElementDivisorAttribute"><span class="attr-name">‘divisor’</span></a> attribute, and "bias"
    represents the value of the <a href="#filters-feConvolveMatrixElementBiasAttribute"><span class="attr-name">‘bias’</span></a> attribute.</p>
    <p>Note in the above formulas that the values in the kernel
    matrix are applied such that the kernel matrix is rotated 180
    degrees relative to the source and destination images in order
    to match convolution theory as described in many computer
    graphics textbooks.</p>
    <p>To illustrate, suppose you have a input image which is 5
    pixels by 5 pixels, whose color values for one of the color
    channels are as follows:</p>
<pre>
    0  20  40 235 235
  100 120 140 235 235
  200 220 240 235 235
  225 225 255 255 255
  225 225 255 255 255
</pre>
    <p>and you define a 3-by-3 convolution kernel as follows:</p>
<pre>
  1 2 3
  4 5 6
  7 8 9
</pre>
    <p>Let's focus on the color value at the second row and second
    column of the image (source pixel value is 120). Assuming the
    simplest case (where the input image's pixel grid aligns
    perfectly with the kernel's pixel grid) and assuming default
    values for attributes <a href="#filters-feConvolveMatrixElementDivisorAttribute"><span class="attr-name">‘divisor’</span></a>,
    <a href="#filters-feConvolveMatrixElementTargetXAttribute"><span class="attr-name">‘targetX’</span></a> and <a href="#filters-feConvolveMatrixElementTargetYAttribute"><span class="attr-name">‘targetY’</span></a>, then resulting color value
    will be:</p>
<pre>
(9*  0 + 8* 20 + 7* 40 +
6*100 + 5*120 + 4*140 +
3*200 + 2*220 + 1*240) / (9+8+7+6+5+4+3+2+1)
</pre>
    <p>Because they operate on pixels, matrix convolutions are
    inherently resolution-dependent. To make <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a> produce
    resolution-independent results, an explicit value should be
    provided for either the <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a> attribute on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element and/or
    attribute <a href="#filters-feConvolveMatrixElementKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a>.</p>
    <p><a href="#filters-feConvolveMatrixElementKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a>, in
    combination with the other attributes, defines an implicit
    pixel grid in the filter effects coordinate system (i.e., the
    coordinate system established by the <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> attribute). If the
    pixel grid established by <a href="#filters-feConvolveMatrixElementKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a> is not
    scaled to match the pixel grid established by attribute <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a> (implicitly or
    explicitly), then the input image will be temporarily rescaled
    to match its pixels with <a href="#filters-feConvolveMatrixElementKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a>. The
    convolution happens on the resampled image. After applying the
    convolution, the image is resampled back to the original
    resolution.</p>
    <p>When the image must be resampled to match the coordinate
    system defined by <a href="#filters-feConvolveMatrixElementKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a> prior to
    convolution, or resampled to match the device coordinate system
    after convolution, it is recommended that <a href="#conform-ConformingHighQualitySVGViewers">high
    quality viewers</a> make use of appropriate interpolation
    techniques, for example bilinear or bicubic. Depending on the
    speed of the available interpolents, this choice may be
    affected by the <a href="#painting-ImageRenderingProperty"><span class="prop-name">‘image-rendering’</span></a> property
    setting. Note that implementations might choose approaches that
    minimize or eliminate resampling when not necessary to produce
    proper results, such as when the document is zoomed out such
    that <a href="#filters-feConvolveMatrixElementKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a> is
    considerably smaller than a device pixel.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feConvolveMatrix’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermFilterPrimitiveElement">Filter primitive element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveAttributes">filter primitive attributes</a><span class="expanding"> — <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a></li><li><a href="#filters-feConvolveMatrixElementOrderAttribute"><span class="attr-name">‘order’</span></a></li><li><a href="#filters-feConvolveMatrixElementKernelMatrixAttribute"><span class="attr-name">‘kernelMatrix’</span></a></li><li><a href="#filters-feConvolveMatrixElementDivisorAttribute"><span class="attr-name">‘divisor’</span></a></li><li><a href="#filters-feConvolveMatrixElementBiasAttribute"><span class="attr-name">‘bias’</span></a></li><li><a href="#filters-feConvolveMatrixElementTargetXAttribute"><span class="attr-name">‘targetX’</span></a></li><li><a href="#filters-feConvolveMatrixElementTargetYAttribute"><span class="attr-name">‘targetY’</span></a></li><li><a href="#filters-feConvolveMatrixElementEdgeModeAttribute"><span class="attr-name">‘edgeMode’</span></a></li><li><a href="#filters-feConvolveMatrixElementKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a></li><li><a href="#filters-feConvolveMatrixElementPreserveAlphaAttribute"><span class="attr-name">‘preserveAlpha’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEConvolveMatrixElement">SVGFEConvolveMatrixElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-feConvolveMatrixElementOrderAttribute"><span class="adef">order</span> = "<span class="attr-value"><a href="#types-DataTypeNumberOptionalNumber">&lt;number-optional-number&gt;</a></span>"</dt><dd>Indicates the number of cells in each dimension for
        <a href="#filters-feConvolveMatrixElementKernelMatrixAttribute"><span class="attr-name">‘kernelMatrix’</span></a>. The values
        provided must be <a href="#types-DataTypeInteger">&lt;integer&gt;</a>s
        greater than zero. The first number, &lt;orderX&gt;,
        indicates the number of columns in the matrix. The second
        number, &lt;orderY&gt;, indicates the number of rows in the
        matrix. If &lt;orderY&gt; is not provided, it defaults to
        &lt;orderX&gt;.<br />
         A typical value is order="3". It is recommended that only
        small values (e.g., 3) be used; higher values may result in
        very high CPU overhead and usually do not produce results
        that justify the impact on performance.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">3</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feConvolveMatrixElementKernelMatrixAttribute">
        <span class="adef">kernelMatrix</span> = "<span class="attr-value">&lt;list of numbers&gt;</span>"</dt><dd>The list of <a href="#types-DataTypeNumber">&lt;number&gt;</a>s that
        make up the kernel matrix for the convolution. Values are
        separated by space characters and/or a comma. The number of
        entries in the list must equal &lt;orderX&gt; times
        &lt;orderY&gt;.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feConvolveMatrixElementDivisorAttribute"><span class="adef">divisor</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>After applying the <a href="#filters-feConvolveMatrixElementKernelMatrixAttribute"><span class="attr-name">‘kernelMatrix’</span></a> to the input image to
        yield a number, that number is divided by <a href="#filters-feConvolveMatrixElementDivisorAttribute"><span class="attr-name">‘divisor’</span></a> to yield the final
        destination color value. A divisor that is the sum of all
        the matrix values tends to have an evening effect on the
        overall color intensity of the result. It is an error to
        specify a divisor of zero. The default value is the sum of
        all values in kernelMatrix, with the exception that if the
        sum is zero, then the divisor is set to 1.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feConvolveMatrixElementBiasAttribute"><span class="adef">bias</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>After applying the <a href="#filters-feConvolveMatrixElementKernelMatrixAttribute"><span class="attr-name">‘kernelMatrix’</span></a> to the input image to
        yield a number and applying the <a href="#filters-feConvolveMatrixElementDivisorAttribute"><span class="attr-name">‘divisor’</span></a>, the <a href="#filters-feConvolveMatrixElementBiasAttribute"><span class="attr-name">‘bias’</span></a> attribute is added to each
        component. One application of <a href="#filters-feConvolveMatrixElementBiasAttribute"><span class="attr-name">‘bias’</span></a> is when it is desirable to
        have .5 gray value be the zero response of the filter. The bias property shifts
        the range of the filter. This allows representation of values that would
        otherwise be clamped to 0 or 1. If <a href="#filters-feConvolveMatrixElementBiasAttribute"><span class="attr-name">‘bias’</span></a> is not specified, then
        the effect is as if a value of <span class="attr-value">0</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feConvolveMatrixElementTargetXAttribute"><span class="adef">targetX</span> = "<span class="attr-value"><a href="#types-DataTypeInteger">&lt;integer&gt;</a></span>"</dt><dd>Determines the positioning in X of the convolution
        matrix relative to a given target pixel in the input image.
        The leftmost column of the matrix is column number zero.
        The value must be such that: 0 &lt;= targetX &lt; orderX.
        By default, the convolution matrix is centered in X over
        each pixel of the input image (i.e., targetX = floor (
        orderX / 2 )).<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feConvolveMatrixElementTargetYAttribute"><span class="adef">targetY</span> = "<span class="attr-value"><a href="#types-DataTypeInteger">&lt;integer&gt;</a></span>"</dt><dd>Determines the positioning in Y of the convolution
        matrix relative to a given target pixel in the input image.
        The topmost row of the matrix is row number zero. The value
        must be such that: 0 &lt;= targetY &lt; orderY. By default,
        the convolution matrix is centered in Y over each pixel of
        the input image (i.e., targetY = floor ( orderY / 2
        )).<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feConvolveMatrixElementEdgeModeAttribute"><span class="adef">edgeMode</span> = "<span class="attr-value">duplicate | wrap | none</span>"</dt><dd>
          <p>Determines how to extend the input image as necessary
          with color values so that the matrix operations can be
          applied when the kernel is positioned at or near the edge
          of the input image.</p>
          <p>"duplicate" indicates that the input image is extended
          along each of its borders as necessary by duplicating the
          color values at the given edge of the input image.</p>
<pre>
Original N-by-M image, where m=M-1 and n=N-1:
          11 12 ... 1m 1M
          21 22 ... 2m 2M
          .. .. ... .. ..
          n1 n2 ... nm nM
          N1 N2 ... Nm NM
Extended by two pixels using "duplicate":
  11 11   11 12 ... 1m 1M   1M 1M
  11 11   11 12 ... 1m 1M   1M 1M
  11 11   11 12 ... 1m 1M   1M 1M
  21 21   21 22 ... 2m 2M   2M 2M
  .. ..   .. .. ... .. ..   .. ..
  n1 n1   n1 n2 ... nm nM   nM nM
  N1 N1   N1 N2 ... Nm NM   NM NM
  N1 N1   N1 N2 ... Nm NM   NM NM
  N1 N1   N1 N2 ... Nm NM   NM NM
</pre>
          <p>"wrap" indicates that the input image is extended by
          taking the color values from the opposite edge of the
          image.</p>
<pre>
Extended by two pixels using "wrap":
  nm nM   n1 n2 ... nm nM   n1 n2
  Nm NM   N1 N2 ... Nm NM   N1 N2
  1m 1M   11 12 ... 1m 1M   11 12
  2m 2M   21 22 ... 2m 2M   21 22
  .. ..   .. .. ... .. ..   .. ..
  nm nM   n1 n2 ... nm nM   n1 n2
  Nm NM   N1 N2 ... Nm NM   N1 N2
  1m 1M   11 12 ... 1m 1M   11 12
  2m 2M   21 22 ... 2m 2M   21 22
</pre>
          <p>"none" indicates that the input image is extended with
          pixel values of zero for R, G, B and A.</p>
          <p>
          If attribute <a href="#filters-feConvolveMatrixElementEdgeModeAttribute"><span class="attr-name">‘edgeMode’</span></a> is not specified, then the effect is as if a value of <span class="attr-value">duplicate</span> were specified.
          </p>
          <p><span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
          yes.</span></p>
        </dd><dt><a id="filters-feConvolveMatrixElementKernelUnitLengthAttribute" name="filters-feConvolveMatrixElementKernelUnitLengthAttribute"></a>
        <span class="adef">kernelUnitLength</span> = "<span class="attr-value"><a href="#types-DataTypeNumberOptionalNumber">&lt;number-optional-number&gt;</a></span>"</dt><dd>The first number is the &lt;dx&gt; value. The second
        number is the &lt;dy&gt; value. If the &lt;dy&gt; value is
        not specified, it defaults to the same value as &lt;dx&gt;.
        Indicates the intended distance in current filter units
        (i.e., units as determined by the value of attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a>) between
        successive columns and rows, respectively, in the <a href="#filters-feConvolveMatrixElementKernelMatrixAttribute"><span class="attr-name">‘kernelMatrix’</span></a>. By specifying
        value(s) for <a href="#filters-feConvolveMatrixElementKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a>, the kernel
        becomes defined in a scalable, abstract coordinate system.
        If <a href="#filters-feConvolveMatrixElementKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a> is not
        specified, the default value is one pixel in the offscreen
        bitmap, which is a pixel-based coordinate system, and thus
        potentially not scalable. For some level of consistency
        across display media and user agents, it is necessary that
        a value be provided for at least one of <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a> and <a href="#filters-feConvolveMatrixElementKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a>. In some
        implementations, the most consistent results and the
        fastest performance will be achieved if the pixel grid of
        the temporary offscreen images aligns with the pixel grid
        of the kernel.<br />
         A negative or zero value is an error (see <a href="#implnote-ErrorProcessing">Error
        processing</a>).<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feConvolveMatrixElementPreserveAlphaAttribute">
        <span class="adef">preserveAlpha</span> = "<span class="attr-value">false | true</span>"</dt><dd>A value of <span class="attr-value">false</span>
        indicates that the convolution will apply to all channels,
        including the alpha channel. In this case the <code>ALPHA<sub>X,Y</sub></code>
        of the <a href="#filters-feConvolveMatrixElementFormula">convolution formula</a> for a given pixel is:
        
        <p class="filterformula">
    ALPHA<sub>X,Y</sub> = ( <br />
                   SUM
    <sub>I=0 to [<a href="#filters-feConvolveMatrixElementOrderAttribute">orderY</a>-1]</sub> { <br />
                     SUM
    <sub>J=0 to [<a href="#filters-feConvolveMatrixElementOrderAttribute">orderX</a>-1]</sub> { <br />
                       SOURCE
    <sub>X-<a href="#filters-feConvolveMatrixElementTargetXAttribute">targetX</a>+J, Y-<a href="#filters-feConvolveMatrixElementTargetYAttribute">targetY</a>+I</sub> * 
    <a href="#filters-feConvolveMatrixElementKernelMatrixAttribute">
    kernelMatrix</a><sub><a href="#filters-feConvolveMatrixElementOrderAttribute">orderX</a>-J-1, 
    <a href="#filters-feConvolveMatrixElementOrderAttribute">orderY</a>-I-1</sub> <br />
                     } <br />
                   } <br />
                 ) / 
    <a href="#filters-feConvolveMatrixElementDivisorAttribute">divisor</a> + 
    <a href="#filters-feConvolveMatrixElementBiasAttribute">bias</a> 
    <br />
    </p>
        
        <br />
         A value of <span class="attr-value">true</span> indicates
        that the convolution will only apply to the color channels.
        In this case, the filter will temporarily unpremultiply the
        color component values, apply the kernel, and then
        re-premultiply at the end. In this case the <code>ALPHA<sub>X,Y</sub></code>
        of the <a href="#filters-feConvolveMatrixElementFormula">convolution formula</a> for a given pixel is:
        <p class="filterformula">
        ALPHA<sub>X,Y</sub> = SOURCE<sub>X,Y</sub>
        <br />
        </p>
         If <a href="#filters-feConvolveMatrixElementPreserveAlphaAttribute"><span class="attr-name">‘preserveAlpha’</span></a> is not
        specified, then the effect is as if a value of <span class="attr-value">false</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>



<h2 id="filters-feDiffuseLightingElement">15.14 Filter primitive <span class="element-name">‘feDiffuseLighting’</span></h2>



    <p>This filter primitive lights an image using the alpha
    channel as a bump map. The resulting image is an RGBA opaque
    image based on the light color with alpha = 1.0 everywhere. The
    lighting calculation follows the standard diffuse component of
    the Phong lighting model. The resulting image depends on the
    light color, light position and surface geometry of the input
    bump map.</p>
    <p>The light map produced by this filter primitive can be
    combined with a texture image using the multiply term of the
    <em>arithmetic</em> <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a> compositing
    method. Multiple light sources can be simulated by adding
    several of these light maps together before applying it to the
    texture image.</p>
    <p>The formulas below make use of 3x3 filters. Because they
    operate on pixels, such filters are inherently
    resolution-dependent. To make <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a> produce
    resolution-independent results, an explicit value should be
    provided for either the <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a> attribute on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element and/or
    attribute <a href="#filters-feDiffuseLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a>.</p>
    <p><a href="#filters-feDiffuseLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a>, in combination
    with the other attributes, defines an implicit pixel grid in
    the filter effects coordinate system (i.e., the coordinate
    system established by the <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> attribute). If the
    pixel grid established by <a href="#filters-feDiffuseLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a> is not scaled to
    match the pixel grid established by attribute <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a> (implicitly or
    explicitly), then the input image will be temporarily rescaled
    to match its pixels with <a href="#filters-feDiffuseLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a>. The 3x3 filters
    are applied to the resampled image. After applying the filter,
    the image is resampled back to its original resolution.</p>
    <p>When the image must be resampled, it is recommended that <a href="#conform-ConformingHighQualitySVGViewers">high
    quality viewers</a> make use of appropriate interpolation
    techniques, for example bilinear or bicubic. Depending on the
    speed of the available interpolents, this choice may be
    affected by the <a href="#painting-ImageRenderingProperty"><span class="prop-name">‘image-rendering’</span></a> property
    setting. Note that implementations might choose approaches that
    minimize or eliminate resampling when not necessary to produce
    proper results, such as when the document is zoomed out such
    that <a href="#filters-feDiffuseLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a> is
    considerably smaller than a device pixel.</p>
    <p>For the formulas that follow, the
    <code>Norm(A<sub>x</sub>,A<sub>y</sub>,A<sub>z</sub>)</code>
    function is defined as:</p>
    <p class="filterformula">
    Norm(A<sub>x</sub>,A<sub>y</sub>,A<sub>z</sub>) =
    sqrt(A<sub>x</sub>^2+A<sub>y</sub>^2+A<sub>z</sub>^2)</p>
    <p>The resulting RGBA image is computed as follows:</p>
    <p class="filterformula">D<sub>r</sub> = k<sub>d</sub> * N.L *
    L<sub>r</sub><br />
     D<sub>g</sub> = k<sub>d</sub> * N.L * L<sub>g</sub><br />
     D<sub>b</sub> = k<sub>d</sub> * N.L * L<sub>b</sub><br />
     D<sub>a</sub> = 1.0</p>
    <p>where</p>
    <dl><dd>k<sub>d</sub> = diffuse lighting constant<br />
       N = surface normal unit vector, a function of x and y<br />
       L = unit vector pointing from surface to light, a function
      of x and y in the point and spot light cases<br />
       L<sub>r</sub>,L<sub>g</sub>,L<sub>b</sub> = RGB components
      of light, a function of x and y in the spot light case</dd></dl>
    <p>N is a function of x and y and depends on the surface
    gradient as follows:</p>
    <p>The surface described by the input alpha image
    I(x,y) is:</p>
    <p class="filterformula">Z (x,y) = surfaceScale *
    I(x,y)</p>

    <p id="filters-SurfaceNormalCalculations">Surface normal is calculated using the Sobel gradient 3x3
    filter. Different filter kernels are used depending on whether
    the given pixel is on the interior or an edge. For each case,
    the formula is:</p>
    <p class="filterformula">N<sub>x</sub> (x,y)= - surfaceScale *
    FACTOR<sub>x</sub> *<br />
                (K<sub>x</sub>(0,0)*I(x-dx,y-dy) +
    K<sub>x</sub>(1,0)*I(x,y-dy) +
    K<sub>x</sub>(2,0)*I(x+dx,y-dy) +<br />
                 K<sub>x</sub>(0,1)*I(x-dx,y)    +
    K<sub>x</sub>(1,1)*I(x,y)    +
    K<sub>x</sub>(2,1)*I(x+dx,y)    +<br />
                 K<sub>x</sub>(0,2)*I(x-dx,y+dy) +
    K<sub>x</sub>(1,2)*I(x,y+dy) +
    K<sub>x</sub>(2,2)*I(x+dx,y+dy))<br />
     N<sub>y</sub> (x,y)= - surfaceScale * FACTOR<sub>y</sub>
    *<br />
                (K<sub>y</sub>(0,0)*I(x-dx,y-dy) +
    K<sub>y</sub>(1,0)*I(x,y-dy) +
    K<sub>y</sub>(2,0)*I(x+dx,y-dy) +<br />
                 K<sub>y</sub>(0,1)*I(x-dx,y)    +
    K<sub>y</sub>(1,1)*I(x,y)    +
    K<sub>y</sub>(2,1)*I(x+dx,y)    +<br />
                 K<sub>y</sub>(0,2)*I(x-dx,y+dy) +
    K<sub>y</sub>(1,2)*I(x,y+dy) +
    K<sub>y</sub>(2,2)*I(x+dx,y+dy))<br />
     N<sub>z</sub> (x,y) = 1.0<br />
    <br />
     N = (N<sub>x</sub>, N<sub>y</sub>, N<sub>z</sub>) /
    Norm((N<sub>x</sub>,N<sub>y</sub>,N<sub>z</sub>))</p>
    <p>In these formulas, the <code>dx</code> and <code>dy</code>
    values (e.g., <code>I(x-dx,y-dy)</code>), represent deltas
    relative to a given <code>(x,y)</code> position for the purpose
    of estimating the slope of the surface at that point. These
    deltas are determined by the value (explicit or implicit) of
    attribute <a href="#filters-feDiffuseLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a>.</p>
    <table summary="feDiffuseLighting formulas" border="1"><colgroup><col width="33.3%" /><col width="33.3%" /><col width="*" /></colgroup><tr><td>
          <p>Top/left corner:</p>
          <p class="filterformula">
          FACTOR<sub>x</sub>=2/(3*dx)<br />
           K<sub>x</sub> =<br />
               |  0  0  0 |<br />
               |  0 -2  2 |<br />
               |  0 -1  1 |<br />
          <br />
           FACTOR<sub>y</sub>=2/(3*dy)<br />
           K<sub>y</sub> =  <br />
               |  0  0  0 |<br />
               |  0 -2 -1 |<br />
               |  0  2  1 |</p>
        </td><td>
          <p>Top row:</p>
          <p class="filterformula">
          FACTOR<sub>x</sub>=1/(3*dx)<br />
           K<sub>x</sub> =<br />
               |  0  0  0 |<br />
               | -2  0  2 |<br />
               | -1  0  1 |<br />
          <br />
           FACTOR<sub>y</sub>=1/(2*dy)<br />
           K<sub>y</sub> =  <br />
               |  0  0  0 |<br />
               | -1 -2 -1 |<br />
               |  1  2  1 |</p>
        </td><td>
          <p>Top/right corner:</p>
          <p class="filterformula">
          FACTOR<sub>x</sub>=2/(3*dx)<br />
           K<sub>x</sub> =<br />
               |  0  0  0 |<br />
               | -2  2  0 |<br />
               | -1  1  0 |<br />
          <br />
           FACTOR<sub>y</sub>=2/(3*dy)<br />
           K<sub>y</sub> =  <br />
               |  0  0  0 |<br />
               | -1 -2  0 |<br />
               |  1  2  0 |</p>
        </td></tr><tr><td>
          <p>Left column:</p>
          <p class="filterformula">
          FACTOR<sub>x</sub>=1/(2*dx)<br />
           K<sub>x</sub> =<br />
               | 0 -1  1 |<br />
               | 0 -2  2 |<br />
               | 0 -1  1 |<br />
          <br />
           FACTOR<sub>y</sub>=1/(3*dy)<br />
           K<sub>y</sub> =  <br />
               |  0 -2 -1 |<br />
               |  0  0  0 |<br />
               |  0  2  1 |</p>
        </td><td>
          <p>Interior pixels:</p>
          <p class="filterformula">
          FACTOR<sub>x</sub>=1/(4*dx)<br />
           K<sub>x</sub> =<br />
               | -1  0  1 |<br />
               | -2  0  2 |<br />
               | -1  0  1 |<br />
          <br />
           FACTOR<sub>y</sub>=1/(4*dy)<br />
           K<sub>y</sub> =  <br />
               | -1 -2 -1 |<br />
               |  0  0  0 |<br />
               |  1  2  1 |</p>
        </td><td>
          <p>Right column:</p>
          <p class="filterformula">
          FACTOR<sub>x</sub>=1/(2*dx)<br />
           K<sub>x</sub> =<br />
               | -1  1  0|<br />
               | -2  2  0|<br />
               | -1  1  0|<br />
          <br />
           FACTOR<sub>y</sub>=1/(3*dy)<br />
           K<sub>y</sub> =  <br />
               | -1 -2  0 |<br />
               |  0  0  0 |<br />
               |  1  2  0 |</p>
        </td></tr><tr><td>
          <p>Bottom/left corner:</p>
          <p class="filterformula">
          FACTOR<sub>x</sub>=2/(3*dx)<br />
           K<sub>x</sub> =<br />
               | 0 -1  1 |<br />
               | 0 -2  2 |<br />
               | 0  0  0 |<br />
          <br />
           FACTOR<sub>y</sub>=2/(3*dy)<br />
           K<sub>y</sub> =  <br />
               |  0 -2 -1 |<br />
               |  0  2  1 |<br />
               |  0  0  0 |</p>
        </td><td>
          <p>Bottom row:</p>
          <p class="filterformula">
          FACTOR<sub>x</sub>=1/(3*dx)<br />
           K<sub>x</sub> =<br />
               | -1  0  1 |<br />
               | -2  0  2 |<br />
               |  0  0  0 |<br />
          <br />
           FACTOR<sub>y</sub>=1/(2*dy)<br />
           K<sub>y</sub> =  <br />
               | -1 -2 -1 |<br />
               |  1  2  1 |<br />
               |  0  0  0 |</p>
        </td><td>
          <p>Bottom/right corner:</p>
          <p class="filterformula">
          FACTOR<sub>x</sub>=2/(3*dx)<br />
           K<sub>x</sub> =<br />
               | -1  1  0 |<br />
               | -2  2  0 |<br />
               |  0  0  0 |<br />
          <br />
           FACTOR<sub>y</sub>=2/(3*dy)<br />
           K<sub>y</sub> =  <br />
               | -1 -2  0 |<br />
               |  1  2  0 |<br />
               |  0  0  0 |</p>
        </td></tr></table>
    <p>L, the unit vector from the image sample to the light, is
    calculated as follows:</p>
    <p>For Infinite light sources it is constant:</p>
    <p class="filterformula">L<sub>x</sub> =
    cos(azimuth)*cos(elevation)<br />
     L<sub>y</sub> = sin(azimuth)*cos(elevation)<br />
     L<sub>z</sub> = sin(elevation)</p>
    <p>For Point and spot lights it is a function of position:</p>
    <p class="filterformula">L<sub>x</sub> = Light<sub>x</sub> -
    x<br />
     L<sub>y</sub> = Light<sub>y</sub> - y<br />
     L<sub>z</sub> = Light<sub>z</sub> - Z(x,y)<br />
    <br />
     L = (L<sub>x</sub>, L<sub>y</sub>, L<sub>z</sub>) /
    Norm(L<sub>x</sub>, L<sub>y</sub>, L<sub>z</sub>)</p>
    <p>where Light<sub>x</sub>, Light<sub>y</sub>, and
    Light<sub>z</sub> are the input light position.</p>
    <p>L<sub>r</sub>,L<sub>g</sub>,L<sub>b</sub>, the light color
    vector, is a function of position in the spot light case
    only:</p>
    <p class="filterformula">L<sub>r</sub> =
    Light<sub>r</sub>*pow((-L.S),specularExponent)<br />
     L<sub>g</sub> =
    Light<sub>g</sub>*pow((-L.S),specularExponent)<br />
     L<sub>b</sub> =
    Light<sub>b</sub>*pow((-L.S),specularExponent)</p>
    <p>where S is the unit vector pointing from the light to the
    point (pointsAtX, pointsAtY, pointsAtZ) in the x-y plane:</p>
    <p class="filterformula">S<sub>x</sub> = pointsAtX -
    Light<sub>x</sub><br />
     S<sub>y</sub> = pointsAtY - Light<sub>y</sub><br />
     S<sub>z</sub> = pointsAtZ - Light<sub>z</sub><br />
    <br />
     S = (S<sub>x</sub>, S<sub>y</sub>, S<sub>z</sub>) /
    Norm(S<sub>x</sub>, S<sub>y</sub>, S<sub>z</sub>)</p>
    <p>If L.S is positive, no light is present. (L<sub>r</sub> =
    L<sub>g</sub> = L<sub>b</sub> = 0). If <a href="#filters-feSpotLightLimitingConeAngleAttribute"><span class="attr-name">‘limitingConeAngle’</span></a> is specified, -L.S &lt; cos(limitingConeAngle) also indicates that no light is present.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feDiffuseLighting’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermFilterPrimitiveElement">Filter primitive element</a></dd><dt>Content model:</dt><dd>Any number of <a href="#intro-TermDescriptiveElement"><span class="svg-term">descriptive elements</span></a>
    and exactly one <a href="#intro-TermLightSourceElement"><span class="svg-term">light source element</span></a>, in any order.</dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveAttributes">filter primitive attributes</a><span class="expanding"> — <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a></li><li><a href="#filters-feDiffuseLightingSurfaceScaleAttribute"><span class="attr-name">‘surfaceScale’</span></a></li><li><a href="#filters-feDiffuseLightingDiffuseConstantAttribute"><span class="attr-name">‘diffuseConstant’</span></a></li><li><a href="#filters-feDiffuseLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEDiffuseLightingElement">SVGFEDiffuseLightingElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-feDiffuseLightingSurfaceScaleAttribute"><span class="adef">surfaceScale</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>height of surface when A<sub>in</sub> = 1.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">1</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feDiffuseLightingDiffuseConstantAttribute"><span class="adef">diffuseConstant</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>kd in Phong lighting model. In SVG, this can be any
        non-negative number.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">1</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feDiffuseLightingKernelUnitLengthAttribute">
        <span class="adef">kernelUnitLength</span> = "<span class="attr-value"><a href="#types-DataTypeNumberOptionalNumber">&lt;number-optional-number&gt;</a></span>"</dt><dd>The first number is the &lt;dx&gt; value. The second
        number is the &lt;dy&gt; value. If the &lt;dy&gt; value is
        not specified, it defaults to the same value as &lt;dx&gt;.
        Indicates the intended distance in current filter units
        (i.e., units as determined by the value of attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a>) for
        <code>dx</code> and <code>dy</code>, respectively, in the
        <a href="#filters-SurfaceNormalCalculations">surface
        normal calculation formulas</a>. By specifying value(s) for
        <a href="#filters-feDiffuseLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a>, the kernel
        becomes defined in a scalable, abstract coordinate system.
        If <a href="#filters-feDiffuseLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a> is not
        specified, the <code>dx</code> and <code>dy</code> values
        should represent very small deltas relative to a given
        <code>(x,y)</code> position, which might be implemented in
        some cases as one pixel in the intermediate image offscreen
        bitmap, which is a pixel-based coordinate system, and thus
        potentially not scalable. For some level of consistency
        across display media and user agents, it is necessary that
        a value be provided for at least one of <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a> and <a href="#filters-feDiffuseLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a>. Discussion of
        intermediate images are in the <a href="#filters-Introduction">Introduction</a> and in
        the description of attribute <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a>.<br />
         A negative or zero value is an error (see <a href="#implnote-ErrorProcessing">Error
        processing</a>).<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>
    <p>The light source is defined by one of the child elements <a href="#filters-feDistantLightElement"><span class="element-name">‘feDistantLight’</span></a>, <a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a> or <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a>. The light color
    is specified by property <a href="#filters-LightingColorProperty"><span class="prop-name">‘lighting-color’</span></a>.</p>



<h2 id="filters-feDisplacementMapElement">15.15 Filter primitive <span class="element-name">‘feDisplacementMap’</span></h2>



    <p>This filter primitive uses the pixels values from the image
    from <a href="#filters-feDisplacementMapIn2Attribute"><span class="attr-name">‘in2’</span></a> to spatially displace the
    image from <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a>. This is the transformation to
    be performed:</p>
<pre>
P'(x,y) &lt;- P( x + scale * (XC(x,y) - .5), y + scale * (YC(x,y) - .5))
</pre>
    <p>where P(x,y) is the input image, <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a>, and P'(x,y) is the
    destination. XC(x,y) and YC(x,y) are the component values of
    the channel designated by the <em>xChannelSelector</em> and
    <em>yChannelSelector</em>. For example, to use the R component
    of <a href="#filters-feDisplacementMapIn2Attribute"><span class="attr-name">‘in2’</span></a> to control displacement in x
    and the G component of Image2 to control displacement in y, set
    <em>xChannelSelector</em> to "R" and <em>yChannelSelector</em>
    to "G".</p>
    <p>The displacement map defines the inverse of the mapping
    performed.</p>
	<p>The input image in is to remain premultiplied for this filter primitive. The calculations using the pixel values from <a href="#filters-feDisplacementMapIn2Attribute"><span class="attr-name">‘in2’</span></a> are performed using non-premultiplied color values. If the image from <a href="#filters-feDisplacementMapIn2Attribute"><span class="attr-name">‘in2’</span></a> consists of premultiplied color values, those values are automatically converted into non-premultiplied color values before performing this operation.</p>
    <p>This filter can have arbitrary non-localized effect on the
    input which might require substantial buffering in the
    processing pipeline. However with this formulation, any
    intermediate buffering needs can be determined by
    <em>scale</em> which represents the maximum range of
    displacement in either x or y.</p>
    <p>When applying this filter, the source pixel location will
    often lie between several source pixels. In this case it is
    recommended that <a href="#conform-ConformingHighQualitySVGViewers">high
    quality viewers</a> apply an interpolent on the surrounding
    pixels, for example bilinear or bicubic, rather than simply
    selecting the nearest source pixel. Depending on the speed of
    the available interpolents, this choice may be affected by the
    <a href="#painting-ImageRenderingProperty"><span class="prop-name">‘image-rendering’</span></a> property
    setting.</p>
    <p>The <a href="#painting-ColorInterpolationFiltersProperty"><span class="prop-name">‘color-interpolation-filters’</span></a>
    property only applies to the <a href="#filters-feDisplacementMapIn2Attribute"><span class="attr-name">‘in2’</span></a> source image and does not
    apply to the <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> source image. The <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> source image must remain in its current color space.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feDisplacementMap’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermFilterPrimitiveElement">Filter primitive element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveAttributes">filter primitive attributes</a><span class="expanding"> — <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a></li><li><a href="#filters-feDisplacementMapIn2Attribute"><span class="attr-name">‘in2’</span></a></li><li><a href="#filters-feDisplacementMapScaleAttribute"><span class="attr-name">‘scale’</span></a></li><li><a href="#filters-feDisplacementMapXChannelSelectorAttribute"><span class="attr-name">‘xChannelSelector’</span></a></li><li><a href="#filters-feDisplacementMapYChannelSelectorAttribute"><span class="attr-name">‘yChannelSelector’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEDisplacementMapElement">SVGFEDisplacementMapElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-feDisplacementMapScaleAttribute"><span class="adef">scale</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>Displacement scale factor. The amount is expressed in
        the coordinate system established by attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element.<br />
         When the value of this attribute is <span class="attr-value">0</span>, this operation has no effect
        on the source image.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feDisplacementMapXChannelSelectorAttribute">
        <span class="adef">xChannelSelector</span> = "<em>R | G | B
        | A</em>"</dt><dd>Indicates which channel from <a href="#filters-feDisplacementMapIn2Attribute"><span class="attr-name">‘in2’</span></a> to use to displace the
        pixels in <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> along the x-axis.
        If attribute <a href="#filters-feDisplacementMapXChannelSelectorAttribute"><span class="attr-name">‘xChannelSelector’</span></a> is not specified, then the effect is as if a value of <span class="attr-value">A</span> were specified.
        <br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feDisplacementMapYChannelSelectorAttribute">
        <span class="adef">yChannelSelector</span> = "<em>R | G | B
        | A</em>"</dt><dd>Indicates which channel from <a href="#filters-feDisplacementMapIn2Attribute"><span class="attr-name">‘in2’</span></a> to use to displace the
        pixels in <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> along the y-axis.
        If attribute <a href="#filters-feDisplacementMapYChannelSelectorAttribute"><span class="attr-name">‘yChannelSelector’</span></a> is not specified, then the effect is as if a value of <span class="attr-value">A</span> were specified.
        <br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feDisplacementMapIn2Attribute"><span class="adef">in2</span> = "<em>(see <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> attribute)</em>"</dt><dd>The second input image, which is used to displace the
        pixels in the image from attribute <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a>. This attribute can take on
        the same values as the <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> attribute.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>



<h2 id="filters-feFloodElement">15.16 Filter primitive <span class="element-name">‘feFlood’</span></h2>



    <p>This filter primitive creates a rectangle filled with the
    color and opacity values from properties <a href="#filters-FloodColorProperty"><span class="prop-name">‘flood-color’</span></a> and <a href="#filters-FloodOpacityProperty"><span class="prop-name">‘flood-opacity’</span></a>. The rectangle is as
    large as the <a href="#filters-FilterPrimitiveSubRegion">filter primitive
    subregion</a> established by the <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a> attributes on the <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a> element.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feFlood’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermFilterPrimitiveElement">Filter primitive element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveAttributes">filter primitive attributes</a><span class="expanding"> — <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEFloodElement">SVGFEFloodElement</a></li></ul></dd></dl></div>

    <p>The <a href="#filters-FloodColorProperty"><span class="prop-name">‘flood-color’</span></a> property
    indicates what color to use to flood the current <a href="#filters-FilterPrimitiveSubRegion">filter primitive
    subregion</a>. The keyword <span class="attr-value">currentColor</span> and ICC colors can be
    specified in the same manner as within a <a href="#painting-SpecifyingPaint">&lt;paint&gt;</a>
    specification for the <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> and <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> properties.</p>

    <div class="propdef">
      <dl><dt id="filters-FloodColorProperty"><span class="propdef-title prop-name">‘flood-color’</span></dt><dd>
          <table summary="flood-color property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>currentColor |<br />
               <a href="#types-DataTypeColor">&lt;color&gt;</a>
               [<a href="#types-DataTypeICCColor">&lt;icccolor&gt;</a>]
              |<br />
               <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>black</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>
              elements</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <p>The <a href="#filters-FloodOpacityProperty"><span class="prop-name">‘flood-opacity’</span></a> property
    defines the opacity value to use across the entire <a href="#filters-FilterPrimitiveSubRegion">filter primitive
    subregion</a>.</p>

    <div class="propdef">
      <dl><dt id="filters-FloodOpacityProperty"><span class="propdef-title prop-name">‘flood-opacity’</span></dt><dd>
          <table summary="flood-opacity property" class="propinfo" cellspacing="0" cellpadding="0"><tr valign="baseline"><td><em>Value:</em>  </td><td>&lt;opacity-value&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr valign="baseline"><td><em>Initial:</em>  </td><td>1</td></tr><tr valign="baseline"><td><em>Applies to:</em>  </td><td><a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>
              elements</td></tr><tr valign="baseline"><td><em>Inherited:</em>  </td><td>no</td></tr><tr valign="baseline"><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr valign="baseline"><td><em>Media:</em>  </td><td>visual</td></tr><tr valign="baseline"><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>



<h2 id="filters-feGaussianBlurElement">15.17 Filter primitive <span class="element-name">‘feGaussianBlur’</span></h2>



    <p>This filter primitive performs a Gaussian blur on the input
    image.</p>
    <p>The Gaussian blur kernel is an approximation of the
    normalized convolution:</p>
    <p class="filterformula">G(x,y) = H(x)I(y)</p>
		<p>where</p>
		<p class="filterformula">H(x) = exp(-x<sup>2</sup>/ (2s<sup>2</sup>)) / sqrt(2* pi*s<sup>2</sup>)</p>
		<p>and</p> 
		<p class="filterformula">I(y) = exp(-y<sup>2</sup>/ (2t<sup>2</sup>)) / sqrt(2* pi*t<sup>2</sup>)</p>
		<p>with 's' being the standard deviation in the x direction
		and 't' being the standard deviation in the y direction, as specified by <a href="#filters-feGaussianBlurStdDeviationAttribute"><span class="attr-name">‘stdDeviation’</span></a>.</p>
    <p>The value of <a href="#filters-feGaussianBlurStdDeviationAttribute"><span class="attr-name">‘stdDeviation’</span></a> can be either one or
    two numbers. If two numbers are provided, the first number
    represents a standard deviation value along the x-axis of the
    current coordinate system and the second value represents a
    standard deviation in Y. If one number is provided, then that
    value is used for both X and Y.</p>
    <p>Even if only one value is provided for <a href="#filters-feGaussianBlurStdDeviationAttribute"><span class="attr-name">‘stdDeviation’</span></a>, this can be
    implemented as a separable convolution.</p>
    <p>For larger values of 's' (s &gt;= 2.0), an approximation can
    be used: Three successive box-blurs build a piece-wise
    quadratic convolution kernel, which approximates the Gaussian
    kernel to within roughly 3%.</p>
    <p class="filterformula">let d = floor(s * 3*sqrt(2*pi)/4 +
    0.5)</p>
    <p>... if d is odd, use three box-blurs of size 'd', centered
    on the output pixel.</p>
    <p>... if d is even, two box-blurs of size 'd' (the first one
    centered on the pixel boundary between the output pixel and the
    one to the left, the second one centered on the pixel boundary
    between the output pixel and the one to the right) and one box
    blur of size 'd+1' centered on the output pixel.</p>
    <p class="note">Note: the approximation formula also applies correspondingly to 't'.</p>
    <p>Frequently this operation will take place on alpha-only
    images, such as that produced by the built-in input, <a href="#filters-SourceAlpha"><span class="attr-value">SourceAlpha</span></a>. The implementation
    may notice this and optimize the single channel case. If the
    input has infinite extent and is constant (e.g <span class="attr-value"><a href="#filters-FillPaint">FillPaint</a></span> 
    where the fill is a solid color), this operation has
    no effect. If the input has infinite extent and the filter result is the input to an <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, the
    filter is evaluated with periodic boundary conditions.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feGaussianBlur’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermFilterPrimitiveElement">Filter primitive element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveAttributes">filter primitive attributes</a><span class="expanding"> — <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a></li><li><a href="#filters-feGaussianBlurStdDeviationAttribute"><span class="attr-name">‘stdDeviation’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEGaussianBlurElement">SVGFEGaussianBlurElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-feGaussianBlurStdDeviationAttribute"><span class="adef">stdDeviation</span> = "<em><a href="#types-DataTypeNumberOptionalNumber">&lt;number-optional-number&gt;</a></em>"</dt><dd>The standard deviation for the blur operation. If two
        <a href="#types-DataTypeNumber">&lt;number&gt;</a>s are
        provided, the first number represents a standard deviation
        value along the x-axis of the coordinate system established
        by attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element. The
        second value represents a standard deviation in Y. If one
        number is provided, then that value is used for both X and
        Y.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables the effect of the given filter primitive (i.e., the result is the filter input image). If <a href="#filters-feGaussianBlurStdDeviationAttribute"><span class="attr-name">‘stdDeviation’</span></a> is <span class="attr-value">0</span> in only one of X or Y, 
        then the effect is that the blur is only applied in the direction that has a non-zero value.
        <br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>
    <p><a href="#filters-AnExample">The example</a> at the
    start of this chapter makes use of the <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a> filter primitive to
    create a drop shadow effect.</p>



<h2 id="filters-feImageElement">15.18 Filter primitive <span class="element-name">‘feImage’</span></h2>



    <p>This filter primitive refers to a graphic external to this
    filter element, which is loaded or rendered into an RGBA raster
    and becomes the result of the filter primitive.</p>
    <p>This filter primitive can refer to an external image or can
    be a reference to another piece of SVG. It produces an image
    similar to the built-in image source <a href="#filters-SourceGraphic"><span class="attr-value">SourceGraphic</span></a> except that the
    graphic comes from an external source.</p>
    <p>If the <a href="#filters-feImageElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> references
    a stand-alone image resource such as a JPEG, PNG or SVG file,
    then the image resource is rendered according to the behavior
    of the <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element; otherwise, the
    referenced resource is rendered according to the behavior of
    the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element. In either case,
    the current user coordinate system depends on the value of
    attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element. The
    processing of the <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> attribute on
    the <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a> element is
    identical to that of the <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element.</p>
    <p>When the referenced image must be resampled to match the
    device coordinate system, it is recommended that <a href="#conform-ConformingHighQualitySVGViewers">high
    quality viewers</a> make use of appropriate interpolation
    techniques, for example bilinear or bicubic. Depending on the
    speed of the available interpolents, this choice may be
    affected by the <a href="#painting-ImageRenderingProperty"><span class="prop-name">‘image-rendering’</span></a> property
    setting.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feImage’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermFilterPrimitiveElement">Filter primitive element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveAttributes">filter primitive attributes</a><span class="expanding"> — <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#filters-feImageElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a></li><li><a href="#filters-feImageElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEImageElement">SVGFEImageElement</a></li></ul></dd></dl></div>

<div class="adef-list">
  <p><em>Attribute definitions:</em></p>
  <dl><dt id="filters-feImageElementHrefAttribute"><span class="adef">xlink:href</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span>"</dt><dd>
      <p>An <a href="#linking-IRIReference">IRI reference</a> to the image
      source.</p>
      <p><span class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes.</span></p>
    </dd><dt id="filters-feImageElementPreserveAspectRatioAttribute">
      <span class="adef">preserveAspectRatio</span> = "<span class="attr-value"><a href="#coords-PreserveAspectRatioAttribute">[defer] &lt;align&gt; [&lt;meetOrSlice&gt;]</a></span>"
    </dt><dd>
      <p>
        See <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a>.
      </p>
      <p>
        If attribute <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> is not specified, then the effect is as if a value of <span class="attr-value">xMidYMid meet</span> were specified.
      </p>
      <p><span class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes.</span></p>
    </dd></dl>
</div>

<p><span class="example-ref">Example feImage</span> illustrates how images are placed relative
to an object. From left to right:</p>
<ul><li>
    The default placement of an image. Note that the image is
    centered in the <a href="#filters-FilterEffectsRegion"><span class="svg-term">filter region</span></a> and has the maximum size that will
    fit in the region consistent with preserving the aspect ratio.
  </li><li>
    The image stretched to fit the bounding box of an object.
  </li><li>
    The image placed using user coordinates. Note that the image is
    first centered in a box the size of the <a href="#filters-FilterEffectsRegion"><span class="svg-term">filter region</span></a> and has the
    maximum size that will fit in the box consistent with preserving
    the aspect ratio. This box is then shifted by the given 'x' and
    'y' values relative to the viewport the object is in.
  </li></ul>

<pre class="xml">&lt;svg width="600" height="250" viewBox="0 0 600 250"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;title&gt;Example feImage - Examples of feImage use&lt;/title&gt;
  &lt;desc&gt;Three examples of using feImage, the first showing the
        default rendering, the second showing the image fit
        to a box and the third showing the image
        shifted and clipped.&lt;/desc&gt;
  &lt;defs&gt;
    &lt;filter id="Default"&gt;
      &lt;feImage xlink:href="smiley.png" /&gt;
    &lt;/filter&gt;
    &lt;filter id="Fitted" primitiveUnits="objectBoundingBox"&gt;
      &lt;feImage xlink:href="smiley.png"
	       x="0" y="0" width="100%" height="100%"
	       preserveAspectRatio="none"/&gt;
    &lt;/filter&gt;
    &lt;filter id="Shifted"&gt;
      &lt;feImage xlink:href="smiley.png"
	       x="500" y="5"/&gt;
    &lt;/filter&gt;
  &lt;/defs&gt;
  &lt;rect fill="none" stroke="blue"  
        x="1" y="1" width="598" height="248"/&gt;
  &lt;g&gt;
    &lt;rect x="50"  y="25" width="100" height="200" filter="url(#Default)"/&gt;
    &lt;rect x="50"  y="25" width="100" height="200" fill="none" stroke="green"/&gt;
    &lt;rect x="250" y="25" width="100" height="200" filter="url(#Fitted)"/&gt;
    &lt;rect x="250" y="25" width="100" height="200" fill="none" stroke="green"/&gt;
    &lt;rect x="450" y="25" width="100" height="200" filter="url(#Shifted)"/&gt;
    &lt;rect x="450" y="25" width="100" height="200" fill="none" stroke="green"/&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example feImage</caption><tr><td><img alt="Example feImage — Examples of feImage use" src="images/filters/feImage-01.png" /></td></tr></table><p class="view-as-svg"><a href="images/filters/feImage-01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h2 id="filters-feMergeElement">15.19 Filter primitive <span class="element-name">‘feMerge’</span></h2>



    <p>This filter primitive composites input image layers on top
    of each other using the <em>over</em> operator with
    <em>Input1</em> (corresponding to the first <a href="#filters-feMergeNodeElement"><span class="element-name">‘feMergeNode’</span></a> child element) on
    the bottom and the last specified input, <em>InputN</em>
    (corresponding to the last <a href="#filters-feMergeNodeElement"><span class="element-name">‘feMergeNode’</span></a> child element),
    on top.</p>
    <p>Many effects produce a number of intermediate layers in
    order to create the final output image. This filter allows us
    to collapse those into a single image. Although this could be
    done by using n-1 Composite-filters, it is more convenient to
    have this common operation available in this form, and offers
    the implementation some additional flexibility.</p>
    <p>Each <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a> element can have any number of <a href="#filters-feMergeNodeElement"><span class="element-name">‘feMergeNode’</span></a>
    subelements, each of which has an <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> attribute.</p>
    <p>The canonical implementation of feMerge is to render the
    entire effect into one RGBA layer, and then render the
    resulting layer on the output device. In certain cases (in
    particular if the output device itself is a continuous tone
    device), and since merging is associative, it might be a
    sufficient approximation to evaluate the effect one layer at a
    time and render each layer individually onto the output device
    bottom to top.</p>
    <p>If the topmost image input is <a href="#filters-SourceGraphic"><span class="attr-value">SourceGraphic</span></a> and this <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a> is the last filter
    primitive in the filter, the implementation is encouraged to
    render the layers up to that point, and then render the <a href="#filters-SourceGraphic"><span class="attr-value">SourceGraphic</span></a> directly from its
    vector description on top.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feMerge’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermFilterPrimitiveElement">Filter primitive element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#filters-feMergeNodeElement"><span class="element-name">‘feMergeNode’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveAttributes">filter primitive attributes</a><span class="expanding"> — <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEMergeElement">SVGFEMergeElement</a></li></ul></dd></dl></div>

<div id="filters-feMergeNodeElement">
<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feMergeNode’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEMergeNodeElement">SVGFEMergeNodeElement</a></li></ul></dd></dl></div>
</div>

<p><a href="#filters-AnExample">The example</a> at the start of this
chapter makes use of the <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a> filter primitive to composite
two intermediate filter results together.</p>



<h2 id="filters-feMorphologyElement">15.20 Filter primitive <span class="element-name">‘feMorphology’</span></h2>



    <p>This filter primitive performs "fattening" or "thinning" of
    artwork. It is particularly useful for fattening or thinning an
    alpha channel.</p>
    <p>The dilation (or erosion) kernel is a rectangle with a width
    of 2*<em>x-radius</em> and a height of 2*<em>y-radius</em>. In
    dilation, the output pixel is the individual component-wise
    maximum of the corresponding R,G,B,A values in the input
    image's kernel rectangle. In erosion, the output pixel is the
    individual component-wise minimum of the corresponding R,G,B,A
    values in the input image's kernel rectangle.</p>
    <p>Frequently this operation will take place on alpha-only
    images, such as that produced by the built-in input, <a href="#filters-SourceAlpha"><span class="attr-value">SourceAlpha</span></a>. In that case, the
    implementation might want to optimize the single channel
    case.</p>
    <p>If the input has infinite extent and is constant (e.g 
    <span class="attr-value"><a href="#filters-FillPaint">FillPaint</a></span> 
    where the fill is a solid color), this operation has
    no effect. If the input has infinite extent and the filter result 
    is the input to an <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, the filter is evaluated with 
    periodic boundary conditions.
    </p>
    <p>Because <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>
    operates on premultipied color values, it will always result in
    color values less than or equal to the alpha channel.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feMorphology’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermFilterPrimitiveElement">Filter primitive element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveAttributes">filter primitive attributes</a><span class="expanding"> — <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a></li><li><a href="#filters-feMorphologyOperatorAttribute"><span class="attr-name">‘operator’</span></a></li><li><a href="#filters-feMorphologyRadiusAttribute"><span class="attr-name">‘radius’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEMorphologyElement">SVGFEMorphologyElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-feMorphologyOperatorAttribute"><span class="adef">operator</span> = "<em>erode |
        dilate</em>"</dt><dd>A keyword indicating whether to erode (i.e., thin) or
        dilate (fatten) the source graphic.
        If attribute <a href="#filters-feMorphologyOperatorAttribute"><span class="attr-name">‘operator’</span></a> is not specified, then the effect is as if a value of <span class="attr-value">erode</span> were specified.
        <br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feMorphologyRadiusAttribute"><span class="adef">radius</span> = "<em><a href="#types-DataTypeNumberOptionalNumber">&lt;number-optional-number&gt;</a></em>"</dt><dd>The radius (or radii) for the operation. If two <a href="#types-DataTypeNumber">&lt;number&gt;</a>s are
        provided, the first number represents a x-radius and the
        second value represents a y-radius. If one number is
        provided, then that value is used for both X and Y. The
        values are in the coordinate system established by
        attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables the effect of the given filter
        primitive (i.e., the result is a transparent black
        image).<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>
    <p><span class="example-ref">Example feMorphology</span> shows
    examples of the four types of feMorphology operations.</p>

<pre class="xml">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
          "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="5cm" height="7cm" viewBox="0 0 700 500"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;title&gt;Example feMorphology - Examples of erode and dilate&lt;/title&gt;
  &lt;desc&gt;Five text strings drawn as outlines.
        The first is unfiltered. The second and third use 'erode'.
        The fourth and fifth use 'dilate'.&lt;/desc&gt;
  &lt;defs&gt;
    &lt;filter id="Erode3"&gt;
      &lt;feMorphology operator="erode" in="SourceGraphic" radius="3" /&gt;
    &lt;/filter&gt;
    &lt;filter id="Erode6"&gt;
      &lt;feMorphology operator="erode" in="SourceGraphic" radius="6" /&gt;
    &lt;/filter&gt;
    &lt;filter id="Dilate3"&gt;
      &lt;feMorphology operator="dilate" in="SourceGraphic" radius="3" /&gt;
    &lt;/filter&gt;
    &lt;filter id="Dilate6"&gt;
      &lt;feMorphology operator="dilate" in="SourceGraphic" radius="6" /&gt;
    &lt;/filter&gt;
  &lt;/defs&gt;
  &lt;rect fill="none" stroke="blue" stroke-width="2"  
        x="1" y="1" width="698" height="498"/&gt;
  &lt;g enable-background="new" &gt;
    &lt;g font-family="Verdana" font-size="75" 
              fill="none" stroke="black" stroke-width="6" &gt;
      &lt;text x="50" y="90"&gt;Unfiltered&lt;/text&gt;
      &lt;text x="50" y="180" filter="url(#Erode3)" &gt;Erode radius 3&lt;/text&gt;
      &lt;text x="50" y="270" filter="url(#Erode6)" &gt;Erode radius 6&lt;/text&gt;
      &lt;text x="50" y="360" filter="url(#Dilate3)" &gt;Dilate radius 3&lt;/text&gt;
      &lt;text x="50" y="450" filter="url(#Dilate6)" &gt;Dilate radius 6&lt;/text&gt;
    &lt;/g&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example feMorphology</caption><tr><td><img alt="Example feMorphology — Examples of erode and dilate" src="images/filters/feMorphology.png" /></td></tr></table><p class="view-as-svg"><a href="images/filters/feMorphology.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h2 id="filters-feOffsetElement">15.21 Filter primitive <span class="element-name">‘feOffset’</span></h2>



    <p>This filter primitive offsets the input image relative to
    its current position in the image space by the specified
    vector.</p>
    <p>This is important for effects like drop shadows.</p>
    <p>When applying this filter, the destination location may be
    offset by a fraction of a pixel in device space. In this case a
    <a href="#conform-ConformingHighQualitySVGViewers">high
    quality viewer</a> should make use of appropriate interpolation
    techniques, for example bilinear or bicubic. This is especially
    recommended for dynamic viewers where this interpolation
    provides visually smoother movement of images. For static
    viewers this is less of a concern. Close attention should be
    made to the <a href="#painting-ImageRenderingProperty"><span class="prop-name">‘image-rendering’</span></a> property setting
    to determine the authors intent.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feOffset’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermFilterPrimitiveElement">Filter primitive element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveAttributes">filter primitive attributes</a><span class="expanding"> — <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a></li><li><a href="#filters-feOffsetDxAttribute"><span class="attr-name">‘dx’</span></a></li><li><a href="#filters-feOffsetDyAttribute"><span class="attr-name">‘dy’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFEOffsetElement">SVGFEOffsetElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-feOffsetDxAttribute"><span class="adef">dx</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>The amount to offset the input graphic along the
        x-axis. The offset amount is expressed in the coordinate
        system established by attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feOffsetDyAttribute"><span class="adef">dy</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>The amount to offset the input graphic along the
        y-axis. The offset amount is expressed in the coordinate
        system established by attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>
    <p><a href="#filters-AnExample">The example</a> at the
    start of this chapter makes use of the <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a> filter primitive to offset
    the drop shadow from the original source graphic.</p>



<h2 id="filters-feSpecularLightingElement">15.22 Filter primitive <span class="element-name">‘feSpecularLighting’</span></h2>



    <p>This filter primitive lights a source graphic using the
    alpha channel as a bump map. The resulting image is an RGBA
    image based on the light color. The lighting calculation
    follows the standard specular component of the Phong lighting
    model. The resulting image depends on the light color, light
    position and surface geometry of the input bump map. The result
    of the lighting calculation is added. The filter primitive
    assumes that the viewer is at infinity in the z direction
    (i.e., the unit vector in the eye direction is (0,0,1)
    everywhere).</p>
    <p>This filter primitive produces an image which contains the
    specular reflection part of the lighting calculation. Such a
    map is intended to be combined with a texture using the
    <em>add</em> term of the <em>arithmetic</em> <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a> method. Multiple
    light sources can be simulated by adding several of these light
    maps before applying it to the texture image.</p>
    <p>The resulting RGBA image is computed as follows:</p>
    <p class="filterformula">S<sub>r</sub> = k<sub>s</sub> *
    pow(N.H, specularExponent) * L<sub>r<br />
    </sub> S<sub>g</sub> = k<sub>s</sub> * pow(N.H,
    specularExponent) * L<sub>g<br />
    </sub> S<sub>b</sub> = k<sub>s</sub> * pow(N.H,
    specularExponent) * L<sub>b<br />
    </sub> S<sub>a</sub> = max(S<sub>r,</sub> S<sub>g,</sub>
    S<sub>b</sub>)</p>
    <p>where</p>
    <dl><dd>k<sub>s</sub> = specular lighting constant<br />
       N = surface normal unit vector, a function of x and y<br />
       H = "halfway" unit vector between eye unit vector and light
      unit vector<br />
      <br />
       L<sub>r</sub>,L<sub>g</sub>,L<sub>b</sub> = RGB components
      of light</dd></dl>
    <p>See <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a> for
    definition of N and (L<sub>r</sub>, L<sub>g</sub>,
    L<sub>b</sub>).</p>
    <p>The definition of H reflects our assumption of the constant
    eye vector E = (0,0,1):</p>
    <p class="filterformula">H = (L + E) / Norm(L+E)</p>
    <p>where L is the light unit vector.</p>
    <p>Unlike the <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, the <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a> filter
    produces a non-opaque image. This is due to the fact that the
    specular result
    (S<sub>r</sub>,S<sub>g</sub>,S<sub>b</sub>,S<sub>a</sub>) is
    meant to be added to the textured image. The alpha channel of
    the result is the max of the color components, so that where
    the specular light is zero, no additional coverage is added to
    the image and a fully white highlight will add opacity.</p>
    <p>The <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a> and <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a> filters will
    often be applied together. An implementation may detect this
    and calculate both maps in one pass, instead of two.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feSpecularLighting’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermFilterPrimitiveElement">Filter primitive element</a></dd><dt>Content model:</dt><dd>Any number of <a href="#intro-TermDescriptiveElement"><span class="svg-term">descriptive elements</span></a>
    and exactly one <a href="#intro-TermLightSourceElement"><span class="svg-term">light source element</span></a>, in any order.</dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveAttributes">filter primitive attributes</a><span class="expanding"> — <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a></li><li><a href="#filters-feSpecularLightingSurfaceScaleAttribute"><span class="attr-name">‘surfaceScale’</span></a></li><li><a href="#filters-feSpecularLightingSpecularConstantAttribute"><span class="attr-name">‘specularConstant’</span></a></li><li><a href="#filters-feSpecularLightingSpecularExponentAttribute"><span class="attr-name">‘specularExponent’</span></a></li><li><a href="#filters-feSpecularLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFESpecularLightingElement">SVGFESpecularLightingElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-feSpecularLightingSurfaceScaleAttribute"><span class="adef">surfaceScale</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>height of surface when A<sub>in</sub> = 1.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">1</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feSpecularLightingSpecularConstantAttribute">
        <span class="adef">specularConstant</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>ks in Phong lighting model. In SVG, this can be any
        non-negative number.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">1</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feSpecularLightingSpecularExponentAttribute">
        <span class="adef">specularExponent</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>Exponent for specular term, larger is more "shiny".
        Range 1.0 to 128.0.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">1</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feSpecularLightingKernelUnitLengthAttribute">
        <span class="adef">kernelUnitLength</span> = "<span class="attr-value"><a href="#types-DataTypeNumberOptionalNumber">&lt;number-optional-number&gt;</a></span>"</dt><dd>The first number is the &lt;dx&gt; value. The second
        number is the &lt;dy&gt; value. If the &lt;dy&gt; value is
        not specified, it defaults to the same value as &lt;dx&gt;.
        Indicates the intended distance in current filter units
        (i.e., units as determined by the value of attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a>) for
        <code>dx</code> and <code>dy</code>, respectively, in the
        <a href="#filters-SurfaceNormalCalculations">surface
        normal calculation formulas</a>. By specifying value(s) for
        <a href="#filters-feSpecularLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a>, the kernel
        becomes defined in a scalable, abstract coordinate system.
        If <a href="#filters-feSpecularLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a> is not
        specified, the <code>dx</code> and <code>dy</code> values
        should represent very small deltas relative to a given
        <code>(x,y)</code> position, which might be implemented in
        some cases as one pixel in the intermediate image offscreen
        bitmap, which is a pixel-based coordinate system, and thus
        potentially not scalable. For some level of consistency
        across display media and user agents, it is necessary that
        a value be provided for at least one of <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a> and <a href="#filters-feSpecularLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a>. Discussion of
        intermediate images are in the <a href="#filters-Introduction">Introduction</a> and in
        the description of attribute <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a>.<br />
         A negative or zero value is an error (see <a href="#implnote-ErrorProcessing">Error
        processing</a>).<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>
    <p>The light source is defined by one of the child elements <a href="#filters-feDistantLightElement"><span class="element-name">‘feDistantLight’</span></a>, <a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a> or <a href="#filters-feDistantLightElement"><span class="element-name">‘feDistantLight’</span></a>. The light
    color is specified by property <a href="#filters-LightingColorProperty"><span class="prop-name">‘lighting-color’</span></a>.</p>
    <p><a href="#filters-AnExample">The example</a> at the
    start of this chapter makes use of the <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a> filter primitive
    to achieve a highly reflective, 3D glowing effect.</p>



<h2 id="filters-feTileElement">15.23 Filter primitive <span class="element-name">‘feTile’</span></h2>



    <p>This filter primitive fills a target rectangle with a
    repeated, tiled pattern of an input image. The target rectangle
    is as large as the <a href="#filters-FilterPrimitiveSubRegion">filter primitive
    subregion</a> established by the <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a> and <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a> attributes on the <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a> element.</p>
    <p>Typically, the input image has been defined with its own <a href="#filters-FilterPrimitiveSubRegion">filter primitive
    subregion</a> in order to define a reference tile. <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a> replicates the reference
    tile in both X and Y to completely fill the target rectangle.
    The top/left corner of each given tile is at location
    <code>(x+i*width,y+j*height)</code>, where <code>(x,y)</code>
    represents the top/left of the input image's filter primitive
    subregion, <code>width</code> and <code>height</code> represent
    the width and height of the input image's filter primitive
    subregion, and <code>i</code> and <code>j</code> can be any
    integer value. In most cases, the input image will have a
    smaller <a href="#filters-FilterPrimitiveSubRegion"><span class="svg-term">filter primitive subregion</span></a> than the <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a> in order to achieve a
    repeated pattern effect.</p>
    <p>Implementers must take appropriate measures in constructing
    the tiled image to avoid artifacts between tiles, particularly
    in situations where the user to device transform includes shear
    and/or rotation. Unless care is taken, interpolation can lead
    to edge pixels in the tile having opacity values lower or
    higher than expected due to the interaction of painting
    adjacent tiles which each have partial overlap with particular
    pixels.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feTile’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermFilterPrimitiveElement">Filter primitive element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveAttributes">filter primitive attributes</a><span class="expanding"> — <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFETileElement">SVGFETileElement</a></li></ul></dd></dl></div>



<h2 id="filters-feTurbulenceElement">15.24 Filter primitive <span class="element-name">‘feTurbulence’</span></h2>



    <p>This filter primitive creates an image using the Perlin
    turbulence function. It allows the synthesis of artificial
    textures like clouds or marble. For a detailed description the
    of the Perlin turbulence function, see "Texturing and
    Modeling", Ebert et al, AP Professional, 1994. The resulting
    image will fill the entire <a href="#filters-FilterPrimitiveSubRegion">filter primitive
    subregion</a> for this filter primitive.</p>
    <p>It is possible to create bandwidth-limited noise by
    synthesizing only one octave.</p>
    <p>The C code below shows the exact algorithm used for this
    filter effect.</p>
    <p>For fractalSum, you get a turbFunctionResult that is aimed
    at a range of -1 to 1 (the actual result might exceed this
    range in some cases). To convert to a color value, use the
    formula <code>colorValue = ((turbFunctionResult * 255) + 255) /
    2</code>, then clamp to the range 0 to 255.</p>
    <p>For turbulence, you get a turbFunctionResult that is aimed
    at a range of 0 to 1 (the actual result might exceed this range
    in some cases). To convert to a color value, use the formula
    <code>colorValue = (turbFunctionResult * 255)</code>, then
    clamp to the range 0 to 255.</p>
    <p>The following order is used for applying the pseudo random
    numbers. An initial seed value is computed based on attribute
    <a href="#filters-feTurbulenceSeedAttribute"><span class="attr-name">‘seed’</span></a>. Then the implementation
    computes the lattice points for R, then continues getting
    additional pseudo random numbers relative to the last generated
    pseudo random number and computes the lattice points for G, and
    so on for B and A.</p>
    <p>The generated color and alpha values are in the color space
    determined by the value of property <a href="#painting-ColorInterpolationFiltersProperty"><span class="prop-name">‘color-interpolation-filters’</span></a>:</p>
<pre class="svgsamplecompressed">
/* Produces results in the range [1, 2**31 - 2].
Algorithm is: r = (a * r) mod m
where a = 16807 and m = 2**31 - 1 = 2147483647
See [Park &amp; Miller], CACM vol. 31 no. 10 p. 1195, Oct. 1988
To test: the algorithm should produce the result 1043618065
as the 10,000th generated number if the original seed is 1.
*/
#define RAND_m 2147483647 /* 2**31 - 1 */
#define RAND_a 16807 /* 7**5; primitive root of m */
#define RAND_q 127773 /* m / a */
#define RAND_r 2836 /* m % a */
long setup_seed(long lSeed)
{
  if (lSeed &lt;= 0) lSeed = -(lSeed % (RAND_m - 1)) + 1;
  if (lSeed &gt; RAND_m - 1) lSeed = RAND_m - 1;
  return lSeed;
}
long random(long lSeed)
{
  long result;
  result = RAND_a * (lSeed % RAND_q) - RAND_r * (lSeed / RAND_q);
  if (result &lt;= 0) result += RAND_m;
  return result;
}
#define BSize 0x100
#define BM 0xff
#define PerlinN 0x1000
#define NP 12 /* 2^PerlinN */
#define NM 0xfff
static uLatticeSelector[BSize + BSize + 2];
static double fGradient[4][BSize + BSize + 2][2];
struct StitchInfo
{
  int nWidth; // How much to subtract to wrap for stitching.
  int nHeight;
  int nWrapX; // Minimum value to wrap.
  int nWrapY;
};
static void init(long lSeed)
{
  double s;
  int i, j, k;
  lSeed = setup_seed(lSeed);
  for(k = 0; k &lt; 4; k++)
  {
    for(i = 0; i &lt; BSize; i++)
    {
      uLatticeSelector[i] = i;
      for (j = 0; j &lt; 2; j++)
        fGradient[k][i][j] = (double)(((lSeed = random(lSeed)) % (BSize + BSize)) - BSize) / BSize;
      s = double(sqrt(fGradient[k][i][0] * fGradient[k][i][0] + fGradient[k][i][1] * fGradient[k][i][1]));
      fGradient[k][i][0] /= s;
      fGradient[k][i][1] /= s;
    }
  }
  while(--i)
  {
    k = uLatticeSelector[i];
    uLatticeSelector[i] = uLatticeSelector[j = (lSeed = random(lSeed)) % BSize];
    uLatticeSelector[j] = k;
  }
  for(i = 0; i &lt; BSize + 2; i++)
  {
    uLatticeSelector[BSize + i] = uLatticeSelector[i];
    for(k = 0; k &lt; 4; k++)
      for(j = 0; j &lt; 2; j++)
        fGradient[k][BSize + i][j] = fGradient[k][i][j];
  }
}
#define s_curve(t) ( t * t * (3. - 2. * t) )
#define lerp(t, a, b) ( a + t * (b - a) )
double noise2(int nColorChannel, double vec[2], StitchInfo *pStitchInfo)
{
  int bx0, bx1, by0, by1, b00, b10, b01, b11;
  double rx0, rx1, ry0, ry1, *q, sx, sy, a, b, t, u, v;
  register i, j;
  t = vec[0] + PerlinN;
  bx0 = (int)t;
  bx1 = bx0+1;
  rx0 = t - (int)t;
  rx1 = rx0 - 1.0f;
  t = vec[1] + PerlinN;
  by0 = (int)t;
  by1 = by0+1;
  ry0 = t - (int)t;
  ry1 = ry0 - 1.0f;
  // If stitching, adjust lattice points accordingly.
  if(pStitchInfo != NULL)
  {
    if(bx0 &gt;= pStitchInfo-&gt;nWrapX)
      bx0 -= pStitchInfo-&gt;nWidth;
    if(bx1 &gt;= pStitchInfo-&gt;nWrapX)
      bx1 -= pStitchInfo-&gt;nWidth;
    if(by0 &gt;= pStitchInfo-&gt;nWrapY)
      by0 -= pStitchInfo-&gt;nHeight;
    if(by1 &gt;= pStitchInfo-&gt;nWrapY)
      by1 -= pStitchInfo-&gt;nHeight;
  }
  bx0 &amp;= BM;
  bx1 &amp;= BM;
  by0 &amp;= BM;
  by1 &amp;= BM;
  i = uLatticeSelector[bx0];
  j = uLatticeSelector[bx1];
  b00 = uLatticeSelector[i + by0];
  b10 = uLatticeSelector[j + by0];
  b01 = uLatticeSelector[i + by1];
  b11 = uLatticeSelector[j + by1];
  sx = double(s_curve(rx0));
  sy = double(s_curve(ry0));
  q = fGradient[nColorChannel][b00]; u = rx0 * q[0] + ry0 * q[1];
  q = fGradient[nColorChannel][b10]; v = rx1 * q[0] + ry0 * q[1];
  a = lerp(sx, u, v);
  q = fGradient[nColorChannel][b01]; u = rx0 * q[0] + ry1 * q[1];
  q = fGradient[nColorChannel][b11]; v = rx1 * q[0] + ry1 * q[1];
  b = lerp(sx, u, v);
  return lerp(sy, a, b);
}
double turbulence(int nColorChannel, double *point, double fBaseFreqX, double fBaseFreqY,
          int nNumOctaves, bool bFractalSum, bool bDoStitching,
          double fTileX, double fTileY, double fTileWidth, double fTileHeight)
{
  StitchInfo stitch;
  StitchInfo *pStitchInfo = NULL; // Not stitching when NULL.
  // Adjust the base frequencies if necessary for stitching.
  if(bDoStitching)
  {
    // When stitching tiled turbulence, the frequencies must be adjusted
    // so that the tile borders will be continuous.
    if(fBaseFreqX != 0.0)
    {
      double fLoFreq = double(floor(fTileWidth * fBaseFreqX)) / fTileWidth;
      double fHiFreq = double(ceil(fTileWidth * fBaseFreqX)) / fTileWidth;
      if(fBaseFreqX / fLoFreq &lt; fHiFreq / fBaseFreqX)
        fBaseFreqX = fLoFreq;
      else
        fBaseFreqX = fHiFreq;
    }
    if(fBaseFreqY != 0.0)
    {
      double fLoFreq = double(floor(fTileHeight * fBaseFreqY)) / fTileHeight;
      double fHiFreq = double(ceil(fTileHeight * fBaseFreqY)) / fTileHeight;
      if(fBaseFreqY / fLoFreq &lt; fHiFreq / fBaseFreqY)
        fBaseFreqY = fLoFreq;
      else
        fBaseFreqY = fHiFreq;
    }
    // Set up initial stitch values.
    pStitchInfo = &amp;stitch;
    stitch.nWidth = int(fTileWidth * fBaseFreqX + 0.5f);
    stitch.nWrapX = fTileX * fBaseFreqX + PerlinN + stitch.nWidth;
    stitch.nHeight = int(fTileHeight * fBaseFreqY + 0.5f);
    stitch.nWrapY = fTileY * fBaseFreqY + PerlinN + stitch.nHeight;
  }
  double fSum = 0.0f;
  double vec[2];
  vec[0] = point[0] * fBaseFreqX;
  vec[1] = point[1] * fBaseFreqY;
  double ratio = 1;
  for(int nOctave = 0; nOctave &lt; nNumOctaves; nOctave++)
  {
    if(bFractalSum)
      fSum += double(noise2(nColorChannel, vec, pStitchInfo) / ratio);
    else
      fSum += double(fabs(noise2(nColorChannel, vec, pStitchInfo)) / ratio);
    vec[0] *= 2;
    vec[1] *= 2;
    ratio *= 2;
    if(pStitchInfo != NULL)
    {
      // Update stitch values. Subtracting PerlinN before the multiplication and
      // adding it afterward simplifies to subtracting it once.
      stitch.nWidth *= 2;
      stitch.nWrapX = 2 * stitch.nWrapX - PerlinN;
      stitch.nHeight *= 2;
      stitch.nWrapY = 2 * stitch.nWrapY - PerlinN;
    }
  }
  return fSum;
}
</pre>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘feTurbulence’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermFilterPrimitiveElement">Filter primitive element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermFilterPrimitiveAttributes">filter primitive attributes</a><span class="expanding"> — <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a>, <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a>, <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a>, <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a>, <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#filters-feTurbulenceBaseFrequencyAttribute"><span class="attr-name">‘baseFrequency’</span></a></li><li><a href="#filters-feTurbulenceNumOctavesAttribute"><span class="attr-name">‘numOctaves’</span></a></li><li><a href="#filters-feTurbulenceSeedAttribute"><span class="attr-name">‘seed’</span></a></li><li><a href="#filters-feTurbulenceStitchTilesAttribute"><span class="attr-name">‘stitchTiles’</span></a></li><li><a href="#filters-feTurbulenceTypeAttribute"><span class="attr-name">‘type’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#filters-InterfaceSVGFETurbulenceElement">SVGFETurbulenceElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="filters-feTurbulenceBaseFrequencyAttribute"><span class="adef">baseFrequency</span> = "<em><a href="#types-DataTypeNumberOptionalNumber">&lt;number-optional-number&gt;</a></em>"</dt><dd>The base frequency (frequencies) parameter(s) for the
        noise function. If two <a href="#types-DataTypeNumber">&lt;number&gt;</a>s are
        provided, the first number represents a base frequency in
        the X direction and the second value represents a base
        frequency in the Y direction. If one number is provided,
        then that value is used for both X and Y.<br />
         A negative value for base frequency is an error (see <a href="#implnote-ErrorProcessing">Error
        processing</a>).<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feTurbulenceNumOctavesAttribute"><span class="adef">numOctaves</span> = "<em><a href="#types-DataTypeInteger">&lt;integer&gt;</a></em>"</dt><dd>The numOctaves parameter for the noise function.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">1</span> were
        specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feTurbulenceSeedAttribute"><span class="adef">seed</span> = "<em><a href="#types-DataTypeNumber">&lt;number&gt;</a></em>"</dt><dd>The starting number for the pseudo random number
        generator.<br />
         If the attribute is not specified, then the effect is as
        if a value of <span class="attr-value">0</span> were
        specified. When the seed number is handed over to the algorithm above it must first be truncated, i.e. rounded to the closest integer value towards zero.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feTurbulenceStitchTilesAttribute"><span class="adef">stitchTiles</span> = "<em>stitch |
        noStitch</em>"</dt><dd>If <span class="attr-value">stitchTiles="noStitch"</span>, no
        attempt it made to achieve smooth transitions at the border
        of tiles which contain a turbulence function. Sometimes the
        result will show clear discontinuities at the tile
        borders.<br />
         If <span class="attr-value">stitchTiles="stitch"</span>,
        then the user agent will automatically adjust
        baseFrequency-x and baseFrequency-y values such that the
        feTurbulence node's width and height (i.e., the width and
        height of the current subregion) contains an integral
        number of the Perlin tile width and height for the first
        octave. The baseFrequency will be adjusted up or down
        depending on which way has the smallest relative (not
        absolute) change as follows: Given the frequency, calculate
        <code>lowFreq=floor(width*frequency)/width</code> and
        <code>hiFreq=ceil(width*frequency)/width</code>. If
        frequency/lowFreq &lt; hiFreq/frequency then use lowFreq,
        else use hiFreq. While generating turbulence values,
        generate lattice vectors as normal for Perlin Noise, except
        for those lattice points that lie on the right or bottom
        edges of the active area (the size of the resulting tile).
        In those cases, copy the lattice vector from the opposite
        edge of the active area.
        <p>
          If attribute <a href="#filters-feTurbulenceStitchTilesAttribute"><span class="attr-name">‘stitchTiles’</span></a> is not specified, then the effect is as if a value of <span class="attr-value">noStitch</span> were specified.
        </p><br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="filters-feTurbulenceTypeAttribute"><span class="adef">type</span> = "<em>fractalNoise |
        turbulence</em>"</dt><dd>Indicates whether the filter primitive should perform a
        noise or turbulence function.
        If attribute <a href="#filters-feTurbulenceTypeAttribute"><span class="attr-name">‘type’</span></a> is not specified, then the effect is as if a value of <span class="attr-value">turbulence</span> were specified.
        <br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>
    <p><span class="example-ref">Example feTurbulence</span> shows
    the effects of various parameter settings for feTurbulence.</p>

<pre class="xml">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
          "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="450px" height="325px" viewBox="0 0 450 325"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;title&gt;Example feTurbulence - Examples of feTurbulence operations&lt;/title&gt;
  &lt;desc&gt;Six rectangular areas showing the effects of 
        various parameter settings for feTurbulence.&lt;/desc&gt;
  &lt;g  font-family="Verdana" text-anchor="middle" font-size="10" &gt;
    &lt;defs&gt;
      &lt;filter id="Turb1" filterUnits="objectBoundingBox" 
              x="0%" y="0%" width="100%" height="100%"&gt;
        &lt;feTurbulence type="turbulence" baseFrequency="0.05" numOctaves="2"/&gt;
      &lt;/filter&gt;
      &lt;filter id="Turb2" filterUnits="objectBoundingBox" 
              x="0%" y="0%" width="100%" height="100%"&gt;
        &lt;feTurbulence type="turbulence" baseFrequency="0.1" numOctaves="2"/&gt;
      &lt;/filter&gt;
      &lt;filter id="Turb3" filterUnits="objectBoundingBox" 
              x="0%" y="0%" width="100%" height="100%"&gt;
        &lt;feTurbulence type="turbulence" baseFrequency="0.05" numOctaves="8"/&gt;
      &lt;/filter&gt;
      &lt;filter id="Turb4" filterUnits="objectBoundingBox" 
              x="0%" y="0%" width="100%" height="100%"&gt;
        &lt;feTurbulence type="fractalNoise" baseFrequency="0.1" numOctaves="4"/&gt;
      &lt;/filter&gt;
      &lt;filter id="Turb5" filterUnits="objectBoundingBox" 
              x="0%" y="0%" width="100%" height="100%"&gt;
        &lt;feTurbulence type="fractalNoise" baseFrequency="0.4" numOctaves="4"/&gt;
      &lt;/filter&gt;
      &lt;filter id="Turb6" filterUnits="objectBoundingBox" 
              x="0%" y="0%" width="100%" height="100%"&gt;
        &lt;feTurbulence type="fractalNoise" baseFrequency="0.1" numOctaves="1"/&gt;
      &lt;/filter&gt;
    &lt;/defs&gt;

    &lt;rect x="1" y="1" width="448" height="323"
          fill="none" stroke="blue" stroke-width="1"  /&gt;

    &lt;rect x="25" y="25" width="100" height="75" filter="url(#Turb1)"  /&gt;
    &lt;text x="75" y="117"&gt;type=turbulence&lt;/text&gt;
    &lt;text x="75" y="129"&gt;baseFrequency=0.05&lt;/text&gt;
    &lt;text x="75" y="141"&gt;numOctaves=2&lt;/text&gt;

    &lt;rect x="175" y="25" width="100" height="75" filter="url(#Turb2)"  /&gt;
    &lt;text x="225" y="117"&gt;type=turbulence&lt;/text&gt;
    &lt;text x="225" y="129"&gt;baseFrequency=0.1&lt;/text&gt;
    &lt;text x="225" y="141"&gt;numOctaves=2&lt;/text&gt;

    &lt;rect x="325" y="25" width="100" height="75" filter="url(#Turb3)"  /&gt;
    &lt;text x="375" y="117"&gt;type=turbulence&lt;/text&gt;
    &lt;text x="375" y="129"&gt;baseFrequency=0.05&lt;/text&gt;
    &lt;text x="375" y="141"&gt;numOctaves=8&lt;/text&gt;

    &lt;rect x="25" y="180" width="100" height="75" filter="url(#Turb4)"  /&gt;
    &lt;text x="75" y="272"&gt;type=fractalNoise&lt;/text&gt;
    &lt;text x="75" y="284"&gt;baseFrequency=0.1&lt;/text&gt;
    &lt;text x="75" y="296"&gt;numOctaves=4&lt;/text&gt;

    &lt;rect x="175" y="180" width="100" height="75" filter="url(#Turb5)"  /&gt;
    &lt;text x="225" y="272"&gt;type=fractalNoise&lt;/text&gt;
    &lt;text x="225" y="284"&gt;baseFrequency=0.4&lt;/text&gt;
    &lt;text x="225" y="296"&gt;numOctaves=4&lt;/text&gt;

    &lt;rect x="325" y="180" width="100" height="75" filter="url(#Turb6)"  /&gt;
    &lt;text x="375" y="272"&gt;type=fractalNoise&lt;/text&gt;
    &lt;text x="375" y="284"&gt;baseFrequency=0.1&lt;/text&gt;
    &lt;text x="375" y="296"&gt;numOctaves=1&lt;/text&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example feTurbulence</caption><tr><td><img alt="Example feTurbulence — Examples of feTurbulence operations" src="images/filters/feTurbulence.png" /></td></tr></table><p class="view-as-svg"><a href="images/filters/feTurbulence.svg">View this example as SVG (SVG-enabled browsers only)</a></p>



<h2 id="filters-DOMInterfaces">15.25 DOM interfaces</h2>

<h3 id="filters-InterfaceSVGFilterElement">15.25.1 Interface SVGFilterElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFilterElement">SVGFilterElement</a> interface corresponds to the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>
 element.
<pre class="idl">interface <b>SVGFilterElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a> {

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFilterElement__filterUnits">filterUnits</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFilterElement__primitiveUnits">primitiveUnits</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#filters-__svg__SVGFilterElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#filters-__svg__SVGFilterElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#filters-__svg__SVGFilterElement__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#filters-__svg__SVGFilterElement__height">height</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a> <a href="#filters-__svg__SVGFilterElement__filterResX">filterResX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a> <a href="#filters-__svg__SVGFilterElement__filterResY">filterResY</a>;

  void <a href="#filters-__svg__SVGFilterElement__setFilterRes">setFilterRes</a>(in unsigned long filterResX, in unsigned long filterResY) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFilterElement__filterUnits" class="attribute first-child"><b>filterUnits</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterElementFilterUnitsAttribute"><span class="attr-name">‘filterUnits’</span></a> on the given <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>
 element. Takes one of the constants defined in <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a>.
</div></dd>
<dt id="filters-__svg__SVGFilterElement__primitiveUnits" class="attribute"><b>primitiveUnits</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a> on the given <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>
 element. Takes one of the constants defined in <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a>.
</div></dd>
<dt id="filters-__svg__SVGFilterElement__x" class="attribute"><b>x</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterElementXAttribute"><span class="attr-name">‘x’</span></a> on the given <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFilterElement__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterElementYAttribute"><span class="attr-name">‘y’</span></a> on the given <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFilterElement__width" class="attribute"><b>width</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterElementWidthAttribute"><span class="attr-name">‘width’</span></a> on the given <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFilterElement__height" class="attribute"><b>height</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterElementHeightAttribute"><span class="attr-name">‘height’</span></a> on the given <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFilterElement__filterResX" class="attribute"><b>filterResX</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a> on the given <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>
 element.  Contains the X component of attribute <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a>.
</div></dd>
<dt id="filters-__svg__SVGFilterElement__filterResY" class="attribute"><b>filterResY</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a> on the given <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>
 element.  Contains the Y component (possibly computed automatically) of
 attribute <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a>.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFilterElement__setFilterRes" class="operation first-child">void <b>setFilterRes</b>(in unsigned long <var>filterResX</var>, in unsigned long <var>filterResY</var>)</dt><dd class="operation"><div>
 Sets the values for attribute <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a>.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>unsigned long <var>filterResX</var></div> <div> The X component of attribute <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a>.
</div></li><li class="parameter"><div>unsigned long <var>filterResY</var></div> <div> The Y component of attribute <a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a>.
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFilterPrimitiveStandardAttributes">15.25.2 Interface SVGFilterPrimitiveStandardAttributes</h3>



 This interface defines the set of DOM attributes that are common across
 the filter primitive interfaces.
<pre class="idl">interface <b>SVGFilterPrimitiveStandardAttributes</b> : <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#filters-__svg__SVGFilterPrimitiveStandardAttributes__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#filters-__svg__SVGFilterPrimitiveStandardAttributes__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#filters-__svg__SVGFilterPrimitiveStandardAttributes__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#filters-__svg__SVGFilterPrimitiveStandardAttributes__height">height</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFilterPrimitiveStandardAttributes__result">result</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFilterPrimitiveStandardAttributes__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a> on the given element.
</div></dd>
<dt id="filters-__svg__SVGFilterPrimitiveStandardAttributes__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a> on the given element.
</div></dd>
<dt id="filters-__svg__SVGFilterPrimitiveStandardAttributes__width" class="attribute"><b>width</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a> on the given element.
</div></dd>
<dt id="filters-__svg__SVGFilterPrimitiveStandardAttributes__height" class="attribute"><b>height</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a> on the given element.
</div></dd>
<dt id="filters-__svg__SVGFilterPrimitiveStandardAttributes__result" class="attribute"><b>result</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a> on the given element.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFEBlendElement">15.25.3 Interface SVGFEBlendElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEBlendElement">SVGFEBlendElement</a> interface corresponds to the <a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>
 element.
<pre class="idl">interface <b>SVGFEBlendElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                              <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {

  // Blend Mode Types
  const unsigned short <a href="#filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_UNKNOWN">SVG_FEBLEND_MODE_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_NORMAL">SVG_FEBLEND_MODE_NORMAL</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_MULTIPLY">SVG_FEBLEND_MODE_MULTIPLY</a> = 2;
  const unsigned short <a href="#filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_SCREEN">SVG_FEBLEND_MODE_SCREEN</a> = 3;
  const unsigned short <a href="#filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_DARKEN">SVG_FEBLEND_MODE_DARKEN</a> = 4;
  const unsigned short <a href="#filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_LIGHTEN">SVG_FEBLEND_MODE_LIGHTEN</a> = 5;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEBlendElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEBlendElement__in2">in2</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFEBlendElement__mode">mode</a>;
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Blend Mode Types”:</dt><dd><dl class="constants">
<dt id="filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_UNKNOWN" class="constant first-child"><b>SVG_FEBLEND_MODE_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The type is not one of predefined types. It is invalid to attempt to
 define a new value of this type or to attempt to switch an existing
 value to this type.

</div></dd>
<dt id="filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_NORMAL" class="constant"><b>SVG_FEBLEND_MODE_NORMAL</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'normal'</span>.

</div></dd>
<dt id="filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_MULTIPLY" class="constant"><b>SVG_FEBLEND_MODE_MULTIPLY</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'multiply'</span>.

</div></dd>
<dt id="filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_SCREEN" class="constant"><b>SVG_FEBLEND_MODE_SCREEN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'screen'</span>.

</div></dd>
<dt id="filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_DARKEN" class="constant"><b>SVG_FEBLEND_MODE_DARKEN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'darken'</span>.

</div></dd>
<dt id="filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_LIGHTEN" class="constant"><b>SVG_FEBLEND_MODE_LIGHTEN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'lighten'</span>.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFEBlendElement__in1" class="attribute first-child"><b>in1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> on the given <a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFEBlendElement__in2" class="attribute"><b>in2</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feBlendIn2Attribute"><span class="attr-name">‘in2’</span></a> on the given <a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFEBlendElement__mode" class="attribute"><b>mode</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feBlendModeAttribute"><span class="attr-name">‘mode’</span></a> on the given <a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>
 element.  Takes one of the SVG_FEBLEND_MODE_* constants defined on
 this interface.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFEColorMatrixElement">15.25.4 Interface SVGFEColorMatrixElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEColorMatrixElement">SVGFEColorMatrixElement</a> interface corresponds to the
 <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a> element.
<pre class="idl">interface <b>SVGFEColorMatrixElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                    <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {

  // Color Matrix Types
  const unsigned short <a href="#filters-__svg__SVGFEColorMatrixElement__SVG_FECOLORMATRIX_TYPE_UNKNOWN">SVG_FECOLORMATRIX_TYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGFEColorMatrixElement__SVG_FECOLORMATRIX_TYPE_MATRIX">SVG_FECOLORMATRIX_TYPE_MATRIX</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGFEColorMatrixElement__SVG_FECOLORMATRIX_TYPE_SATURATE">SVG_FECOLORMATRIX_TYPE_SATURATE</a> = 2;
  const unsigned short <a href="#filters-__svg__SVGFEColorMatrixElement__SVG_FECOLORMATRIX_TYPE_HUEROTATE">SVG_FECOLORMATRIX_TYPE_HUEROTATE</a> = 3;
  const unsigned short <a href="#filters-__svg__SVGFEColorMatrixElement__SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA">SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA</a> = 4;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEColorMatrixElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFEColorMatrixElement__type">type</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumberList">SVGAnimatedNumberList</a> <a href="#filters-__svg__SVGFEColorMatrixElement__values">values</a>;
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Color Matrix Types”:</dt><dd><dl class="constants">
<dt id="filters-__svg__SVGFEColorMatrixElement__SVG_FECOLORMATRIX_TYPE_UNKNOWN" class="constant first-child"><b>SVG_FECOLORMATRIX_TYPE_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The type is not one of predefined types. It is invalid to attempt to
 define a new value of this type or to attempt to switch an existing
 value to this type.

</div></dd>
<dt id="filters-__svg__SVGFEColorMatrixElement__SVG_FECOLORMATRIX_TYPE_MATRIX" class="constant"><b>SVG_FECOLORMATRIX_TYPE_MATRIX</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'matrix'</span>.

</div></dd>
<dt id="filters-__svg__SVGFEColorMatrixElement__SVG_FECOLORMATRIX_TYPE_SATURATE" class="constant"><b>SVG_FECOLORMATRIX_TYPE_SATURATE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'saturate'</span>.

</div></dd>
<dt id="filters-__svg__SVGFEColorMatrixElement__SVG_FECOLORMATRIX_TYPE_HUEROTATE" class="constant"><b>SVG_FECOLORMATRIX_TYPE_HUEROTATE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'hueRotate'</span>.

</div></dd>
<dt id="filters-__svg__SVGFEColorMatrixElement__SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA" class="constant"><b>SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'luminanceToAlpha'</span>.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFEColorMatrixElement__in1" class="attribute first-child"><b>in1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> on the given <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFEColorMatrixElement__type" class="attribute"><b>type</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feColorMatrixTypeAttribute"><span class="attr-name">‘type’</span></a> on the given <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>
 element.  Takes one of the SVG_FECOLORMATRIX_TYPE_* constants defined
 on this interface.
</div></dd>
<dt id="filters-__svg__SVGFEColorMatrixElement__values" class="attribute"><b>values</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumberList">SVGAnimatedNumberList</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feColorMatrixValuesAttribute"><span class="attr-name">‘values’</span></a> on the given <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>
 element.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFEComponentTransferElement">15.25.5 Interface SVGFEComponentTransferElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEComponentTransferElement">SVGFEComponentTransferElement</a> interface corresponds to the
 <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a> element.
<pre class="idl">interface <b>SVGFEComponentTransferElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                          <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEComponentTransferElement__in1">in1</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFEComponentTransferElement__in1" class="attribute first-child"><b>in1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> on the given <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>
 element.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGComponentTransferFunctionElement">15.25.6 Interface SVGComponentTransferFunctionElement</h3>



 This interface defines a base interface used by the component transfer
 function interfaces.
<pre class="idl">interface <b>SVGComponentTransferFunctionElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {

  // Component Transfer Types
  const unsigned short <a href="#filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN">SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY">SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_TABLE">SVG_FECOMPONENTTRANSFER_TYPE_TABLE</a> = 2;
  const unsigned short <a href="#filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE">SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE</a> = 3;
  const unsigned short <a href="#filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_LINEAR">SVG_FECOMPONENTTRANSFER_TYPE_LINEAR</a> = 4;
  const unsigned short <a href="#filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_GAMMA">SVG_FECOMPONENTTRANSFER_TYPE_GAMMA</a> = 5;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGComponentTransferFunctionElement__type">type</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumberList">SVGAnimatedNumberList</a> <a href="#filters-__svg__SVGComponentTransferFunctionElement__tableValues">tableValues</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGComponentTransferFunctionElement__slope">slope</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGComponentTransferFunctionElement__intercept">intercept</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGComponentTransferFunctionElement__amplitude">amplitude</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGComponentTransferFunctionElement__exponent">exponent</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGComponentTransferFunctionElement__offset">offset</a>;
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Component Transfer Types”:</dt><dd><dl class="constants">
<dt id="filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN" class="constant first-child"><b>SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The type is not one of predefined types. It is invalid to attempt to
 define a new value of this type or to attempt to switch an existing
 value to this type.

</div></dd>
<dt id="filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY" class="constant"><b>SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'identity'</span>.

</div></dd>
<dt id="filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_TABLE" class="constant"><b>SVG_FECOMPONENTTRANSFER_TYPE_TABLE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'table'</span>.

</div></dd>
<dt id="filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE" class="constant"><b>SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'discrete'</span>.

</div></dd>
<dt id="filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_LINEAR" class="constant"><b>SVG_FECOMPONENTTRANSFER_TYPE_LINEAR</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'linear'</span>.

</div></dd>
<dt id="filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_GAMMA" class="constant"><b>SVG_FECOMPONENTTRANSFER_TYPE_GAMMA</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'gamma'</span>.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGComponentTransferFunctionElement__type" class="attribute first-child"><b>type</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feComponentTransferTypeAttribute"><span class="attr-name">‘type’</span></a> on the given
 element.  Takes one of the SVG_FECOMPONENTTRANSFER_TYPE_* constants defined
 on this interface.
</div></dd>
<dt id="filters-__svg__SVGComponentTransferFunctionElement__tableValues" class="attribute"><b>tableValues</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumberList">SVGAnimatedNumberList</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feComponentTransferTableValuesAttribute"><span class="attr-name">‘tableValues’</span></a> on the given element.
</div></dd>
<dt id="filters-__svg__SVGComponentTransferFunctionElement__slope" class="attribute"><b>slope</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feComponentTransferSlopeAttribute"><span class="attr-name">‘slope’</span></a> on the given element.
</div></dd>
<dt id="filters-__svg__SVGComponentTransferFunctionElement__intercept" class="attribute"><b>intercept</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feComponentTransferInterceptAttribute"><span class="attr-name">‘intercept’</span></a> on the given element.
</div></dd>
<dt id="filters-__svg__SVGComponentTransferFunctionElement__amplitude" class="attribute"><b>amplitude</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feComponentTransferAmplitudeAttribute"><span class="attr-name">‘amplitude’</span></a> on the given element.
</div></dd>
<dt id="filters-__svg__SVGComponentTransferFunctionElement__exponent" class="attribute"><b>exponent</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feComponentTransferExponentAttribute"><span class="attr-name">‘exponent’</span></a> on the given element.
</div></dd>
<dt id="filters-__svg__SVGComponentTransferFunctionElement__offset" class="attribute"><b>offset</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feComponentTransferOffsetAttribute"><span class="attr-name">‘offset’</span></a> on the given element.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFEFuncRElement">15.25.7 Interface SVGFEFuncRElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEFuncRElement">SVGFEFuncRElement</a> interface corresponds to the <a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a>
 element.
<pre class="idl">interface <b>SVGFEFuncRElement</b> : <a class="idlinterface" href="#filters-InterfaceSVGComponentTransferFunctionElement">SVGComponentTransferFunctionElement</a> {
};</pre>


<h3 id="filters-InterfaceSVGFEFuncGElement">15.25.8 Interface SVGFEFuncGElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEFuncRElement">SVGFEFuncRElement</a> interface corresponds to the <a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a>
 element.
<pre class="idl">interface <b>SVGFEFuncGElement</b> : <a class="idlinterface" href="#filters-InterfaceSVGComponentTransferFunctionElement">SVGComponentTransferFunctionElement</a> {
};</pre>


<h3 id="filters-InterfaceSVGFEFuncBElement">15.25.9 Interface SVGFEFuncBElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEFuncBElement">SVGFEFuncBElement</a> interface corresponds to the <a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a>
 element.
<pre class="idl">interface <b>SVGFEFuncBElement</b> : <a class="idlinterface" href="#filters-InterfaceSVGComponentTransferFunctionElement">SVGComponentTransferFunctionElement</a> {
};</pre>


<h3 id="filters-InterfaceSVGFEFuncAElement">15.25.10 Interface SVGFEFuncAElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEFuncAElement">SVGFEFuncAElement</a> interface corresponds to the <a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a>
 element.
<pre class="idl">interface <b>SVGFEFuncAElement</b> : <a class="idlinterface" href="#filters-InterfaceSVGComponentTransferFunctionElement">SVGComponentTransferFunctionElement</a> {
};</pre>


<h3 id="filters-InterfaceSVGFECompositeElement">15.25.11 Interface SVGFECompositeElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFECompositeElement">SVGFECompositeElement</a> interface corresponds to the
 <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a> element.
<pre class="idl">interface <b>SVGFECompositeElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                  <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {

  // Composite Operators
  const unsigned short <a href="#filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_UNKNOWN">SVG_FECOMPOSITE_OPERATOR_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_OVER">SVG_FECOMPOSITE_OPERATOR_OVER</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_IN">SVG_FECOMPOSITE_OPERATOR_IN</a> = 2;
  const unsigned short <a href="#filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_OUT">SVG_FECOMPOSITE_OPERATOR_OUT</a> = 3;
  const unsigned short <a href="#filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_ATOP">SVG_FECOMPOSITE_OPERATOR_ATOP</a> = 4;
  const unsigned short <a href="#filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_XOR">SVG_FECOMPOSITE_OPERATOR_XOR</a> = 5;
  const unsigned short <a href="#filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_ARITHMETIC">SVG_FECOMPOSITE_OPERATOR_ARITHMETIC</a> = 6;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFECompositeElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFECompositeElement__in2">in2</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFECompositeElement__operator">operator</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFECompositeElement__k1">k1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFECompositeElement__k2">k2</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFECompositeElement__k3">k3</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFECompositeElement__k4">k4</a>;
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Composite Operators”:</dt><dd><dl class="constants">
<dt id="filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_UNKNOWN" class="constant first-child"><b>SVG_FECOMPOSITE_OPERATOR_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The type is not one of predefined types. It is invalid to attempt to
 define a new value of this type or to attempt to switch an existing
 value to this type.

</div></dd>
<dt id="filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_OVER" class="constant"><b>SVG_FECOMPOSITE_OPERATOR_OVER</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'over'</span>.

</div></dd>
<dt id="filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_IN" class="constant"><b>SVG_FECOMPOSITE_OPERATOR_IN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'in'</span>.

</div></dd>
<dt id="filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_OUT" class="constant"><b>SVG_FECOMPOSITE_OPERATOR_OUT</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'out'</span>.

</div></dd>
<dt id="filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_ATOP" class="constant"><b>SVG_FECOMPOSITE_OPERATOR_ATOP</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'atop'</span>.

</div></dd>
<dt id="filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_XOR" class="constant"><b>SVG_FECOMPOSITE_OPERATOR_XOR</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'xor'</span>.

</div></dd>
<dt id="filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_ARITHMETIC" class="constant"><b>SVG_FECOMPOSITE_OPERATOR_ARITHMETIC</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'arithmetic'</span>.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFECompositeElement__in1" class="attribute first-child"><b>in1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> on the given <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFECompositeElement__in2" class="attribute"><b>in2</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feCompositeIn2Attribute"><span class="attr-name">‘in2’</span></a> on the given <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFECompositeElement__operator" class="attribute"><b>operator</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feCompositeOperatorAttribute"><span class="attr-name">‘operator’</span></a> on the given <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>
 element.  Takes one of the SVG_FECOMPOSITE_OPERATOR_* constants defined
 on this interface.
</div></dd>
<dt id="filters-__svg__SVGFECompositeElement__k1" class="attribute"><b>k1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feCompositeK1Attribute"><span class="attr-name">‘k1’</span></a> on the given <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFECompositeElement__k2" class="attribute"><b>k2</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feCompositeK2Attribute"><span class="attr-name">‘k2’</span></a> on the given <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFECompositeElement__k3" class="attribute"><b>k3</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feCompositeK3Attribute"><span class="attr-name">‘k3’</span></a> on the given <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFECompositeElement__k4" class="attribute"><b>k4</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feCompositeK4Attribute"><span class="attr-name">‘k4’</span></a> on the given <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>
 element.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFEConvolveMatrixElement">15.25.12 Interface SVGFEConvolveMatrixElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEConvolveMatrixElement">SVGFEConvolveMatrixElement</a> interface corresponds to the
 <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a> element.
<pre class="idl">interface <b>SVGFEConvolveMatrixElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                       <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {

  // Edge Mode Values
  const unsigned short <a href="#filters-__svg__SVGFEConvolveMatrixElement__SVG_EDGEMODE_UNKNOWN">SVG_EDGEMODE_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGFEConvolveMatrixElement__SVG_EDGEMODE_DUPLICATE">SVG_EDGEMODE_DUPLICATE</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGFEConvolveMatrixElement__SVG_EDGEMODE_WRAP">SVG_EDGEMODE_WRAP</a> = 2;
  const unsigned short <a href="#filters-__svg__SVGFEConvolveMatrixElement__SVG_EDGEMODE_NONE">SVG_EDGEMODE_NONE</a> = 3;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__orderX">orderX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__orderY">orderY</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumberList">SVGAnimatedNumberList</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__kernelMatrix">kernelMatrix</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__divisor">divisor</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__bias">bias</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__targetX">targetX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__targetY">targetY</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__edgeMode">edgeMode</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__kernelUnitLengthX">kernelUnitLengthX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__kernelUnitLengthY">kernelUnitLengthY</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedBoolean">SVGAnimatedBoolean</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__preserveAlpha">preserveAlpha</a>;
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Edge Mode Values”:</dt><dd><dl class="constants">
<dt id="filters-__svg__SVGFEConvolveMatrixElement__SVG_EDGEMODE_UNKNOWN" class="constant first-child"><b>SVG_EDGEMODE_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The type is not one of predefined types. It is invalid to attempt to
 define a new value of this type or to attempt to switch an existing
 value to this type.

</div></dd>
<dt id="filters-__svg__SVGFEConvolveMatrixElement__SVG_EDGEMODE_DUPLICATE" class="constant"><b>SVG_EDGEMODE_DUPLICATE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'duplicate'</span>.

</div></dd>
<dt id="filters-__svg__SVGFEConvolveMatrixElement__SVG_EDGEMODE_WRAP" class="constant"><b>SVG_EDGEMODE_WRAP</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'wrap'</span>.

</div></dd>
<dt id="filters-__svg__SVGFEConvolveMatrixElement__SVG_EDGEMODE_NONE" class="constant"><b>SVG_EDGEMODE_NONE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'none'</span>.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFEConvolveMatrixElement__in1" class="attribute first-child"><b>in1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> on the given
 <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEConvolveMatrixElement__orderX" class="attribute"><b>orderX</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feConvolveMatrixElementOrderAttribute"><span class="attr-name">‘order’</span></a> on the given
 <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEConvolveMatrixElement__orderY" class="attribute"><b>orderY</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feConvolveMatrixElementOrderAttribute"><span class="attr-name">‘order’</span></a> on the given
 <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEConvolveMatrixElement__kernelMatrix" class="attribute"><b>kernelMatrix</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumberList">SVGAnimatedNumberList</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feConvolveMatrixElementKernelMatrixAttribute"><span class="attr-name">‘kernelMatrix’</span></a> on the given
 <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEConvolveMatrixElement__divisor" class="attribute"><b>divisor</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feConvolveMatrixElementDivisorAttribute"><span class="attr-name">‘divisor’</span></a> on the given
 <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEConvolveMatrixElement__bias" class="attribute"><b>bias</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feConvolveMatrixElementBiasAttribute"><span class="attr-name">‘bias’</span></a> on the given
 <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEConvolveMatrixElement__targetX" class="attribute"><b>targetX</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feConvolveMatrixElementTargetXAttribute"><span class="attr-name">‘targetX’</span></a> on the given
 <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEConvolveMatrixElement__targetY" class="attribute"><b>targetY</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feConvolveMatrixElementTargetYAttribute"><span class="attr-name">‘targetY’</span></a> on the given
 <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEConvolveMatrixElement__edgeMode" class="attribute"><b>edgeMode</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feConvolveMatrixElementEdgeModeAttribute"><span class="attr-name">‘edgeMode’</span></a> on the given
 <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a> element.  Takes one of the SVG_EDGEMODE_*
 constants defined on this interface.
</div></dd>
<dt id="filters-__svg__SVGFEConvolveMatrixElement__kernelUnitLengthX" class="attribute"><b>kernelUnitLengthX</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feConvolveMatrixElementKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a> on the given
 <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEConvolveMatrixElement__kernelUnitLengthY" class="attribute"><b>kernelUnitLengthY</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feConvolveMatrixElementKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a> on the given
 <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEConvolveMatrixElement__preserveAlpha" class="attribute"><b>preserveAlpha</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedBoolean">SVGAnimatedBoolean</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feConvolveMatrixElementPreserveAlphaAttribute"><span class="attr-name">‘preserveAlpha’</span></a> on the given
 <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a> element.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFEDiffuseLightingElement">15.25.13 Interface SVGFEDiffuseLightingElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEDiffuseLightingElement">SVGFEDiffuseLightingElement</a> interface corresponds to the
 <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a> element.
<pre class="idl">interface <b>SVGFEDiffuseLightingElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                        <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEDiffuseLightingElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEDiffuseLightingElement__surfaceScale">surfaceScale</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEDiffuseLightingElement__diffuseConstant">diffuseConstant</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEDiffuseLightingElement__kernelUnitLengthX">kernelUnitLengthX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEDiffuseLightingElement__kernelUnitLengthY">kernelUnitLengthY</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFEDiffuseLightingElement__in1" class="attribute first-child"><b>in1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> on the given <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFEDiffuseLightingElement__surfaceScale" class="attribute"><b>surfaceScale</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feDiffuseLightingSurfaceScaleAttribute"><span class="attr-name">‘surfaceScale’</span></a> on the given
 <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEDiffuseLightingElement__diffuseConstant" class="attribute"><b>diffuseConstant</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feDiffuseLightingDiffuseConstantAttribute"><span class="attr-name">‘diffuseConstant’</span></a> on the given
 <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEDiffuseLightingElement__kernelUnitLengthX" class="attribute"><b>kernelUnitLengthX</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feDiffuseLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a> on the given
 <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEDiffuseLightingElement__kernelUnitLengthY" class="attribute"><b>kernelUnitLengthY</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feDiffuseLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a> on the given
 <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a> element.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFEDistantLightElement">15.25.14 Interface SVGFEDistantLightElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEDistantLightElement">SVGFEDistantLightElement</a> interface corresponds to the
 <a href="#filters-feDistantLightElement"><span class="element-name">‘feDistantLight’</span></a> element.
<pre class="idl">interface <b>SVGFEDistantLightElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEDistantLightElement__azimuth">azimuth</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEDistantLightElement__elevation">elevation</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFEDistantLightElement__azimuth" class="attribute first-child"><b>azimuth</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feDistantLightAzimuthAttribute"><span class="attr-name">‘azimuth’</span></a> on the given
 <a href="#filters-feDistantLightElement"><span class="element-name">‘feDistantLight’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEDistantLightElement__elevation" class="attribute"><b>elevation</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feDistantLightElevationAttribute"><span class="attr-name">‘elevation’</span></a> on the given
 <a href="#filters-feDistantLightElement"><span class="element-name">‘feDistantLight’</span></a> element.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFEPointLightElement">15.25.15 Interface SVGFEPointLightElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEPointLightElement">SVGFEPointLightElement</a> interface corresponds to the
 <a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a> element.
<pre class="idl">interface <b>SVGFEPointLightElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEPointLightElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEPointLightElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEPointLightElement__z">z</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFEPointLightElement__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-fePointLightXAttribute"><span class="attr-name">‘x’</span></a> on the given
 <a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEPointLightElement__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-fePointLightYAttribute"><span class="attr-name">‘y’</span></a> on the given
 <a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEPointLightElement__z" class="attribute"><b>z</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-fePointLightZAttribute"><span class="attr-name">‘z’</span></a> on the given
 <a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a> element.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFESpotLightElement">15.25.16 Interface SVGFESpotLightElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFESpotLightElement">SVGFESpotLightElement</a> interface corresponds to the
 <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a> element.
<pre class="idl">interface <b>SVGFESpotLightElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpotLightElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpotLightElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpotLightElement__z">z</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpotLightElement__pointsAtX">pointsAtX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpotLightElement__pointsAtY">pointsAtY</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpotLightElement__pointsAtZ">pointsAtZ</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpotLightElement__specularExponent">specularExponent</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpotLightElement__limitingConeAngle">limitingConeAngle</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFESpotLightElement__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feSpotLightXAttribute"><span class="attr-name">‘x’</span></a> on the given
 <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFESpotLightElement__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feSpotLightYAttribute"><span class="attr-name">‘y’</span></a> on the given
 <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFESpotLightElement__z" class="attribute"><b>z</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feSpotLightZAttribute"><span class="attr-name">‘z’</span></a> on the given
 <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFESpotLightElement__pointsAtX" class="attribute"><b>pointsAtX</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feSpotLightPointsAtXAttribute"><span class="attr-name">‘pointsAtX’</span></a> on the given
 <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFESpotLightElement__pointsAtY" class="attribute"><b>pointsAtY</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feSpotLightPointsAtYAttribute"><span class="attr-name">‘pointsAtY’</span></a> on the given
 <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFESpotLightElement__pointsAtZ" class="attribute"><b>pointsAtZ</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feSpotLightPointsAtZAttribute"><span class="attr-name">‘pointsAtZ’</span></a> on the given
 <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFESpotLightElement__specularExponent" class="attribute"><b>specularExponent</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feSpotLightSpecularExponentAttribute"><span class="attr-name">‘specularExponent’</span></a> on the given
 <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFESpotLightElement__limitingConeAngle" class="attribute"><b>limitingConeAngle</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feSpotLightLimitingConeAngleAttribute"><span class="attr-name">‘limitingConeAngle’</span></a> on the given
 <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a> element.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFEDisplacementMapElement">15.25.17 Interface SVGFEDisplacementMapElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEDisplacementMapElement">SVGFEDisplacementMapElement</a> interface corresponds to the
 <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a> element.
<pre class="idl">interface <b>SVGFEDisplacementMapElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                        <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {

  // Channel Selectors
  const unsigned short <a href="#filters-__svg__SVGFEDisplacementMapElement__SVG_CHANNEL_UNKNOWN">SVG_CHANNEL_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGFEDisplacementMapElement__SVG_CHANNEL_R">SVG_CHANNEL_R</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGFEDisplacementMapElement__SVG_CHANNEL_G">SVG_CHANNEL_G</a> = 2;
  const unsigned short <a href="#filters-__svg__SVGFEDisplacementMapElement__SVG_CHANNEL_B">SVG_CHANNEL_B</a> = 3;
  const unsigned short <a href="#filters-__svg__SVGFEDisplacementMapElement__SVG_CHANNEL_A">SVG_CHANNEL_A</a> = 4;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEDisplacementMapElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEDisplacementMapElement__in2">in2</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEDisplacementMapElement__scale">scale</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFEDisplacementMapElement__xChannelSelector">xChannelSelector</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFEDisplacementMapElement__yChannelSelector">yChannelSelector</a>;
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Channel Selectors”:</dt><dd><dl class="constants">
<dt id="filters-__svg__SVGFEDisplacementMapElement__SVG_CHANNEL_UNKNOWN" class="constant first-child"><b>SVG_CHANNEL_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The type is not one of predefined types. It is invalid to attempt to
 define a new value of this type or to attempt to switch an existing
 value to this type.

</div></dd>
<dt id="filters-__svg__SVGFEDisplacementMapElement__SVG_CHANNEL_R" class="constant"><b>SVG_CHANNEL_R</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'R'</span>.

</div></dd>
<dt id="filters-__svg__SVGFEDisplacementMapElement__SVG_CHANNEL_G" class="constant"><b>SVG_CHANNEL_G</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'G'</span>.

</div></dd>
<dt id="filters-__svg__SVGFEDisplacementMapElement__SVG_CHANNEL_B" class="constant"><b>SVG_CHANNEL_B</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'B'</span>.

</div></dd>
<dt id="filters-__svg__SVGFEDisplacementMapElement__SVG_CHANNEL_A" class="constant"><b>SVG_CHANNEL_A</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'A'</span>.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFEDisplacementMapElement__in1" class="attribute first-child"><b>in1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> on the given <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFEDisplacementMapElement__in2" class="attribute"><b>in2</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feDisplacementMapIn2Attribute"><span class="attr-name">‘in2’</span></a> on the given <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFEDisplacementMapElement__scale" class="attribute"><b>scale</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feDisplacementMapScaleAttribute"><span class="attr-name">‘scale’</span></a> on the given <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFEDisplacementMapElement__xChannelSelector" class="attribute"><b>xChannelSelector</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feDisplacementMapXChannelSelectorAttribute"><span class="attr-name">‘xChannelSelector’</span></a> on the given
 <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a> element.  Takes one of the SVG_CHANNEL_*
 constants defined on this interface.
</div></dd>
<dt id="filters-__svg__SVGFEDisplacementMapElement__yChannelSelector" class="attribute"><b>yChannelSelector</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feDisplacementMapYChannelSelectorAttribute"><span class="attr-name">‘yChannelSelector’</span></a> on the given
 <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a> element.  Takes one of the SVG_CHANNEL_*
 constants defined on this interface.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFEFloodElement">15.25.18 Interface SVGFEFloodElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEFloodElement">SVGFEFloodElement</a> interface corresponds to the
 <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a> element.
<pre class="idl">interface <b>SVGFEFloodElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                              <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {
};</pre>


<h3 id="filters-InterfaceSVGFEGaussianBlurElement">15.25.19 Interface SVGFEGaussianBlurElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEGaussianBlurElement">SVGFEGaussianBlurElement</a> interface corresponds to the
 <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a> element.
<pre class="idl">interface <b>SVGFEGaussianBlurElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                     <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEGaussianBlurElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEGaussianBlurElement__stdDeviationX">stdDeviationX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEGaussianBlurElement__stdDeviationY">stdDeviationY</a>;

  void <a href="#filters-__svg__SVGFEGaussianBlurElement__setStdDeviation">setStdDeviation</a>(in float stdDeviationX, in float stdDeviationY) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFEGaussianBlurElement__in1" class="attribute first-child"><b>in1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> on the given
 <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFEGaussianBlurElement__stdDeviationX" class="attribute"><b>stdDeviationX</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feGaussianBlurStdDeviationAttribute"><span class="attr-name">‘stdDeviation’</span></a> on the given
 <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a> element.  Contains the X component
 of attribute <a href="#filters-feGaussianBlurStdDeviationAttribute"><span class="attr-name">‘stdDeviation’</span></a>.
</div></dd>
<dt id="filters-__svg__SVGFEGaussianBlurElement__stdDeviationY" class="attribute"><b>stdDeviationY</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feGaussianBlurStdDeviationAttribute"><span class="attr-name">‘stdDeviation’</span></a> on the given
 <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a> element.  Contains the Y component
 (possibly computed automatically) of attribute <a href="#filters-feGaussianBlurStdDeviationAttribute"><span class="attr-name">‘stdDeviation’</span></a>.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFEGaussianBlurElement__setStdDeviation" class="operation first-child">void <b>setStdDeviation</b>(in float <var>stdDeviationX</var>, in float <var>stdDeviationY</var>)</dt><dd class="operation"><div>
 Sets the values for attribute <a href="#filters-feGaussianBlurStdDeviationAttribute"><span class="attr-name">‘stdDeviation’</span></a>.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>stdDeviationX</var></div> <div> The X component of attribute <a href="#filters-feGaussianBlurStdDeviationAttribute"><span class="attr-name">‘stdDeviation’</span></a>.
</div></li><li class="parameter"><div>float <var>stdDeviationY</var></div> <div> The Y component of attribute <a href="#filters-feGaussianBlurStdDeviationAttribute"><span class="attr-name">‘stdDeviation’</span></a>.
</div></li></ol></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFEImageElement">15.25.20 Interface SVGFEImageElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEImageElement">SVGFEImageElement</a> interface corresponds to the
 <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a> element.
<pre class="idl">interface <b>SVGFEImageElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                              <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGAnimatedPreserveAspectRatio">SVGAnimatedPreserveAspectRatio</a> <a href="#filters-__svg__SVGFEImageElement__preserveAspectRatio">preserveAspectRatio</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFEImageElement__preserveAspectRatio" class="attribute first-child"><b>preserveAspectRatio</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGAnimatedPreserveAspectRatio">SVGAnimatedPreserveAspectRatio</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> on the given
 <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a> element.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFEMergeElement">15.25.21 Interface SVGFEMergeElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEMergeElement">SVGFEMergeElement</a> interface corresponds to the
 <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a> element.
<pre class="idl">interface <b>SVGFEMergeElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                              <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {
};</pre>


<h3 id="filters-InterfaceSVGFEMergeNodeElement">15.25.22 Interface SVGFEMergeNodeElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEMergeNodeElement">SVGFEMergeNodeElement</a> interface corresponds to the
 <a href="#filters-feMergeNodeElement"><span class="element-name">‘feMergeNode’</span></a> element.
<pre class="idl">interface <b>SVGFEMergeNodeElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEMergeNodeElement__in1">in1</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFEMergeNodeElement__in1" class="attribute first-child"><b>in1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> on the given <a href="#filters-feMergeNodeElement"><span class="element-name">‘feMergeNode’</span></a>
 element.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFEMorphologyElement">15.25.23 Interface SVGFEMorphologyElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEMorphologyElement">SVGFEMorphologyElement</a> interface corresponds to the
 <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a> element.
<pre class="idl">interface <b>SVGFEMorphologyElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                   <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {

  // Morphology Operators
  const unsigned short <a href="#filters-__svg__SVGFEMorphologyElement__SVG_MORPHOLOGY_OPERATOR_UNKNOWN">SVG_MORPHOLOGY_OPERATOR_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGFEMorphologyElement__SVG_MORPHOLOGY_OPERATOR_ERODE">SVG_MORPHOLOGY_OPERATOR_ERODE</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGFEMorphologyElement__SVG_MORPHOLOGY_OPERATOR_DILATE">SVG_MORPHOLOGY_OPERATOR_DILATE</a> = 2;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEMorphologyElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFEMorphologyElement__operator">operator</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEMorphologyElement__radiusX">radiusX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEMorphologyElement__radiusY">radiusY</a>;
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Morphology Operators”:</dt><dd><dl class="constants">
<dt id="filters-__svg__SVGFEMorphologyElement__SVG_MORPHOLOGY_OPERATOR_UNKNOWN" class="constant first-child"><b>SVG_MORPHOLOGY_OPERATOR_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The type is not one of predefined types. It is invalid to attempt to
 define a new value of this type or to attempt to switch an existing
 value to this type.

</div></dd>
<dt id="filters-__svg__SVGFEMorphologyElement__SVG_MORPHOLOGY_OPERATOR_ERODE" class="constant"><b>SVG_MORPHOLOGY_OPERATOR_ERODE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'erode'</span>.

</div></dd>
<dt id="filters-__svg__SVGFEMorphologyElement__SVG_MORPHOLOGY_OPERATOR_DILATE" class="constant"><b>SVG_MORPHOLOGY_OPERATOR_DILATE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'dilate'</span>.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFEMorphologyElement__in1" class="attribute first-child"><b>in1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> on the given <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFEMorphologyElement__operator" class="attribute"><b>operator</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feMorphologyOperatorAttribute"><span class="attr-name">‘operator’</span></a> on the given <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>
 element.  Takes one of the SVG_MORPHOLOGY_OPERATOR_* constants
 defined on this interface.
</div></dd>
<dt id="filters-__svg__SVGFEMorphologyElement__radiusX" class="attribute"><b>radiusX</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feMorphologyRadiusAttribute"><span class="attr-name">‘radius’</span></a> on the given <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFEMorphologyElement__radiusY" class="attribute"><b>radiusY</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feMorphologyRadiusAttribute"><span class="attr-name">‘radius’</span></a> on the given <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>
 element.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFEOffsetElement">15.25.24 Interface SVGFEOffsetElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFEOffsetElement">SVGFEOffsetElement</a> interface corresponds to the
 <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a> element.
<pre class="idl">interface <b>SVGFEOffsetElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                               <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEOffsetElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEOffsetElement__dx">dx</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEOffsetElement__dy">dy</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFEOffsetElement__in1" class="attribute first-child"><b>in1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> on the given <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFEOffsetElement__dx" class="attribute"><b>dx</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feOffsetDxAttribute"><span class="attr-name">‘dx’</span></a> on the given <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFEOffsetElement__dy" class="attribute"><b>dy</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feOffsetDyAttribute"><span class="attr-name">‘dy’</span></a> on the given <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>
 element.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFESpecularLightingElement">15.25.25 Interface SVGFESpecularLightingElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFESpecularLightingElement">SVGFESpecularLightingElement</a> interface corresponds to the
 <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a> element.
<pre class="idl">interface <b>SVGFESpecularLightingElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                         <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFESpecularLightingElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpecularLightingElement__surfaceScale">surfaceScale</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpecularLightingElement__specularConstant">specularConstant</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpecularLightingElement__specularExponent">specularExponent</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpecularLightingElement__kernelUnitLengthX">kernelUnitLengthX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpecularLightingElement__kernelUnitLengthY">kernelUnitLengthY</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFESpecularLightingElement__in1" class="attribute first-child"><b>in1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> on the given <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>
 element.
</div></dd>
<dt id="filters-__svg__SVGFESpecularLightingElement__surfaceScale" class="attribute"><b>surfaceScale</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feSpecularLightingSurfaceScaleAttribute"><span class="attr-name">‘surfaceScale’</span></a> on the given
 <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFESpecularLightingElement__specularConstant" class="attribute"><b>specularConstant</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feSpecularLightingSpecularConstantAttribute"><span class="attr-name">‘specularConstant’</span></a> on the given
 <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFESpecularLightingElement__specularExponent" class="attribute"><b>specularExponent</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feSpecularLightingSpecularExponentAttribute"><span class="attr-name">‘specularExponent’</span></a> on the given
 <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFESpecularLightingElement__kernelUnitLengthX" class="attribute"><b>kernelUnitLengthX</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feSpecularLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a> on the given
 <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFESpecularLightingElement__kernelUnitLengthY" class="attribute"><b>kernelUnitLengthY</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feSpecularLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a> on the given
 <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a> element.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFETileElement">15.25.26 Interface SVGFETileElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFETileElement">SVGFETileElement</a> interface corresponds to the
 <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a> element.
<pre class="idl">interface <b>SVGFETileElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                             <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFETileElement__in1">in1</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFETileElement__in1" class="attribute first-child"><b>in1</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a> on the given <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>
 element.
</div></dd></dl></dd></dl>


<h3 id="filters-InterfaceSVGFETurbulenceElement">15.25.27 Interface SVGFETurbulenceElement</h3>



 The <a class="idlinterface" href="#filters-InterfaceSVGFETurbulenceElement">SVGFETurbulenceElement</a> interface corresponds to the
 <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a> element.
<pre class="idl">interface <b>SVGFETurbulenceElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                   <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {

  // Turbulence Types
  const unsigned short <a href="#filters-__svg__SVGFETurbulenceElement__SVG_TURBULENCE_TYPE_UNKNOWN">SVG_TURBULENCE_TYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGFETurbulenceElement__SVG_TURBULENCE_TYPE_FRACTALNOISE">SVG_TURBULENCE_TYPE_FRACTALNOISE</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGFETurbulenceElement__SVG_TURBULENCE_TYPE_TURBULENCE">SVG_TURBULENCE_TYPE_TURBULENCE</a> = 2;

  // Stitch Options
  const unsigned short <a href="#filters-__svg__SVGFETurbulenceElement__SVG_STITCHTYPE_UNKNOWN">SVG_STITCHTYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGFETurbulenceElement__SVG_STITCHTYPE_STITCH">SVG_STITCHTYPE_STITCH</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGFETurbulenceElement__SVG_STITCHTYPE_NOSTITCH">SVG_STITCHTYPE_NOSTITCH</a> = 2;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFETurbulenceElement__baseFrequencyX">baseFrequencyX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFETurbulenceElement__baseFrequencyY">baseFrequencyY</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a> <a href="#filters-__svg__SVGFETurbulenceElement__numOctaves">numOctaves</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFETurbulenceElement__seed">seed</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFETurbulenceElement__stitchTiles">stitchTiles</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFETurbulenceElement__type">type</a>;
};</pre><dl class="interface"><dt class="constants-header">Constants in group “Turbulence Types”:</dt><dd><dl class="constants">
<dt id="filters-__svg__SVGFETurbulenceElement__SVG_TURBULENCE_TYPE_UNKNOWN" class="constant first-child"><b>SVG_TURBULENCE_TYPE_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The type is not one of predefined types. It is invalid to attempt to
 define a new value of this type or to attempt to switch an existing
 value to this type.

</div></dd>
<dt id="filters-__svg__SVGFETurbulenceElement__SVG_TURBULENCE_TYPE_FRACTALNOISE" class="constant"><b>SVG_TURBULENCE_TYPE_FRACTALNOISE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'fractalNoise'</span>.

</div></dd>
<dt id="filters-__svg__SVGFETurbulenceElement__SVG_TURBULENCE_TYPE_TURBULENCE" class="constant"><b>SVG_TURBULENCE_TYPE_TURBULENCE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'turbulence'</span>.

</div></dd></dl></dd><dt class="constants-header">Constants in group “Stitch Options”:</dt><dd><dl class="constants">
<dt id="filters-__svg__SVGFETurbulenceElement__SVG_STITCHTYPE_UNKNOWN" class="constant first-child"><b>SVG_STITCHTYPE_UNKNOWN</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 The type is not one of predefined types. It is invalid to attempt to
 define a new value of this type or to attempt to switch an existing
 value to this type.

</div></dd>
<dt id="filters-__svg__SVGFETurbulenceElement__SVG_STITCHTYPE_STITCH" class="constant"><b>SVG_STITCHTYPE_STITCH</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'stitch'</span>.

</div></dd>
<dt id="filters-__svg__SVGFETurbulenceElement__SVG_STITCHTYPE_NOSTITCH" class="constant"><b>SVG_STITCHTYPE_NOSTITCH</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Corresponds to value <span class="attr-value">'noStitch'</span>.

</div></dd></dl></dd><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="filters-__svg__SVGFETurbulenceElement__baseFrequencyX" class="attribute first-child"><b>baseFrequencyX</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feTurbulenceBaseFrequencyAttribute"><span class="attr-name">‘baseFrequency’</span></a> on the given
 <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a> element.  Contains the X component of the
 <a href="#filters-feTurbulenceBaseFrequencyAttribute"><span class="attr-name">‘baseFrequency’</span></a> attribute.
</div></dd>
<dt id="filters-__svg__SVGFETurbulenceElement__baseFrequencyY" class="attribute"><b>baseFrequencyY</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feTurbulenceBaseFrequencyAttribute"><span class="attr-name">‘baseFrequency’</span></a> on the given
 <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a> element.  Contains the Y component of the
 (possibly computed automatically) <a href="#filters-feTurbulenceBaseFrequencyAttribute"><span class="attr-name">‘baseFrequency’</span></a> attribute.
</div></dd>
<dt id="filters-__svg__SVGFETurbulenceElement__numOctaves" class="attribute"><b>numOctaves</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feTurbulenceNumOctavesAttribute"><span class="attr-name">‘numOctaves’</span></a> on the given
 <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFETurbulenceElement__seed" class="attribute"><b>seed</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feTurbulenceSeedAttribute"><span class="attr-name">‘seed’</span></a> on the given
 <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a> element.
</div></dd>
<dt id="filters-__svg__SVGFETurbulenceElement__stitchTiles" class="attribute"><b>stitchTiles</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feTurbulenceStitchTilesAttribute"><span class="attr-name">‘stitchTiles’</span></a> on the given
 <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a> element.  Takes one of the SVG_STITCHTYPE_*
 constants defined on this interface.
</div></dd>
<dt id="filters-__svg__SVGFETurbulenceElement__type" class="attribute"><b>type</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#filters-feTurbulenceTypeAttribute"><span class="attr-name">‘type’</span></a> on the given
 <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a> element.  Takes one of the SVG_TURBULENCE_TYPE_*
 constants defined on this interface.
</div></dd></dl></dd></dl>


</div><hr class="chapter-divider" />
<div id="chapter-interact">

<h1>16 Interactivity</h1><h2 id="interact-toc">Contents</h2><ul class="toc">
<li><a href="#interact-Introduction">16.1 Introduction</a></li>
<li><a href="#interact-SVGEvents">16.2 Complete list of supported events</a></li>
<li><a href="#interact-UIEvents">16.3 User interface events</a></li>
<li><a href="#interact-PointerEvents">16.4 Pointer events</a></li>
<li><a href="#interact-pointer-processing">16.5 Hit-testing and processing order for user interface events</a><ul class="toc">
<li><a href="#interact-hit-testing">16.5.1 Hit-testing</a></li>
<li><a href="#interact-event-processing">16.5.2 Event processing</a></li></ul></li>
<li><a href="#interact-PointerEventsProperty">16.6 The <span class="prop-name">‘pointer-events’</span> property</a></li>
<li><a href="#interact-EnableZoomAndPanControls">16.7 Magnification and panning</a></li>
<li><a href="#interact-Cursors">16.8 Cursors</a><ul class="toc">
<li><a href="#interact-CursorIntro">16.8.1 Introduction to cursors</a></li>
<li><a href="#interact-CursorProperty">16.8.2 The <span class="prop-name">‘cursor’</span> property</a></li>
<li><a href="#interact-CursorElement">16.8.3 The <span class="element-name">‘cursor’</span> element</a></li></ul></li>
<li><a href="#interact-DOMInterfaces">16.9 DOM interfaces</a><ul class="toc">
<li><a href="#interact-InterfaceSVGCursorElement">16.9.1 Interface SVGCursorElement</a></li></ul></li></ul>

<h2 id="interact-Introduction">16.1 Introduction</h2>

    <p>SVG content can be interactive (i.e., responsive to
    user-initiated events) by utilizing the following features in
    the SVG language:</p>
    <ul><li>User-initiated actions such as button presses on the
      pointing device (e.g., a mouse) can cause <a href="#chapter-animate">animations</a> or <a href="#chapter-script">scripts</a> to execute.</li><li>The user can initiate hyperlinks to new Web pages (see <a href="#linking-Links">Links out of SVG content: the <span class="element-name">‘a’</span> element</a>) by actions such
      as mouse clicks when the pointing device is positioned over
      particular graphics elements.</li><li>In many cases, depending on the value of the <a href="#interact-ZoomAndPanAttribute"><span class="attr-name">‘zoomAndPan’</span></a>
      attribute on the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element and on the
      characteristics of the user agent, users are able to zoom
      into and pan around SVG content.</li><li>User movements of the pointing device can cause changes
      to the <a href="#interact-Cursors">cursor</a> that shows
      the current position of the pointing device.</li></ul>
    <p>This chapter describes:</p>
    <ul><li>information about <a href="#interact-SVGEvents">events</a>, including under
      which circumstances events are triggered</li><li>how to indicate whether a given document can be <a href="#interact-EnableZoomAndPanControls">zoomed and
      panned</a></li><li>how to specify which <a href="#interact-Cursors">cursors</a> to use</li></ul>
    <p>Related information can be found in other chapters:</p>
    <ul><li>hyperlinks are discussed in <a href="#chapter-linking">Links</a></li><li>scripting and event attributes are discussed in <a href="#chapter-script">Scripting</a></li><li>SVG's relationship to DOM2 events is discussed in <a href="#svgdom-RelationshipWithDOM2Events">Relationship
      with DOM2 event model</a></li><li>animation is discussed in <a href="#chapter-animate">Animation</a></li></ul>

<h2 id="interact-SVGEvents">16.2 Complete list of supported events</h2>

    <p>The following aspects of SVG are affected by events:</p>
    <ul><li>Using <a href="#chapter-svgdom">SVG Document Object Model
      (DOM)</a>, a script can <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-registration">register
      DOM 2 event listeners</a>
      ([<a href="#refs-ref-DOM2EVENTS">DOM2EVENTS</a>], section 1.3) so that script can be invoked when a
      given event occurs.</li><li>SVG includes <a href="#script-EventAttributes">event
      attributes</a> on selected elements which define script that
      can be executed when a given event occurs in association with
      the given element.</li><li>SVG's <a href="#intro-TermAnimationElement"><span class="svg-term">animation elements</span></a> can be defined to begin or end based on
      events.</li></ul>
    <p>The following table lists all of the events which are
    recognized and supported in SVG. The <em>Event name</em> in the
    first column is the name to use within SVG's <a href="#intro-TermAnimationElement"><span class="svg-term">animation elements</span></a> to
    define the events which can start or end animations. The
    <em>DOM2 name</em> in the second column is the name to use when
    defining <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-registration">DOM 2 event listeners</a>
     ([<a href="#refs-ref-DOM2EVENTS">DOM2EVENTS</a>], section 1.3).
    The <em>Event attribute name</em> in
    the fourth column contains the corresponding name of the <a href="#script-EventAttributes">event attributes</a> that
    can be attached to elements in the SVG language.</p>
    <p>Requirements in the table on whether an event of a given type
    bubbles or is cancelable apply only to events that are created and
    dispatched by the user agent.  Events of those types created from script
    using the <a class="idlattr" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-DocumentEvent-createEvent">createEvent</a>
    method on the <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-DocumentEvent">DocumentEvent</a> interface can be made to bubble
    or be cancelable with the
    <a class="idlattr" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-Event-initEvent">initEvent</a>
    method.</p>
    <table summary="Complete list of SVG events" class="vert event-table"><tr><th>Event name and description</th><th>DOM2 name</th><th>DOM2 category</th><th>Event attribute name</th></tr><tr><td id="interact-FocusInEvent"><p class="event-name"><strong>focusin</strong></p>
          <p>Occurs when an element receives focus, such as when a <a href="#text-TextElement"><span class="element-name">‘text’</span></a> becomes selected.</p></td><td>DOMFocusIn</td><td><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-UIEvent">
        UIEvent</a></td><td><a href="#script-OnFocusInEventAttribute">onfocusin</a></td></tr><tr><td id="interact-FocusOutEvent"><p class="event-name"><strong>focusout</strong></p>
	<p>Occurs when an element loses focus, such as when a <a href="#text-TextElement"><span class="element-name">‘text’</span></a> becomes unselected.</p></td><td>DOMFocusOut</td><td><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-UIEvent">
        UIEvent</a></td><td><a href="#script-OnFocusOutEventAttribute">onfocusout</a></td></tr><tr><td id="interact-ActivateEvent"><p class="event-name"><strong>activate</strong></p>
	<p>Occurs when an element is activated, for instance, through
        a mouse click or a keypress. A numerical argument is
        provided to give an indication of the type of activation
        that occurs: 1 for a simple activation (e.g. a simple click
        or Enter), 2 for hyperactivation (for instance a double
        click or Shift Enter).</p></td><td>DOMActivate</td><td><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-UIEvent">
        UIEvent</a></td><td><a href="#script-OnActivateEventAttribute">onactivate</a></td></tr><tr><td id="interact-ClickEvent"><p class="event-name"><strong>click</strong></p>
        <p>Occurs when the pointing device button is clicked over
        an element. A click is defined as a mousedown and mouseup
        over the same screen location. The sequence of these events
        is: <code>mousedown</code>, <code>mouseup</code>,
        <code>click</code>. If multiple clicks occur at the same
        screen location, the sequence repeats with the
        <code>detail</code> attribute incrementing with each
        repetition.</p></td><td>(same)</td><td><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MouseEvent">
        MouseEvent</a></td><td><a href="#script-OnClickEventAttribute">onclick</a></td></tr><tr><td id="interact-MouseDownEvent"><p class="event-name"><strong>mousedown</strong></p>
        <p>Occurs when the pointing device button is pressed over
        an element.</p></td><td>(same)</td><td><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MouseEvent">
        MouseEvent</a></td><td><a href="#script-OnMouseDownEventAttribute">onmousedown</a></td></tr><tr><td id="interact-MouseUpEvent"><p class="event-name"><strong>mouseup</strong></p>
        <p>Occurs when the pointing device button is released over
        an element.</p></td><td>(same)</td><td><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MouseEvent">
        MouseEvent</a></td><td><a href="#script-OnMouseUpEventAttribute">onmouseup</a></td></tr><tr><td id="interact-MouseOverEvent"><p class="event-name"><strong>mouseover</strong></p>
        <p>Occurs when the pointing device is moved onto an
        element.</p></td><td>(same)</td><td><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MouseEvent">
        MouseEvent</a></td><td><a href="#script-OnMouseOverEventAttribute">onmouseover</a></td></tr><tr><td id="interact-MouseMoveEvent"><p class="event-name"><strong>mousemove</strong></p>
        <p>Occurs when the pointing device is moved while it is
        over an element.</p></td><td>(same)</td><td><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MouseEvent">
        MouseEvent</a></td><td><a href="#script-OnMouseMoveEventAttribute">onmousemove</a></td></tr><tr><td id="interact-MouseOutEvent"><p class="event-name"><strong>mouseout</strong></p>
        <p>Occurs when the pointing device is moved away from an
        element.</p></td><td>(same)</td><td><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MouseEvent">
        MouseEvent</a></td><td><a href="#script-OnMouseOutEventAttribute">onmouseout</a></td></tr><tr><td id="interact-DOMSubtreeModifiedEvent"><p class="event-name"><strong>DOMSubtreeModified</strong></p>
        <p>This is a general event for notification of all changes
        to the document. It can be used instead of the more
        specific events listed below. (The normative definition of
        this event is the description in the <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MutationEvent">
        DOM2 specification</a>.)</p></td><td>(same)</td><td><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MutationEvent">
        MutationEvent</a></td><td>none</td></tr><tr><td id="interact-DOMNodeInsertedEvent"><p class="event-name"><strong>DOMNodeInserted</strong></p>
        <p>Fired when a node has been added as a child of another
        node. (The normative definition of this event is the
        description in the <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MutationEvent">
        DOM2 specification</a>.)</p></td><td>(same)</td><td><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MutationEvent">
        MutationEvent</a></td><td>none</td></tr><tr><td id="interact-DOMNodeRemovedEvent"><p class="event-name"><strong>DOMNodeRemoved</strong></p>
        <p>Fired when a node is being removed from another node.
        (The normative definition of this event is the description
        in the <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MutationEvent">
        DOM2 specification</a>.)</p></td><td>(same)</td><td><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MutationEvent">
        MutationEvent</a></td><td>none</td></tr><tr><td id="interact-DOMNodeRemovedFromDocumentEvent"><p class="event-name"><strong>DOMNodeRemovedFromDocument</strong></p>
        <p>Fired when a node is being removed from a document,
        either through direct removal of the Node or removal of a
        subtree in which it is contained. (The normative definition
        of this event is the description in the <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MutationEvent">
        DOM2 specification</a>.)</p></td><td>(same)</td><td><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MutationEvent">
        MutationEvent</a></td><td>none</td></tr><tr><td id="interact-DOMNodeInsertedIntoDocumentEvent"><p class="event-name"><strong>DOMNodeInsertedIntoDocument</strong></p>
        <p>Fired when a node is being inserted into a document,
        either through direct insertion of the Node or insertion of
        a subtree in which it is contained. (The normative
        definition of this event is the description in the <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MutationEvent">
        DOM2 specification</a>.)</p></td><td>(same)</td><td><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MutationEvent">
        MutationEvent</a></td><td>none</td></tr><tr><td id="interact-DOMAttrModifiedEvent"><p class="event-name"><strong>DOMAttrModified</strong></p>
        <p>Fired after an attribute has been modified on a node.
        (The normative definition of this event is the description
        in the <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MutationEvent">
        DOM2 specification</a>.)</p></td><td>(same)</td><td><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MutationEvent">
        MutationEvent</a></td><td>none</td></tr><tr><td id="interact-DOMCharacterDataModifiedEvent"><p class="event-name"><strong>DOMCharacterDataModified</strong></p>
        <p>Fired after CharacterData within a node has been
        modified but the node itself has not been inserted or
        deleted. (The normative definition of this event is the
        description in the <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MutationEvent">
        DOM2 specification</a>.)</p></td><td>(same)</td><td><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MutationEvent">
        MutationEvent</a></td><td>none</td></tr><tr><td id="interact-LoadEvent"><p class="event-name"><strong>SVGLoad</strong></p>
          <p>The event is triggered at the point at which the user
          agent has fully parsed the element and its descendants and
          is ready to act appropriately upon that element, such as
          being ready to render the element to the target device.
          <a href="#struct-ExternalResourcesRequired">Referenced
          external resources that are required</a> must be loaded,
          parsed and ready to render before the event is triggered.
          Optional external resources are not required to be ready
          for the event to be triggered.</p>
          <p>SVGLoad events do not bubble and are not cancelable.</p>
        </td><td>(same)</td><td>none</td><td><a href="#script-OnLoadEventAttribute">onload</a></td></tr><tr><td id="interact-UnloadEvent"><p class="event-name"><strong>SVGUnload</strong></p>
          <p>Only applicable to <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg elements</span></a>. The unload
          event occurs when the DOM implementation removes a document
          from a window or frame.</p>
          <p>SVGUnload events do not bubble and are not cancelable.</p>
        </td><td>(same)</td><td>none</td><td><a href="#script-OnUnloadEventAttribute">onunload</a></td></tr><tr><td id="interact-AbortEvent"><p class="event-name"><strong>SVGAbort</strong></p>
          <p>The abort event occurs when page loading is stopped
          before an element has been allowed to load completely.</p>
          <p>SVGAbort events bubble but are not cancelable.</p>
        </td><td>(same)</td><td>none</td><td><a href="#script-OnAbortEventAttribute">onabort</a></td></tr><tr><td id="interact-ErrorEvent"><p class="event-name"><strong>SVGError</strong></p>
          <p>The error event occurs when an element does not load
          properly or when an error occurs during script
          execution.</p>
          <p>SVGError events bubble but are not cancelable.</p>
        </td><td>(same)</td><td>none</td><td><a href="#script-OnErrorEventAttribute">onerror</a></td></tr><tr><td id="interact-ResizeEvent"><p class="event-name"><strong>SVGResize</strong></p>
          <p>Occurs when a document view is being resized. This
          event is only applicable to <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg elements</span></a> and is
          dispatched after the resize operation has taken place. The
          target of the event is the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.</p>
          <p>SVGResize events bubble but are not cancelable.</p>
        </td><td>(same)</td><td>none</td><td><a href="#script-OnResizeEventAttribute">onresize</a></td></tr><tr><td id="interact-ScrollEvent"><p class="event-name"><strong>SVGScroll</strong></p>
          <p>Occurs when a document view is being shifted along the
          X or Y or both axis, either through a direct user
          interaction or any change on the <a class="idlattr" href="#struct-__svg__SVGSVGElement__currentTranslate">currentTranslate</a> property
          available on <a class="idlinterface" href="#struct-InterfaceSVGSVGElement">SVGSVGElement</a> interface. This event is only
          applicable to <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg elements</span></a> and is
          dispatched after the shift modification has taken place.
          The target of the event is the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.</p>
          <p>SVGScroll events bubble but are not cancelable.</p>
        </td><td>(same)</td><td>none</td><td><a href="#script-OnScrollEventAttribute">onscroll</a></td></tr><tr><td id="interact-ZoomEvent"><p class="event-name"><strong>SVGZoom</strong></p>
          <p>Occurs when the zoom level of a document view is being
          changed, either through a direct user interaction or any
          change to the <a class="idlattr" href="#struct-__svg__SVGSVGElement__currentScale">currentScale</a>
          property available on <a class="idlinterface" href="#struct-InterfaceSVGSVGElement">SVGSVGElement</a> interface. This event
          is only applicable to <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg elements</span></a> and is
          dispatched after the zoom level modification has taken
          place. The target of the event is the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.</p>
          <p>SVGZoom events bubble but are not cancelable.</p>
        </td><td>none</td><td>none</td><td><a href="#script-OnZoomEventAttribute">onzoom</a></td></tr><tr><td id="interact-BeginEvent"><p class="event-name"><strong>beginEvent</strong></p>
        <p>Occurs when an animation element begins. For details,
        see the description of Interface TimeEvent in the <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/">
        SMIL Animation specification</a>.</p></td><td>none</td><td>none</td><td><a href="#script-OnBeginEventAttribute">onbegin</a></td></tr><tr><td id="interact-EndEvent"><p class="event-name"><strong>endEvent</strong></p>
        <p>Occurs when an animation element ends. For details, see
        the description of Interface TimeEvent in the <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/">
        SMIL Animation specification</a>.</p></td><td>none</td><td>none</td><td><a href="#script-OnEndEventAttribute">onend</a></td></tr><tr><td id="interact-RepeatEvent"><p class="event-name"><strong>repeatEvent</strong></p>
        <p>Occurs when an animation element repeats. It is raised
        each time the element repeats, after the first iteration.
        For details, see the description of Interface TimeEvent in
        the <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/">
        SMIL Animation specification</a>.</p></td><td>none</td><td>none</td><td><a href="#script-OnRepeatEventAttribute">onrepeat</a></td></tr></table>
    <p>As in <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-eventgroupings-keyevents">
    DOM 2 Key events</a> ([<a href="#refs-ref-DOM2EVENTS">DOM2EVENTS</a>], section 1.6.3), the SVG specification does not provide a
    key event set. An event set designed for use with keyboard
    input devices will be included in a later version of the DOM
    and SVG specifications.</p>

    <p>Details on the parameters passed to event listeners for the
    event types from DOM2 can be found in the DOM2 specification.
    For other event types, the parameters passed to event listeners
    are described elsewhere in this specification.</p>

<p><a href="#script-EventAttributes">Event listener attributes</a>
can be specified on some elements to listen to a given event.  The script in
such attributes is run only in response to "bubbling" and "at target" phase
events dispatched to the element.</p>

<p>Likewise, <a href="#animate-EventValueSyntax">event-value timing specifiers</a>
used in <a href="#intro-TermAnimationElement"><span class="svg-term">animation element</span></a> <a href="#animate-BeginAttribute"><span class="attr-name">‘begin’</span></a> and <a href="#animate-EndAttribute"><span class="attr-name">‘end’</span></a>
attributes are resolved to concrete times only in response to "bubbling" and
"at target" phase events dispatched to the relevant element.</p>

<h2 id="interact-UIEvents">16.3 User interface events</h2>

    <p>On user agents which support interactivity, it is common for
    authors to define SVG documents such that they are responsive
    to user interface events. Among the set of possible user events
    are <a href="#interact-PointerEvents">pointer events</a>,
    keyboard events, and document events.</p>
    <p>In response to user interface (UI) events, the author might
    start an animation, perform a hyperlink to another Web page,
    highlight part of the document (e.g., change the color of the
    graphics elements which are under the pointer), initiate a
    "roll-over" (e.g., cause some previously hidden graphics
    elements to appear near the pointer) or launch a script which
    communicates with a remote database.</p>

<h2 id="interact-PointerEvents">16.4 Pointer events</h2>

    <p>User interface events that occur because of user actions
    performed on a pointer device are called pointer events.</p>
    <p>Many systems support pointer devices such as a mouse or
    trackball. On systems which use a mouse, pointer events consist
    of actions such as mouse movements and mouse clicks. On systems
    with a different pointer device, the pointing device often
    emulates the behavior of the mouse by providing a mechanism for
    equivalent user actions, such as a button to press which is
    equivalent to a mouse click.</p>
    <p>For each pointer event, the SVG user agent determines the
    <em>target element</em> of a given pointer event. The target
    element is the topmost graphics element whose relevant
    graphical content is under the pointer at the time of the
    event. (See property <a href="#interact-PointerEventsProperty"><span class="prop-name">‘pointer-events’</span></a> for a description
    of how to determine whether an element's relevant graphical
    content is under the pointer, and thus in which circumstances
    that graphic element can be the target element for a pointer
    event.) When an element is not displayed (i.e., when the
    <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> property on that element
    or one of its ancestors has a value of <span class="prop-value">none</span>), that element cannot be the
    target of pointer events.</p>
    <p>If a target element for the pointer event exists, then
    the event is dispatched to that element according to the
    normal <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-flow">event flow</a>
    ([<a href="#refs-ref-DOM2EVENTS">DOM2EVENTS</a>], section 1.2).
    Note, however, that if the target element is in a
    <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element shadow tree, that the event flow
    will include <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> objects.  See
    <a href="#struct-UseElement">The <span class="element-name">‘use’</span> element</a>
    for details.</p>
    <p>If a target element for the pointer event does not exist,
    then the event is ignored.</p>

    <h2 id="interact-pointer-processing">16.5 Hit-testing and processing order for user interface events</h2>
    <p>There are two distinct aspects of pointer-device interaction with an element or area:</p>
    <ol><li>hit-testing, to determine if a pointer event (such as a mouse movement or mouse click) occurred within the interaction area of an element, and the subsequent DOM event flow;</li><li>functional processing of actions associated with any relevant element.</li></ol>
    
    <h3 id="interact-hit-testing">16.5.1 Hit-testing</h3>
    <p>Determining whether a pointer event results in a positive <a href="#intro-TermHitTesting"><span class="svg-term">hit-test</span></a>
    depends upon the position of the pointer, the size and shape of the
    <a href="#intro-TermGraphicsElement"><span class="svg-term">graphics element</span></a>, and the computed value of the <a href="#interact-PointerEventsProperty"><span class="prop-name">‘pointer-events’</span></a>
    property on the element.  The definition of the <a href="#interact-PointerEventsProperty"><span class="prop-name">‘pointer-events’</span></a>
    property below describes the exact region that is sensitive to pointer
    events for a given type of graphics element.</p>

    <p>Note that the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element is not a <a href="#intro-TermGraphicsElement"><span class="svg-term">graphics element</span></a>, and in
    a <a href="#conform-ConformingSVGStandAloneFiles">Conforming SVG Stand-Alone File</a>
    a <a href="#intro-TermRootmostSVGElement"><span class="svg-term">rootmost <span class="element-name">‘svg’</span> element</span></a> will never be the target of pointer events,
    though events can bubble to this element.
    If a pointer event does not result in a positive <a href="#intro-TermHitTesting"><span class="svg-term">hit-test</span></a> on a
    <a href="#intro-TermGraphicsElement"><span class="svg-term">graphics element</span></a>, then it should evoke any user-agent-specific window
    behavior, such as a presenting a context menu or controls to allow zooming
    and panning of an SVG document fragment.</p> 

    <p>This specification does not define the behavior of pointer events on the <a href="#intro-TermRootmostSVGElement"><span class="svg-term">rootmost <span class="element-name">‘svg’</span> element</span></a> for SVG images which are embedded by reference 
    or inclusion within another document, e.g., whether the <a href="#intro-TermRootmostSVGElement"><span class="svg-term">rootmost <span class="element-name">‘svg’</span> element</span></a> embedded in an HTML document intercepts mouse click events; 
    future specifications may define this behavior, but for the purpose of this specification, the behavior is implementation-specific.</p>
      
      
    <h3 id="interact-event-processing">16.5.2 Event processing</h3>
    <p>An element which is the target of a user interface event may have
    particular interaction behaviors, depending upon the type of element and
    whether it has explicit associated interactions, such as scripted event
    listeners, CSS pseudo-classes matches, or declarative animations
    with event-based timing.  The algorithm and order for processing
    user interface events for a given target element, after dispatching the
    DOM event, is as follows:</p>

    <ol><li>If an event handler registered on this element invokes the <code>preventDefault()</code> DOM method, then no further processing for this element is performed, and the event follows the <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-flow">event flow processing</a> as described in <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html">DOM Level 2 Events</a> [<a href="#refs-ref-DOM2EVENTS">DOM2EVENTS</a>] (or its successor);</li><li>If the element has an associated title or description, such as a <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> element or an <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a> attribute, and the user agent supports the display of such information (e.g. via a tooltip or status-bar message), that information should be displayed, as appropriate to the type of pointer event;</li><li>If the element matches any relevant <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/selector.html#q15">dynamic pseudo-class selectors</a> appropriate to the type of pointer event, such as <code>:hover</code>, <code>:active</code>, or <code>:focus</code> as described in [<a href="#refs-ref-CSS2">CSS2</a>], section 5.11, then the relevant class properties are applied;</li><li>If the element and the event type are associated with the activation
      or cancelation of declarative animation though the use of
      <a href="#animate-EventValueSyntax">event-value</a> timing specifiers,
      any corresponding instance times must be resolved, and any conseqential
      actions of this instance time resolution (such as immediately starting
      or stopping the animation) must be performed;</li><li>If the element is a hyperlink (e.g., it is a descendant element of an <a href="#linking-AElement"><span class="element-name">‘a’</span></a> element), and the pointer event is of a type that activates that hyperlink (e.g. via a mouse click), and if the hyperlink traversal changes the context of the content (e.g. opens a different document, or moves the pointer away from this element by moving to another part of the same document), then no further processing for this element is performed;</li><li>If the element is a <a href="#intro-TermTextContentElement"><span class="svg-term">text content element</span></a>, and the event type is one which the user agent recognizes as part of a text-selection operation (e.g., a mouse click and drag, or a double-click), then the <a href="#text-TextSelection">text selection</a> algorithm is performed;</li><li>If the event type is one which the user agent associates with the evocation of special user-interface controls (e.g., a right-click or command-click evoking a context menu), the user agent should evoke such user-agent-specific behavior, such as presenting a context menu or controls to allow zooming and panning of an SVG document fragment.</li></ol>

<h2 id="interact-PointerEventsProperty">16.6 The <span class="prop-name">‘pointer-events’</span> property</h2>
    <p>In different circumstances, authors may want to control
    under what conditions particular graphic elements can become
    the target of pointer events. For example, the author might
    want a given element to receive pointer events only when the
    pointer is over the stroked perimeter of a given shape. In
    other cases, the author might want a given element to ignore
    pointer events under all circumstances so that graphical
    elements underneath the given element will become the target of
    pointer events.</p>
    
    <p>The effects of masking and clipping differ with respect to <a href="#interact-PointerEventsProperty">pointer-events</a>. 
    A clip path is a geometric boundary, and a given point is clearly either inside or outside that boundary; thus, pointer events must be captured 
    normally over the rendered areas of a clipped element, but must not be captured over the clipped areas, as described in the definition of 
    <a href="#masking-clipPath-geometry">clipping paths</a>.  By contrast, a mask is not a binary transition, but a pixel operation, 
    and different behavior for fully transparent and almost-but-not-fully-transparent may be confusingly arbitrary; as a consequence, for elements with a 
    mask applied, pointer-events must still be captured even in areas where the mask goes to zero opacity.  If an author wishes to achieve an effect where 
    the transparent parts of a mask allow pointer-events to pass to an element below, a combination of masking and clipping may be used.</p>
    <p>The <a href="#filters-FilterProperty"><span class="prop-name">‘filter’</span></a> property has no effect on pointer-events processing, and must in this context be treated as if the <a href="#filters-FilterProperty"><span class="prop-name">‘filter’</span></a> wasn't specified.</p>
    
    <p>For example, suppose a circle with a <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> of <span class="prop-value">red</span> (i.e., the outline is solid red)
    and a <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> of <span class="prop-value">none</span> (i.e., the interior is not
    painted) is rendered directly on top of a rectangle with a <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> of <span class="prop-value">blue</span>. The author might want the
    circle to be the target of pointer events only when the pointer
    is over the perimeter of the circle. When the pointer is over
    the interior of the circle, the author might want the
    underlying rectangle to be the target element of pointer
    events.</p>
    <p>The <a href="#interact-PointerEventsProperty"><span class="prop-name">‘pointer-events’</span></a> property
    specifies under what circumstances a given graphics element can
    be the target element for a pointer event. It affects the
    circumstances under which the following are processed:</p>
    <ul><li>user interface events such as mouse clicks</li><li><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/selector.html#q15">dynamic pseudo-classes</a>
      (i.e., :hover, :active and :focus;
      [<a href="#refs-ref-CSS2">CSS2</a>], section 5.11)</li><li>hyperlinks (see <a href="#linking-Links">Links out of
      SVG content: the <span class="element-name">‘a’</span>
      element</a>)</li></ul>
    <div class="propdef">
      <dl><dt><span class="propdef-title prop-name">‘pointer-events’</span></dt><dd>
          <table summary="pointer-events property" class="propinfo" cellspacing="0" cellpadding="0"><tr><td><em>Value:</em>  </td><td>visiblePainted | visibleFill | visibleStroke |
              visible |<br />
               painted | fill | stroke | all | none | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr><td><em>Initial:</em>  </td><td>visiblePainted</td></tr><tr><td><em>Applies to:</em>  </td><td><a href="#intro-TermGraphicsElement">graphics
              elements</a></td></tr><tr><td><em>Inherited:</em>  </td><td>yes</td></tr><tr><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr><td><em>Media:</em>  </td><td>visual</td></tr><tr><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <dl><dt><span class="prop-value">visiblePainted</span></dt><dd>
        The given element can be the target element for pointer events when 
        the <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> property is set to 
        <span class="prop-value">visible</span> and when the pointer is over a 
        "painted" area. The pointer is over a painted area if it is over the 
        interior (i.e., fill) of the element and the <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> property has 
        an actual value other than <span class="prop-value">none</span> or it 
        is over the perimeter (i.e., stroke) of the element and the <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> 
        property is set to a value other than <span class="prop-value">none</span>.
      </dd><dt><span class="prop-value">visibleFill</span></dt><dd>
        The given element can be the target element for pointer events when the
        <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>
        property is set to <span class="prop-value">visible</span> and when the
        pointer is over the interior (i.e., fill) of the element. The value of
        the
        <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>
        property does not affect event processing.
      </dd><dt><span class="prop-value">visibleStroke</span></dt><dd>
        The given element can be the target element for pointer events when the
          <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>
        property is set to <span class="prop-value">visible</span> and when the
        pointer is over the perimeter (i.e., stroke) of the element. The value
        of the
          <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>
        property does not affect event processing.
      </dd><dt><span class="prop-value">visible</span></dt><dd>
        The given element can be the target element for pointer events when the
          <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>
        property is set to <span class="prop-value">visible</span> and the
        pointer is over either the interior (i.e., fill) or the perimeter (i.e.,
        stroke) of the element. The values of the
          <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>
        and
          <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>
        do not affect event processing.
      </dd><dt><span class="prop-value">painted</span></dt><dd>
        The given element can be the target element for pointer events when the 
        pointer is over a "painted" area. The pointer is over a painted area if 
        it is over the interior (i.e., fill) of the element and the <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> 
        property has an actual value other than 
        <span class="prop-value">none</span> or it is over the perimeter (i.e.,  
        stroke) of the element and the <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> property has an actual  
        value other than <span class="prop-value">none</span>. The value of the 
        <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> property does not effect event processing. 
      </dd><dt><span class="prop-value">fill</span></dt><dd>
        The given element can be the target element for pointer events when the
        pointer is over the interior (i.e., fill) of the element. The values of
        the
          <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>
        and
          <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>
        properties do not affect event processing.
      </dd><dt><span class="prop-value">stroke</span></dt><dd>
        The given element can be the target element for pointer events when the
        pointer is over the perimeter (i.e., stroke) of the element. The values
        of the
          <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>
        and
          <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>
        properties do not affect event processing.
      </dd><dt><span class="prop-value">all</span></dt><dd>
        The given element can be the target element for pointer events whenever
        the pointer is over either the interior (i.e., fill) or the perimeter
        (i.e., stroke) of the element. The values of the
          <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>,
          <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>
        and
          <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>
        properties do not affect event processing.
      </dd><dt><span class="prop-value">none</span></dt><dd>The given element does not receive pointer events.</dd></dl>
    <p>
      For text elements, hit-testing is performed on a character cell basis:
    </p>
    <ul><li>
        The value <span class="prop-value">visiblePainted</span> means that the
        text string can receive events anywhere within the character cell if
        either the
          <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>
        property is set to a value other than <span class="prop-value">none</span>
        or the
          <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>
        property is set to a value other than <span class="prop-value">none</span>,
        with the additional requirement that the
          <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>
        property is set to <span class="prop-value">visible</span>.
      </li><li>
        The values <span class="prop-value">visibleFill</span>,
        <span class="prop-value">visibleStroke</span>
        and
        <span class="prop-value">visible</span>
        are equivalent and indicate that the text string can receive events
        anywhere within the character cell if the
          <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>
        property is set to <span class="prop-value">visible</span>. The values
        of the
          <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>
        and
          <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>
        properties do not affect event processing.
      </li><li>
        The value <span class="prop-value">painted</span> means that the text
        string can receive events anywhere within the character cell if either
        the
          <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>
        property is set to a value other than
        <span class="prop-value">none</span> or the
          <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>
        property is set to a value other than <span class="prop-value">none</span>.
        The value of the
          <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>
        property does not affect event processing.
      </li><li>
        The values <span class="prop-value">fill</span>,
        <span class="prop-value">stroke</span> and
        <span class="prop-value">all</span> are equivalent and indicate that
        the text string can receive events anywhere within the character cell.
        The values of the
          <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>,
          <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>
        and
          <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>
        properties do not affect event processing.
      </li><li>
        The value <span class="prop-value">none</span> indicates that the given
        text does not receive pointer events.
      </li></ul>
    <p>
      For raster images, hit-testing is either performed on a
      whole-image basis (i.e., the rectangular area for the image is
      one of the determinants for whether the image receives the
      event) or on a per-pixel basis (i.e., the alpha values for
      pixels under the pointer help determine whether the image
      receives the event):
    </p>
    <ul><li>
        The value <span class="prop-value">visiblePainted</span> means that the
        raster image can receive events anywhere within the bounds of the image
        if any pixel from the raster image which is under the pointer is not
        fully transparent, with the additional requirement that the
          <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>
        property is set to <span class="prop-value">visible</span>.
      </li><li>
        The values <span class="prop-value">visibleFill</span>,
        <span class="prop-value">visibleStroke</span> and
        <span class="prop-value">visible</span> are equivalent and indicate
        that the image can receive events anywhere within the rectangular area
        for the image if the
          <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>
        property is set to <span class="prop-value">visible</span>.
      </li><li>
        The value <span class="prop-value">painted</span> means that the raster
        image can receive events anywhere within the bounds of the image if any
        pixel from the raster image which is under the pointer is not fully
        transparent. The value of the
          <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a>
        property does not affect event processing.
      </li><li>The values <span class="prop-value">fill</span>, <span class="prop-value">stroke</span> and <span class="prop-value">all</span> are equivalent and indicate
      that the image can receive events anywhere within the
      rectangular area for the image. The value of the <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> property does not
      affect event processing.</li><li>The value <span class="prop-value">none</span> indicates
      that the image does not receive pointer events.</li></ul>
    <p>Note that for raster images, the values of properties <a href="#masking-OpacityProperty"><span class="prop-name">‘opacity’</span></a>,
    <a href="#painting-FillOpacityProperty"><span class="prop-name">‘fill-opacity’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="prop-name">‘stroke-opacity’</span></a>, <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> and
    <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> do not affect event processing.</p>

<h2 id="interact-EnableZoomAndPanControls">16.7 Magnification and panning</h2>

    <p id="interact-ZoomAndPanAttribute">Magnification represents a complete, uniform transformation
    on an SVG document fragment, where the magnify operation scales
    all graphical elements by the same amount. A magnify operation
    has the effect of a supplemental scale and translate
    transformation placed at the outermost level on the SVG
    document fragment (i.e., outside the <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>).</p>
    <p>Panning represents a translation (i.e., a shift)
    transformation on an SVG document fragment in response to a
    user interface action.</p>
    <p>SVG user agents that operate in interaction-capable user
    environments are required to support the ability to magnify and
    pan.</p>
    <p>The <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>
    in an SVG document fragment has attribute <a href="#interact-ZoomAndPanAttribute"><span class="attr-name">‘zoomAndPan’</span></a>, which takes the possible
    values of <em>disable</em> and <em>magnify</em>, with the
    default being <em>magnify</em>.</p>
    <p>If <em>disable</em>, the user agent shall disable any
    magnification and panning controls and not allow the user to
    magnify or pan on the given document fragment.</p>
    <p>If <em>magnify</em>, in environments that support user
    interactivity, the user agent shall provide controls to allow
    the user to perform a "magnify" operation on the document
    fragment.</p>
    <p>If a <a href="#interact-ZoomAndPanAttribute"><span class="attr-name">‘zoomAndPan’</span></a> attribute is
    assigned to an inner <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>
    element, the <a href="#interact-ZoomAndPanAttribute"><span class="attr-name">‘zoomAndPan’</span></a> setting
    on the inner <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element
    will have no effect on the SVG user agent.</p>
    <p><span class="anim-target"><a href="#animate-Animatable">Animatable</a>: no.</span></p>

<h2 id="interact-Cursors">16.8 Cursors</h2>

<h3 id="interact-CursorIntro">16.8.1 Introduction to cursors</h3>

    <p>Some interactive display environments provide the ability to
    modify the appearance of the pointer, which is also known as
    the <em>cursor</em>. Three types of cursors are available:</p>
    <ul><li>Standard built-in cursors</li><li>Platform-specific custom cursors</li><li>Platform-independent custom cursors</li></ul>
    <p>The <a href="#interact-CursorProperty"><span class="prop-name">‘cursor’</span></a> property is used to
    specify which cursor to use. The <a href="#interact-CursorProperty"><span class="prop-name">‘cursor’</span></a> property can be used to
    reference standard built-in cursors by specifying a keyword
    such as <em>crosshair</em> or a custom cursor. Custom cursors
    are referenced via a &lt;funciri&gt; and can point to either an
    external resource such as a platform-specific cursor file or to
    a <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a> element, which can be
    used to define a platform-independent cursor.</p>

<h3 id="interact-CursorProperty">16.8.2 The <span class="prop-name">‘cursor’</span> property</h3>

    <div class="propdef">
      <dl><dt><span class="propdef-title prop-name">‘cursor’</span></dt><dd>
          <table summary="cursor property" class="propinfo" cellspacing="0" cellpadding="0"><tr><td><em>Value:</em>  </td><td>[ [<a href="#types-DataTypeFuncIRI">&lt;funciri&gt;</a> ,]* [
              auto | crosshair | default | pointer | move |
              e-resize | ne-resize | nw-resize | n-resize |
              se-resize | sw-resize | s-resize | w-resize| text |
              wait | help ] ] | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
              <span class="value-inst-inherit noxref">inherit</span></a></td></tr><tr><td><em>Initial:</em>  </td><td>auto</td></tr><tr><td><em>Applies to:</em>  </td><td><a href="#intro-TermContainerElement">container
              elements</a> and <a href="#intro-TermGraphicsElement">graphics
              elements</a></td></tr><tr><td><em>Inherited:</em>  </td><td>yes</td></tr><tr><td><em>Percentages:</em>  </td><td>N/A</td></tr><tr><td><em>Media:</em>  </td><td>visual, interactive</td></tr><tr><td><em><a href="#animate-Animatable">Animatable</a>:</em>  </td><td>yes</td></tr></table>
        </dd></dl>
    </div>
    <p>This property specifies the type of cursor to be displayed
    for the pointing device. Values have the following
    meanings:</p>
    <dl><dt><span class="attr-value">auto</span></dt><dd>The UA determines the cursor to display based on the
      current context.</dd><dt><span class="attr-value">crosshair</span></dt><dd>A simple crosshair (e.g., short line segments resembling
      a "+" sign).</dd><dt><span class="attr-value">default</span></dt><dd>The platform-dependent default cursor. Often rendered as
      an arrow.</dd><dt><span class="attr-value">pointer</span></dt><dd>The cursor is a pointer that indicates a link.</dd><dt><span class="attr-value">move</span></dt><dd>Indicates something is to be moved.</dd><dt><span class="attr-value">e-resize, ne-resize, nw-resize, n-resize,
      se-resize, sw-resize, s-resize, w-resize</span></dt><dd>Indicate that some edge is to be moved. For example, the
      'se-resize' cursor is used when the movement starts from the
      south-east corner of the box.</dd><dt><span class="attr-value">text</span></dt><dd>Indicates text that can be selected. Often rendered as an
      I-bar.</dd><dt><span class="attr-value">wait</span></dt><dd>Indicates that the program is busy. Often rendered as a
      watch or hourglass.</dd><dt><span class="attr-value">help</span></dt><dd>Help is available for the object under the cursor. Often
      rendered as a question mark or a balloon.</dd><dt><span class="attr-value">&lt;funciri&gt;</span></dt><dd>The user agent retrieves the cursor from the resource
      designated by the URI. If the user agent cannot handle the
      first cursor of a list of cursors, it shall attempt to handle
      the second, etc. If the user agent cannot handle any
      user-defined cursor, it must use the generic cursor at the
      end of the list.</dd></dl>
    <div class="example">
<pre>
P { cursor : url("mything.cur"), url("second.svg#curs"), text; }
</pre>
    </div>
    <p>The <a href="#interact-CursorProperty"><span class="prop-name">‘cursor’</span></a> property for SVG
    is identical to the
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/ui.html#propdef-cursor"><span class="prop-name">‘cursor’</span>
    property defined in CSS2</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 18.1), with the
    additional requirement that SVG user agents must support cursors defined by
    the SVG <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a> element. This gives a single, cross-platform, interoperable cursor format, with PNG as the raster component.</p>

<h3 id="interact-CursorElement">16.8.3 The <span class="element-name">‘cursor’</span> element</h3>



    <p>The <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a> element can
    be used to define a platform-independent custom cursor. A
    recommended approach for defining a platform-independent custom
    cursor is to create a PNG image [<a href="#refs-ref-PNG">PNG</a>]
    and define a <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a> element
    that references the PNG image and identifies the exact position
    within the image which is the pointer position (i.e., the hot
    spot).</p>
    <p>The PNG format is recommended because it supports the
    ability to define a transparency mask via an alpha channel. If
    a different image format is used, this format should support
    the definition of a transparency mask (two options: provide an
    explicit alpha channel or use a particular pixel color to
    indicate transparency). If the transparency mask can be
    determined, the mask defines the shape of the cursor;
    otherwise, the cursor is an opaque rectangle. Typically, the
    other pixel information (e.g., the R, G and B channels) defines
    the colors for those parts of the cursor which are not masked
    out. Note that cursors usually contain at least two colors so
    that the cursor can be visible over most backgrounds.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘cursor’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#interact-CursorElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#interact-CursorElementXAttribute"><span class="attr-name">‘x’</span></a></li><li><a href="#interact-CursorElementYAttribute"><span class="attr-name">‘y’</span></a></li><li><a href="#interact-CursorElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#interact-InterfaceSVGCursorElement">SVGCursorElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="interact-CursorElementXAttribute"><span class="adef">x</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The <em>x-coordinate</em> of the position in the
        cursor's coordinate system which represents the precise
        position that is being pointed to.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'0'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="interact-CursorElementYAttribute"><span class="adef">y</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The <em>y-coordinate</em> of the position in the
        cursor's coordinate system which represents the precise
        position that is being pointed to.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'0'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="interact-CursorElementHrefAttribute"><span class="adef">xlink:href</span> = "<span class="attr-value"><a href="#types-DataTypeFuncIRI">&lt;funciri&gt;</a></span>"</dt><dd>A <a href="#types-DataTypeFuncIRI">Functional IRI
        reference</a> to the file or element which provides the
        image of the cursor.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>
    <p>SVG user agents are required to support PNG format images as
    targets of the <a href="#interact-CursorElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>
    attribute.</p>



<h2 id="interact-DOMInterfaces">16.9 DOM interfaces</h2>

<h3 id="interact-InterfaceSVGCursorElement">16.9.1 Interface SVGCursorElement</h3>



 The <a class="idlinterface" href="#interact-InterfaceSVGCursorElement">SVGCursorElement</a> interface corresponds to the
 <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a> element.
<pre class="idl">interface <b>SVGCursorElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#interact-__svg__SVGCursorElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#interact-__svg__SVGCursorElement__y">y</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="interact-__svg__SVGCursorElement__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#interact-CursorElementXAttribute"><span class="attr-name">‘x’</span></a> on the given <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>
 element.
</div></dd>
<dt id="interact-__svg__SVGCursorElement__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#interact-CursorElementYAttribute"><span class="attr-name">‘y’</span></a> on the given <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>
 element.
</div></dd></dl></dd></dl>


</div><hr class="chapter-divider" />
<div id="chapter-linking">

<h1>17 Linking</h1><h2 id="linking-toc">Contents</h2><ul class="toc">
<li><a href="#linking-IRIReference">17.1 References</a><ul class="toc">
<li><a href="#linking-HeadOverview">17.1.1 Overview</a></li>
<li><a href="#linking-IRIandURI">17.1.2 IRIs and URIs</a></li>
<li><a href="#linking-IRIforms">17.1.3 Syntactic forms: IRI and FuncIRI</a></li>
<li><a href="#linking-processingIRI">17.1.4 Processing of IRI references</a></li>
<li><a href="#linking-xlinkRefAttrs">17.1.5 IRI reference attributes</a></li></ul></li>
<li><a href="#linking-Links">17.2 Links out of SVG content: the <span class="element-name">‘a’</span> element</a></li>
<li><a href="#linking-LinksIntoSVG">17.3 Linking into SVG content: IRI fragments and SVG views</a><ul class="toc">
<li><a href="#linking-IntroFragmentsViews">17.3.1 Introduction: IRI fragments and SVG views</a></li>
<li><a href="#linking-SVGFragmentIdentifiers">17.3.2 SVG fragment identifiers</a></li>
<li><a href="#linking-ViewElement">17.3.3 Predefined views: the <span class="element-name">‘view’</span> element</a></li>
<li><a href="#linking-ViewHighlight">17.3.4 Highlighting views</a></li></ul></li>
<li><a href="#linking-DOMInterfaces">17.4 DOM interfaces</a><ul class="toc">
<li><a href="#linking-InterfaceSVGAElement">17.4.1 Interface SVGAElement</a></li>
<li><a href="#linking-InterfaceSVGViewElement">17.4.2 Interface SVGViewElement</a></li></ul></li></ul>

    <h2 id="linking-IRIReference">17.1 References</h2>
    <h3 id="linking-HeadOverview">17.1.1 Overview</h3>

    <p>On the Internet, resources are identified using <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a>s
    (Internationalized Resource Identifiers). For
    example, an SVG file called someDrawing.svg located at
    http://example.com might have the following <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a>:</p>
<pre>
http://example.com/someDrawing.svg
</pre>
    <p>An <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> can also address a particular element within an XML
    document by including an <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> fragment
    identifier as part of the <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a>. An <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> which includes an
    <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> fragment identifier consists of an optional base <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a>, followed by a "#" character,
    followed by the <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> fragment identifier. For example, the
    following <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> can be used to specify the element whose ID is
    "Lamppost" within file someDrawing.svg:</p>
<pre>
http://example.com/someDrawing.svg#Lamppost
</pre>



    <h3 id="linking-IRIandURI">17.1.2 IRIs and URIs</h3>
    <p>Internationalized
      Resource Identifiers (<a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a>s) are a more generalized complement to Uniform Resource
      Identifiers (URIs). An <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> is a sequence of characters from the
      Universal Character Set [<a href="#refs-ref-UNICODE">UNICODE</a>].  A URI is constructed from a much
      more restricted set of characters. All URIs are already conformant <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a>s. A mapping from <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a>s to
      URIs is defined by the <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> specification, which means that IRIs can be used instead of URIs
      in XML documents,  to identify resources. <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a>s can be converted to URIs for resolution
      on a network, if the protocol does not support <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a>s directly.</p>
    <p>Previous versions of SVG, following XLink, defined an IRI reference type
      as a URI <em>or as a sequence of characters which must result in an IRI after a
        particular escaping procedure was applied</em>. The escaping procedure was repeated in the
      XLink 1.0 specification [<a href="#refs-ref-XLINK">XLINK</a>], and in the W3C
      XML Schema Part 2: Datatypes specification [<a href="#refs-ref-SCHEMA2">SCHEMA2</a>]. This copying introduced the
      possibility of error and divergence, but was done because the <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> specification was not
      yet standardized.</p>
    <p>In this specification, the correct term <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> is used for this "URI or sequence of characters
      plus an algorithm" and the escaping method, which turns IRIs into URIs, is defined by reference to the <a href="http://www.ietf.org/rfc/rfc3987.txt">IRI
        specification</a> [<a href="#refs-ref-RFC3987">RFC3987</a>], which
      has since become an IETF Proposed Standard. Other W3C
      specifications are expected to be revised over time to remove these duplicate
      descriptions of the escaping procedure and to refer to <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> directly.</p>

    <h3 id="linking-IRIforms">17.1.3 Syntactic forms: IRI and FuncIRI</h3>
    
    <p>IRIs are used in the <a href="#animate-HrefAttribute"><span class="attr-name">‘xlink:href’</span></a> attribute. Some attributes allow both IRIs and text strings as content. To disambiguate a text string from a relative IRI, the functional notation <a href="#types-DataTypeFuncIRI">&lt;FuncIRI&gt;</a> is used. This is simply an IRI delimited with a functional notation. <strong>Note:</strong> For historical reasons, the delimiters are "url(" and ")", for compatibility with the CSS specifications. The FuncIRI form is used in <a href="#styling-StylingUsingPresentationAttributes">presentation attributes</a>
    
     .</p>
    

    <p>SVG makes extensive use of <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a>
      references, both absolute and relative, to other
      objects. For example, to <a href="#intro-TermFill"><span class="svg-term">fill</span></a> a rectangle with a linear
      gradient, you first define a <a href="#pservers-LinearGradients"><span class="element-name">‘linearGradient’</span></a> element and give
      it an ID, as in:</p>
    <pre class="xml">&lt;linearGradient xml:id="MyGradient"&gt;...&lt;/linearGradient&gt;</pre><p>You then reference the linear gradient as the value of the
      <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> property for the rectangle, as in the following example:</p>
    
    <pre class="xml">&lt;rect fill="url(#MyGradient)"/&gt;</pre>




<p>SVG supports two types of IRI references:</p>

<ul><li><a href="#intro-TermLocalIRIReference"><span class="svg-term">local IRI references</span></a>, where the IRI reference does not contain an
  <span class="grammar">&lt;absoluteIRI&gt;</span> or
  <span class="grammar">&lt;relativeIRI&gt;</span> and thus only contains
  a fragment identifier (i.e.,
  <span class="code-fragment">#&lt;elementID&gt;</span> or
  <span class="code-fragment">#xpointer(id&lt;elementID&gt;</span>))</li><li><a href="#intro-TermNonLocalIRIReference"><span class="svg-term">non-local IRI references</span></a>, where the IRI reference does contain an
  <span class="grammar">&lt;absoluteIRI&gt;</span> or
  <span class="grammar">&lt;relativeIRI&gt;</span></li></ul>

<h3 id="linking-processingIRI">17.1.4 Processing of IRI references</h3>

<p>The following rules apply to the processing of IRI references:</p>

<ul><li>IRI references to nodes that do not exist shall be treated as
  invalid references.</li><li>IRI references to elements which are inappropriate
  targets for the given reference shall be treated as invalid
  references (see list below for appropriate targets). For
  example, the <a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a> property can only refer to
  <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> elements. The property setting
  <span class="attr-value">clip-path:url(#MyElement)</span> is an
  invalid reference if the referenced element is not a <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>.</li><li>IRI references that directly or indirectly reference
  themselves are treated as invalid circular references.</li></ul>

<p>The following list describes the elements and properties that allow IRI
references and the valid target types for those references:</p>

<ul><li>the <a href="#linking-AElement"><span class="element-name">‘a’</span></a> element can reference any local or non-local resource</li><li>the <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> element must reference either an <a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a> element or a <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> element</li><li>the <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a> element (see <a href="#animate-TargetElement">Identifying the target element for an animation</a> for reference rules)</li><li>the <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a> element (see <a href="#animate-TargetElement">Identifying the target element for an animation</a> for reference rules)</li><li>the <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a> element (see <a href="#animate-TargetElement">Identifying the target element for an animation</a> for reference rules)</li><li>the <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a> element (see <a href="#animate-TargetElement">Identifying the target element for an animation</a> for reference rules)</li><li>the <a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a> property must reference a <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element</li><li>the <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a> element must reference an ICC profile resource</li><li>the <a href="#color-ColorProfileProperty"><span class="prop-name">‘color-profile’</span></a> property must reference an ICC profile resource or a <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a> element</li><li>the <a href="#color-ColorProfileSrcProperty">'src'</a> descriptor on an @color-profile definition must reference an ICC profile resource or a <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a> element</li><li>the <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a> element must reference a resource that can provide an image for the cursor graphic</li><li>the <a href="#interact-CursorProperty"><span class="prop-name">‘cursor’</span></a> property must reference a resource that can provide an image for the cursor graphic</li><li>the <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a> element must reference any local or non-local resource</li><li>the <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> property (see <a href="#painting-SpecifyingPaint">Specifying paint</a> for reference rules)</li><li>the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element must reference a <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element</li><li>the <a href="#filters-FilterProperty"><span class="prop-name">‘filter’</span></a> property must reference a <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a> element</li><li>the <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element must reference any local or non-local resource</li><li>the <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> element must reference a <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> or <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> element</li><li>the <a href="#painting-MarkerProperty"><span class="prop-name">‘marker’</span></a>, <a href="#painting-MarkerStartProperty"><span class="prop-name">‘marker-start’</span></a>, <a href="#painting-MarkerMidProperty"><span class="prop-name">‘marker-mid’</span></a> and <a href="#painting-MarkerEndProperty"><span class="prop-name">‘marker-end’</span></a> properties must reference a <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element.</li><li>the <a href="#masking-MaskProperty"><span class="prop-name">‘mask’</span></a> property must reference a <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element</li><li>the <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element must reference a <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element</li><li>the <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> element must reference a <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a> or <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> element</li><li>the <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a> element must reference an external resource that provides the script content</li><li>the <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a> property (see <a href="#painting-SpecifyingPaint">Specifying paint</a> for reference rules)</li><li>the <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> element must reference a <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element</li><li>the <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a> element can reference any SVG element</li><li>the <a href="#animate-SetElement"><span class="element-name">‘set’</span></a> element (see <a href="#animate-TargetElement">Identifying the target element for an animation</a> for reference rules)</li><li>the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element can reference any local or non-local resource</li></ul>

<p>The following rules apply to the processing of invalid IRI references:</p>

<ul><li>An invalid local IRI reference (i.e., an invalid references to a node
  within the current document) represents an error (see
  <a href="#implnote-ErrorProcessing">Error processing</a>), apart from the
  <a href="#linking-AElementXLinkHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> attribute on the <a href="#linking-AElement"><span class="element-name">‘a’</span></a> element and the properties
  that allow for backup values in the case where the IRI reference is invalid
  (see <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a> and <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>).</li><li>An invalid circular IRI reference represents an error (see
  <a href="#implnote-ErrorProcessing">Error processing</a>).</li><li>When attribute <a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a> has been set to
  <span class="attr-value">'true'</span> on the referencing element or one of
  its ancestors, then an unresolved external IRI reference (i.e., a resource
  that cannot be located) represents an error (see
  <a href="#implnote-ErrorProcessing">Error processing</a>).</li></ul>



<h3 id="linking-xlinkRefAttrs">17.1.5 IRI reference attributes</h3>

    <p id="linking-xlinkRefAttrsEmbed"><a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> references are normally specified with an <span class="attr-name">‘href’</span> attribute in the XLink [<a href="http://www.w3.org/TR/xlink/">XLink</a>] namespace. For example,
      if the
       prefix of 'xlink' is used for attributes in the XLink
      namespace, then the attribute is  be specified as <span class="attr-name">‘xlink:href’</span>. The value of this
      attribute forms a reference for the desired resource (or
      secondary resource, if there is a fragment identifier).</p>
    <p>The value of the <span class="attr-name">‘href’</span>
      attribute must be an <a href="#types-DataTypeIRI"><span class="svg-term">Internationalized Resource Identifier</span></a>.</p>

    <p>If the protocol, such as HTTP, does not support <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a>s directly,
      the <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> is converted to a URI by the SVG implementation, as described
      in section 3.1 of the <a href="http://www.ietf.org/rfc/rfc3987.txt">IRI specification</a> [<a href="#refs-ref-RFC3987">RFC3987</a>.</p>
    <p>Because it is impractical for any application to check that
      a value is an <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> reference, this specification follows the lead
      of the <a href="http://www.ietf.org/rfc/rfc3986.txt">IRI Specification</a>
      in this matter and imposes no such conformance testing
      requirement on SVG applications.</p>
    <p>If the <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> reference is relative, its absolute version must be computed by the method described in
      <a href="http://www.w3.org/TR/xmlbase/">XML Base</a> before use [<a href="#refs-ref-XML-BASE">XML-BASE</a>].</p>

    <div class="adef-list">
      <dl><dt><a id="linking-XLinkTypeAttribute" name="linking-XLinkTypeAttribute"></a> <span class="adef">xlink:type</span> = "<span class="attr-value">simple</span>"</dt><dd><p>Identifies the type of XLink being used.  In SVG 1.1, only
          simple links are available. 
          Links are simple links by default, 
          so the attribute <span class="attr-value">xlink:type="simple"</span>
           is optional and may be omitted on simple links.
           Refer to the <a href="http://www.w3.org/TR/xlink/">XML Linking Language (XLink)</a> [<a href="#refs-ref-XLINK">XLINK</a>].</p>
          <p class="anim-target"><a href="#animate-Animatable">Animatable</a>:
            no.</p></dd><dt><a id="linking-XLinkRoleAttribute" name="linking-XLinkRoleAttribute"></a> <span class="adef">xlink:role</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;IRI&gt;</a></span>"</dt><dd><p>An optional <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> reference that identifies some resource that describes
          the intended property. The value must be an <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> reference as
          defined in [<a href="http://www.ietf.org/rfc/rfc3987.txt">RFC3987</a>],
          except that if the <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> scheme used is allowed to have
          absolute and relative forms, the <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> portion must be
          absolute. When no value is supplied, no particular role
          value shall be inferred.
          Refer to the <a href="http://www.w3.org/TR/xlink/">XML Linking Language (XLink)</a> [<a href="#refs-ref-XLINK">XLINK</a>].</p>
          <p class="anim-target"><a href="#animate-Animatable">Animatable</a>:
            no.</p></dd><dt><a id="linking-XLinkArcRoleAttribute" name="linking-XLinkArcRoleAttribute"></a> <span class="adef">xlink:arcrole</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;IRI&gt;</a></span>"</dt><dd><p>An optional <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> reference that identifies some resource that describes
          the intended property. The value must be an <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> reference as
          defined in [<a href="http://www.ietf.org/rfc/rfc3987.txt">RFC3987</a>],
          except that if the <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> scheme used is allowed to have
          absolute and relative forms, the <a href="#intro-TermIRIReference"><span class="svg-term">IRI</span></a> portion must be
          absolute. When no value is supplied, no particular role
          value shall be inferred.  The arcrole
          attribute corresponds to the [<a href="#refs-ref-RDF-PRIMER">RDF-PRIMER</a>] notion
          of a property, where the role can be interpreted as stating
          that "starting-resource HAS arc-role ending-resource." This
          contextual role can differ from the meaning of an ending
          resource when taken outside the context of this particular
          arc. For example, a resource might generically represent a
          "person," but in the context of a particular arc it might
          have the role of "mother" and in the context of a different
          arc it might have the role of "daughter."
          Refer to the <a href="http://www.w3.org/TR/xlink/">XML Linking Language (XLink)</a> [<a href="#refs-ref-XLINK">XLINK</a>].</p>
          <p class="anim-target"><a href="#animate-Animatable">Animatable</a>:
            no.</p></dd><dt><a id="linking-XLinkTitleAttribute" name="linking-XLinkTitleAttribute"></a> <span class="adef">xlink:title</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dd><p>The title attribute shall be used to describe the meaning of
          a link or resource in a human-readable fashion, along the
          same lines as the role or arcrole attribute. A value is
          optional; if a value is supplied, it shall contain a
          string that describes the resource. In general it is preferable
          to  use a <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> child element
          rather than a <span class="attr-name">‘title’</span> attribute. The use of this
          information is highly dependent on the type of processing
          being done. It may be used, for example, to make titles
          available to applications used by visually impaired users,
          or to create a table of links, or to present help text that
          appears when a user lets a mouse pointer hover over a
          starting resource.
          Refer to the <a href="http://www.w3.org/TR/xlink/">XML Linking Language (XLink)</a> [<a href="#refs-ref-XLINK">XLINK</a>].</p>
          <p class="anim-target"><a href="#animate-Animatable">Animatable</a>:
            no.</p></dd><dt><a id="linking-XLinkShowAttribute" name="linking-XLinkShowAttribute"></a> <span class="adef">xlink:show</span> = "<span class="attr-value">new</span>' |
          '<span class="attr-value">replace</span>' |
          '<span class="attr-value">embed</span>' |
          '<span class="attr-value">other</span>' |
          '<span class="attr-value">none</span>'</dt><dd><p>This attribute is provided for backwards compatibility with SVG
     1.1. It provides documentation to XLink-aware processors. In
          case of a conflict, the target attribute has priority, since it can
          express a wider range of values.
          Refer to the <a href="http://www.w3.org/TR/xlink/">XML Linking Language (XLink)</a> [<a href="#refs-ref-XLINK">XLINK</a>].</p>
          <p class="anim-target"><a href="#animate-Animatable">Animatable</a>:
            no.</p></dd><dt><a id="linking-XLinkActuateAttribute" name="linking-XLinkActuateAttribute"></a> <span class="adef">xlink:actuate</span> = "<span class="attr-value">onLoad</span>'</dt><dd><p>This attribute is provided for backwards compatibility with SVG
          1.1. It provides documentation to XLink-aware processors.
          Refer to the <a href="http://www.w3.org/TR/xlink/">XML Linking Language (XLink)</a> [<a href="#refs-ref-XLINK">XLINK</a>].</p>
          <p class="anim-target"><a href="#animate-Animatable">Animatable</a>:
            no.</p></dd></dl>
    </div>

    <p>In all cases, for compliance with either the "Namespaces in XML 1.0" or the "Namespaces in XML 1.1"
      Recommendation [<a href="http://www.w3.org/TR/REC-xml-names/">XML-NS10</a>][<a href="http://www.w3.org/TR/xml-names11/">XML-NS</a>], an
      explicit XLink namespace declaration must be provided whenever
      one of the above XLink attributes is used within SVG content.
      One simple way to provide such an XLink namespace declaration
      is to include an <span class="attr-name">‘xmlns’</span> attribute
      for the XLink namespace on the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element for content that uses
      XLink attributes. For example:</p>



<pre class="xml">
&lt;svg xmlns:xlink="http://www.w3.org/1999/xlink" ...&gt;
  &lt;image xlink:href="foo.png" .../&gt;
&lt;/svg&gt;
</pre>

<h2 id="linking-Links">17.2 Links out of SVG content: the <span class="element-name">‘a’</span> element</h2>



<p>SVG provides an <a href="#linking-AElement"><span class="element-name">‘a’</span></a> element, to indicate links (also known
as <em>hyperlinks</em> or <em>Web links</em>). The <a href="#linking-AElement"><span class="element-name">‘a’</span></a> element may
contain any element that its parent may contain, except itself.</p>

<p>SVG uses XLink ([<a href="http://www.w3.org/TR/2001/REC-xlink-20010627/">XLink</a>])
for all link definitions. SVG 1.1 only requires
that user agents support XLink's notion of
<a href="http://www.w3.org/TR/2001/REC-xlink-20010627/#simple-links">
simple links</a>. Each simple link associates exactly two resources, one
local and one remote, with an arc going from the former to the latter.</p>

<p>A simple link is defined for each separate rendered element contained
within the <a href="#linking-AElement"><span class="element-name">‘a’</span></a> element; thus, if the <a href="#linking-AElement"><span class="element-name">‘a’</span></a> element contains
three <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a> elements, a link is created for each circle. For
each rendered element within an <a href="#linking-AElement"><span class="element-name">‘a’</span></a> element, the given rendered
element is the local resource (the source anchor for the link).</p>

<p>The remote resource (the destination for the link) is defined by
a <a href="#linking-IRIReference">IRI</a> specified by the XLink
<a href="#linking-AElementXLinkHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> attribute on the <a href="#linking-AElement"><span class="element-name">‘a’</span></a> element. The remote resource
may be any Web resource (e.g., an image, a video clip, a sound bite, a
program, another SVG document, an HTML document, an element within the
current document, an element within a different document, etc.). By
activating these links (by clicking with the mouse, through keyboard
input, voice commands, etc.), users may visit these resources.</p>

<p id="linking-ExampleLink01"><span class="example-ref">Example link01</span> assigns
a link to an ellipse.</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="5cm" height="3cm" viewBox="0 0 5 3" version="1.1"
     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;desc&gt;Example link01 - a link on an ellipse
  &lt;/desc&gt;
  &lt;rect x=".01" y=".01" width="4.98" height="2.98" 
        fill="none" stroke="blue"  stroke-width=".03"/&gt;
  &lt;a xlink:href="http://www.w3.org"&gt;
    &lt;ellipse cx="2.5" cy="1.5" rx="2" ry="1"
             fill="red" /&gt;
  &lt;/a&gt;
&lt;/svg&gt;</pre><table summary="Example "><caption align="bottom">Example link01</caption><tr><td><img alt="Example link01 — a link on an ellipse" src="images/linking/link01.png" /></td></tr></table><p class="view-as-svg"><a href="images/linking/link01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

<p>If the above SVG file is viewed by a user agent that supports both
SVG and HTML, then clicking on the ellipse will cause the current window
or frame to be replaced by the W3C home page.</p>

<div id="linking-AElement">
<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘a’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermContainerElement">Container element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#intro-TermShapeElement">shape elements</a><span class="expanding"> — <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></span></li><li><a href="#intro-TermStructuralElement">structural elements</a><span class="expanding"> — <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></span></li><li><a href="#intro-TermGradientElement">gradient elements</a><span class="expanding"> — <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></span></li><li><a href="#linking-AElement"><span class="element-name">‘a’</span></a></li><li><a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a></li><li><a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a></li><li><a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a></li><li><a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a></li><li><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></li><li><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></li><li><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></li><li><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></li><li><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></li><li><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></li><li><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></li><li><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></li><li><a href="#script-ScriptElement"><span class="element-name">‘script’</span></a></li><li><a href="#styling-StyleElement"><span class="element-name">‘style’</span></a></li><li><a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a></li><li><a href="#text-TextElement"><span class="element-name">‘text’</span></a></li><li><a href="#linking-ViewElement"><span class="element-name">‘view’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#linking-AElementXLinkHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-AElementXLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></li><li><a href="#linking-AElementXLinkHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li><li><a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a></li><li><a href="#linking-AElementXLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a></li><li><a href="#linking-AElementTargetAttribute"><span class="attr-name">‘target’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#linking-InterfaceSVGAElement">SVGAElement</a></li></ul></dd></dl></div>
</div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt><a id="linking-XLinkShowAttribute2" name="linking-XLinkShowAttribute2"></a> <span class="adef">xlink:show</span> = "<span class="attr-value">new</span>" |
          "<span class="attr-value">replace</span>" </dt><dd><p>This attribute provides documentation to XLink-aware processors. If
          <span class="attr-value">target="_blank"</span> then use
          <span class="attr-value">xlink:show="new"</span> else use
          <span class="attr-value">'replace'</span>. In
          case of a conflict, the target attribute has priority, since it can
          express a wider range of values.
          Refer to the <a href="http://www.w3.org/TR/xlink/">XML Linking Language (XLink)</a> [<a href="#refs-ref-XLINK">XLINK</a>].</p>
          <p class="anim-target"><a href="#animate-Animatable">Animatable</a>:
            no.</p></dd><dt id="linking-AElementXLinkActuateAttribute"><span class="adef">xlink:actuate</span> = <span class="attr-value">"onRequest"</span></dt><dd><p>This attribute provides documentation to XLink-aware processors that
          an application should traverse from the starting
        resource to the ending resource only on a post-loading
        event triggered for the purpose of traversal.
        Refer to the <a href="http://www.w3.org/TR/xlink/">XML Linking Language (XLink)</a> [<a href="#refs-ref-XLINK">XLINK</a>].</p>
         <p class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</p></dd><dt id="linking-AElementXLinkHrefAttribute"><span class="adef">xlink:href</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;IRI&gt;</a></span>"</dt><dd><p>The location of the referenced object, expressed as an <a href="#intro-TermIRIReference"><span class="svg-term">IRI reference</span></a>.</p>
         <p class="anim-target"><a href="#animate-Animatable">Animatable</a>: yes.</p>
        </dd><dt id="linking-AElementTargetAttribute"><span class="adef">target</span> = "<span class="attr-value">_replace</span>" |
          "<span class="attr-value">_self</span>" |
          "<span class="attr-value">_parent</span>" |
          "<span class="attr-value">_top</span>" |
          "<span class="attr-value">_blank</span>" |
          "<span class="attr-value"><a href="#types-DataTypeXML-Name">&lt;XML-Name&gt;</a></span>"
        </dt><dd><p>This attribute should be used when there are multiple possible targets for
          the ending resource, such as when the parent document is a
          multi-frame HTML or XHTML document. This attribute specifies the
          name or portion of the target window, frame, pane, tab, or other
          relevant presentation context (e.g., an HTML or XHTML frame, iframe, or object element) into
          which a document is to be opened when the link is activated:</p>
          <dl class="definitions"><dt><span class="attr-value">_replace</span></dt><dd>The current SVG image is replaced by the linked content in the
              same rectangular area in the same frame as the current SVG image.</dd><dt><span class="attr-value">_self</span></dt><dd>The current SVG image is replaced by the linked content in the
            same frame as the current SVG image. If the attribute is not specified,
	    <span class="attr-value">'_self'</span> is assumed.</dd><dt><span class="attr-value">_parent</span></dt><dd>The immediate frameset parent of the SVG image is replaced by the
              linked content.</dd><dt><span class="attr-value">_top</span></dt><dd>The content of the full window or tab, including any frames, is
              replaced by the linked content</dd><dt><span class="attr-value">_blank</span></dt><dd>A new un-named window or tab is requested for the display of the
                linked content. If this fails, the result is the same as <span class="attr-value">_top</span></dd><dt><span class="attr-value"><a href="#types-DataTypeXML-Name">&lt;XML-Name&gt;</a></span></dt><dd>Specifies the name of the frame, pane, or other relevant
                presentation context for display of the linked content. If this
                already exists, it is re-used, replacing the existing content.  If
                it does not exist, it is created (the same as <span class="attr-value">'_blank'</span>, except that
                it now has a name). 
                </dd></dl>
          <p>Note: The value <span class="attr-value">'_new'</span> is <em>not</em> a legal value for target (use <span class="attr-value">'_blank'</span>).</p>
         <p class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</p></dd></dl>
    </div>



<h2 id="linking-LinksIntoSVG">17.3 Linking into SVG content: IRI fragments and SVG views</h2>

<h3 id="linking-IntroFragmentsViews">17.3.1 Introduction: IRI fragments and SVG views</h3>


<p>Because SVG content often represents a picture or drawing
of something, a common need is to link into a particular
<span class="SVG-Term">view</span> of the document, where a view indicates
the initial transformations so as to present a closeup of a particular
section of the document.</p>

<h3 id="linking-SVGFragmentIdentifiers">17.3.2 SVG fragment identifiers</h3>

<p>To link into a particular view of an SVG document, the IRI fragment
identifier needs to be a correctly formed <span class="SVG-Term">SVG
fragment identifier</span>. An SVG fragment identifier defines the
meaning of the "selector" or "fragment identifier" portion of IRIs that
locate resources of MIME media type "image/svg+xml".</p>

<p>An SVG fragment identifier can come in two forms:</p>

<ul><li>Shorthand <em>bare name</em> form of addressing (e.g.,
  <span class="attr-value">MyDrawing.svg#MyView</span>).  This form of
  addressing, which allows addressing an SVG element by its ID, is compatible
  with the fragment addressing mechanism for older versions of HTML.</li><li id="linking-SVGViewSpecification"><span class="SVG-Term">SVG view specification</span>
  (e.g., <span class="attr-value">MyDrawing.svg#svgView(viewBox(0,200,1000,1000))</span>).
  This form of addressing specifies the desired view of the
  document (e.g., the region of the document to view, the
  initial zoom level) completely within the SVG fragment
  specification. The contents of the SVG view specification are
  the five parameter specifications, <span class="attr-value">viewBox(...)</span>,
  <span class="attr-value">preserveAspectRatio(...)</span>,
  <span class="attr-value">transform(...)</span>,
  <span class="attr-value">zoomAndPan(...)</span> and
  <span class="attr-value">viewTarget(...)</span>, whose parameters have the
  same meaning as the corresponding attributes on a <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a> element, or,
  in the case of <span class="attr-value">transform(...)</span>, the same
  meaning as the corresponding attribute has on a
  <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element).</li></ul>

<p>An SVG fragment identifier is defined as follows:</p>

<pre class="grammar">
SVGFragmentIdentifier ::= BareName |
                          SVGViewSpec
                
BareName ::= XML_Name
SVGViewSpec ::= 'svgView(' SVGViewAttributes ')'
SVGViewAttributes ::= SVGViewAttribute |
                      SVGViewAttribute ';' SVGViewAttributes
                      
SVGViewAttribute ::= viewBoxSpec |
                     preserveAspectRatioSpec |
                     transformSpec |
                     zoomAndPanSpec |
                     viewTargetSpec
viewBoxSpec ::= 'viewBox(' ViewBoxParams ')'
preserveAspectRatioSpec = 'preserveAspectRatio(' AspectParams ')'
transformSpec ::= 'transform(' TransformParams ')'
zoomAndPanSpec ::= 'zoomAndPan(' ZoomAndPanParams ')'
viewTargetSpec ::= 'viewTarget(' ViewTargetParams ')'
</pre>

<p>where:</p>

<ul><li><span class="code-fragment">ViewBoxParams</span> corresponds to the
  parameter values for the <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a> attribute on the <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a>
  element. For example, <span class="attr-value">viewBox(0,0,200,200)</span>.</li><li><span class="code-fragment">AspectParams</span> corresponds to the
  parameter values for the <a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a> attribute on the
  <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a> element. For example,
  <span class="attr-value">preserveAspectRatio(xMidYMid)</span>.</li><li><span class="code-fragment">TransformParams</span> corresponds to the
  parameter values for the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute that is available on
  many elements. For example, <span class="attr-value">transform(scale(5))</span>.</li><li><span class="code-fragment">ZoomAndPanParams</span> corresponds to the
  parameter values for the <a href="#interact-ZoomAndPanAttribute"><span class="attr-name">‘zoomAndPan’</span></a> attribute on the <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a>
  element. For example, <span class="attr-value">zoomAndPan(magnify)</span>.</li><li><span class="code-fragment">ViewTargetParams</span> corresponds to the
  parameter values for the <a href="#linking-ViewElementViewTargetAttribute"><span class="attr-name">‘viewTarget’</span></a> attribute on the <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a>
  element. For example, <span class="attr-value">viewTarget(MyElementID)</span>.</li></ul>

<p>Spaces are not allowed in fragment specifications; thus, commas
are used to separate numeric values within an SVG view specification
(e.g., <span class="attr-value">#svgView(viewBox(0,0,200,200))</span>)
and semicolons are used to separate attributes (e.g.,
<span class="attr-value">#svgView(viewBox(0,0,200,200);preserveAspectRatio(none))</span>).</p>
<p>
Semicolons used to separate 'SVGViewAttribute' in SVG fragments may be url-escaped (as %3B); 
this is useful when animating a (semi-colon separated)
list of IRIs because otherwise the semicolon would be interpreted as a list separator.
</p>

<p>The five types of <span class="code-fragment">SVGViewAttribute</span> may occur in any order, but each type may only occur at most one time in a correctly formed <span class="code-fragment">SVGViewSpec</span>.</p>

<p>When a source document performs a link into an SVG document, for example
via an <a href="http://www.w3.org/TR/1999/REC-html401-19991224/struct/links.html#h-12.2">HTML anchor element</a>
([<a href="#refs-ref-HTML4">HTML4</a>], section 12.2; i.e.,
<span class="attr-value">&lt;a href=...&gt;</span> element in HTML) or an
XLink specification [<a href="#refs-ref-XLINK">XLINK</a>], then
the SVG fragment identifier specifies the initial view into the SVG document,
as follows:</p>

<ul><li>If no SVG fragment identifier is provided (e.g, the specified IRI did
  not contain a "#" character, such as <span class="attr-value">MyDrawing.svg</span>),
  then the initial view into the SVG document is established using the view
  specification attributes (i.e., <a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a>, etc.) on the
  <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a>.</li><li>If the SVG fragment identifier addresses a <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a> element within
  an SVG document (e.g., <span class="attr-value">MyDrawing.svg#MyView</span>
  or <span class="attr-value">MyDrawing.svg#xpointer(id('MyView'))</span>)
  then the closest ancestor <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element is displayed in the viewport.
  Any view specification attributes included on the given <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a>
  element override the corresponding view specification attributes on the
  closest ancestor <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.</li><li>If the SVG fragment identifier addresses specific SVG view (e.g.,
  <span class="attr-value">MyDrawing.svg#svgView(viewBox(0,200,1000,1000))</span>),
  then the document fragment defined by the closest ancestor <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>
  element is displayed in the viewport using the SVG view specification
  provided by the SVG fragment identifier.</li><li>If the SVG fragment identifier addresses any element other than a
  <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a> element, then the document defined by the closest ancestor
  <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element is displayed in the viewport using the view
  specification attributes on that <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.</li></ul>

<h3 id="linking-ViewElement">17.3.3 Predefined views: the <span class="element-name">‘view’</span> element</h3>



<p>The <span class="element-name">‘view’</span> element is defined
as follows:</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘view’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a></li><li><a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a></li><li><a href="#interact-ZoomAndPanAttribute"><span class="attr-name">‘zoomAndPan’</span></a></li><li><a href="#linking-ViewElementViewTargetAttribute"><span class="attr-name">‘viewTarget’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#linking-InterfaceSVGViewElement">SVGViewElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="linking-ViewElementViewTargetAttribute"><span class="adef">viewTarget</span> = "<em>XML_Name
        [XML_NAME]*</em>"</dt><dd>Indicates the target object associated with the view.
        <br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd></dl>
    </div>



<h3 id="linking-ViewHighlight">17.3.4 Highlighting views</h3>

<p>It is helpful to users if the target element(s) are highlighted. The visual styling of this highlight should be decided by the document author, because the SVG User Agent has no way to determine what changes would make the elements more visible.</p>

<p>The CSS :target selector ([<a href="#refs-ref-SELECTORS">SELECTORS</a>], section 6.2.2) may be used in a stylesheet to provide alternate styling for elements which are the target of links. For example:</p>

    <pre class="xml">&lt;style type="text/css"&gt;
#foo:target {filter: url(#glow)}
/* when the element with id foo is linked to, use a glow filter */

.bar :target {stroke: green; fill-opacity: 0.5}
/* when any descendants of elements with class bar are linked
   to, make the fill partly transparent and use a green stroke */

:target {stroke: red }
/* for everything else, just use a red stroke */ 
&lt;/style&gt;</pre>

<h2 id="linking-DOMInterfaces">17.4 DOM interfaces</h2>

<h3 id="linking-InterfaceSVGAElement">17.4.1 Interface SVGAElement</h3>



 The <a class="idlinterface" href="#linking-InterfaceSVGAElement">SVGAElement</a> interface corresponds to the <a href="#linking-AElement"><span class="element-name">‘a’</span></a> element.
<pre class="idl">interface <b>SVGAElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#linking-__svg__SVGAElement__target">target</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="linking-__svg__SVGAElement__target" class="attribute first-child"><b>target</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#linking-AElementTargetAttribute"><span class="attr-name">‘target’</span></a> on the given <a href="#linking-AElement"><span class="element-name">‘a’</span></a> element.
</div></dd></dl></dd></dl>


<h3 id="linking-InterfaceSVGViewElement">17.4.2 Interface SVGViewElement</h3>



 The <a class="idlinterface" href="#linking-InterfaceSVGViewElement">SVGViewElement</a> interface corresponds to the <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a> element.
<pre class="idl">interface <b>SVGViewElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGFitToViewBox">SVGFitToViewBox</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGZoomAndPan">SVGZoomAndPan</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGStringList">SVGStringList</a> <a href="#linking-__svg__SVGViewElement__viewTarget">viewTarget</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="linking-__svg__SVGViewElement__viewTarget" class="attribute first-child"><b>viewTarget</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGStringList">SVGStringList</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#linking-ViewElementViewTargetAttribute"><span class="attr-name">‘viewTarget’</span></a> on the given <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a>
 element. A list of DOMString values which contain the names listed in
 the <a href="#linking-ViewElementViewTargetAttribute"><span class="attr-name">‘viewTarget’</span></a> attribute. Each of the DOMString values can be
 associated with the corresponding element using the getElementById()
 method call.
</div></dd></dl></dd></dl>


</div><hr class="chapter-divider" />
<div id="chapter-script">

<h1>18 Scripting</h1><h2 id="script-toc">Contents</h2><ul class="toc">
<li><a href="#script-ScriptingLanguage">18.1 Specifying the scripting language</a><ul class="toc">
<li><a href="#script-DefaultScriptingLanguage">18.1.1 Specifying the default scripting language</a></li>
<li><a href="#script-SpecifiedScriptingLanguage">18.1.2 Local declaration of a scripting language</a></li></ul></li>
<li><a href="#script-ScriptElement">18.2 The <span class="element-name">‘script’</span> element</a></li>
<li><a href="#script-EventHandling">18.3 Event handling</a></li>
<li><a href="#script-EventAttributes">18.4 Event attributes</a><ul class="toc">
<li><a href="#script-LoadEvent">18.4.1 Event attribute for the SVGLoad event</a></li>
<li><a href="#script-GraphicsEvents">18.4.2 Event attributes on graphics and container elements</a></li>
<li><a href="#script-DocumentEvents">18.4.3 Document-level event attributes</a></li>
<li><a href="#script-AnimationEvents">18.4.4 Animation event attributes</a></li></ul></li>
<li><a href="#script-DOMInterfaces">18.5 DOM interfaces</a><ul class="toc">
<li><a href="#script-InterfaceSVGScriptElement">18.5.1 Interface SVGScriptElement</a></li>
<li><a href="#script-InterfaceSVGZoomEvent">18.5.2 Interface SVGZoomEvent</a></li></ul></li></ul>

<h2 id="script-ScriptingLanguage">18.1 Specifying the scripting language</h2>

<h3 id="script-DefaultScriptingLanguage">18.1.1 Specifying the default scripting language</h3>

<p>The <a href="#script-ContentScriptTypeAttribute"><span class="attr-name">‘contentScriptType’</span></a> attribute on the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element
specifies the default scripting language for the given document fragment.</p>

    <div class="adef-list">
      <dl><dt id="script-ContentScriptTypeAttribute"><span class="adef">contentScriptType</span> = "<span class="attr-value"><em>content-type</em></span>"</dt><dd>Identifies the default scripting language for the given
        SVG document fragment. This attribute sets the default scripting language used
        to process the value strings in <a href="#script-EventAttributes">event attributes</a>.
        This language must be used for all instances of script that do not specify 
        their own scripting language.
        The value <span class="attr-value"><em>content-type</em></span> specifies a
        media type, per <a href="http://www.ietf.org/rfc/rfc2046.txt">MIME Part Two: Media Types</a>
        [<a href="#refs-ref-RFC2046">RFC2046</a>].
        The default value is <span class="attr-value">'application/ecmascript'</span>
        [<a href="#refs-ref-RFC4329">RFC4329</a>].<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd></dl>
    </div>

<h3 id="script-SpecifiedScriptingLanguage">18.1.2 Local declaration of a scripting language</h3>

<p>It is also possible to specify the scripting language for each individual
<a href="#script-ScriptElement"><span class="element-name">‘script’</span></a> element by specifying a <a href="#script-ScriptElementTypeAttribute"><span class="attr-name">‘type’</span></a> on the
<a href="#script-ScriptElement"><span class="element-name">‘script’</span></a> element.</p>

<h2 id="script-ScriptElement">18.2 The <span class="element-name">‘script’</span> element</h2>

<p>A <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a> element is equivalent to the <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a> element in
HTML and thus is the place for scripts (e.g., ECMAScript). Any functions
defined within any <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a> element have a "global" scope across the
entire current document.</p>

<p id="script-ExampleScript01"><span class="example-ref">Example script01</span>
defines a function <code>circle_click</code> which is called by the
<a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a> event attribute on the <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a> element. The drawing
below on the left is the initial image. The drawing below on the right shows
the result after clicking on the circle.</p>

<p>Note that this example demonstrates the use of the <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a> event
attribute for explanatory purposes. The example presupposes the presence of an
input device with the same behavioral characteristics as a mouse, which will
not always be the case. To support the widest range of users, the
<a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a> event attribute should be used instead of the
<a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a> event attribute.</p>

<p id="script-ScriptElementExecution">Before attempting to execute the <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a> element the resolved media type value for <a href="#script-ScriptElementTypeAttribute"><span class="attr-name">‘type’</span></a> must be inspected. 
If the <a href="#intro-TermUserAgent"><span class="svg-term">SVG user agent</span></a> does not support the scripting language then the <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a> element must not be executed.
</p>

<pre class="xml">&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="6cm" height="5cm" viewBox="0 0 600 500"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example script01 - invoke an ECMAScript function from an onclick event
  &lt;/desc&gt;
  &lt;!-- ECMAScript to change the radius with each click --&gt;
  &lt;script type="application/ecmascript"&gt; &lt;![CDATA[
    function circle_click(evt) {
      var circle = evt.target;
      var currentRadius = circle.getAttribute("r");
      if (currentRadius == 100)
        circle.setAttribute("r", currentRadius*2);
      else
        circle.setAttribute("r", currentRadius*0.5);
    }
  ]]&gt; &lt;/script&gt;

  &lt;!-- Outline the drawing area with a blue line --&gt;
  &lt;rect x="1" y="1" width="598" height="498" fill="none" stroke="blue"/&gt;

  &lt;!-- Act on each click event --&gt;
  &lt;circle onclick="circle_click(evt)" cx="300" cy="225" r="100"
          fill="red"/&gt;

  &lt;text x="300" y="480" 
        font-family="Verdana" font-size="35" text-anchor="middle"&gt;

    Click on circle to change its size
  &lt;/text&gt;
&lt;/svg&gt;</pre><table summary="Example script01"><caption align="bottom">Example script01</caption><tbody><tr><td><img alt="Example script01 — invoke an ECMAScript function from an onclick event — before first click" src="images/script/script01.png" /> <img alt="Example script01 — invoke an ECMAScript function from an onclick event — after first click" src="images/script/script01-AfterClick.png" /></td></tr></tbody></table><p class="view-as-svg"><a href="images/script/script01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>


<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘script’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>
                Any elements or character data.
              </dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#script-ScriptElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#script-ScriptElementTypeAttribute"><span class="attr-name">‘type’</span></a></li><li><a href="#script-ScriptElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#script-InterfaceSVGScriptElement">SVGScriptElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="script-ScriptElementTypeAttribute"><span class="adef">type</span> = "<span class="attr-value"><em>content-type</em></span>"</dt><dd>Identifies the scripting language for the given <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a> element. The value
        <span class="attr-value"><em>content-type</em></span>
        specifies a media type, per 
        <a href="http://www.ietf.org/rfc/rfc2046.txt">Multipurpose Internet Mail Extensions
        (MIME) Part Two</a> [<a href="#refs-ref-RFC2046">RFC2046</a>].
        If a <a href="#script-ScriptElementTypeAttribute"><span class="attr-name">‘type’</span></a> is not provided, the value of  <a href="#script-ContentScriptTypeAttribute"><span class="attr-name">‘contentScriptType’</span></a> on 
        the  <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element shall be used, which in turn defaults to 
        "application/ecmascript"  [<a href="#refs-ref-RFC4329">RFC4329</a>]. If a  
        <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a> element falls outside of the 
        <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a> and the <a href="#script-ScriptElementTypeAttribute"><span class="attr-name">‘type’</span></a> 
        is not provided, the <a href="#script-ScriptElementTypeAttribute"><span class="attr-name">‘type’</span></a> must default to "application/ecmascript"      
        [<a href="#refs-ref-RFC4329">RFC4329</a>].<br />
        <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="script-ScriptElementHrefAttribute"><span class="adef">xlink:href</span> =
        "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span>"</dt><dd>An <a href="#linking-IRIReference">IRI reference</a> to an external
        resource containing the script code.<br />
        <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: no.</span></dd></dl>
    </div>

<h2 id="script-EventHandling">18.3 Event handling</h2>

<p>Events can cause scripts to execute when either of the following has
occurred:</p>

<ul><li><a href="#script-EventAttributes">Event attributes</a> such as
  <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a> or <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a> are assigned to particular elements,
  where the values of the event attributes are script which is executed
  when the given event occurs.</li><li><a href="#svgdom-EventListeners">Event listeners</a> as described in
  <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/">DOM Level 2 Events</a>
  [<a href="#refs-ref-DOM2EVENTS">DOM2EVENTS</a>]
  are defined which are invoked when a given event happens on a
  given object.</li></ul>

<p>Related sections of the spec:</p>

<ul><li><a href="#interact-UIEvents">User interface events</a> describes how
  an SVG user agent handles events such as pointer movements events (e.g.,
  mouse movement) and activation events (e.g., mouse click).</li><li><a href="#svgdom-RelationshipWithDOM2Events">Relationship with DOM2 events</a>
  describes what parts of DOM are supported by SVG and how to register event
  listeners.</li></ul>

<h2 id="script-EventAttributes">18.4 Event attributes</h2>

<p>The following event attributes are available on many SVG elements.</p>

<p>The complete list of events that are part of the SVG language and SVG DOM
and descriptions of those events is provided in
<a href="#interact-SVGEvents">Complete list of supported events</a>.</p>

<h3 id="script-LoadEvent">18.4.1 Event attribute for the SVGLoad event</h3>

<p>Below is the definition for the <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a> event attribute.  It
can be specified on all of the <a href="#intro-TermAnimationElement"><span class="svg-term">animation elements</span></a> and most of the
<a href="#intro-TermGraphicsElement"><span class="svg-term">graphics elements</span></a> and <a href="#intro-TermContainerElement"><span class="svg-term">container elements</span></a>.  The <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a>
event attribute is classified as both a <a href="#intro-TermGraphicalEventAttribute"><span class="svg-term">graphical event attribute</span></a>
and an <a href="#intro-TermAnimationEventAttribute"><span class="svg-term">animation event attribute</span></a>.  (See the definition for each element
to determine whether it can have a <a href="#intro-TermGraphicalEventAttribute"><span class="svg-term">graphical event attribute</span></a>
specified on it.)</p>

<div class="adef-list">
  <p><em>Attribute definitions:</em></p>
  <dl><dt id="script-OnLoadEventAttribute"><span class="adef">onload</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dd>Specifies some script to execute when "bubbling" or "at target"
    phase listeners for the SVGLoad event are fired on the element
    the attribute is specified on.<br />
    <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: no.</span></dd></dl>
</div>

<h3 id="script-GraphicsEvents">18.4.2 Event attributes on graphics and container elements</h3>

<p>Below are the definitions for the <a href="#intro-TermGraphicalEventAttribute"><span class="svg-term">graphical event attributes</span></a>.
These can be specified on most <a href="#intro-TermGraphicsElement"><span class="svg-term">graphics elements</span></a> and
<a href="#intro-TermContainerElement"><span class="svg-term">container elements</span></a>.  (See the definition for each element to
determine whether it can have a <a href="#intro-TermGraphicalEventAttribute"><span class="svg-term">graphical event attribute</span></a>
specified on it.)</p>

<p>Note that <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a>, defined above, is also classified as a
<a href="#intro-TermGraphicalEventAttribute"><span class="svg-term">graphical event attribute</span></a>.</p>

<div class="adef-list">
  <p><em>Attribute definitions:</em></p>
  <dl><dt id="script-OnFocusInEventAttribute"><span class="adef">onfocusin</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dt id="script-OnFocusOutEventAttribute"><span class="adef">onfocusout</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dt id="script-OnActivateEventAttribute"><span class="adef">onactivate</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dt id="script-OnClickEventAttribute"><span class="adef">onclick</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dt id="script-OnMouseDownEventAttribute"><span class="adef">onmousedown</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dt id="script-OnMouseUpEventAttribute"><span class="adef">onmouseup</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dt id="script-OnMouseOverEventAttribute"><span class="adef">onmouseover</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dt id="script-OnMouseMoveEventAttribute"><span class="adef">onmousemove</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dt id="script-OnMouseOutEventAttribute"><span class="adef">onmouseout</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dd>Specifies some script to execute when "bubbling" or "at target"
    phase listeners for the corresponding event are fired on the element
    the attribute is specified on.  See the <a href="#interact-SVGEvents">Complete list of support events</a>
    to determine which event each of these event attributes corresponds to.<br />
    <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: no.</span></dd></dl>
</div>

<h3 id="script-DocumentEvents">18.4.3 Document-level event attributes</h3>

<p>Below are the definitions for the <a href="#intro-TermDocumentEventAttribute"><span class="svg-term">document event attributes</span></a>.
These can be specified only on <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> elements.</p>

<div class="adef-list">
  <p><em>Attribute definitions:</em></p>
  <dl><dt id="script-OnUnloadEventAttribute"><span class="adef">onunload</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dt id="script-OnAbortEventAttribute"><span class="adef">onabort</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dt id="script-OnErrorEventAttribute"><span class="adef">onerror</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dt id="script-OnResizeEventAttribute"><span class="adef">onresize</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dt id="script-OnScrollEventAttribute"><span class="adef">onscroll</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dt id="script-OnZoomEventAttribute"><span class="adef">onzoom</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dd>Specifies some script to execute when "bubbling" or "at target"
    phase listeners for the corresponding event are fired on the element
    the attribute is specified on.  See the <a href="#interact-SVGEvents">Complete list of support events</a>
    to determine which event each of these event attributes corresponds to.<br />
    <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: no.</span></dd></dl>
</div>

<h3 id="script-AnimationEvents">18.4.4 Animation event attributes</h3>

<p>Below are the definitions for the <a href="#intro-TermAnimationEventAttribute"><span class="svg-term">animation event attributes</span></a>.
These can be specified on the <a href="#intro-TermAnimationElement"><span class="svg-term">animation elements</span></a>.</p>

<p>Note that <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a>, defined above, is also classified as an
<a href="#intro-TermAnimationEventAttribute"><span class="svg-term">animation event attribute</span></a>.</p>

<div class="adef-list">
  <p><em>Attribute definitions:</em></p>
  <dl><dt id="script-OnBeginEventAttribute"><span class="adef">onbegin</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dt id="script-OnEndEventAttribute"><span class="adef">onend</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dt id="script-OnRepeatEventAttribute"><span class="adef">onrepeat</span> = "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dd>Specifies some script to execute when "bubbling" or "at target"
    phase listeners for the corresponding event are fired on the element
    the attribute is specified on.  See the <a href="#interact-SVGEvents">Complete list of support events</a>
    to determine which event each of these event attributes corresponds to.<br />
    <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: no.</span></dd></dl>
</div>

<h2 id="script-DOMInterfaces">18.5 DOM interfaces</h2>

<h3 id="script-InterfaceSVGScriptElement">18.5.1 Interface SVGScriptElement</h3>



 The <a class="idlinterface" href="#script-InterfaceSVGScriptElement">SVGScriptElement</a> interface corresponds to the <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a>
 element.
<pre class="idl">interface <b>SVGScriptElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a> {
  attribute DOMString <a href="#script-__svg__SVGScriptElement__type">type</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="script-__svg__SVGScriptElement__type" class="attribute first-child"><b>type</b><span class="idl-type-parenthetical"> (DOMString)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#script-ScriptElementTypeAttribute"><span class="attr-name">‘type’</span></a> on the given <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a>
 element.

</div><dl class="attribute"><dt class="exceptions-header">Exceptions on setting</dt><dd><dl class="exceptions"><dt class="exception"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NO_MODIFICATION_ALLOWED_ERR</dt><dd class="exception"> Raised on an attempt
   to change the value of a <a href="#svgdom-ReadOnlyNodes">read only attribute</a>.
</dd></dl></dd></dl></dd></dl></dd></dl>


<h3 id="script-InterfaceSVGZoomEvent">18.5.2 Interface SVGZoomEvent</h3>


 <p>A DOM consumer can use the hasFeature of the DOMImplementation interface
 to determine whether the SVG zoom event set has been implemented by a DOM
 implementation. The feature string for this event set is "SVGZoomEvents".
 This string is also used with the createEvent method.</p>

 <p>The zoom event handler occurs before the zoom event is processed. The
 remainder of the DOM represents the previous state of the document. The
 document will be updated upon normal return from the event handler.</p>

 <p>The UI event type for a zoom event is:</p>

 <dl>
   <dt><strong>SVGZoom</strong></dt>
   <dd>
     The zoom event occurs when the user initiates an action
     which causes the current view of the SVG document fragment
     to be rescaled. Event handlers are only recognized on <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> elements. See <a href="#interact-ZoomEvent">SVGZoom event</a>. 
     <ul>
       <li>Bubbles: Yes</li>
       <li>Cancelable: No</li>
       <li>Context Info: zoomRectScreen, previousScale,
       previousTranslate, newScale, newTranslate, screenX,
       screenY, clientX, clientY, altKey, ctrlKey, shiftKey,
       metaKey, relatedNode.<br />
        (screenX, screenY, clientX and clientY indicate the
       center of the zoom area, with clientX and clientY in
       viewport coordinates for the corresponding <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element. relatedNode is
       the corresponding <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>
       element.)</li>
     </ul>
   </dd>
 </dl>
<pre class="idl">interface <b>SVGZoomEvent</b> : UIEvent {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <a href="#script-__svg__SVGZoomEvent__zoomRectScreen">zoomRectScreen</a>;
  readonly attribute float <a href="#script-__svg__SVGZoomEvent__previousScale">previousScale</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#script-__svg__SVGZoomEvent__previousTranslate">previousTranslate</a>;
  readonly attribute float <a href="#script-__svg__SVGZoomEvent__newScale">newScale</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#script-__svg__SVGZoomEvent__newTranslate">newTranslate</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="script-__svg__SVGZoomEvent__zoomRectScreen" class="attribute first-child"><b>zoomRectScreen</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a>)</span></dt><dd class="attribute"><div>
 <p>The specified zoom rectangle in screen units.</p>

 <p>The <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> object is read only.</p>
</div></dd>
<dt id="script-__svg__SVGZoomEvent__previousScale" class="attribute"><b>previousScale</b><span class="idl-type-parenthetical"> (readonly float)</span></dt><dd class="attribute"><div>
 The scale factor from previous zoom operations that was in place before
 the zoom operation occurred.
</div></dd>
<dt id="script-__svg__SVGZoomEvent__previousTranslate" class="attribute"><b>previousTranslate</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a>)</span></dt><dd class="attribute"><div>
 <p>The translation values from previous zoom operations that were in
 place before the zoom operation occurred.</p>

 <p>The <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> object is read only.</p>
</div></dd>
<dt id="script-__svg__SVGZoomEvent__newScale" class="attribute"><b>newScale</b><span class="idl-type-parenthetical"> (readonly float)</span></dt><dd class="attribute"><div>
 The scale factor that will be in place after the zoom operation has been processed.
</div></dd>
<dt id="script-__svg__SVGZoomEvent__newTranslate" class="attribute"><b>newTranslate</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a>)</span></dt><dd class="attribute"><div>
 <p>The translation values that will be in place after the zoom
 operation has been processed.</p>

 <p>The <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> object is read only.</p>
</div></dd></dl></dd></dl>

</div><hr class="chapter-divider" />
<div id="chapter-animate">

<h1>19 Animation</h1><h2 id="animate-toc">Contents</h2><ul class="toc">
<li><a href="#animate-Introduction">19.1 Introduction</a></li>
<li><a href="#animate-AnimationElements">19.2 Animation elements</a><ul class="toc">
<li><a href="#animate-AnimationElementsIntro">19.2.1 Overview</a></li>
<li><a href="#animate-RelationshipToSMILAnimation">19.2.2 Relationship to SMIL Animation</a></li>
<li><a href="#animate-AnimationElementsExample">19.2.3 Animation elements example</a></li>
<li><a href="#animate-TargetElement">19.2.4 Attributes to identify the target element for an animation</a></li>
<li><a href="#animate-TargetAttributes">19.2.5 Attributes to identify the target attribute or property for an animation</a></li>
<li><a href="#animate-Animation.nsexample">19.2.6 Animation with namespaces</a></li>
<li><a href="#animate-complexDistances">19.2.7 Paced animation and complex types</a></li>
<li><a href="#animate-TimingAttributes">19.2.8 Attributes to control the timing of the animation</a><ul class="toc">
<li><a href="#animate-ClockValueSyntax">19.2.8.1 Clock values</a></li></ul></li>
<li><a href="#animate-ValueAttributes">19.2.9 Attributes that define animation values over time</a></li>
<li><a href="#animate-AdditionAttributes">19.2.10 Attributes that control whether animations are additive</a></li>
<li><a href="#animate-Inheritance">19.2.11 Inheritance</a></li>
<li><a href="#animate-AnimateElement">19.2.12 The <span class="element-name">‘animate’</span> element</a></li>
<li><a href="#animate-SetElement">19.2.13 The <span class="element-name">‘set’</span> element</a></li>
<li><a href="#animate-AnimateMotionElement">19.2.14 The <span class="element-name">‘animateMotion’</span> element</a></li>
<li><a href="#animate-AnimateColorElement">19.2.15 The <span class="element-name">‘animateColor’</span> element</a></li>
<li><a href="#animate-AnimateTransformElement">19.2.16 The <span class="element-name">‘animateTransform’</span> element</a></li>
<li><a href="#animate-AnimationAttributesAndProperties">19.2.17 Elements, attributes and properties that can be animated</a></li></ul></li>
<li><a href="#animate-DOMAnimationExample">19.3 Animation using the SVG DOM</a></li>
<li><a href="#animate-DOMInterfaces">19.4 DOM interfaces</a><ul class="toc">
<li><a href="#animate-InterfaceElementTimeControl">19.4.1 Interface ElementTimeControl</a></li>
<li><a href="#animate-InterfaceTimeEvent">19.4.2 Interface TimeEvent</a></li>
<li><a href="#animate-InterfaceSVGAnimationElement">19.4.3 Interface SVGAnimationElement</a></li>
<li><a href="#animate-InterfaceSVGAnimateElement">19.4.4 Interface SVGAnimateElement</a></li>
<li><a href="#animate-InterfaceSVGSetElement">19.4.5 Interface SVGSetElement</a></li>
<li><a href="#animate-InterfaceSVGAnimateMotionElement">19.4.6 Interface SVGAnimateMotionElement</a></li>
<li><a href="#animate-InterfaceSVGMPathElement">19.4.7 Interface SVGMPathElement</a></li>
<li><a href="#animate-InterfaceSVGAnimateColorElement">19.4.8 Interface SVGAnimateColorElement</a></li>
<li><a href="#animate-InterfaceSVGAnimateTransformElement">19.4.9 Interface SVGAnimateTransformElement</a></li></ul></li></ul>

<h2 id="animate-Introduction">19.1 Introduction</h2>

    <p>Because the Web is a dynamic medium, SVG supports the
    ability to change vector graphics over time. SVG content can be
    animated in the following ways:</p>
    <ul><li>Using SVG's <a href="#animate-AnimationElements">animation elements</a>.
      SVG document fragments can describe time-based modifications
      to the document's elements. Using the various animation
      elements, you can define motion paths, fade-in or fade-out
      effects, and objects that grow, shrink, spin or change
      color.</li><li>Using the <a href="#chapter-svgdom">SVG DOM</a>. The SVG DOM
      conforms to key aspects of the <a href="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/"><cite>Document Object Model (DOM)
      Level 1</cite></a> [<a href="#refs-ref-DOM1">DOM1</a>] and
      <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/"><cite>Document Object Model (DOM) Level 2</cite></a>
      [<a href="#refs-ref-DOM2">DOM2</a>]
      specifications. Every attribute and style sheet setting is
      accessible to scripting, and SVG offers a set of additional
      DOM interfaces to support efficient animation via scripting.
      As a result, virtually any kind of animation can be achieved.
      The timer facilities in scripting languages such as
      ECMAScript can be used to start up and control the
      animations [<a href="#refs-ref-ECMA-262">ECMA-262</a>].
      (See <a href="#animate-DOMAnimationExample">example</a> below.)</li><li>SVG has been designed to allow
      <a href="http://www.w3.org/TR/2008/REC-SMIL3-20081201/">SMIL</a> [<a href="#refs-ref-SMIL">SMIL</a>] to use
      animated or static SVG content as media components.</li></ul>

<h2 id="animate-AnimationElements">19.2 Animation elements</h2>

<h3 id="animate-AnimationElementsIntro">19.2.1 Overview</h3>

    <p>SVG's animation elements were developed in collaboration
    with the W3C Synchronized Multimedia (SYMM) Working Group,
    developers of the <a href="http://www.w3.org/TR/2008/REC-SMIL3-20081201/"><cite>Synchronized Multimedia Integration Language
    (SMIL) 3.0 Specification</cite></a> [<a href="#refs-ref-SMIL">SMIL</a>].</p>
    <p>The SYMM Working Group, in collaboration with the SVG
    Working Group, has authored the <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation specification</cite></a>
    [<a href="#refs-ref-SMILANIM">SMILANIM</a>],
    which represents a general-purpose XML animation feature set.
    SVG incorporates the animation features defined in the SMIL
    Animation specification and provides some SVG-specific
    extensions.</p>
    <p>For an introduction to the approach and features available
    in any language that supports SMIL Animation, see
    <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#AnimationFramework">SMIL Animation overview</a>
    and <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#AnimationModel">SMIL Animation animation model</a>
    ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], sections 2 and 3). For the list of animation
    features which go beyond SMIL Animation, see
    <a href="#animate-SVGExtensionsToSMILAnimation">SVG extensions to SMIL Animation</a>.</p>

<h3 id="animate-RelationshipToSMILAnimation">19.2.2 Relationship to SMIL Animation</h3>

    <p>SVG is a host language in terms of SMIL Animation and
    therefore introduces additional constraints and features as
    permitted by that specification. Except for any SVG-specific
    rules explicitly mentioned in this specification, the normative
    definition for SVG's animation elements and attributes is the
    <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a>
    specification [<a href="#refs-ref-SMILANIM">SMILANIM</a>].</p>
    <p>SVG supports the following four animation elements which are
    defined in the SMIL Animation specification:</p>
    <table class="vert offset" summary="animation elements from SMIL Animation"><tr><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></td><td>allows scalar attributes and properties to be assigned
        different values over time</td></tr><tr><td><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td>a convenient shorthand for <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, which is useful for
        assigning animation values to non-numeric attributes and
        properties, such as the <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> property</td></tr><tr><td><a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a></td><td>moves an element along a motion path</td></tr><tr><td><a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a></td><td>modifies the color value of particular attributes or
        properties over time</td></tr></table>

    <p>Although SVG defines <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, its use is deprecated in
    favor of simply using the <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a> element to target properties
    that can take color values.</p>

    <p id="animate-SVGExtensionsToSMILAnimation">Additionally, SVG includes the following compatible
    extensions to SMIL Animation:</p>
    <table class="vert offset" summary="extensions to SMIL Animation"><tr><td><a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a></td><td>modifies one of SVG's transformation attributes over
        time, such as the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute</td></tr><tr><td><a href="#animate-PathAttribute"><span class="attr-name">‘path’</span></a> attribute</td><td>SVG allows any feature from SVG's <a href="#paths-PathData">path data</a> syntax to be
        specified in a <a href="#animate-PathAttribute"><span class="attr-name">‘path’</span></a> attribute to the <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a> element
        (SMIL Animation only allows a subset of SVG's path data
        syntax within a <a href="#animate-PathAttribute"><span class="attr-name">‘path’</span></a> attribute)</td></tr><tr><td><a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a> element</td><td>SVG allows an <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a> element to
        contain a child <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a> element which
        references an SVG <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element as the
        definition of the motion path</td></tr><tr><td><a href="#animate-KeyPointsAttribute"><span class="attr-name">‘keyPoints’</span></a> attribute</td><td>SVG adds a <a href="#animate-KeyPointsAttribute"><span class="attr-name">‘keyPoints’</span></a> attribute to the <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a> to provide
        precise control of the velocity of motion path
        animations</td></tr><tr><td><a href="#animate-RotateAttribute"><span class="attr-name">‘rotate’</span></a> attribute</td><td>SVG adds a <a href="#animate-RotateAttribute"><span class="attr-name">‘rotate’</span></a> attribute to the <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a> to control
        whether an object is automatically rotated so that its
        x-axis points in the same direction (or opposite direction)
        as the directional tangent vector of the motion path</td></tr></table>
    <p>For compatibility with other aspects of the language, SVG
    uses <a href="#linking-IRIReference">IRI references</a> via
    an <a href="#animate-HrefAttribute"><span class="attr-name">‘xlink:href’</span></a> attribute to identify
    the elements which are to be targets of the animations,
    as allowed in SMIL 3.0.</p>
    <p>SMIL Animation requires that the host language define the
    meaning for <span id="animate-DocumentBegin" class="SVG-Term">document begin</span> and the
    <span id="animate-DocumentEnd" class="SVG-Term">document end</span>. Since an
    <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> is sometimes the root of
    the XML document tree and other times can be a component of a
    parent XML grammar, the <em>document begin</em> for a given SVG
    document fragment is defined to be the exact time at which the
    <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element's <a href="#interact-LoadEvent">SVGLoad event</a> is
    triggered. The <em>document end</em> of an SVG document
    fragment is the point at which the document fragment has been
    released and is no longer being processed by the user agent.
    However, nested <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> elements within an SVG
    document do not constitute document fragments in this sense,
    and do not define a separate document begin; all times within
    the nested SVG fragment are relative to the document time
    defined for the root <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element.</p>
    <p>For SVG, the term <span id="animate-PresentationTime" class="SVG-Term">presentation time</span>
    indicates the position in the timeline relative
    to the <em>document begin</em> of a given document
    fragment.</p>
    <p>SVG defines more constrained error processing than is
    defined in the <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a>
    specification [<a href="#refs-ref-SMILANIM">SMILANIM</a>].
    SMIL Animation defines error processing behavior
    where the document continues to run in certain error
    situations, whereas all animations within an SVG document
    fragment will stop in the event of any error within the
    document (see <a href="#implnote-ErrorProcessing">Error
    processing</a>).</p>

<h3 id="animate-AnimationElementsExample">19.2.3 Animation elements example</h3>

    <p id="animate-ExampleAnim01"><span class="example-ref">Example anim01</span> below
    demonstrates each of SVG's five animation elements.</p>

<pre>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="8cm" height="3cm"  viewBox="0 0 800 300"
     xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;
  &lt;desc&gt;Example anim01 - demonstrate animation elements&lt;/desc&gt;
  &lt;rect x="1" y="1" width="798" height="298" 
        fill="none" stroke="blue" stroke-width="2" /&gt;
  &lt;!-- The following illustrates the use of the 'animate' element
        to animate a rectangles x, y, and width attributes so that
        the rectangle grows to ultimately fill the viewport. --&gt;
  &lt;rect id="RectElement" x="300" y="100" width="300" height="100"
        fill="rgb(255,255,0)"  &gt;
    &lt;animate attributeName="x" attributeType="XML"
             begin="0s" dur="9s" fill="freeze" from="300" to="0" /&gt;
    &lt;animate attributeName="y" attributeType="XML"
             begin="0s" dur="9s" fill="freeze" from="100" to="0" /&gt;
    &lt;animate attributeName="width" attributeType="XML"
             begin="0s" dur="9s" fill="freeze" from="300" to="800" /&gt;
    &lt;animate attributeName="height" attributeType="XML"
             begin="0s" dur="9s" fill="freeze" from="100" to="300" /&gt;
  &lt;/rect&gt;
  &lt;!-- Set up a new user coordinate system so that
        the text string's origin is at (0,0), allowing
        rotation and scale relative to the new origin --&gt;
  &lt;g transform="translate(100,100)" &gt;
    &lt;!-- The following illustrates the use of the 'set', 'animateMotion',
         'animate' and 'animateTransform' elements. The 'text' element 
         below starts off hidden (i.e., invisible). At 3 seconds, it:
           * becomes visible
           * continuously moves diagonally across the viewport
           * changes color from blue to dark red
           * rotates from -30 to zero degrees
           * scales by a factor of three. --&gt;
    &lt;text id="TextElement" x="0" y="0"
          font-family="Verdana" font-size="35.27" visibility="hidden"  &gt; 
      It's alive!
      &lt;set attributeName="visibility" attributeType="CSS" to="visible"
           begin="3s" dur="6s" fill="freeze" /&gt;
      &lt;animateMotion path="M 0 0 L 100 100" 
           begin="3s" dur="6s" fill="freeze" /&gt;
      &lt;animate attributeName="fill" attributeType="CSS"
           from="rgb(0,0,255)" to="rgb(128,0,0)"
           begin="3s" dur="6s" fill="freeze" /&gt;
      &lt;animateTransform attributeName="transform" attributeType="XML"
           type="rotate" from="-30" to="0"
           begin="3s" dur="6s" fill="freeze" /&gt;
      &lt;animateTransform attributeName="transform" attributeType="XML"
           type="scale" from="1" to="3" additive="sum"
           begin="3s" dur="6s" fill="freeze" /&gt;
    &lt;/text&gt;
  &lt;/g&gt;
&lt;/svg&gt;
</pre>
    <table summary="Example anim01"><caption align="bottom">
        Example anim01
      </caption><tr><td width="256"><img width="256" height="91" alt="Example anim01 - at zero seconds" src="images/animate/anim01a.png" /> <span class="table-heading-1">At zero seconds</span></td><td width="20"> </td><td width="256"><img width="256" height="91" alt="Example anim01 - at three seconds" src="images/animate/anim01b.png" /> <span class="table-heading-1">At three seconds</span></td></tr><tr><td width="256"><img width="256" height="91" alt="Example anim01 - at six seconds" src="images/animate/anim01c.png" /> <span class="table-heading-1">At six seconds</span></td><td width="20"> </td><td width="256"><img width="256" height="91" alt="Example anim01 - at nine seconds" src="images/animate/anim01d.png" /> <span class="table-heading-1">At nine seconds</span></td></tr></table>
    <p class="view-as-svg"><a href="images/animate/anim01.svg">View
    this example as SVG (SVG-enabled browsers only)</a></p>
    <p>The sections below describe the various animation attributes
    and elements.</p>



<h3 id="animate-TargetElement">19.2.4 Attributes to identify the target element for an animation</h3>

    <p>The following attribute is common to all animation
    elements and identifies the target element for the animation.</p>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="animate-HrefAttribute"><span class="adef">xlink:href</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span>"</dt><dd><p>An <a href="#intro-TermIRIReference">IRI
        reference</a> to the element which is the target of this
        animation and which therefore will be modified over
        time.</p>
        <p>The target element must be part of the <a href="#intro-TermCurrentSVGDocumentFragment">current
        SVG document fragment</a>.</p>
        <p>&lt;iri&gt; must point to exactly one target element which
        is capable of being the target of the given animation. If
        &lt;iri&gt; points to multiple target elements, if the
        given target element is not capable of being a target of
        the given animation, or if the given target element is not
        part of the current SVG document fragment, then the
        document is in error (see <a href="#implnote-ErrorProcessing">Error
        processing</a>).</p>
        <p>If the <a href="#animate-HrefAttribute"><span class="attr-name">‘xlink:href’</span></a> attribute
        is not provided, then the target element will be the
        immediate parent element of the current animation
        element.</p>
        <p>Refer to the descriptions of the individual animation
        elements for any restrictions on what types of elements can
        be targets of particular types of animations.</p>
        <p>Except for any SVG-specific rules explicitly mentioned in
        this specification, the normative definition for this
        attribute is the <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a>
        specification.
        In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#SpecifyingAnimationTarget">
        SMIL Animation: Specifying the animation target</a>
        ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.1).</p></dd></dl>
    </div>

<h3 id="animate-TargetAttributes">19.2.5 Attributes to identify the target attribute or property for an animation</h3>

<p>The following attributes are the <span class="SVG-TermDefine">animation attribute target attributes</span>,
which identify the target attribute or property for the given 
<a href="#animate-TargetElement">target element</a> whose value changes
over time.</p>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="animate-AttributeNameAttribute"><span class="adef">attributeName</span>
        = "<span class="attr-value">&lt;attributeName&gt;</span>"</dt><dd><p>Specifies the name of the target attribute. An XMLNS
        prefix may be used to indicate the XML namespace for the
        attribute. The prefix will be interpreted in the scope of
        the current (i.e., the referencing) animation
        element.</p>
        <p>Except for any SVG-specific rules explicitly mentioned in
        this specification, the normative definition for this
        attribute is the <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a>
        specification.
        In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#SpecifyingAnimationTarget">
        SMIL Animation: Specifying the animation target</a>
        ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.1).</p></dd><dt id="animate-AttributeTypeAttribute"><span class="adef">attributeType</span>
        = "<span class="attr-value">CSS | XML | auto</span>"</dt><dd>
          <p>Specifies the namespace in which the target attribute and
          its associated values are defined. The attribute value is
          one of the following (values are case-sensitive):</p>
          <dl><dt><span class="attr-value">CSS</span></dt><dd>This specifies that the value of <a href="#animate-AttributeNameAttribute"><span class="attr-name">‘attributeName’</span></a> is
            the name of a CSS property defined as animatable in
            this specification.</dd><dt><span class="attr-value">XML</span></dt><dd>This specifies that the value of <a href="#animate-AttributeNameAttribute"><span class="attr-name">‘attributeName’</span></a> is
            the name of an XML attribute defined in the default XML
            namespace for the target element. If the value for
            <a href="#animate-AttributeNameAttribute"><span class="attr-name">‘attributeName’</span></a> has an XMLNS prefix, the
            implementation must use the associated namespace as
            defined in the scope of the target element. The
            attribute must be defined as animatable in this
            specification.</dd><dt><span class="attr-value">auto</span></dt><dd>The implementation should match the
            <a href="#animate-AttributeNameAttribute"><span class="attr-name">‘attributeName’</span></a> to an attribute for the
            target element. The implementation must first search
            through the list of CSS properties for a matching
            property name, and if none is found, search the default
            XML namespace for the element.</dd></dl>
          <p>The default value is <span class="attr-value">'auto'</span>.</p>
          <p>Except for any SVG-specific rules explicitly mentioned
          in this specification, the normative definition for this
          attribute is the <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a>
          specification.
          In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#SpecifyingAnimationTarget">
          SMIL Animation: Specifying the animation target</a>
          ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.1).</p>
        </dd></dl>
    </div>
    

<h3 id="animate-Animation.nsexample">19.2.6 Animation with namespaces</h3>
    <p id="animate-ExampleNS01"><span class="example-ref">Example 
    animns01</span> below shows a namespace prefix being resolved 
    to a namespace name in the scope of the referencing element, and
    that namespace name being used (regardless of the prefix which 
    happens to be used in the target scope) to identify the 
    attribute being animated.</p>
    <pre class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;svg version="1.1" xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;title&gt;Demonstration of the resolution of namespaces for animation&lt;/title&gt;
  &lt;!-- at the point of definition, the QName a:href resolves to the namespace
       name "http://www.w3.org/1999/xlink" and the local name "href" --&gt;
  &lt;g xmlns:a="http://www.w3.org/1999/xlink"&gt;
    &lt;animate attributeName="a:href" xlink:href="#foo" dur="2s" to="two.png" fill="freeze"/&gt;
  &lt;/g&gt;
  &lt;!-- at the point of use, the namespace name "http://www.w3.org/1999/xlink"
       happens to be bound to the namespace prefix 'b' while the prefix
       'xlink' is bound to a different namespace name --&gt;
  &lt;g xmlns:b="http://www.w3.org/1999/xlink" xmlns:xlink="http://example.net/bar"&gt;
    &lt;image xml:id="foo" b:href="one.png" x="35" y="50" width="410" height="160"/&gt;
  &lt;/g&gt;
&lt;/svg&gt;</pre><p class="view-as-svg"><a href="images/animate/animns01.svg">View this example as SVG (SVG-enabled browsers only)</a></p>

    <h3 id="animate-complexDistances">19.2.7 Paced animation and complex types</h3>

    <p>
      Paced animations assume a notion of distance between the various
      animation values defined by the
      <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a>, <a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a>, <a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a> and <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a>
      attributes.  Distance is defined only for scalar types (such as
      <a href="#types-DataTypeLength">&lt;length&gt;</a>), colors
      and the subset of transformation types that are supported by
      <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>.
      In the list of distance functions below, V<sub>a</sub> and V<sub>b</sub>
      represent the two values the distance between which is being calculated.
    </p>
    <p>
      Since paced animation is intended to produce an animation with an even
      pace of change, it does not make sense to define distance functions
      for all data types.  Distance can be usefully defined for types whose
      values are <var>n</var>-dimensional vectors (including scalars, which are
      1-dimensional vectors).  For example, a
      <a href="#types-DataTypeLength">&lt;length&gt;</a> value is a scalar
      value, and a <a href="#types-DataTypeColor">&lt;color&gt;</a> value
      is a 3-dimensional vector. Thus attributes of these types can have paced
      animation applied to them.  On the other hand, a
      <a href="#types-DataTypeLengths">&lt;list-of-length&gt;</a>
      (as used by <a href="#painting-StrokeDasharrayProperty"><span class="prop-name">‘stroke-dasharray’</span></a>)
      is a list of scalars (1-dimensional vectors), and
      <a href="#shapes-PointsBNF">&lt;list-of-points&gt;</a> (as used by
      the <a href="#shapes-PolygonElementPointsAttribute"><span class="attr-name">‘points’</span></a>
      attribute on a <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>)
      is a list of 2-dimensional vectors.  Therefore, these types do not have a
      distance function defined and cannot have paced animation applied to them.
    </p>
    <p>
      The distance functions for types that support paced animation are as
      follows:
    </p>
    <dl class="indented"><dt>
        <a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a>,
        <a href="#types-DataTypeInteger">&lt;integer&gt;</a>,
        <a href="#types-DataTypeLength">&lt;length&gt;</a> and
        <a href="#types-DataTypeNumber">&lt;number&gt;</a>
      </dt><dd>
        <p>distance(V<sub>a</sub>, V<sub>b</sub>) = |V<sub>a</sub> − V<sub>b</sub>|</p>
        <p>
          Examples: animating the
          <a href="#shapes-RectElementXAttribute"><span class="attr-name">‘x’</span></a> attribute on a
          <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, or the
          <a href="#painting-StrokeWidthProperty"><span class="prop-name">‘stroke-width’</span></a>
          property on a <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>.
        </p>
      </dd><dt>
        <a href="#types-DataTypeColor">&lt;color&gt;</a>
      </dt><dd>
        <p>distance(V<sub>a</sub>, V<sub>b</sub>) = sqrt((V<sub>a</sub>.red − V<sub>b</sub>.red)<sup>2</sup> + (V<sub>a</sub>.green − V<sub>b</sub>.green)<sup>2</sup> + (V<sub>a</sub>.blue − V<sub>b</sub>.blue)<sup>2</sup>), where:</p>
        <div class="vardefs">
          <div>V<sub><var>i</var></sub>.red is the red component of the V<sub><var>i</var></sub> color value,</div>
          <div>V<sub><var>i</var></sub>.green is the green component of the V<sub><var>i</var></sub> color value, and</div>
          <div>V<sub><var>i</var></sub>.blue is the blue component of the V<sub><var>i</var></sub> color value.</div>
        </div>
        <p>
          Each of the color component values is usually in the range [0, 1],
          where 0 represents none of that color component, and 1 represents
          the maximum amount of that color component, in the sRGB gamut
          [<a href="#refs-ref-SRGB">SRGB</a>].  Since
          <a href="#types-DataTypeColor">&lt;color&gt;</a> values
          may specify colors outside of the sRGB gamut, these component
          values may lie outside the range [0, 1].
        </p>
        <p>
          Example: animating the <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>
          property on an <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>.
        </p>
      </dd><dt>
        Transform definitions of type <span class="attr-value">'translate'</span>
      </dt><dd>
        <p>distance(V<sub>a</sub>, V<sub>b</sub>) = sqrt((V<sub>a</sub>.tx − V<sub>b</sub>.tx)<sup>2</sup> + (V<sub>a</sub>.ty − V<sub>b</sub>.ty)<sup>2</sup>), where:</p>
        <div class="vardefs">
          <div>V<sub><var>i</var></sub>.tx is the <var>x</var> component of the V<sub><var>i</var></sub> translation transform value, and</div>
          <div>V<sub><var>i</var></sub>.ty is the <var>y</var> component of the V<sub><var>i</var></sub> translation transform value.</div>
        </div>
        <p>
          Example (for all transform definition types): animating the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a>
          attribute on a <a href="#struct-GElement"><span class="element-name">‘g’</span></a> using <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>.
        </p>
      </dd><dt>
        Transform definitions of type <span class="attr-value">'scale'</span>
      </dt><dd>
        <p>distance(V<sub>a</sub>, V<sub>b</sub>) = sqrt((V<sub>a</sub>.sx − V<sub>b</sub>.sx)<sup>2</sup> + (V<sub>a</sub>.sy − V<sub>b</sub>.sy)<sup>2</sup>), where:</p>
        <div class="vardefs">
          <div>V<sub><var>i</var></sub>.sx is the <var>x</var> component of the V<sub><var>i</var></sub> scale transform value, and</div>
          <div>V<sub><var>i</var></sub>.sy is the <var>y</var> component of the V<sub><var>i</var></sub> scale transform value.</div>
        </div>
        <p>
          Note that, as when specifying scale transformations in a
          <a href="#types-DataTypeTransformList">&lt;transform-list&gt;</a>, if the
          <var>y</var> component of the scale is omitted it is implicitly equal
          to the <var>x</var> component.
        </p>
      </dd><dt>
        Transform definitions of type <span class="attr-value">'rotate'</span>, <span class="attr-value">'skewX'</span> and <span class="attr-value">'skewY'</span>
      </dt><dd>
        <p>distance(V<sub>a</sub>, V<sub>b</sub>) = sqrt((V<sub>a</sub>.angle − V<sub>b</sub>.angle)<sup>2</sup>), where:</p>
        <div class="vardefs">
          <div>
            V<sub><var>i</var></sub>.angle is the angle component of the
            V<sub><var>i</var></sub> rotation or skew transform value.
          </div>
        </div>
        <p>
          Since the distance function for rotations is not in terms of the
          rotation center point components, a paced animation that changes
          the rotation center point may not appear to have a paced
          movement when the animation is applied.
        </p>
      </dd></dl>

    <p>
      Distance functions for all other data types are not defined.
      If <span class="attr-value">calcMode="paced"</span> is used on an
      animation of an attribute or property whose type is not one of
      those listed above, the animation effect is undefined.
      <a href="#intro-TermSVGUserAgent"><span class="svg-term">SVG user agents</span></a> may choose to
      perform the animation as if <span class="attr-value">calcMode="linear"</span>,
      but this is not required.  Authors are recommended not to specify
      paced animation on types not listed above.
    </p>


<h3 id="animate-TimingAttributes">19.2.8 Attributes to control the timing of the animation</h3>

<p>The following attributes are the <span class="SVG-TermDefine">animation timing attributes</span>.
They are common to all animation elements and control the timing of the animation,
including what causes the animation to start and end, whether the
animation runs repeatedly, and whether to retain the end state
the animation once the animation ends.</p>

    <p id="animate-optWSP">In the syntax specifications that follow, optional white
    space is indicated as "S", defined as follows:</p>
<pre>
S ::= (#x20 | #x9 | #xD | #xA)*
</pre>
    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="animate-BeginAttribute"><span class="adef">begin</span> =
        "<span class="attr-value"><a href="#animate-BeginValueListSyntax">begin-value-list</a></span>"</dt><dd>
          <p>Defines when the element should begin (i.e. become
          active).</p>
          <p>The attribute value is a semicolon separated list of
          values.</p>
           
          <dl><dt id="animate-BeginValueListSyntax">begin-value-list ::= <a href="#animate-BeginValueSyntax">begin-value</a> (S? ";" S?
            begin-value-list )?</dt><dd>A semicolon separated list of begin values. The
            interpretation of a list of begin times is detailed in
            SMIL Animation's section on <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#Timing-EvaluationOfBeginEndTimeLists">
            "Evaluation of begin and end time lists"</a>.</dd><dt id="animate-BeginValueSyntax">begin-value ::= ( <a href="#animate-OffsetValueSyntax">offset-value</a> | <a href="#animate-SyncbaseValueSyntax">syncbase-value</a> | <a href="#animate-EventValueSyntax">event-value</a> | <a href="#animate-RepeatValueSyntax">repeat-value</a> | <a href="#animate-AccessKeyValueSyntax">accessKey-value</a> | <a href="#animate-WallclockSyncValueSyntax">wallclock-sync-value</a>
            | <a href="#animate-IndefiniteValue">"indefinite"</a> )</dt><dd>Describes the element begin.</dd><dt id="animate-OffsetValueSyntax">offset-value ::= ( S? "+" |
            "-" S? )? ( <a href="#animate-ClockValueSyntax">Clock-value</a>
            )</dt><dd>For SMIL Animation, this describes the element
            begin as an offset from an implicit syncbase. For SVG,
            the implicit syncbase begin is defined to be relative
            to the document begin. Negative begin times are
            entirely valid and easy to compute, as long as there is
            a resolved document begin time.</dd><dt id="animate-SyncbaseValueSyntax">syncbase-value ::= (
            Id-value "." ( "begin" | "end" ) ) ( S? ("+"|"-") S? <a href="#animate-ClockValueSyntax">Clock-value</a>
            )?</dt><dd>Describes a <span class="SVG-Term">syncbase</span>
            and an optional offset from that syncbase. The element
            begin is defined relative to the begin or active end of
            another animation. A <span class="SVG-Term">syncbase</span> consists of an ID
            reference to another animation element followed by
            either <code>begin</code> or <code>end</code> to
            identify whether to synchronize with the beginning or
            active end of the referenced animation element.</dd><dt id="animate-EventValueSyntax">event-value ::= ( Id-value
            "." )? ( event-ref ) ( S? ("+"|"-") S? <a href="#animate-ClockValueSyntax">Clock-value</a>
            )?</dt><dd>Describes an event and an optional offset that
            determine the element begin. The animation begin is
            defined relative to the time that the event is raised.
            The list of event-symbols available for a given
            event-base element is the list of event attributes
            available for the given element as defined by the <a href="#chapter-svgdtd">SVG DTD</a>, with the one difference
            that the leading 'on' is removed from the event name
            (i.e., the animation event name is 'click', not
            'onclick'). A list of all events supported by SVG can
            be found in <a href="#interact-SVGEvents">Complete
            list of supported events</a>. Details of event-based
            timing are described in <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#Unifying">
            SMIL Animation: Unifying Event-based and Scheduled
            Timing</a>.</dd><dt id="animate-RepeatValueSyntax">repeat-value ::= ( Id-value
            "." )? "repeat(" integer ")" ( S? ("+"|"-") S? <a href="#animate-ClockValueSyntax">Clock-value</a>
            )?</dt><dd>Describes a qualified repeat event. The element
            begin is defined relative to the time that the repeat
            event is raised with the specified iteration
            value.</dd><dt id="animate-AccessKeyValueSyntax">accessKey-value ::=
            "accessKey(" character ")" ( S? ("+"|"-") S? <a href="#animate-ClockValueSyntax">Clock-value</a>
            )?</dt><dd>Describes an accessKey that determines the element
            begin. The element begin is defined relative to the
            time that the accessKey character is input by the
            user.</dd><dt id="animate-WallclockSyncValueSyntax">wallclock-sync-value ::= "wallclock(" wallclock-value
            ")"</dt><dd>Describes the element begin as a real-world clock
            time. The wallclock time syntax is based upon syntax
            defined in <cite>Representation of dates and times</cite>
            [<a href="#refs-ref-ISO8601">ISO8601</a>].</dd><dt id="animate-IndefiniteValue">"indefinite"</dt><dd><p>The begin of the animation will be determined by a
            "beginElement()" method call or a hyperlink targeted to
            the element.</p>
            <p>The animation DOM methods are described in <a href="#animate-DOMInterfaces">DOM interfaces</a>.</p>
            <p>Hyperlink-based timing is described in <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#HyperlinkSemantics">
            SMIL Animation: Hyperlinks and timing</a>.</p></dd></dl>
          <p>Except for any SVG-specific rules explicitly mentioned in
          this specification, the normative definition for this
          attribute is the <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a>
          specification.
          In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#SpecifyingAnimationTarget">
          SMIL Animation: 'begin' attribute</a>
          ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.2.1).</p>
        </dd><dt id="animate-DurAttribute"><span class="adef">dur</span> =
        <span class="attr-value"><a href="#animate-ClockValueSyntax">Clock-value</a> | "media" | "indefinite"</span></dt><dd>
          <p>Specifies the simple duration.</p>
          <p>The attribute value can be one of the following:</p>
          <dl><dt><a href="#animate-ClockValueSyntax">Clock-value</a></dt><dd>Specifies the length of the simple duration in <a href="#animate-PresentationTime">presentation time</a>. Value
            must be greater than 0.</dd><dt>"media"</dt><dd>Specifies the simple duration as the intrinsic
            media duration. This is only valid for elements that
            define media.<br />
             (For SVG's <a href="#animate-AnimationElements">animation elements</a>, if <span class="attr-value">'media'</span> is specified, the
            attribute will be ignored.)</dd><dt>"indefinite"</dt><dd>Specifies the simple duration as indefinite.</dd></dl>
          <p>If the animation does not have a <a href="#animate-DurAttribute"><span class="attr-name">‘dur’</span></a> attribute, the simple
          duration is indefinite. Note that interpolation will not
          work if the simple duration is indefinite (although this
          may still be useful for <a href="#animate-SetElement"><span class="element-name">‘set’</span></a> elements). Except
          for any SVG-specific rules explicitly mentioned in this
          specification, the normative definition for this
          attribute is the <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a>
          specification.
          In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#DurAttribute">
          SMIL Animation: 'dur' attribute</a>
          ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.2.1).</p>
        </dd><dt id="animate-EndAttribute"><span class="adef">end</span> = "<span class="attr-value"><a href="#animate-EndValueListSyntax">end-value-list</a></span>"</dt><dd>
          <p>Defines an end value for the animation that can constrain
          the active duration. The attribute value is a semicolon
          separated list of values.</p>
           
          <dl><dt id="animate-EndValueListSyntax">end-value-list ::= <a href="#animate-EndValueSyntax">end-value</a> (S? ";" S?
            end-value-list )?</dt><dd>A semicolon separated list of end values. The
            interpretation of a list of end times is detailed
            below.</dd></dl>
           
          <dl><dt id="animate-EndValueSyntax">end-value ::= ( <a href="#animate-OffsetValueSyntax">offset-value</a> | <a href="#animate-SyncbaseValueSyntax">syncbase-value</a> | <a href="#animate-EventValueSyntax">event-value</a> | <a href="#animate-RepeatValueSyntax">repeat-value</a> | <a href="#animate-AccessKeyValueSyntax">accessKey-value</a> | <a href="#animate-WallclockSyncValueSyntax">wallclock-sync-value</a>
            | "indefinite" )</dt><dd>Describes the active end of the animation.</dd></dl>
          <p>A value of <span class="attr-value">'indefinite'</span>
          specifies that the end of the animation will be
          determined by an <a class="idlattr" href="#animate-__smil__ElementTimeControl__endElement">endElement</a> method call (the animation
          DOM methods are described in <a href="#animate-DOMInterfaces">DOM
          interfaces</a>).</p>
          <p>Except for any SVG-specific rules explicitly mentioned
          in this specification, the normative definition for this
          attribute is the <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a>
          specification.
          In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#EndActiveAttribute">
          SMIL Animation: 'end' attribute</a>
          ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.3.2).</p>
        </dd><dt id="animate-MinAttribute"><span class="adef">min</span> = <span class="attr-value"><a href="#animate-ClockValueSyntax">Clock-value</a> | "media"</span></dt><dd>
          <p>Specifies the minimum value of the active duration.</p>
          <p>The attribute value can be either of the following:</p>
          <dl><dt><a href="#animate-ClockValueSyntax">Clock-value</a></dt><dd><p>Specifies the length of the minimum value of the
            active duration, measured in local time.</p>
            <p>Value must be greater than 0.</p></dd><dt>"media"</dt><dd>Specifies the minimum value of the active duration
            as the intrinsic media duration. This is only valid for
            elements that define media. (For SVG's <a href="#animate-AnimationElements">animation elements</a>,
            if <span class="attr-value">'media'</span> is specified, the
            attribute will be ignored.)</dd></dl>
          <p>The default value for <a href="#animate-MinAttribute"><span class="attr-name">‘min’</span></a>
          is <span class="attr-value">'0'</span>. This does not constrain the active duration at
          all.</p>
          <p>Except for any SVG-specific rules explicitly mentioned
          in this specification, the normative definition for this
          attribute is the
          <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
          In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#MinMax">SMIL Animation: 'min' attribute</a>
          ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.3.3).</p>
        </dd><dt id="animate-MaxAttribute"><span class="adef">max</span> = <span class="attr-value"><a href="#animate-ClockValueSyntax">Clock-value</a> | "media"</span></dt><dd>
          <p>Specifies the maximum value of the active duration.</p>
          <p>The attribute value can be either of the following:</p>
          <dl><dt><a href="#animate-ClockValueSyntax">Clock-value</a></dt><dd><p>Specifies the length of the maximum value of the
            active duration, measured in local time.</p>
            <p>Value must be greater than 0.</p></dd><dt>"media"</dt><dd>Specifies the maximum value of the active duration
            as the intrinsic media duration. This is only valid for
            elements that define media. (For SVG's
            <a href="#animate-AnimationElements">animation elements</a>, if <span class="attr-value">'media'</span> is specified, the
            attribute will be ignored.)</dd></dl>
          <p>There is no default value for <a href="#animate-MaxAttribute"><span class="attr-name">‘max’</span></a>. This does not constrain the
          active duration at all.</p>
          <p>Except for any SVG-specific rules explicitly mentioned
          in this specification, the normative definition for this
          attribute is the
          <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
          In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#MinMax">SMIL Animation: 'max' attribute</a>
          ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.3.3).</p>
        </dd><dt id="animate-RestartAttribute"><span class="adef">restart</span> =
        <span class="attr-value">"always" | "whenNotActive" | "never"</span></dt><dd>
          <dl><dt><span class="attr-value">always</span></dt><dd>The animation can be restarted at any
            time. <br />
             This is the default value.</dd><dt><span class="attr-value">whenNotActive</span></dt><dd>The animation can only be restarted when it is not
            active (i.e. after the active end). Attempts to restart
            the animation during its active duration are
            ignored.</dd><dt><span class="attr-value">never</span></dt><dd>The element cannot be restarted for the remainder
            of the current simple duration of the parent time
            container. (In the case of SVG, since the parent time
            container is the SVG document fragment, then the
            animation cannot be restarted for the remainder of the
            document duration.)</dd></dl>
          <p>Except for any SVG-specific rules explicitly mentioned in
          this specification, the normative definition for this
          attribute is the
          <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
          In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#RestartAttribute">SMIL Animation: 'restart' attribute</a>
          ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.3.7).</p>
        </dd><dt id="animate-RepeatCountAttribute"><span class="adef">repeatCount</span> =
        <span class="attr-value">numeric value | "indefinite"</span></dt><dd>
          <p>Specifies the number of iterations of the animation
          function. It can have the following attribute values:</p>
          <dl><dt>numeric value</dt><dd>This is a (base 10) "floating point" numeric value
            that specifies the number of iterations. It can include
            partial iterations expressed as fraction values. A
            fractional value describes a portion of the <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#SpecifyingAnimationFunction">
            simple duration</a>. Values must be greater than
            0.</dd><dt>"indefinite"</dt><dd>The animation is defined to repeat indefinitely
            (i.e. until the document ends).</dd></dl>
          <p>Except for any SVG-specific rules explicitly mentioned in
          this specification, the normative definition for this
          attribute is the
          <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
          In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#RepeatCountAttribute">SMIL Animation: 'repeatCount' attribute</a>
          ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.3.1).</p>
        </dd><dt id="animate-RepeatDurAttribute"><span class="adef">repeatDur</span> =
        <span class="attr-value"><a href="#animate-ClockValueSyntax">Clock-value</a> |
        "indefinite"</span></dt><dd>
          <p>Specifies the total duration for repeat. It can have the
          following attribute values:</p>
          <dl><dt><a href="#animate-ClockValueSyntax">Clock-value</a></dt><dd>Specifies the duration in <a href="#animate-PresentationTime">presentation time</a> to
            repeat the animation function
            <code><strong>f(t)</strong></code>.</dd><dt>"indefinite"</dt><dd>The animation is defined to repeat indefinitely
            (i.e. until the document ends).</dd></dl>
          <p>Except for any SVG-specific rules explicitly mentioned in
          this specification, the normative definition for this
          attribute is the
          <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
          In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#RepeatDurAttribute">SMIL Animation: 'repeatDur' attribute</a>
          ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.3.1).</p>
        </dd><dt id="animate-FillAttribute"><span class="adef">fill</span> =
        <span class="attr-value">"freeze" | "remove"</span></dt><dd>
          <p>This attribute can have the following values:</p>
          <dl><dt><span class="attr-value">freeze</span></dt><dd>The animation effect <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#AnimationModel">
            F(t)</a> is defined to freeze the effect value at the
            last value of the active duration. The animation effect
            is "frozen" for the remainder of the document duration
            (or until the animation is restarted - see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#Restart">
            SMIL Animation: Restarting animation</a>).</dd><dt><span class="attr-value">remove</span></dt><dd><p>The animation effect is removed (no longer applied)
            when the active duration of the animation is over.
            After the active end of the animation, the animation no
            longer affects the target (unless the animation is
            restarted - see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#Restart">
            SMIL Animation: Restarting animation</a>).</p>
            <p>This is the default value.</p></dd></dl>
          <p>Except for any SVG-specific rules explicitly mentioned in
          this specification, the normative definition for this
          attribute is the
          <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
          In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#FillAttribute">SMIL Animation: 'fill' attribute</a>
          ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.3.5).</p>
        </dd></dl>

      <p>The <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification [<a href="#refs-ref-SMILANIM">SMILANIM</a>]
      defines the detailed processing
      rules associated with the above attributes. Except for any
      SVG-specific rules explicitly mentioned in this
      specification, the SMIL Animation specification is the normative definition of
      the processing rules for the above attributes.</p>
    </div>

<h4 id="animate-ClockValueSyntax">19.2.8.1 Clock values</h4>

<p>Clock values have the same syntax as in
<a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a>
specification [<a href="#refs-ref-SMILANIM">SMILANIM</a>]. The grammar for
clock values is repeated here:</p>

<pre>
Clock-val         ::= Full-clock-val | Partial-clock-val 
                      | Timecount-val
Full-clock-val    ::= Hours ":" Minutes ":" Seconds ("." Fraction)?
Partial-clock-val ::= Minutes ":" Seconds ("." Fraction)?
Timecount-val     ::= Timecount ("." Fraction)? (Metric)?
Metric            ::= "h" | "min" | "s" | "ms"
Hours             ::= DIGIT+; any positive number
Minutes           ::= 2DIGIT; range from 00 to 59
Seconds           ::= 2DIGIT; range from 00 to 59
Fraction          ::= DIGIT+
Timecount         ::= DIGIT+
2DIGIT            ::= DIGIT DIGIT
DIGIT             ::= [0-9]
</pre>
    <p>For Timecount values, the default metric suffix is "s" (for
    seconds). No embedded white space is allowed in clock values,
    although leading and trailing white space characters will be
    ignored.</p>
    <p>Clock values describe <a href="#animate-PresentationTime">presentation time</a>.</p>
    <p>The following are examples of legal clock values:</p>
    <ul><li>Full clock values: <code><br />
         02:30:03   </code> = 2 hours, 30
      minutes and 3 seconds<br />
       <code>  50:00:10.25</code> = 50 hours, 10 seconds and
      250 milliseconds</li><li>Partial clock value: <code><br />
         02:33  </code> = 2 minutes and 33
      seconds<br />
       <code>  00:10.5</code> = 10.5 seconds = 10 seconds and
      500 milliseconds</li><li>Timecount values:<br />
       <code>  3.2h   </code> = 3.2 hours = 3
      hours and 12 minutes<br />
       <code>  45min  </code> = 45 minutes<br />
       <code>  30s    </code> = 30
      seconds<br />
       <code>  5ms    </code> = 5
      milliseconds<br />
       <code>  12.467 </code> = 12 seconds and 467
      milliseconds</li></ul>
    <p>Fractional values are just (base 10) floating point
    definitions of seconds. Thus:</p>
    <p><code>00.5s = 500 milliseconds<br />
     00:00.005 = 5 milliseconds</code></p>

<h3 id="animate-ValueAttributes">19.2.9 Attributes that define animation values over time</h3>

<p>The following attributes are the <span class="SVG-TermDefine">animation value attributes</span>.
They are common to elements <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a> and <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>. These
attributes define the values that are assigned to the target
attribute or property over time. The attributes below provide
control over the relative timing of keyframes and the
interpolation method between discrete values.</p>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="animate-CalcModeAttribute"><span class="adef">calcMode</span> =
        <span class="attr-value">"discrete | linear | paced | spline"</span></dt><dd>
          <p>Specifies the interpolation mode for the animation. This
          can take any of the following values. The default mode is
          <span class="attr-value">'linear'</span>, however if the attribute does not support
          linear interpolation (e.g. for strings), the
          <a href="#animate-CalcModeAttribute"><span class="attr-name">‘calcMode’</span></a> attribute is ignored and discrete
          interpolation is used.</p>
          <dl><dt><span class="attr-value">discrete</span></dt><dd>This specifies that the animation function will
            jump from one value to the next without any
            interpolation.</dd><dt><span class="attr-value">linear</span></dt><dd>Simple linear interpolation between values is used
            to calculate the animation function. Except for <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, this
            is the default <a href="#animate-CalcModeAttribute"><span class="attr-name">‘calcMode’</span></a>.</dd><dt><span class="attr-value">paced</span></dt><dd>
            Defines interpolation to produce an even pace of
            change across the animation. This is only supported for the
            data types for which there is an appropriate distance function
            defined, which includes only scalar numeric types plus the
            types listed in <a href="#animate-complexDistances">Paced animation and complex types</a>.
            If <span class="attr-value">'paced'</span> is specified, any
            <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a> or <a href="#animate-KeySplinesAttribute"><span class="attr-name">‘keySplines’</span></a> will
            be ignored. For <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, this
            is the default <a href="#animate-CalcModeAttribute"><span class="attr-name">‘calcMode’</span></a>.
            Authors are discouraged from using paced animation on types
            that do not have a distance function defined, due to its
            unpredictable behavior in some user agents.</dd><dt><span class="attr-value">spline</span></dt><dd>Interpolates from one value in the
            <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a> list to the next according to a
            time function defined by a cubic Bézier spline.
            The points of the spline are defined in the
            <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a> attribute, and the control points
            for each interval are defined in the
            <a href="#animate-KeySplinesAttribute"><span class="attr-name">‘keySplines’</span></a> attribute.</dd></dl>
          <p>Except for any SVG-specific rules explicitly mentioned in
          this specification, the normative definition for this
          attribute is the
          <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
          In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#CalcModeAttribute">SMIL Animation: 'calcMode' attribute</a>
          ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.2.3).</p>
        </dd><dt id="animate-ValuesAttribute"><span class="adef">values</span> =
        <span class="attr-value">"&lt;list&gt;"</span></dt><dd>A semicolon-separated list of one or more values.
        Vector-valued attributes are supported using the vector
        syntax of the <a href="#animate-AttributeTypeAttribute"><span class="attr-name">‘attributeType’</span></a> domain. Per the SMIL
        specification, leading and trailing white space,
        and white space before and after semicolon separators,
        is allowed and will be ignored.  Except for
        any SVG-specific rules explicitly mentioned in this
        specification, the normative definition for this attribute
        is the
        <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
        In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#ValuesAttribute">SMIL Animation: 'values' attribute</a>
        ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.2.2).</dd><dt id="animate-KeyTimesAttribute"><span class="adef">keyTimes</span> =
        <span class="attr-value">"&lt;list&gt;"</span></dt><dd>
          <p>A semicolon-separated list of time values used to control
          the pacing of the animation. Each time in the list
          corresponds to a value in the <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a>
          attribute list, and defines when the value is used in the
          animation function. Each time value in the
          <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a> list is specified as a floating
          point value between 0 and 1 (inclusive), representing a
          proportional offset into the simple duration of the
          animation element.</p>

          <p>For animations specified with a <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a> list, the
          <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a> attribute if specified must have exactly as many
          values as there are in the <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a> attribute. For from/to/by
          animations, the <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a> attribute if specified must have
          two values.</p>

          <p>Each successive time value must be greater than or equal
          to the preceding time value.</p>
           
          <p>The <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a> list semantics depends upon
          the interpolation mode:</p>
          <ul><li>For linear and spline animation, the first
            time value in the list must be 0, and the last time
            value in the list must be 1. The key time
            associated with each value defines when the value is
            set; values are interpolated between the key times.</li><li>For discrete animation, the first time value in the
            list must be 0. The time associated with each value
            defines when the value is set; the animation function
            uses that value until the next time defined in
            <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a>.</li></ul>
          <p>If the interpolation mode is <span class="attr-value">'paced'</span>, the
          <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a> attribute is ignored.</p>

          <p>If there are any errors in the <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a>
          specification (bad values, too many or too few values),
          the document fragment is in error (see <a href="#implnote-ErrorProcessing">error
          processing</a>).</p>

          <p>If the simple duration is indefinite, any
          <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a> specification will be
          ignored.</p>
          
          <p>
            Because paced animation interpolation is unspecified for some
            value types, authors are encouraged to use
            <span class="attr-value">'linear'</span> animation interpolation with
            calculated <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a>
            to achieve particular interpolation behavior for these types.
          </p>

          <p>Except for any SVG-specific rules explicitly mentioned
          in this specification, the normative definition for this
          attribute is the
          <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
          In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#KeyTimesAttribute">SMIL Animation: 'keyTimes' attribute</a>
          ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.2.3).</p>
        </dd><dt id="animate-KeySplinesAttribute"><span class="adef">keySplines</span> =
        <span class="attr-value">"&lt;list&gt;"</span></dt><dd><p>A set of Bézier control points associated with
        the <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a> list, defining a cubic
        Bézier function that controls interval pacing. The
        attribute value is a semicolon-separated list of control
        point descriptions. Each control point description is a set
        of four values: <code>x1 y1 x2 y2</code>, describing the
        Bézier control points for one time segment. Note:
        <a href="http://www.w3.org/TR/2008/REC-SMIL3-20081201/smil-animation.html#adef-keySplines">SMIL</a>
        allows these values to be separated either by commas with 
        optional whitespace, or by whitespace alone.  The
        <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a> values that define the associated
        segment are the Bézier "anchor points", and the
        <a href="#animate-KeySplinesAttribute"><span class="attr-name">‘keySplines’</span></a> values are the control points.
        Thus, there must be one fewer sets of control points than
        there are <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a>.</p>

        <p>The values must all be in the range 0 to 1.</p>

        <p>This attribute is ignored unless the <a href="#animate-CalcModeAttribute"><span class="attr-name">‘calcMode’</span></a>
        is set to <span class="attr-value">'spline'</span>.</p>

        <p>If there are any errors in the <a href="#animate-KeySplinesAttribute"><span class="attr-name">‘keySplines’</span></a>
        specification (bad values, too many or too few values), the
        document fragment is in error (see <a href="#implnote-ErrorProcessing">error
        processing</a>).</p>

        <p>Except for any SVG-specific rules explicitly mentioned in
        this specification, the normative definition for this
        attribute is the
        <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
        In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#KeySplinesAttribute">SMIL Animation: 'keySplines' attribute</a>
        ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.2.3).</p></dd><dt id="animate-FromAttribute"><span class="adef">from</span> =
        <span class="attr-value">"&lt;value&gt;"</span></dt><dd>Specifies the starting value of the animation.<br />
         Except for any SVG-specific rules explicitly mentioned in
        this specification, the normative definition for this
        attribute is the
        <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
        In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#FromAttribute">SMIL Animation: 'from' attribute</a>
        ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.2.2).</dd><dt id="animate-ToAttribute"><span class="adef">to</span> =
        <span class="attr-value">"&lt;value&gt;"</span></dt><dd>Specifies the ending value of the animation.<br />
         Except for any SVG-specific rules explicitly mentioned in
        this specification, the normative definition for this
        attribute is the
        <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
        In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#ToAttribute">SMIL Animation: 'to' attribute</a>
        ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.2.2).</dd><dt id="animate-ByAttribute"><span class="adef">by</span> =
        <span class="attr-value">"&lt;value&gt;"</span></dt><dd>Specifies a relative offset value for the
        animation.<br />
         Except for any SVG-specific rules explicitly mentioned in
        this specification, the normative definition for this
        attribute is the
        <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
        In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#ByAttribute">SMIL Animation: 'by' attribute</a>
        ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.2.2).</dd></dl>

      <p>The <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification [<a href="#refs-ref-SMILANIM">SMILANIM</a>]
      defines the detailed processing
      rules associated with the above attributes. Except for any
      SVG-specific rules explicitly mentioned in this
      specification, the SMIL Animation specification is the normative definition of
      the processing rules for the above attributes.</p>
      <p>The animation values specified in the animation element
      must be legal values for the specified attribute. Leading and
      trailing white space, and white space before and after
      semicolon separators, will be ignored.</p>
      <p>All values specified must be legal values for the
      specified attribute (as defined in the associated namespace).
      If any values are not legal, the document fragment is in
      error (see <a href="#implnote-ErrorProcessing">error
      processing</a>).</p>
      <p>If a list of values is used, the animation will apply the
      values in order over the course of the animation. If a list
      of <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a> is specified, any <a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a>,
      <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a> and <a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a> attribute values are ignored.</p>
      <p>The processing rules for the variants of
      <em>from/by/to</em> animations are described in <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#AnimFuncValues">
      Animation function values</a> with the following exception.</p>
      <p>In order to provide behavior that is intuitive and consistent
      between discrete animations with an explicitly specified
      <a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a> attribute (e.g. "from-to animation") and those
      where the underlying value is used (e.g. "to animation"), the
      behavior of discrete to-animation in SVG deviates from the
      definition in SMIL Animation.
      As with a discrete from-to animation, a discrete to animation
      will set the underlying value for the first half of the simple
      duration (or, if a <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a> list is provided, until the
      simple duration specified by the second value in the <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a>
      list) and the <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a> value for the remainder of the simple
      duration.</p>
      <p>The following figure illustrates the interpretation of the
      <a href="#animate-KeySplinesAttribute"><span class="attr-name">‘keySplines’</span></a> attribute. Each diagram illustrates
      the effect of <a href="#animate-KeySplinesAttribute"><span class="attr-name">‘keySplines’</span></a> settings for a single
      interval (i.e. between the associated pairs of values in the
      <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a> and <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a> lists.). The
      horizontal axis can be thought of as the input value for the
      <em>unit progress</em> of interpolation within the interval -
      i.e. the pace with which interpolation proceeds along the
      given interval. The vertical axis is the resulting value for
      the <em>unit progress</em>, yielded by the function that
      the <a href="#animate-KeySplinesAttribute"><span class="attr-name">‘keySplines’</span></a> attribute defines.
       Another way of describing
      this is that the horizontal axis is the input <em>unit
      time</em> for the interval, and the vertical axis is the
      output <em>unit time</em>. See also the section <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#TimingAndRealWorldClockTime">
      Timing and real-world clock times</a>.</p>
      <table summary="examples of keySplines"><caption align="bottom">
          Examples of <span class="attr-name">keySplines</span>
        </caption><tr><td width="10"> </td><td width="172"><img width="172" height="174" alt="Example keySplines01 - keySplines of 0 0 1 1 (the default)" src="images/animate/keySplines01.png" /> <span class="table-heading-1">keySplines="0 0 1 1"
          (the default)</span></td><td width="20"> </td><td width="172"><img width="172" height="174" alt="Example keySplines01 - keySplines of .5 0 .5 1" src="images/animate/keySplines02.png" /> <span class="table-heading-1">keySplines=".5 0 .5 1"<br />
            </span></td></tr><tr><td width="10"> </td><td width="172"><img width="172" height="174" alt="Example keySplines01 - keySplines of 0 .75 .25 1" src="images/animate/keySplines03.png" /> <span class="table-heading-1">keySplines="0 .75 .25 1"</span></td><td width="20"> </td><td width="172"><img width="172" height="174" alt="Example keySplines01 - keySplines of 1 0 .25 .25" src="images/animate/keySplines04.png" /> <span class="table-heading-1">keySplines="1 0 .25 .25"</span></td></tr></table>
      <p>To illustrate the calculations, consider the simple
      example:</p>
<pre>
&lt;animate dur="4s" values="10; 20" keyTimes="0; 1"
     calcMode="spline" <strong>keySplines</strong>=<em>{as in table}</em> /&gt;
</pre>
      <p>Using the <a href="#animate-KeySplinesAttribute"><span class="attr-name">‘keySplines’</span></a> values for each of the four cases
      above, the approximate interpolated values as the animation
      proceeds are:</p>
      <table class="vert" summary="keySplines values"><tbody><tr><th>Value of <span class="attr-name">‘keySplines’</span></th><th>Initial value</th><th>After 1s</th><th>After 2s</th><th>After 3s</th><th>Final value</th></tr><tr><td>0 0 1 1</td><td>10.0</td><td>12.5</td><td>15.0</td><td>17.5</td><td>20.0</td></tr><tr><td>.5 0 .5 1</td><td>10.0</td><td>11.0</td><td>15.0</td><td>19.0</td><td>20.0</td></tr><tr><td>0 .75 .25 1</td><td>10.0</td><td>18.0</td><td>19.3</td><td>19.8</td><td>20.0</td></tr><tr><td>1 0 .25 .25</td><td>10.0</td><td>10.1</td><td>10.6</td><td>16.9</td><td>20.0</td></tr></tbody></table>
      <p>For a formal definition of Bézier spline
      calculation, see [<a href="#refs-ref-FOLEY-VANDAM">FOLEY-VANDAM</a>], pp. 488-491.</p>
    </div>

<h3 id="animate-AdditionAttributes">19.2.10 Attributes that control whether animations are additive</h3>

    <p>It is frequently useful to define animation as an offset or
    delta to an attribute's value, rather than as absolute values.
    A simple "grow" animation can increase the width of an object
    by 10 pixels:</p>
<pre>
&lt;rect width="20px" ...&gt;
  &lt;animate attributeName="width" from="0px" to="10px" dur="10s"
           additive="sum"/&gt;
&lt;/rect&gt;
</pre>
    <p>It is frequently useful for repeated animations to build
    upon the previous results, accumulating with each interation.
    The following example causes the rectangle to continue to grow
    with each repeat of the animation:</p>
<pre>
&lt;rect width="20px" ...&gt;
  &lt;animate attributeName="width" from="0px" to="10px" dur="10s"
           additive="sum" accumulate="sum" repeatCount="5"/&gt;
&lt;/rect&gt;
</pre>
    <p>At the end of the first repetition, the rectangle has a
    width of 30 pixels. At the end of the second repetition, the
    rectangle has a width of 40 pixels. At the end of the fifth
    repetition, the rectangle has a width of 70 pixels.</p>
    <p>For more information about additive animations, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#AdditiveAnim">
    SMIL Animation: Additive animation</a>. For more information on
    cumulative animations, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#Accumulate">
    SMIL Animation: Controlling behavior of repeating animation -
    Cumulative animation</a>.</p>
    <p>The following attributes are the <span class="SVG-TermDefine">animation addition attributes</span>,
    which are common to elements <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a> and <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>.</p>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="animate-AdditiveAttribute"><span class="adef">additive</span> =
        <span class="attr-value">"replace | sum"</span></dt><dd>
          <p>Controls whether or not the animation is
          additive.</p>
           
          <dl><dt><span class="attr-value">sum</span></dt><dd>Specifies that the animation will add to the
            underlying value of the attribute and other lower
            priority animations.</dd><dt><span class="attr-value">replace</span></dt><dd>Specifies that the animation will override the
            underlying value of the attribute and other lower
            priority animations. This is the default, however the
            behavior is also affected by the animation value
            attributes <a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a> and <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a>, as described in <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#FromToByAndAdditive">
            SMIL Animation: How from, to and by attributes affect
            additive behavior</a>.</dd></dl>
          <p>Except for any SVG-specific rules explicitly mentioned
          in this specification, the normative definition for this
          attribute is the
          <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
          In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#AdditiveAttribute">SMIL Animation: 'additive' attribute</a>
          ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.3.6).</p>
        </dd><dt id="animate-AccumulateAttribute"><span class="adef">accumulate</span> =
        <span class="attr-value">"none | sum"</span></dt><dd>
          <p>Controls whether or not the animation is
          cumulative.</p>
           
          <dl><dt><span class="attr-value">sum</span></dt><dd>Specifies that each repeat iteration after the
            first builds upon the last value of the previous
            iteration.</dd><dt><span class="attr-value">none</span></dt><dd>Specifies that repeat iterations are not
            cumulative. This is the default.</dd></dl>

          <p>This attribute is ignored if the target attribute value
          does not support addition, or if the animation element
          does not repeat.</p>

          <p>Cumulative animation is not defined for "<em>to
          animation</em>".</p>

          <p>This attribute will be ignored if the animation function
          is specified with only the <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a>
          attribute.</p>

          <p>Except for any SVG-specific rules explicitly mentioned
          in this specification, the normative definition for this
          attribute is the
          <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
          In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#AccumulateAttribute">SMIL Animation: 'accumulate' attribute</a>
          ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.3.1).</p>
        </dd></dl>
    </div>



<h3 id="animate-Inheritance">19.2.11 Inheritance</h3>

    <p>SVG allows both attributes and properties to be animated. If
    a given attribute or property is inheritable by descendants,
    then animations on a parent element such as a <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element has the effect of
    propagating the attribute or property animation values to
    descendant elements as the animation proceeds; thus, descendant
    elements can inherit animated attributes and properties from
    their ancestors.</p>

<h3 id="animate-AnimateElement">19.2.12 The <span class="element-name">‘animate’</span> element</h3>



    <p>The <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a> element is
    used to animate a single attribute or property over time. For
    example, to make a rectangle repeatedly fade away over 5
    seconds, you can specify:</p>

<pre>
&lt;rect&gt;
  &lt;animate attributeType="CSS" attributeName="opacity" 
         from="1" to="0" dur="5s" repeatCount="indefinite" /&gt;
&lt;/rect&gt;
</pre>

<p>Except for any SVG-specific rules explicitly mentioned in this
specification, the normative definition for this element is the
<a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#animateElement">SMIL Animation: 'animate' element</a>
([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 4.1).</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘animate’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermAnimationElement">Animation element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermAnimationEventAttribute">animation event attributes</a><span class="expanding"> — <a href="#script-OnBeginEventAttribute"><span class="attr-name">‘onbegin’</span></a>, <a href="#script-OnEndEventAttribute"><span class="attr-name">‘onend’</span></a>, <a href="#script-OnRepeatEventAttribute"><span class="attr-name">‘onrepeat’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#animate-HrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#animate-TargetAttributes">animation attribute target attributes</a><span class="expanding"> — <a href="#animate-AttributeTypeAttribute"><span class="attr-name">‘attributeType’</span></a>, <a href="#animate-AttributeNameAttribute"><span class="attr-name">‘attributeName’</span></a></span></li><li><a href="#animate-TimingAttributes">animation timing attributes</a><span class="expanding"> — <a href="#animate-BeginAttribute"><span class="attr-name">‘begin’</span></a>, <a href="#animate-DurAttribute"><span class="attr-name">‘dur’</span></a>, <a href="#animate-EndAttribute"><span class="attr-name">‘end’</span></a>, <a href="#animate-MinAttribute"><span class="attr-name">‘min’</span></a>, <a href="#animate-MaxAttribute"><span class="attr-name">‘max’</span></a>, <a href="#animate-RestartAttribute"><span class="attr-name">‘restart’</span></a>, <a href="#animate-RepeatCountAttribute"><span class="attr-name">‘repeatCount’</span></a>, <a href="#animate-RepeatDurAttribute"><span class="attr-name">‘repeatDur’</span></a>, <a href="#animate-FillAttribute"><span class="attr-name">‘fill’</span></a></span></li><li><a href="#animate-ValueAttributes">animation value attributes</a><span class="expanding"> — <a href="#animate-CalcModeAttribute"><span class="attr-name">‘calcMode’</span></a>, <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a>, <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a>, <a href="#animate-KeySplinesAttribute"><span class="attr-name">‘keySplines’</span></a>, <a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a>, <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a>, <a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a></span></li><li><a href="#animate-AdditionAttributes">animation addition attributes</a><span class="expanding"> — <a href="#animate-AdditiveAttribute"><span class="attr-name">‘additive’</span></a>, <a href="#animate-AccumulateAttribute"><span class="attr-name">‘accumulate’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#animate-InterfaceSVGAnimateElement">SVGAnimateElement</a></li></ul></dd></dl></div>

<p>The <a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> property applies to color interpolations
that result from animations using the <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a> element.</p>

    <p>For a list of attributes and properties that can be animated
    using the <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a> element,
    see <a href="#animate-AnimationAttributesAndProperties">Elements,
    attributes and properties that can be animated</a>.</p>



<h3 id="animate-SetElement">19.2.13 The <span class="element-name">‘set’</span> element</h3>



    <p>The <a href="#animate-SetElement"><span class="element-name">‘set’</span></a> element provides
    a simple means of just setting the value of an attribute for a
    specified duration. It supports all attribute types, including
    those that cannot reasonably be interpolated, such as string
    and boolean values. The <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>
    element is non-additive. The additive and accumulate attributes
    are not allowed, and will be ignored if specified.</p>

<p>Except for any SVG-specific rules explicitly mentioned in this
specification, the normative definition for this element is the
<a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#setElement">SMIL Animation: 'set' element</a>
([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 4.2).</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘set’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermAnimationElement">Animation element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermAnimationEventAttribute">animation event attributes</a><span class="expanding"> — <a href="#script-OnBeginEventAttribute"><span class="attr-name">‘onbegin’</span></a>, <a href="#script-OnEndEventAttribute"><span class="attr-name">‘onend’</span></a>, <a href="#script-OnRepeatEventAttribute"><span class="attr-name">‘onrepeat’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#animate-HrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#animate-TargetAttributes">animation attribute target attributes</a><span class="expanding"> — <a href="#animate-AttributeTypeAttribute"><span class="attr-name">‘attributeType’</span></a>, <a href="#animate-AttributeNameAttribute"><span class="attr-name">‘attributeName’</span></a></span></li><li><a href="#animate-TimingAttributes">animation timing attributes</a><span class="expanding"> — <a href="#animate-BeginAttribute"><span class="attr-name">‘begin’</span></a>, <a href="#animate-DurAttribute"><span class="attr-name">‘dur’</span></a>, <a href="#animate-EndAttribute"><span class="attr-name">‘end’</span></a>, <a href="#animate-MinAttribute"><span class="attr-name">‘min’</span></a>, <a href="#animate-MaxAttribute"><span class="attr-name">‘max’</span></a>, <a href="#animate-RestartAttribute"><span class="attr-name">‘restart’</span></a>, <a href="#animate-RepeatCountAttribute"><span class="attr-name">‘repeatCount’</span></a>, <a href="#animate-RepeatDurAttribute"><span class="attr-name">‘repeatDur’</span></a>, <a href="#animate-FillAttribute"><span class="attr-name">‘fill’</span></a></span></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#animate-SetElementToAttribute"><span class="attr-name">‘to’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#animate-InterfaceSVGSetElement">SVGSetElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="animate-SetElementToAttribute"><span class="adef">to</span> = "<span class="attr-value">&lt;value&gt;</span>"</dt><dd>Specifies the value for the attribute during the
        duration of the <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>
        element. The argument value must match the attribute
        type.</dd></dl>
    </div>
    <p>For a list of attributes and properties that can be animated
    using the <a href="#animate-SetElement"><span class="element-name">‘set’</span></a> element, see
    <a href="#animate-AnimationAttributesAndProperties">Elements,
    attributes and properties that can be animated</a>.</p>



<h3 id="animate-AnimateMotionElement">19.2.14 The <span class="element-name">‘animateMotion’</span> element</h3>



<p>The <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a> element causes a referenced element to
move along a motion path.</p>

<p>Except for any SVG-specific rules explicitly mentioned in this
specification, the normative definition for this element is the
<a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#animateMotionElement">SMIL Animation: 'animateMotion' element</a>
([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 4.3).</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘animateMotion’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermAnimationElement">Animation element</a></dd><dt>Content model:</dt><dd>Any number of <a href="#intro-TermDescriptiveElement"><span class="svg-term">descriptive elements</span></a> and at most one <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a> element, in any order.</dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermAnimationEventAttribute">animation event attributes</a><span class="expanding"> — <a href="#script-OnBeginEventAttribute"><span class="attr-name">‘onbegin’</span></a>, <a href="#script-OnEndEventAttribute"><span class="attr-name">‘onend’</span></a>, <a href="#script-OnRepeatEventAttribute"><span class="attr-name">‘onrepeat’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#animate-HrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#animate-TimingAttributes">animation timing attributes</a><span class="expanding"> — <a href="#animate-BeginAttribute"><span class="attr-name">‘begin’</span></a>, <a href="#animate-DurAttribute"><span class="attr-name">‘dur’</span></a>, <a href="#animate-EndAttribute"><span class="attr-name">‘end’</span></a>, <a href="#animate-MinAttribute"><span class="attr-name">‘min’</span></a>, <a href="#animate-MaxAttribute"><span class="attr-name">‘max’</span></a>, <a href="#animate-RestartAttribute"><span class="attr-name">‘restart’</span></a>, <a href="#animate-RepeatCountAttribute"><span class="attr-name">‘repeatCount’</span></a>, <a href="#animate-RepeatDurAttribute"><span class="attr-name">‘repeatDur’</span></a>, <a href="#animate-FillAttribute"><span class="attr-name">‘fill’</span></a></span></li><li><a href="#animate-ValueAttributes">animation value attributes</a><span class="expanding"> — <a href="#animate-CalcModeAttribute"><span class="attr-name">‘calcMode’</span></a>, <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a>, <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a>, <a href="#animate-KeySplinesAttribute"><span class="attr-name">‘keySplines’</span></a>, <a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a>, <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a>, <a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a></span></li><li><a href="#animate-AdditionAttributes">animation addition attributes</a><span class="expanding"> — <a href="#animate-AdditiveAttribute"><span class="attr-name">‘additive’</span></a>, <a href="#animate-AccumulateAttribute"><span class="attr-name">‘accumulate’</span></a></span></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#animate-PathAttribute"><span class="attr-name">‘path’</span></a></li><li><a href="#animate-KeyPointsAttribute"><span class="attr-name">‘keyPoints’</span></a></li><li><a href="#animate-RotateAttribute"><span class="attr-name">‘rotate’</span></a></li><li><a href="#animate-OriginAttribute"><span class="attr-name">‘origin’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#animate-InterfaceSVGAnimateMotionElement">SVGAnimateMotionElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="animate-AnimateMotionElementCalcModeAttribute"><span class="adef">calcMode</span> =
        <span class="attr-value">"discrete | linear | paced | spline"</span></dt><dd>Specifies the interpolation mode for the animation.
        Refer to general description of the <a href="#animate-CalcModeAttribute"><span class="attr-name">‘calcMode’</span></a> attribute above. The
        only difference is that the default value for the <a href="#animate-CalcModeAttribute"><span class="attr-name">‘calcMode’</span></a>
        for <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a> is <span class="attr-value">'paced'</span>. See <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#MotionCalcModeAttribute">
        SMIL Animation: 'calcMode' attribute for
        'animateMotion'</a>.</dd><dt id="animate-PathAttribute"><span class="adef">path</span> = "<span class="attr-value">&lt;path-data&gt;</span>"</dt><dd>The motion path, expressed in the same format and
        interpreted the same way as the <a href="#paths-DAttribute"><span class="attr-name">‘d’</span></a> attribute on the
        <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element. The effect
        of a motion path animation is to add a supplemental
        transformation matrix onto the CTM for the referenced
        object which causes a translation along the x- and y-axes
        of the current user coordinate system by the computed X and
        Y values computed over time.</dd><dt id="animate-KeyPointsAttribute"><span class="adef">keyPoints</span> = "<span class="attr-value">&lt;list-of-numbers&gt;</span>"</dt><dd><p><a href="#animate-KeyPointsAttribute"><span class="attr-name">‘keyPoints’</span></a> takes a
        semicolon-separated list of floating point values between 0
        and 1 and indicates how far along the motion path the
        object shall move at the moment in time specified by
        corresponding <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a>
        value. Distance calculations use the user agent's <a href="#paths-DistanceAlongAPath">distance along the
        path</a> algorithm. Each progress value in the list
        corresponds to a value in the <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a>
        attribute list.</p>
        <p>If a list of <a href="#animate-KeyPointsAttribute"><span class="attr-name">‘keyPoints’</span></a> is specified, there
        must be exactly as many values in the
        <a href="#animate-KeyPointsAttribute"><span class="attr-name">‘keyPoints’</span></a> list as in the <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a>
        list.</p>
        <p>If there are any errors in the <a href="#animate-KeyPointsAttribute"><span class="attr-name">‘keyPoints’</span></a>
        specification (bad values, too many or too few values),
        then the document is in error (see <a href="#implnote-ErrorProcessing">Error
        processing</a>).</p></dd><dt id="animate-RotateAttribute"><span class="adef">rotate</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a> | auto |
        auto-reverse</span>"</dt><dd>
           <p>The <a href="#animate-RotateAttribute"><span class="attr-name">‘rotate’</span></a> attribute post-multiplies a supplemental
           transformation matrix onto the CTM of the target element to apply a
           rotation transformation about the origin of the current user
           coordinate system. The rotation transformation is applied after the
           supplemental translation transformation that is computed due to the
           <a href="#animate-PathAttribute"><span class="attr-name">‘path’</span></a> attribute.</p>

           <dl><dt><span class="attr-value">auto</span></dt><dd>Indicates that the object is rotated over time by the angle of
             the direction (i.e., directional tangent vector) of the motion path.</dd><dt><span class="attr-value">auto-reverse</span></dt><dd>Indicates that the object is rotated over time by the angle of the
             direction (i.e., directional tangent vector) of the motion path plus
             180 degrees.</dd><dt><span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span></dt><dd>Indicates that the target element has a constant rotation
             transformation applied to it, where the rotation angle is the
             specified number of degrees.</dd></dl>

          <p>The default value is <span class="attr-value">'0'</span>.</p>
        </dd><dt id="animate-OriginAttribute"><span class="adef">origin</span> = "<span class="attr-value">default</span>"</dt><dd>The <a href="#animate-OriginAttribute"><span class="attr-name">‘origin’</span></a> attribute is <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#MotionOriginAttribute">defined in the SMIL Animation
        specification</a> ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 4.3).
        It has no effect in SVG.</dd></dl>
    </div>

<div id="animate-MPathElement">
<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘mpath’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#animate-MPathElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#animate-MPathElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#animate-InterfaceSVGMPathElement">SVGMPathElement</a></li></ul></dd></dl></div>
</div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="animate-MPathElementHrefAttribute"><span class="adef">xlink:href</span> = "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;iri&gt;</a></span>"</dt><dd>An <a href="#intro-TermIRIReference">IRI
        reference</a> to the <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element which
        defines the motion path.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd></dl>
    </div>

    <p>For <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, the specified values for <a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a>,
    <a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a>, <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a> and <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a> consists of x, y coordinate
    pairs, with a single comma and/or white space separating the x coordinate
    from the y coordinate. For example, <span class="attr-value">from="33,15"</span>
    specifies an x coordinate value of <span class="attr-value">33</span> and
    a y coordinate value of <span class="attr-value">15</span>.</p>

    <p>If provided, the <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a> attribute must consists of a list of
    x, y coordinate pairs. Coordinate values are separated by at least one
    white space character or a comma.  Additional white space around the
    separator is allowed. For example, <span class="attr-value">values="10,20;30,20;30,40"</span>
    or <span class="attr-value">values="10mm,20mm;30mm,20mm;30mm,40mm"</span>.
    Each coordinate represents a <a href="#types-DataTypeLength">length</a>.
    Attributes <a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a>, <a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a>, <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a> and <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a>
    specify a shape on the current canvas which represents the motion path.</p>

    <p>Two options are available which allow definition of a motion
    path using any of SVG's <a href="#paths-PathData">path
    data</a> commands:</p>
    <ul><li>the <a href="#animate-PathAttribute"><span class="attr-name">‘path’</span></a> attribute defines a motion path directly on
      <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a> element using any of SVG's
      <a href="#paths-PathData">path data</a> commands.</li><li>the <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a> sub-element provides the ability to reference an
      external <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element as the definition of the motion path.</li></ul>
    <p>Note that SVG's <a href="#paths-PathData">path data</a>
    commands can only contain values in user space, whereas <a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a>,
    <a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a>, <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a> and <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a> can specify coordinates in
    user space or using unit identifiers. See <a href="#coords-Units">Units</a>.</p>

    <p>The various (x,y) points of the shape provide a supplemental
    transformation matrix onto the CTM for the referenced object
    which causes a translation along the x- and y-axes of the current
    user coordinate system by the (x,y) values of the shape computed
    over time. Thus, the referenced object is translated over time
    by the offset of the motion path relative to the origin of the
    current user coordinate system. The supplemental transformation is
    applied on top of any transformations due to the target element's
    <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute or any animations on that attribute due
    to <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a> elements on the target element.</p>

    <p>The <a href="#animate-AdditiveAttribute"><span class="attr-name">‘additive’</span></a> and <a href="#animate-AccumulateAttribute"><span class="attr-name">‘accumulate’</span></a> attributes apply
    to <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a> elements. Multiple <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>
    elements all simultaneously referencing the same target element can
    be additive with respect to each other; however, the transformations
    which result from the <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a> elements are always
    supplemental to any transformations due to the target element's
    <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> attribute or any <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>
    elements.</p>

    <p>The default calculation mode (<a href="#animate-CalcModeAttribute"><span class="attr-name">‘calcMode’</span></a>) for
    <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a> is "paced". This will produce constant
    velocity motion along the specified path. Note that while
    animateMotion elements can be additive, it is important to observe
    that the addition of two or more "paced" (constant velocity)
    animations might not result in a combined motion animation with
    constant velocity.</p>

    <p>When a path is combined with "discrete", "linear"
    or "spline" <a href="#animate-CalcModeAttribute"><span class="attr-name">‘calcMode’</span></a> settings, and if attribute
    <a href="#animate-KeyPointsAttribute"><span class="attr-name">‘keyPoints’</span></a> is not provided, the number of values is
    defined to be the number of points defined by the path, unless
    there are "move to" commands within the path. A "move to" command
    within the path (i.e. other than at the beginning of
    the path description) A "move to" command does not
    count as an additional point when dividing up the duration, or
    when associating <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a>, <a href="#animate-KeySplinesAttribute"><span class="attr-name">‘keySplines’</span></a>
    and <a href="#animate-KeyPointsAttribute"><span class="attr-name">‘keyPoints’</span></a> values. When a path is
    combined with a "paced" <a href="#animate-CalcModeAttribute"><span class="attr-name">‘calcMode’</span></a> setting, all "move to"
    commands are considered to have 0 length (i.e. they always happen
    instantaneously), and is not considered in computing the pacing.</p>

    <p>For more flexibility in controlling the velocity along the
    motion path, the <a href="#animate-KeyPointsAttribute"><span class="attr-name">‘keyPoints’</span></a> attribute provides the
    ability to specify the progress along the motion path for
    each of the <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a> specified values. If specified,
    <a href="#animate-KeyPointsAttribute"><span class="attr-name">‘keyPoints’</span></a> causes <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a> to apply to the values
    in <a href="#animate-KeyPointsAttribute"><span class="attr-name">‘keyPoints’</span></a> rather than the points specified in the
    <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a> attribute array or the points on the <a href="#animate-PathAttribute"><span class="attr-name">‘path’</span></a>
    attribute.</p>

    <p>The override rules for <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a> are as follows. 
    Regarding the definition of the motion path, the <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a> element
    overrides the the <a href="#animate-PathAttribute"><span class="attr-name">‘path’</span></a> attribute, which overrides <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a>,
    which overrides <a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a>, <a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a> and <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a>. Regarding
    determining the points which correspond to the <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a>
    attributes, the <a href="#animate-KeyPointsAttribute"><span class="attr-name">‘keyPoints’</span></a> attribute overrides <a href="#animate-PathAttribute"><span class="attr-name">‘path’</span></a>,
    which overrides <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a>, which overrides <a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a>, <a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a>
    and <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a>.</p>

    <p>At any time <em>t</em> within a motion path animation of
    duration <em>dur</em>, the computed coordinate (x,y) along the
    motion path is determined by finding the point (x,y) which is
    <em>t/dur</em> distance along the motion path using the user
    agent's <a href="#paths-DistanceAlongAPath">distance along
    the path</a> algorithm.</p>

    <p>The following example demonstrates the supplemental
    transformation matrices that are computed during a motion path
    animation.</p>

    <a id="animate-ExampleAnimMotion01" name="animate-ExampleAnimMotion01"></a> 
    <p><span class="example-ref">Example animMotion01</span> shows
    a triangle moving along a motion path.</p>
<pre>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="5cm" height="3cm"  viewBox="0 0 500 300"
     xmlns="http://www.w3.org/2000/svg" version="1.1"
     xmlns:xlink="http://www.w3.org/1999/xlink" &gt;
  &lt;desc&gt;Example animMotion01 - demonstrate motion animation computations&lt;/desc&gt;
  &lt;rect x="1" y="1" width="498" height="298"
        fill="none" stroke="blue" stroke-width="2" /&gt;
  &lt;!-- Draw the outline of the motion path in blue, along
          with three small circles at the start, middle and end. --&gt;
  &lt;path id="path1" d="M100,250 C 100,50 400,50 400,250"
        fill="none" stroke="blue" stroke-width="7.06"  /&gt;
  &lt;circle cx="100" cy="250" r="17.64" fill="blue"  /&gt;
  &lt;circle cx="250" cy="100" r="17.64" fill="blue"  /&gt;
  &lt;circle cx="400" cy="250" r="17.64" fill="blue"  /&gt;
  &lt;!-- Here is a triangle which will be moved about the motion path.
       It is defined with an upright orientation with the base of
       the triangle centered horizontally just above the origin. --&gt;
  &lt;path d="M-25,-12.5 L25,-12.5 L 0,-87.5 z"
        fill="yellow" stroke="red" stroke-width="7.06"  &gt;
    &lt;!-- Define the motion path animation --&gt;
    &lt;animateMotion dur="6s" repeatCount="indefinite" rotate="auto" &gt;
       &lt;mpath xlink:href="#path1"/&gt;
    &lt;/animateMotion&gt;
  &lt;/path&gt;
&lt;/svg&gt;
</pre>
    <table summary="Example animMotion01"><caption align="bottom">
        Example animMotion01
      </caption><tr><td width="144"><img width="144" height="91" alt="Example animMotion01 - at zero seconds" src="images/animate/animMotion01a.png" /> <span class="table-heading-1">At zero seconds</span></td><td width="20"> </td><td width="144"><img width="144" height="91" alt="Example animMotion01 - at three seconds" src="images/animate/animMotion01b.png" /> <span class="table-heading-1">At three seconds</span></td><td width="20"> </td><td width="144"><img width="144" height="91" alt="Example animMotion01 - at six seconds" src="images/animate/animMotion01c.png" /> <span class="table-heading-1">At six seconds</span></td></tr></table>
    <p class="view-as-svg"><a href="images/animate/animMotion01.svg">View this example as SVG
    (SVG-enabled browsers only)</a></p>
    <p>The following table shows the supplemental transformation
    matrices that are applied to achieve the effect of the motion
    path animation.</p>
    <table class="vert" summary="Example animMotion01 time slices"><tr><th></th><th>After 0s</th><th>After 3s</th><th>After 6s</th></tr><tr><td>Supplemental transform
         due to movement
         along motion path</td><td>translate(100,250)</td><td>translate(250,100)</td><td>translate(400,250)</td></tr><tr><td>Supplemental transform
         due to
         <span class="attr-value">rotate="auto"</span></td><td>rotate(-90)</td><td>rotate(0)</td><td>rotate(90)</td></tr></table>

<p>For a list of elements that can be animated using the <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>
element, see <a href="#animate-AnimationAttributesAndProperties">Elements,
attributes and properties that can be animated</a>.</p>



<h3 id="animate-AnimateColorElement">19.2.15 The <span class="element-name">‘animateColor’</span> element</h3>



<p>The <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a> element specifies a color transformation
over time.</p>

<p>Except for any SVG-specific rules explicitly mentioned in this
specification, the normative definition for this element is the
<a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/"><cite>SMIL Animation</cite></a> specification.
In particular, see <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#animateColorElement">SMIL Animation: 'animateColor' element</a>
([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 4.4).</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘animateColor’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermAnimationElement">Animation element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermAnimationEventAttribute">animation event attributes</a><span class="expanding"> — <a href="#script-OnBeginEventAttribute"><span class="attr-name">‘onbegin’</span></a>, <a href="#script-OnEndEventAttribute"><span class="attr-name">‘onend’</span></a>, <a href="#script-OnRepeatEventAttribute"><span class="attr-name">‘onrepeat’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#animate-HrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#animate-TargetAttributes">animation attribute target attributes</a><span class="expanding"> — <a href="#animate-AttributeTypeAttribute"><span class="attr-name">‘attributeType’</span></a>, <a href="#animate-AttributeNameAttribute"><span class="attr-name">‘attributeName’</span></a></span></li><li><a href="#animate-TimingAttributes">animation timing attributes</a><span class="expanding"> — <a href="#animate-BeginAttribute"><span class="attr-name">‘begin’</span></a>, <a href="#animate-DurAttribute"><span class="attr-name">‘dur’</span></a>, <a href="#animate-EndAttribute"><span class="attr-name">‘end’</span></a>, <a href="#animate-MinAttribute"><span class="attr-name">‘min’</span></a>, <a href="#animate-MaxAttribute"><span class="attr-name">‘max’</span></a>, <a href="#animate-RestartAttribute"><span class="attr-name">‘restart’</span></a>, <a href="#animate-RepeatCountAttribute"><span class="attr-name">‘repeatCount’</span></a>, <a href="#animate-RepeatDurAttribute"><span class="attr-name">‘repeatDur’</span></a>, <a href="#animate-FillAttribute"><span class="attr-name">‘fill’</span></a></span></li><li><a href="#animate-ValueAttributes">animation value attributes</a><span class="expanding"> — <a href="#animate-CalcModeAttribute"><span class="attr-name">‘calcMode’</span></a>, <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a>, <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a>, <a href="#animate-KeySplinesAttribute"><span class="attr-name">‘keySplines’</span></a>, <a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a>, <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a>, <a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a></span></li><li><a href="#animate-AdditionAttributes">animation addition attributes</a><span class="expanding"> — <a href="#animate-AdditiveAttribute"><span class="attr-name">‘additive’</span></a>, <a href="#animate-AccumulateAttribute"><span class="attr-name">‘accumulate’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#animate-InterfaceSVGAnimateColorElement">SVGAnimateColorElement</a></li></ul></dd></dl></div>

<p>The <a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a>, <a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a> and <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a> attributes take color
values, where each color value is expressed using the following syntax (the
same syntax as used in SVG's properties that can take color values):</p>

<pre><a href="#types-DataTypeColor">&lt;color&gt;</a> <a href="#types-DataTypeICCColor">&lt;icccolor&gt;</a>?</pre>

<p>The <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a> attribute for the <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a> element
consists of a semicolon-separated list of color values, with each color
value expressed in the above syntax.</p>

<p>Out of range color values can be provided, but user agent processing
will be implementation dependent. User agents should clamp color
values to allow color range values as late as possible, but note that
system differences might preclude consistent behavior across different
systems.</p>

<p>The <a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> property applies to color interpolations
that result from <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a> animations.</p>

<p>The use of <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a> is deprecated, since all of its functionality
can be achieved simply by using <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a> to target properties that
can take color values.  The <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a> element may be dropped from
a future version of the SVG specification.</p>

<p>For a list of attributes and properties that can be animated using the
<a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a> element, see
<a href="#animate-AnimationAttributesAndProperties">Elements, attributes and properties that can be animated</a>.</p>



<h3 id="animate-AnimateTransformElement">19.2.16 The <span class="element-name">‘animateTransform’</span> element</h3>



<p>The <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a> element animates a transformation attribute
on a target element, thereby allowing animations to control translation,
scaling, rotation and/or skewing.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘animateTransform’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermAnimationElement">Animation element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermAnimationEventAttribute">animation event attributes</a><span class="expanding"> — <a href="#script-OnBeginEventAttribute"><span class="attr-name">‘onbegin’</span></a>, <a href="#script-OnEndEventAttribute"><span class="attr-name">‘onend’</span></a>, <a href="#script-OnRepeatEventAttribute"><span class="attr-name">‘onrepeat’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#animate-HrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#animate-TargetAttributes">animation attribute target attributes</a><span class="expanding"> — <a href="#animate-AttributeTypeAttribute"><span class="attr-name">‘attributeType’</span></a>, <a href="#animate-AttributeNameAttribute"><span class="attr-name">‘attributeName’</span></a></span></li><li><a href="#animate-TimingAttributes">animation timing attributes</a><span class="expanding"> — <a href="#animate-BeginAttribute"><span class="attr-name">‘begin’</span></a>, <a href="#animate-DurAttribute"><span class="attr-name">‘dur’</span></a>, <a href="#animate-EndAttribute"><span class="attr-name">‘end’</span></a>, <a href="#animate-MinAttribute"><span class="attr-name">‘min’</span></a>, <a href="#animate-MaxAttribute"><span class="attr-name">‘max’</span></a>, <a href="#animate-RestartAttribute"><span class="attr-name">‘restart’</span></a>, <a href="#animate-RepeatCountAttribute"><span class="attr-name">‘repeatCount’</span></a>, <a href="#animate-RepeatDurAttribute"><span class="attr-name">‘repeatDur’</span></a>, <a href="#animate-FillAttribute"><span class="attr-name">‘fill’</span></a></span></li><li><a href="#animate-ValueAttributes">animation value attributes</a><span class="expanding"> — <a href="#animate-CalcModeAttribute"><span class="attr-name">‘calcMode’</span></a>, <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a>, <a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a>, <a href="#animate-KeySplinesAttribute"><span class="attr-name">‘keySplines’</span></a>, <a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a>, <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a>, <a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a></span></li><li><a href="#animate-AdditionAttributes">animation addition attributes</a><span class="expanding"> — <a href="#animate-AdditiveAttribute"><span class="attr-name">‘additive’</span></a>, <a href="#animate-AccumulateAttribute"><span class="attr-name">‘accumulate’</span></a></span></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#animate-AnimateTransformElementTypeAttribute"><span class="attr-name">‘type’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#animate-InterfaceSVGAnimateTransformElement">SVGAnimateTransformElement</a></li></ul></dd></dl></div>

<div class="adef-list">
  <p><em>Attribute definitions:</em></p>
  <dl><dt id="animate-AnimateTransformElementTypeAttribute"><span class="adef">type</span> =
    "<span class="attr-value">translate | scale | rotate | skewX | skewY</span>"</dt><dd>Indicates the type of transformation which is to have its values
    change over time.
    If the attribute is not specified, then the effect is as if a value of <span class="attr-value">'translate'</span> were specified.
    </dd></dl>
</div>

<p>The <a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a>, <a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a> and <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a> attributes take a value
expressed using the same syntax that is available for the given transformation
type:</p>

<ul><li>For a <span class="attr-value">type="translate"</span>, each individual
  value is expressed as <span class="attr-value">&lt;tx&gt; [,&lt;ty&gt;]</span>.</li><li>For a <span class="attr-value">type="scale"</span>, each individual
  value is expressed as <span class="attr-value">&lt;sx&gt; [,&lt;sy&gt;]</span>.</li><li>For a <span class="attr-value">type="rotate"</span>, each individual
  value is expressed as <span class="attr-value">&lt;rotate-angle&gt; [&lt;cx&gt; &lt;cy&gt;]</span>.</li><li>For a <span class="attr-value">type="skewX"</span> and
  <span class="attr-value">type="skewY"</span>, each individual value is
  expressed as <span class="attr-value">&lt;skew-angle&gt;</span>.</li></ul>

<p>(See <a href="#coords-TransformAttribute">The <span class="attr-name">‘transform’</span> attribute</a>.)</p>

<p>The <a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a> attribute for the <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a> element
consists of a semicolon-separated list of values, where each individual value
is expressed as described above for <a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a>, <a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a> and <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a>.</p>

<p>The animation effect for <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a> is post-multiplied to the
underlying value for additive <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a> animations (see below)
instead of added to the underlying value, due to the specific behavior of
<a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>.</p>

<p><em>From-to</em>, <em>from-by</em> and <em>by animations</em> are defined
in SMIL to be equivalent to a corresponding <em>values animation</em>.  See
the <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#AnimFuncValues">Animation function values</a>
section of SMIL Animation ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.2.2).
However, <em>to animations</em> are a mixture of additive and non-additive
behavior, as described in the <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#FromToByAndAdditive">How
from, to and by attributes affect additive behavior</a> section of SMIL
Animation ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.3.6).
<em>To animations</em> provide specific functionality to get a smooth
change from the underlying value to the <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a> attribute value, which
conflicts mathematically with the requirement for additive transform
animations to be post-multiplied.  As a consequence, in SVG 1.1 the behavior of
<em>to animations</em> for <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a> is undefined.  Authors
are suggested to use <em>from-to</em>, <em>from-by</em>, <em>by</em> or
<em>values animations</em> to achieve any desired transform animation.</p>

<p>
  If
  <a href="#animate-CalcModeAttribute"><span class="attr-name">‘calcMode’</span></a>
  has the value <span class="attr-value">'paced'</span>, then the "distance" for the transformation is
  calculated as further described in
  <a href="#animate-complexDistances">Paced animations and complex types</a>.
</p>    
<p>When an animation is active, the effect of non-additive
<a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a> (i.e., <span class="attr-value">additive="replace"</span>)
is to replace the given attribute's value with the transformation defined by
the <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>. The effect of additive (i.e.,
<span class="attr-value">additive="sum"</span>) is to post-multiply the
transformation matrix corresponding to the transformation defined by this
<a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>. To illustrate:</p>

<pre>
&lt;rect transform="skewX(30)"...&gt;
  &lt;animateTransform attributeName="transform" attributeType="XML"
                    type="rotate" from="0" to="90" dur="5s"
                    additive="replace" fill="freeze"/&gt;
  &lt;animateTransform attributeName="transform" attributeType="XML"
                    type="scale" from="1" to="2" dur="5s"
                    additive="replace" fill="freeze"/&gt;
&lt;/rect&gt;
</pre>

<p>In the code snippet above, because the both animations have
<span class="attr-value">additive="replace"</span>, the first
animation overrides the transformation on the rectangle itself
and the second animation overrides the transformation from the
first animation; therefore, at time 5 seconds, the visual
result of the above two animations would be equivalent to the
following static rectangle:</p>

<pre>
&lt;rect transform="scale(2)" ... /&gt;
</pre>

<p>whereas in the following example:</p>

<pre>
&lt;rect transform="skewX(30)"...&gt;
  &lt;animateTransform attributeName="transform" attributeType="XML"
                    type="rotate" from="0" to="90" dur="5s" 
                    additive="sum" fill="freeze"/&gt;
  &lt;animateTransform attributeName="transform" attributeType="XML"
                    type="scale" from="1" to="2" dur="5s"
                    additive="sum" fill="freeze"/&gt;
&lt;/rect&gt;
</pre>

<p>In this code snippet, because the both animations have
<span class="attr-value">additive="sum"</span>, the first animation
post-multiplies its transformation to any transformations on
the rectangle itself and the second animation post-multiplies
its transformation to any transformation from the first
animation; therefore, at time 5 seconds, the visual result of
the above two animations would be equivalent to the following
static rectangle:</p>

<pre>
&lt;rect transform="skewX(30) rotate(90) scale(2)" ... /&gt;
</pre>

<p>Note that the zero value used when performing a <em>by animation</em>
with <span class="attr-value">type="scale"</span> is indeed 0.
Thus, performing the following animation causes the rectangle to be
invisible at time 0s (since the animated transform list value is
<span class="attr-value">'scale(0)'</span>), and be scaled back
to its original size at time 5s (since the animated transform list value is
<span class="attr-value">'scale(1)'</span>):</p>

<pre>&lt;rect width="100" height="100"&gt;
  &lt;animateTransform attributeName="transform" attributeType="XML"
                    type="scale" by="1" dur="5s" fill="freeze"/&gt;
&lt;/rect&gt;</pre>

<p>When a transform animation has <span class="attr-value">accumulate='sum'</span>,
the accumulation that occurs for each completed repetition of the animation
is computed on the values specified in the <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a> element's
<a href="#animate-ValueAttributes">animation value attributes</a> (i.e.,
<a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a>, <a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a>, <a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a> and <a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a>) and not on the
transformation matrix that these values represent.  For example, in the following
code snippet, 3 is added to the scale value at the start of each repetition:</p>

<pre>&lt;rect width="100" height="100"&gt;
  &lt;animateTransform attributeName="transform" attributeType="XML"
                    type="scale" from="2" to="3" repeatCount="3" dur="4s"
                    fill="freeze"/&gt;
&lt;/rect&gt;</pre>

<p>The following graph and table shows the animated <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> value on
the <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a> over the course of the animation:</p>

<table class="graph indented"><tr><td><img src="images/cumulative-transform-graph-1.png" width="430" height="320" alt="The scale value animates from 2 to 12 with discontinuities at 4s and 8s." /></td><td>
      <table class="vert compact"><tr><th>Time</th><th>Value</th></tr><tr><td>0s</td><td>scale(2)</td></tr><tr><td>1s</td><td>scale(2.25)</td></tr><tr><td>2s</td><td>scale(2.5)</td></tr><tr><td>3s</td><td>scale(2.75)</td></tr><tr><td>4s</td><td>scale(5)</td></tr><tr><td>5s</td><td>scale(5.25)</td></tr><tr><td>6s</td><td>scale(5.5)</td></tr><tr><td>7s</td><td>scale(5.75)</td></tr><tr><td>8s</td><td>scale(8)</td></tr><tr><td>9s</td><td>scale(8.25)</td></tr><tr><td>10s</td><td>scale(8.5)</td></tr><tr><td>11s</td><td>scale(8.75)</td></tr><tr><td>12s</td><td>scale(9)</td></tr></table>
    </td></tr></table>

<p>Transform item types that can have multiple values – <span class="attr-value">'translate'</span>,
<span class="attr-value">'scale'</span> and <span class="attr-value">'rotate'</span> – are
treated as vectors and accumulation is performed with vector addition.  Optional values that
are omitted are taken to have their usual implied value: <span class="attr-value">1</span> for
the <span class="attr-value">&lt;sy&gt;</span> component of a <span class="attr-value">'scale'</span>
and <span class="attr-value">0</span> for the <span class="attr-value">&lt;tx&gt;</span> component
of a <span class="attr-value">'translate'</span> and the <span class="attr-value">&lt;cx cy&gt;</span>
components of a <span class="attr-value">'rotate'</span>.</p>

<p>For example, consider the following code snippet, which has a cumulative transform
animation of type <span class="attr-value">'rotate'</span>:</p>

<pre>&lt;rect width="100" height="100"&gt;
  &lt;animateTransform attributeName="transform" attributeType="XML"
                    type="rotate" from="0 30 40" to="10 30 40"
                    repeatCount="2" dur="1s" fill="freeze"/&gt;
&lt;/rect&gt;</pre>

<p>At time 1 second, the animated value of <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> on the <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>
will jump from <span class="attr-value">'rotate(10 30 40)'</span> to <span class="attr-value">'rotate(10 60 80)'</span>,
because the effect of the accumulation is to take the value at the end of the first repetition,
<span class="attr-value">'10 30 40'</span>, and add to it the value at simple duration <var>t</var> = 0s, which
is <span class="attr-value">'0 30 40'</span>.</p>

<p>For a list of attributes and properties that can be animated using the
<a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a> element, see
<a href="#animate-AnimationAttributesAndProperties">Elements, attributes and properties that can be animated</a>.</p>



<h3 id="animate-AnimationAttributesAndProperties">19.2.17 Elements, attributes and properties that can be animated</h3>

<p>The following lists all of the elements which can be animated by an
<a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a> element:</p>

<ul><li><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></li><li><a href="#struct-GElement"><span class="element-name">‘g’</span></a></li><li><a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a></li><li><a href="#struct-UseElement"><span class="element-name">‘use’</span></a></li><li><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></li><li><a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a></li><li><a href="#paths-PathElement"><span class="element-name">‘path’</span></a></li><li><a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></li><li><a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a></li><li><a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a></li><li><a href="#shapes-LineElement"><span class="element-name">‘line’</span></a></li><li><a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a></li><li><a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a></li><li><a href="#text-TextElement"><span class="element-name">‘text’</span></a></li><li><a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a></li><li><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></li><li><a href="#linking-AElement"><span class="element-name">‘a’</span></a></li><li><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></li></ul>

<p id="animate-Animatable">Each attribute or property within this specification
indicates whether or not it can be animated by SVG's animation
elements. Animatable attributes and properties are designated
as follows:</p>

<p class="indented"><span class="anim-target">Animatable: yes.</span></p>

<p>whereas attributes and properties that cannot be animated are designated:</p>

<p class="indented"><span class="anim-target">Animatable: no.</span></p>

<p>Some properties are defined as being animatable but only for non-additive animations:</p>

<p class="indented"><span class="anim-target">Animatable: yes (non-additive).</span></p>

<p>SVG has a defined set of <a href="#types-BasicDataTypes">basic data types</a>
for its various supported attributes and properties. For those
attributes and properties that can be animated, the following
table indicates which animation elements can be used to animate
each of the basic data types. If a given attribute or property
can take values of keywords (which are not additive) or numeric
values (which are additive), then additive animations are
possible if the subsequent animation uses a numeric value even
if the base animation uses a keyword value; however, if the
subsequent animation uses a keyword value, additive animation
is not possible.</p>

    <table class="vert" summary="animatable data types"><tr><th>Data type</th><th>Additive?</th><th><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></th><th><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></th><th><a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a></th><th><a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a></th><th>Notes</th></tr><tr><td><a href="#types-DataTypeAngle">&lt;angle&gt;</a></td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>no</td><td> </td></tr><tr><td><a href="#types-DataTypeColor">&lt;color&gt;</a></td><td>yes</td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>Only additive if each value can be converted to an RGB color.</td></tr><tr><td><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>no</td><td> </td></tr><tr><td><a href="#types-DataTypeFrequency">&lt;frequency&gt;</a></td><td>no</td><td>no</td><td>no</td><td>no</td><td>no</td><td> </td></tr><tr><td><a href="#types-DataTypeInteger">&lt;integer&gt;</a></td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>no</td><td> </td></tr><tr><td><a href="#types-DataTypeLength">&lt;length&gt;</a></td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>no</td><td> </td></tr><tr><td><a href="#types-DataTypeList">&lt;list-of-<var>T</var>s&gt;</a></td><td>no</td><td>yes</td><td>yes</td><td>no</td><td>no</td><td> </td></tr><tr><td><a href="#types-DataTypeNumber">&lt;number&gt;</a></td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>no</td><td> </td></tr><tr><td><a href="#types-DataTypePaint">&lt;paint&gt;</a></td><td>yes</td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>Only additive if each value can be converted to an RGB color.</td></tr><tr><td><a href="#types-DataTypePercentage">&lt;percentage&gt;</a></td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>no</td><td> </td></tr><tr><td><a href="#types-DataTypeTime">&lt;time&gt;</a></td><td>no</td><td>no</td><td>no</td><td>no</td><td>no</td><td> </td></tr><tr><td><a href="#types-DataTypeTransformList">&lt;transform-list&gt;</a></td><td>yes</td><td>no</td><td>no</td><td>no</td><td>yes</td><td>Additive means that a transformation is post-multiplied
        to the base set of transformations.</td></tr><tr><td><a href="#types-DataTypeIRI">&lt;iri&gt;</a></td><td>no</td><td>yes</td><td>yes</td><td>no</td><td>no</td><td> </td></tr><tr><td>All other data types used in animatable attributes and
        properties</td><td>no</td><td>yes</td><td>yes</td><td>no</td><td>no</td><td> </td></tr></table>

<p>Any deviation from the above table or other special note
about the animation capabilities of a particular attribute or
property is included in the section of the specification where
the given attribute or property is defined.</p>

<h2 id="animate-DOMAnimationExample">19.3 Animation using the SVG DOM</h2>

<p><span class="example-ref">Example dom01</span> shows a simple animation
using the DOM.</p>

<pre>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg width="4cm" height="2cm" viewBox="0 0 400 200"
     xmlns="http://www.w3.org/2000/svg"
     onload="StartAnimation(evt)" version="1.1"&gt;
  &lt;script type="application/ecmascript"&gt;&lt;![CDATA[
    var timevalue = 0;
    var timer_increment = 50;
    var max_time = 5000;
    var text_element;
    function StartAnimation(evt) {
      text_element = evt.target.ownerDocument.getElementById("TextElement");
      ShowAndGrowElement();
    }
    function ShowAndGrowElement() {
      timevalue = timevalue + timer_increment;
      if (timevalue &gt; max_time)
        return;
      // Scale the text string gradually until it is 20 times larger
      scalefactor = (timevalue * 20.) / max_time;
      text_element.setAttribute("transform", "scale(" + scalefactor + ")");
      // Make the string more opaque
      opacityfactor = timevalue / max_time;
      text_element.setAttribute("opacity", opacityfactor);
      // Call ShowAndGrowElement again &lt;timer_increment&gt; milliseconds later.
      setTimeout("ShowAndGrowElement()", timer_increment)
    }
    window.ShowAndGrowElement = ShowAndGrowElement
  ]]&gt;&lt;/script&gt;
  &lt;rect x="1" y="1" width="398" height="198"
        fill="none" stroke="blue" stroke-width="2"/&gt;
  &lt;g transform="translate(50,150)" fill="red" font-size="7"&gt;
    &lt;text id="TextElement"&gt;SVG&lt;/text&gt;
  &lt;/g&gt;
&lt;/svg&gt;
</pre>
    <table summary="Example dom01"><caption align="bottom">
        Example dom01
      </caption><tr><td width="151"><img width="151" height="76" alt="Example dom01 - at zero seconds" src="images/animate/dom01a.png" /> <span class="table-heading-1">At zero seconds</span></td><td width="20"> </td><td width="151"><img width="151" height="76" alt="Example dom01 - at three seconds" src="images/animate/dom01b.png" /> <span class="table-heading-1">At 2.5 seconds</span></td><td width="20"> </td><td width="151"><img width="151" height="76" alt="Example dom01 - at six seconds" src="images/animate/dom01c.png" /> <span class="table-heading-1">At five seconds</span></td></tr></table>
    <p class="view-as-svg"><a href="images/animate/dom01.svg">View
    this example as SVG (SVG-enabled browsers only)</a></p>
    <p>The above SVG file contains a single graphics element, a
    text string that says "SVG". The animation loops for 5 seconds.
    The text string starts out small and transparent and grows to
    be large and opaque. Here is an explanation of how this example
    works:</p>
    <ul><li>The <span class="attr-value">onload="StartAnimation(evt)"</span> attribute
      indicates that, once the document has been fully loaded and
      processed, invoke ECMAScript function
      <code>StartAnimation</code>.</li><li>The <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a> element defines the ECMAScript which makes
      the animation happen. The <code>StartAnimation()</code>
      function is only called once to give a value to global
      variable <code>text_element</code> and to make the initial
      call to <code>ShowAndGrowElement()</code>.
      <code>ShowAndGrowElement()</code> is called every 50
      milliseconds and resets the <a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a> and
      <a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a> attributes on the text element to new
      values each time it is called. At the end of
      <code>ShowAndGrowElement</code>, the function tells the
      ECMAScript engine to call itself again after 50 more
      milliseconds.</li><li>The <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element shifts the coordinate system so that the
      origin is shifted toward the lower-left of the viewing area.
      It also defines the fill color and font-size to use when
      drawing the text string.</li><li>The <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element contains the text string and is the
      element whose attributes get changed during the
      animation.</li></ul>
    <p>If scripts are modifying the same attributes or properties
    that are being animated by SVG's
    <a href="#animate-AnimationElements">animation elements</a>,
    the scripts modify the base value for the animation. If a base
    value is modified while an animation element is animating the
    corresponding attribute or property, the animations are
    required to adjust dynamically to the new base value.</p>
    <p>If a script is modifying a property on the override style
    sheet at the same time that an <a href="#intro-TermAnimationElement"><span class="svg-term">animation element</span></a> is
    animating that property, the result is
    implementation-dependent; thus, it is recommended that this be
    avoided.</p>

<h2 id="animate-DOMInterfaces">19.4 DOM interfaces</h2>

<p>Below are the DOM interfaces for the elements defined in this chapter.
In addition, <a class="idlinterface" href="#animate-InterfaceElementTimeControl">ElementTimeControl</a> and <a class="idlinterface" href="#animate-InterfaceTimeEvent">TimeEvent</a>, which are
from <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/">SMIL Animation</a>,
are included here for easy reference.</p>

<h3 id="animate-InterfaceElementTimeControl">19.4.1 Interface ElementTimeControl</h3>


 <p>SMIL Animation supports several methods for controlling the behavior of
 animation: <code>beginElement()</code>, <code>beginElementAt()</code>,
 <code>endElement()</code> and <code>endElementAt()</code>. These methods
 are used to begin and end the active duration of an element. Authors can
 (but are not required to) declare the timing to respond to the DOM using
 the following syntax:</p>

 <pre>&lt;animate begin="indefinite" end="indefinite" .../&gt;</pre>

 <p>If a DOM method call is made to begin or end the element (using
 <code>beginElement()</code>, <code>beginElementAt()</code>,
 <code>endElement()</code> or <code>endElementAt()</code>), each method call
 creates a single instance time (in the appropriate instance times list).
 These times are then interpreted as part of the semantics of lists of
 times, as described in
 <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#Timing-EvaluationOfBeginEndTimeLists">Evaluation of begin and end time lists</a>.</p>

 <ul>
   <li>The instance time associated with a <code>beginElement()</code> or
   <code>endElement()</code> call is the current presentation time at the
   time of the DOM method call.</li>

   <li>The instance time associated with a <code>beginElementAt()</code> or
   <code>endElementAt()</code> call is the current presentation time at the
    time of the DOM method call, plus or minus the specified offset.</li>

   <li>Note that <code>beginElement()</code> is subject to the <a href="#animate-RestartAttribute"><span class="attr-name">‘restart’</span></a>
   attribute in the same manner that event-based begin timing is.  Refer
   also to <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#Restart">SMIL Animation: Restarting animation</a>
   ([<a href="#refs-ref-SMILANIM">SMILANIM</a>], section 3.3.7).</li>
 </ul>

 <p>The expectation of the following interface is that an instance of the
 <a class="idlinterface" href="#animate-InterfaceElementTimeControl">ElementTimeControl</a> interface can be obtained by using binding-specific
 casting methods on an instance of an animation element.  A DOM application
 can use the <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-5CED94D7">hasFeature</a>
 method of the <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490">DOMImplementation</a> interface to determine whether the
 <a class="idlinterface" href="#animate-InterfaceElementTimeControl">ElementTimeControl</a> interface is supported or not.  The feature string
 for this interface is "TimeControl".</p>
<pre class="idl">interface <b>ElementTimeControl</b> {
  void <a href="#animate-__smil__ElementTimeControl__beginElement">beginElement</a>();
  void <a href="#animate-__smil__ElementTimeControl__beginElementAt">beginElementAt</a>(in float offset);
  void <a href="#animate-__smil__ElementTimeControl__endElement">endElement</a>();
  void <a href="#animate-__smil__ElementTimeControl__endElementAt">endElementAt</a>(in float offset);
};</pre><dl class="interface"><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="animate-__smil__ElementTimeControl__beginElement" class="operation first-child">void <b>beginElement</b>()</dt><dd class="operation"><div>
 Creates a begin instance time for the current time. The new instance
 time is added to the <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#Timing-BeginEnd-InstanceTimesLists"><em>begin instance times list</em></a>.
 The behavior of this method is equivalent to <code>beginElementAt(0)</code>.
</div></dd>
<dt id="animate-__smil__ElementTimeControl__beginElementAt" class="operation">void <b>beginElementAt</b>(in float <var>offset</var>)</dt><dd class="operation"><div>
 Creates a begin instance time for the current time plus the specified
 offset. The new instance time is added to the
 <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#Timing-BeginEnd-InstanceTimesLists"><em>begin instance times list</em></a>.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>offset</var></div> <div> The offset from the current document time, in seconds, at
   which to begin the element.
</div></li></ol></dd></dl></dd>
<dt id="animate-__smil__ElementTimeControl__endElement" class="operation">void <b>endElement</b>()</dt><dd class="operation"><div>
 Creates an end instance time for the current time. The new instance time is added to the
 <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#Timing-BeginEnd-InstanceTimesLists"><em>end instance times list</em></a>.
 The behavior of this method is equivalent to <code>endElementAt(0)</code>.
</div></dd>
<dt id="animate-__smil__ElementTimeControl__endElementAt" class="operation">void <b>endElementAt</b>(in float <var>offset</var>)</dt><dd class="operation"><div>
 Creates a end instance time for the current time plus the specified
 offset. The new instance time is added to the
 <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#Timing-BeginEnd-InstanceTimesLists"><em>end instance times list</em></a>.

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>float <var>offset</var></div> <div> offset from the current document time, in seconds, at
   which to end the element.
</div></li></ol></dd></dl></dd></dl></dd></dl>

<p>For the corresponding Java binding, see
<a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#SMIL-Java-ElementTimeControl">section 6.4</a>
of SMIL Animation [<a href="#refs-ref-SMILANIM">SMILANIM</a>].</p>

<h3 id="animate-InterfaceTimeEvent">19.4.2 Interface TimeEvent</h3>


 <p>The <a class="idlinterface" href="#animate-InterfaceTimeEvent">TimeEvent</a>
 interface, defined in <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#DOMSupport">
 SMIL Animation: Supported interfaces</a>, provides specific
 contextual information associated with Time events.</p>
 <p>The different types of events that can occur are:</p>
 <dl>
   <dt><strong>beginEvent</strong></dt>
   <dd>
     This event is raised when the element local timeline begins
     to play. It will be raised each time the element begins the
     active duration (i.e. when it restarts, but not when it
     repeats). It may be raised both in the course of normal
     (i.e. scheduled or interactive) timeline play, as well as
     in the case that the element was begun with the
     <a class="idlattr" href="#animate-__smil__ElementTimeControl__beginElement">beginElement</a> or
     <a class="idlattr" href="#animate-__smil__ElementTimeControl__beginElementAt">beginElementAt</a> methods. Note that if an
     element is restarted while it is currently playing, the
     element will raise an end event and another begin event, as
     the element restarts. 
     <ul>
       <li>Bubbles: No</li>
       <li>Cancelable: No</li>
       <li>Context Info: None</li>
     </ul>
   </dd>
   <dt><strong>endEvent</strong></dt>
   <dd>
     This event is raised at the active end of the element. Note
     that this event is not raised at the simple end of each
     repeat. This event may be raised both in the course of
     normal (i.e. scheduled or interactive) timeline play, as
     well as in the case that the element was ended with the
     <a class="idlattr" href="#animate-__smil__ElementTimeControl__endElement">endElement</a> or <a class="idlattr" href="#animate-__smil__ElementTimeControl__endElementAt">endElementAt</a>
     methods. Note that if an element is restarted while it is
     currently playing, the element will raise an end event and
     another begin event, as the element restarts. 
     <ul>
       <li>Bubbles: No</li>
       <li>Cancelable: No</li>
       <li>Context Info: None</li>
     </ul>
   </dd>
   <dt><strong>repeatEvent</strong></dt>
   <dd>
     This event is raised when an element local timeline
     repeats. It will be raised each time the element repeats,
     after the first iteration.<br />
      The event provides a numerical indication of which repeat
     iteration is beginning. The value is a 0-based integer, but
     the repeat event is not raised for the first iteration and
     so the observed values of the detail attribute will be
     &gt;= 1. 
     <ul>
       <li>Bubbles: No</li>
       <li>Cancelable: No</li>
       <li>Context Info: detail (current iteration)</li>
     </ul>
   </dd>
 </dl>
<pre class="idl">interface <b>TimeEvent</b> : <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-Event">Event</a> {

  readonly attribute <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Views/views.html#Views-AbstractView">AbstractView</a> <a href="#animate-__smil__TimeEvent__view">view</a>;
  readonly attribute long <a href="#animate-__smil__TimeEvent__detail">detail</a>;

  void <a href="#animate-__smil__TimeEvent__initTimeEvent">initTimeEvent</a>(in DOMString typeArg, in <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Views/views.html#Views-AbstractView">AbstractView</a> viewArg, in long detailArg);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="animate-__smil__TimeEvent__view" class="attribute first-child"><b>view</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Views/views.html#Views-AbstractView">AbstractView</a>)</span></dt><dd class="attribute"><div>
 The <a class="idlattr" href="#animate-__smil__TimeEvent__view">view</a> attribute identifies the <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Views/views.html#Views-AbstractView">AbstractView</a>
 [<a href="#refs-ref-DOM2VIEWS">DOM2VIEWS</a>] from which the event
 was generated.
</div></dd>
<dt id="animate-__smil__TimeEvent__detail" class="attribute"><b>detail</b><span class="idl-type-parenthetical"> (readonly long)</span></dt><dd class="attribute"><div>
 Specifies some detail information about the Event, depending on the type
 of the event. For this event type, indicates the repeat number for the
 animation.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="animate-__smil__TimeEvent__initTimeEvent" class="operation first-child">void <b>initTimeEvent</b>(in DOMString <var>typeArg</var>, in <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Views/views.html#Views-AbstractView">AbstractView</a> <var>viewArg</var>, in long <var>detailArg</var>)</dt><dd class="operation"><div>
 The <a class="idlattr" href="#animate-__smil__TimeEvent__initTimeEvent">initTimeEvent</a> method is used to initialize the value of a
 <a class="idlinterface" href="#animate-InterfaceTimeEvent">TimeEvent</a> created through the <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-DocumentEvent">DocumentEvent</a> interface. This
 method may only be called before the <a class="idlinterface" href="#animate-InterfaceTimeEvent">TimeEvent</a> has been dispatched
 via the dispatchEvent method, though it may be called multiple times
 during that phase if necessary. If called multiple times, the final
 invocation takes precedence. 

</div><dl class="operation"><dt class="parameters-header">Parameters</dt><dd><ol class="parameters"><li class="parameter first-child"><div>DOMString <var>typeArg</var></div> <div> Specifies the event type.
</div></li><li class="parameter"><div><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Views/views.html#Views-AbstractView">AbstractView</a> <var>viewArg</var></div> <div> Specifies the Event's <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Views/views.html#Views-AbstractView">AbstractView</a>.
</div></li><li class="parameter"><div>long <var>detailArg</var></div> <div> Specifies the Event's detail.
</div></li></ol></dd></dl></dd></dl></dd></dl>

<p>For the corresponding Java binding, see
<a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/#SMIL-Java-TimeEvent">section 6.4</a>
of SMIL Animation [<a href="#refs-ref-SMILANIM">SMILANIM</a>].</p>

<h3 id="animate-InterfaceSVGAnimationElement">19.4.3 Interface SVGAnimationElement</h3>


 <p>The <a class="idlinterface" href="#animate-InterfaceSVGAnimationElement">SVGAnimationElement</a> interface is the base interface for all
 of the animation element interfaces: <a class="idlinterface" href="#animate-InterfaceSVGAnimateElement">SVGAnimateElement</a>,
 <a class="idlinterface" href="#animate-InterfaceSVGSetElement">SVGSetElement</a>, <a class="idlinterface" href="#animate-InterfaceSVGAnimateColorElement">SVGAnimateColorElement</a>,
 <a class="idlinterface" href="#animate-InterfaceSVGAnimateMotionElement">SVGAnimateMotionElement</a> and <a class="idlinterface" href="#animate-InterfaceSVGAnimateTransformElement">SVGAnimateTransformElement</a>.</p>

 <p>Unlike other SVG DOM interfaces, the SVG DOM does not specify
 convenience DOM properties corresponding to the various language
 attributes on SVG's animation elements. Specification of these
 convenience properties in a way that will be compatible with future
 versions of SMIL Animation is expected in a future version of SVG. The
 current method for accessing and modifying the attributes on the
 animation elements is to use the standard <code>getAttribute</code>,
 <code>setAttribute</code>, <code>getAttributeNS</code> and
 <code>setAttributeNS</code> defined in
 <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/">DOM Level 2 Core</a>
 [<a href="#refs-ref-DOM2">DOM2</a>].</p>
<pre class="idl">interface <b>SVGAnimationElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                                <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                                <a class="idlinterface" href="#animate-InterfaceElementTimeControl">ElementTimeControl</a> {

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <a href="#animate-__svg__SVGAnimationElement__targetElement">targetElement</a>;

  float <a href="#animate-__svg__SVGAnimationElement__getStartTime">getStartTime</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  float <a href="#animate-__svg__SVGAnimationElement__getCurrentTime">getCurrentTime</a>();
  float <a href="#animate-__svg__SVGAnimationElement__getSimpleDuration">getSimpleDuration</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="animate-__svg__SVGAnimationElement__targetElement" class="attribute first-child"><b>targetElement</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>)</span></dt><dd class="attribute"><div>
 The element which is being animated.
</div></dd></dl></dd><dt class="operations-header">Operations:</dt><dd><dl class="attributes">
<dt id="animate-__svg__SVGAnimationElement__getStartTime" class="operation first-child">float <b>getStartTime</b>()</dt><dd class="operation"><div>
 Returns the begin time, in seconds, for this animation element's current
 interval, if it exists, regardless of whether the interval has begun yet.
 If there is no current interval, then a DOMException with code
 INVALID_STATE_ERR is thrown.

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> The start time, in seconds, of this animation element's current
   interval.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code INVALID_STATE_ERR</dt><dd class="exception"> The animation element does not
   have a current interval.
</dd></dl></dd></dl></dd>
<dt id="animate-__svg__SVGAnimationElement__getCurrentTime" class="operation">float <b>getCurrentTime</b>()</dt><dd class="operation"><div>
 Returns the current time in seconds relative to time zero for the given
 time container.

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> The current time in seconds relative to time zero for the given
   time container.
</div></dd></dl></dd>
<dt id="animate-__svg__SVGAnimationElement__getSimpleDuration" class="operation">float <b>getSimpleDuration</b>()</dt><dd class="operation"><div>
 Returns the number of seconds for the simple duration for this animation.
 If the simple duration is undefined (e.g., the end time is indefinite),
 then an exception is raised.

</div><dl class="operation"><dt class="returns-header">Returns</dt><dd><div> number of seconds for the simple duration for this animation.
</div></dd><dt class="exceptions-header">Exceptions</dt><dd><dl class="exceptions"><dt class="exception first-child"><a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>, code NOT_SUPPORTED_ERR</dt><dd class="exception"> The simple duration is not
   determined on the given element.
</dd></dl></dd></dl></dd></dl></dd></dl>

<h3 id="animate-InterfaceSVGAnimateElement">19.4.4 Interface SVGAnimateElement</h3>



 <p>The <a class="idlinterface" href="#animate-InterfaceSVGAnimateElement">SVGAnimateElement</a> interface corresponds to the <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>
 element.</p>

 <p>Object-oriented access to the attributes of the <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a> element
 via the SVG DOM is not available.</p>
<pre class="idl">interface <b>SVGAnimateElement</b> : <a class="idlinterface" href="#animate-InterfaceSVGAnimationElement">SVGAnimationElement</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
};</pre>


<h3 id="animate-InterfaceSVGSetElement">19.4.5 Interface SVGSetElement</h3>



 <p>The <a class="idlinterface" href="#animate-InterfaceSVGSetElement">SVGSetElement</a> interface corresponds to the <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>
 element.</p>

 <p>Object-oriented access to the attributes of the <a href="#animate-SetElement"><span class="element-name">‘set’</span></a> element
 via the SVG DOM is not available.</p>
<pre class="idl">interface <b>SVGSetElement</b> : <a class="idlinterface" href="#animate-InterfaceSVGAnimationElement">SVGAnimationElement</a> {
};</pre>


<h3 id="animate-InterfaceSVGAnimateMotionElement">19.4.6 Interface SVGAnimateMotionElement</h3>



 <p>The <a class="idlinterface" href="#animate-InterfaceSVGAnimateMotionElement">SVGAnimateMotionElement</a> interface corresponds to the
 <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a> element.</p>

 <p>Object-oriented access to the attributes of the <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>
 element via the SVG DOM is not available.</p>
<pre class="idl">interface <b>SVGAnimateMotionElement</b> : <a class="idlinterface" href="#animate-InterfaceSVGAnimationElement">SVGAnimationElement</a> {
};</pre>


<h3 id="animate-InterfaceSVGMPathElement">19.4.7 Interface SVGMPathElement</h3>



 <p>The <a class="idlinterface" href="#animate-InterfaceSVGMPathElement">SVGMPathElement</a> interface corresponds to the <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a>
 element.</p>
<pre class="idl">interface <b>SVGMPathElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a> {
};</pre>


<h3 id="animate-InterfaceSVGAnimateColorElement">19.4.8 Interface SVGAnimateColorElement</h3>



 <p>The <a class="idlinterface" href="#animate-InterfaceSVGAnimateColorElement">SVGAnimateColorElement</a> interface corresponds to the
 <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a> element.</p>

 <p>Object-oriented access to the attributes of the <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>
 element via the SVG DOM is not available.</p>
<pre class="idl">interface <b>SVGAnimateColorElement</b> : <a class="idlinterface" href="#animate-InterfaceSVGAnimationElement">SVGAnimationElement</a>,
                                   <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
};</pre>


<h3 id="animate-InterfaceSVGAnimateTransformElement">19.4.9 Interface SVGAnimateTransformElement</h3>



 <p>The <a class="idlinterface" href="#animate-InterfaceSVGAnimateTransformElement">SVGAnimateTransformElement</a> interface corresponds to the
 <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a> element.</p>

 <p>Object-oriented access to the attributes of the
 <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a> element via the SVG DOM is not available.</p>
<pre class="idl">interface <b>SVGAnimateTransformElement</b> : <a class="idlinterface" href="#animate-InterfaceSVGAnimationElement">SVGAnimationElement</a> {
};</pre>


</div><hr class="chapter-divider" />
<div id="chapter-fonts">

<h1>20 Fonts</h1><h2 id="fonts-toc">Contents</h2><ul class="toc">
<li><a href="#fonts-Introduction">20.1 Introduction</a></li>
<li><a href="#fonts-SVGFontsOverview">20.2 Overview of SVG fonts</a></li>
<li><a href="#fonts-FontElement">20.3 The <span class="element-name">‘font’</span> element</a></li>
<li><a href="#fonts-GlyphElement">20.4 The <span class="element-name">‘glyph’</span> element</a></li>
<li><a href="#fonts-MissingGlyphElement">20.5 The <span class="element-name">‘missing-glyph’</span> element</a></li>
<li><a href="#fonts-GlyphSelectionRules">20.6 Glyph selection rules</a></li>
<li><a href="#fonts-KernElements">20.7 The <span class="element-name">‘hkern’</span> and <span class="element-name">‘vkern’</span> elements</a></li>
<li><a href="#fonts-FontDescriptions">20.8 Describing a font</a><ul class="toc">
<li><a href="#fonts-FontDescriptionsOverview">20.8.1 Overview of font descriptions</a></li>
<li><a href="#fonts-FontDescriptionsAlternatives">20.8.2 Alternative ways for providing a font description</a></li>
<li><a href="#fonts-FontFaceElement">20.8.3 The <span class="element-name">‘font-face’</span> element</a></li>
<li><a href="#fonts-FontFaceSrcElement">20.8.4 The <span class="element-name">‘font-face-src’</span> element</a></li>
<li><a href="#fonts-FontFaceURIElement">20.8.5 The <span class="element-name">‘font-face-uri’</span> and <span class="element-name">‘font-face-format’</span> elements</a></li>
<li><a href="#fonts-FontFaceNameElement">20.8.6 The <span class="element-name">‘font-face-name’</span> element</a></li></ul></li>
<li><a href="#fonts-DOMInterfaces">20.9 DOM interfaces</a><ul class="toc">
<li><a href="#fonts-InterfaceSVGFontElement">20.9.1 Interface SVGFontElement</a></li>
<li><a href="#fonts-InterfaceSVGGlyphElement">20.9.2 Interface SVGGlyphElement</a></li>
<li><a href="#fonts-InterfaceSVGMissingGlyphElement">20.9.3 Interface SVGMissingGlyphElement</a></li>
<li><a href="#fonts-InterfaceSVGHKernElement">20.9.4 Interface SVGHKernElement</a></li>
<li><a href="#fonts-InterfaceSVGVKernElement">20.9.5 Interface SVGVKernElement</a></li>
<li><a href="#fonts-InterfaceSVGFontFaceElement">20.9.6 Interface SVGFontFaceElement</a></li>
<li><a href="#fonts-InterfaceSVGFontFaceSrcElement">20.9.7 Interface SVGFontFaceSrcElement</a></li>
<li><a href="#fonts-InterfaceSVGFontFaceUriElement">20.9.8 Interface SVGFontFaceUriElement</a></li>
<li><a href="#fonts-InterfaceSVGFontFaceFormatElement">20.9.9 Interface SVGFontFaceFormatElement</a></li>
<li><a href="#fonts-InterfaceSVGFontFaceNameElement">20.9.10 Interface SVGFontFaceNameElement</a></li></ul></li></ul>

<h2 id="fonts-Introduction">20.1 Introduction</h2>

    <p>Reliable delivery of fonts is a requirement for SVG.
    Designers need to create SVG content with arbitrary fonts and
    know that the same graphical result will appear when the
    content is viewed by all end users, even when end users do not
    have the necessary fonts installed on their computers. This
    parallels the print world, where the designer uses a given font
    when authoring a drawing for print, and the graphical content
    appears exactly the same in the printed version as it appeared
    on the designer's authoring system.</p>
    <p>SVG utilizes the
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#q1">WebFonts</a>
    facility defined in CSS2
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.1) as a key
    mechanism for reliable delivery of font data to end users. In a
    common scenario, SVG authoring applications generate
    compressed, subsetted WebFonts
    for all text elements used by a given SVG document fragment.
    Typically, the WebFonts are saved in a location relative to the referencing
    document.</p>
    <p>One disadvantage to the WebFont
    facility to date is that specifications such as CSS2 do not require
    support of particular font formats. The result is that
    different implementations support different Web font formats,
    thereby making it difficult for Web site creators to post a
    single Web site using WebFonts that work across all user
    agents.</p>
    <p>To provide a common font format for SVG that is guaranteed
    to be supported by all <a href="#conform-ConformingSVGViewers">conforming SVG
    viewers</a>, SVG provides a facility to define fonts in SVG.
    This facility is called <span class="SVG-Term">SVG
    fonts</span>.</p>

    <p id="fonts-SVGFonts">SVG fonts can improve the semantic richness of graphics that
    represent text. For example, many company logos consist of the
    company name drawn artistically. In some cases, <a href="#chapter-access">accessibility</a> may be enhanced by
    expressing the logo as a series of glyphs in an SVG font and
    then rendering the logo as a <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element which references
    this font.</p>

<h2 id="fonts-SVGFontsOverview">20.2 Overview of SVG fonts</h2>

    <p>An <span class="SVG-Term">SVG font</span> is a font defined
    using SVG's <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a> element.</p>
    <p>The purpose of SVG fonts is to allow for delivery of glyph
    outlines in display-only environments. SVG fonts that accompany
    Web pages must be supported only in browsing and viewing
    situations. Graphics editing applications or file translation
    tools must not attempt to convert SVG fonts into system fonts.
    The intent is that SVG files be interchangeable between two
    content creators, but not the SVG fonts that might accompany
    these SVG files. Instead, each content creator will need to
    license the given font before being able to successfully edit
    the SVG file. The <a href="#fonts-FontFaceNameElement"><span class="element-name">‘font-face-name’</span></a> element
    indicates the name of licensed font to use for editing.</p>
    <p>SVG fonts contain unhinted font outlines. Because of this,
    on many implementations there will be limitations regarding the
    quality and legibility of text in small font sizes. For
    increased quality and legibility in small font sizes, content
    creators may want to use an alternate font technology, such as
    fonts that ship with operating systems or an alternate WebFont
    format.</p>
    <p>Because SVG fonts are expressed using SVG elements and
    attributes, in some cases the SVG font will take up more space
    than if the font were expressed in a different WebFont
    format which was especially designed for compact expression of
    font data. For the fastest delivery of Web pages, content
    creators may want to use an alternate font technology.</p>
    <p>A key value of SVG fonts is guaranteed availability in SVG
    user agents. In some situations, it might be appropriate for an
    SVG font to be the first choice for rendering some text. In
    other situations, the SVG font might be an alternate, back-up
    font in case the first choice font (perhaps a hinted system
    font) is not available to a given user.</p>
    <p>The characteristics and attributes of SVG fonts correspond
    closely to the font characteristics and parameters described in
    the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html">Fonts chapter</a>
    of the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/"><cite>Cascading Style Sheets (CSS) level 2</cite></a>
    specification ([<a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/">CSS2</a>], chapter 15). In this model,
    various font metrics, such as advance values and baseline
    locations, and the glyph outlines themselves, are expressed in
    units that are relative to an abstract square whose height is
    the intended distance between lines of type in the same type
    size. This square is called the <span class="SVG-Term">em
    square</span> and it is the design grid on which the glyph
    outlines are defined. The value of the <a href="#fonts-FontFaceElementUnitsPerEmAttribute"><span class="attr-name">‘units-per-em’</span></a>
    attribute on the <a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a> element specifies how
    many units the em square is divided into. Common values for
    other font types are, for example, 250 (Intellifont), 1000
    (Type 1) and 2048 (TrueType, TrueType GX and Open-Type). Unlike
    standard graphics in SVG, where the initial coordinate system
    has the y-axis pointing downward (see <a href="#coords-InitialCoordinateSystem">The initial
    coordinate system</a>), the design grid for SVG fonts, along
    with the initial coordinate system for the glyphs, has the
    y-axis pointing upward for consistency with accepted industry
    practice for many popular font formats.</p>
    <p>SVG fonts and their associated glyphs do not specify
    bounding box information. Because the glyph outlines are
    expressed as SVG graphics elements, the implementation has the
    option to render the glyphs either using standard graphics
    calls or by using special-purpose font rendering technology, in
    which case any necessary maximum bounding box and overhang
    calculations can be performed from analysis of the graphics
    elements contained within the glyph outlines.</p>
    <p>An SVG font can be either embedded within the same document
    that uses the font or saved as part of an external
    resource.</p>
    <p>Here is an example of how you might embed an SVG font inside
    of an SVG document.</p>
<pre>
&lt;?xml version="1.0" standalone="yes"?&gt;
&lt;svg width="400px" height="300px" version="1.1"
  xmlns = 'http://www.w3.org/2000/svg'&gt;
  &lt;defs&gt;
    &lt;font id="Font1" horiz-adv-x="1000"&gt;
      &lt;font-face font-family="Super Sans" font-weight="bold" font-style="normal"
          units-per-em="1000" cap-height="600" x-height="400"
          ascent="700" descent="300"
          alphabetic="0" mathematical="350" ideographic="400" hanging="500"&gt;
        &lt;font-face-src&gt;
          &lt;font-face-name name="Super Sans Bold"/&gt;
        &lt;/font-face-src&gt;
      &lt;/font-face&gt;
      &lt;missing-glyph&gt;&lt;path d="M0,0h200v200h-200z"/&gt;&lt;/missing-glyph&gt;
      &lt;glyph unicode="!" horiz-adv-x="300"&gt;&lt;!-- Outline of exclam. pt. glyph --&gt;&lt;/glyph&gt;
      &lt;glyph unicode="@"&gt;&lt;!-- Outline of @ glyph --&gt;&lt;/glyph&gt;
      &lt;!-- more glyphs --&gt;
    &lt;/font&gt;
  &lt;/defs&gt;
  &lt;text x="100" y="100" 
           style="font-family: 'Super Sans', Helvetica, sans-serif;
                  font-weight: bold; font-style: normal"&gt;Text 
    using embedded font&lt;/text&gt;
&lt;/svg&gt;
</pre>
    <p>Here is an example of how you might use the
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">CSS @font-face facility</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.3.1) to reference an SVG font which is saved
    in an external file. First referenced SVG font file:</p>
<pre>
&lt;?xml version="1.0" standalone="yes"?&gt;
&lt;svg width="100%" height="100%" version="1.1"
 xmlns = 'http://www.w3.org/2000/svg'&gt;
  &lt;defs&gt;
    &lt;font id="Font2" horiz-adv-x="1000"&gt;
      &lt;font-face font-family="Super Sans" font-weight="normal" font-style="italic"
          units-per-em="1000" cap-height="600" x-height="400"
          ascent="700" descent="300"
          alphabetic="0" mathematical="350" ideographic="400" hanging="500"&gt;
        &lt;font-face-src&gt;
          &lt;font-face-name name="Super Sans Italic"/&gt;
        &lt;/font-face-src&gt;
      &lt;/font-face&gt;
      &lt;missing-glyph&gt;&lt;path d="M0,0h200v200h-200z"/&gt;&lt;/missing-glyph&gt;
      &lt;glyph unicode="!" horiz-adv-x="300"&gt;&lt;!-- Outline of exclam. pt. glyph --&gt;&lt;/glyph&gt;
      &lt;glyph unicode="@"&gt;&lt;!-- Outline of @ glyph --&gt;&lt;/glyph&gt;
      &lt;!-- more glyphs --&gt;
    &lt;/font&gt;
  &lt;/defs&gt;
&lt;/svg&gt;
</pre>
    <p>The SVG file which uses/references the above SVG font</p>
<pre>
&lt;?xml version="1.0" standalone="yes"?&gt;
&lt;svg width="400px" height="300px" version="1.1"
 xmlns = 'http://www.w3.org/2000/svg'&gt;  
  &lt;defs&gt;
    &lt;style type="text/css"&gt;
      &lt;![CDATA[
        @font-face {
          font-family: 'Super Sans'; 
          font-weight: normal;
          font-style: italic;
          src: url("myfont.svg#Font2") format("svg")
        }
      ]]&gt;
   &lt;/style&gt;
  &lt;/defs&gt;
  &lt;text x="100" y="100"
           style="font-family: 'Super Sans'; font-weight:normal;
                  font-style: italic"&gt;Text using referenced font&lt;/text&gt;
&lt;/svg&gt;
</pre>

<h2 id="fonts-FontElement">20.3 The <span class="element-name">‘font’</span> element</h2>



<p>The <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a> element defines an SVG font.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘font’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></li><li><a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a></li><li><a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a></li><li><a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a></li><li><a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#fonts-FontElementHorizOriginXAttribute"><span class="attr-name">‘horiz-origin-x’</span></a></li><li><a href="#fonts-FontElementHorizOriginYAttribute"><span class="attr-name">‘horiz-origin-y’</span></a></li><li><a href="#fonts-FontElementHorizAdvXAttribute"><span class="attr-name">‘horiz-adv-x’</span></a></li><li><a href="#fonts-FontElementVertOriginXAttribute"><span class="attr-name">‘vert-origin-x’</span></a></li><li><a href="#fonts-FontElementVertOriginYAttribute"><span class="attr-name">‘vert-origin-y’</span></a></li><li><a href="#fonts-FontElementVertAdvYAttribute"><span class="attr-name">‘vert-adv-y’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#fonts-InterfaceSVGFontElement">SVGFontElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="fonts-FontElementHorizOriginXAttribute"><span class="adef">horiz-origin-x</span> = "<span class="attr-value">&lt;number&gt;</span>"</dt><dd>The X-coordinate in the font coordinate system of the
        origin of a glyph to be used when drawing horizontally
        oriented text. (Note that the origin applies to all glyphs
        in the font.)<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'0'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontElementHorizOriginYAttribute"><span class="adef">horiz-origin-y</span> = "<span class="attr-value">&lt;number&gt;</span>"</dt><dd>The Y-coordinate in the font coordinate system of the
        origin of a glyph to be used when drawing horizontally
        oriented text. (Note that the origin applies to all glyphs
        in the font.)<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'0'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontElementHorizAdvXAttribute"><span class="adef">horiz-adv-x</span> = "<span class="attr-value">&lt;number&gt;</span>"</dt><dd>The default horizontal advance after rendering a glyph
        in horizontal orientation. Glyph widths are required to be
        non-negative, even if the glyph is typically rendered
        right-to-left, as in Hebrew and Arabic scripts.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontElementVertOriginXAttribute"><span class="adef">vert-origin-x</span> = "<span class="attr-value">&lt;number&gt;</span>"</dt><dd>The default X-coordinate in the font coordinate system
        of the origin of a glyph to be used when drawing vertically
        oriented text.<br />
         If the attribute is not specified, the effect is as if the
        attribute were set to half of the effective value of
        attribute <a href="#fonts-FontElementHorizAdvXAttribute"><span class="attr-name">‘horiz-adv-x’</span></a>.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontElementVertOriginYAttribute"><span class="adef">vert-origin-y</span> = "<span class="attr-value">&lt;number&gt;</span>"</dt><dd>The default Y-coordinate in the font coordinate system
        of the origin of a glyph to be used when drawing vertically
        oriented text.<br />
         If the attribute is not specified, the effect is as if the
        attribute were set to the position specified by the font's
        <a href="#fonts-FontFaceElementAscentAttribute"><span class="attr-name">‘ascent’</span></a> attribute.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontElementVertAdvYAttribute"><span class="adef">vert-adv-y</span> = "<span class="attr-value">&lt;number&gt;</span>"</dt><dd>The default vertical advance after rendering a glyph in
        vertical orientation.<br />
         If the attribute is not specified, the effect is as if a
        value equivalent of one <em>em</em> were specified (see
        <a href="#fonts-FontFaceElementUnitsPerEmAttribute"><span class="attr-name">‘units-per-em’</span></a>).<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd></dl>
    </div>

<p>Each <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a> element must have a <a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a>
child element which describes various characteristics of the font.</p>



<h2 id="fonts-GlyphElement">20.4 The <span class="element-name">‘glyph’</span> element</h2>



    <p>The <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> element
    defines the graphics for a given glyph. The coordinate system
    for the glyph is defined by the various attributes in the
    <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a> element.</p>
    <p>The graphics that make up the <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> can be  a single <a href="#paths-PathData">path data</a> specification within
    the <a href="#fonts-GlyphElementDAttribute"><span class="attr-name">‘d’</span></a> attribute,  arbitrary SVG as
    content within the <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, or both.
    These two alternatives are processed differently (see
    below).</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘glyph’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermContainerElement">Container element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#intro-TermShapeElement">shape elements</a><span class="expanding"> — <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></span></li><li><a href="#intro-TermStructuralElement">structural elements</a><span class="expanding"> — <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></span></li><li><a href="#intro-TermGradientElement">gradient elements</a><span class="expanding"> — <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></span></li><li><a href="#linking-AElement"><span class="element-name">‘a’</span></a></li><li><a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a></li><li><a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a></li><li><a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a></li><li><a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a></li><li><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></li><li><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></li><li><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></li><li><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></li><li><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></li><li><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></li><li><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></li><li><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></li><li><a href="#script-ScriptElement"><span class="element-name">‘script’</span></a></li><li><a href="#styling-StyleElement"><span class="element-name">‘style’</span></a></li><li><a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a></li><li><a href="#text-TextElement"><span class="element-name">‘text’</span></a></li><li><a href="#linking-ViewElement"><span class="element-name">‘view’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#fonts-GlyphElementDAttribute"><span class="attr-name">‘d’</span></a></li><li><a href="#fonts-GlyphElementHorizAdvXAttribute"><span class="attr-name">‘horiz-adv-x’</span></a></li><li><a href="#fonts-GlyphElementVertOriginXAttribute"><span class="attr-name">‘vert-origin-x’</span></a></li><li><a href="#fonts-GlyphElementVertOriginYAttribute"><span class="attr-name">‘vert-origin-y’</span></a></li><li><a href="#fonts-GlyphElementVertAdvYAttribute"><span class="attr-name">‘vert-adv-y’</span></a></li><li><a href="#fonts-GlyphElementUnicodeAttribute"><span class="attr-name">‘unicode’</span></a></li><li><a href="#fonts-GlyphElementGlyphNameAttribute"><span class="attr-name">‘glyph-name’</span></a></li><li><a href="#fonts-GlyphElementOrientationAttribute"><span class="attr-name">‘orientation’</span></a></li><li><a href="#fonts-GlyphElementArabicFormAttribute"><span class="attr-name">‘arabic-form’</span></a></li><li><a href="#fonts-GlyphElementLangAttribute"><span class="attr-name">‘lang’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#fonts-InterfaceSVGGlyphElement">SVGGlyphElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="fonts-GlyphElementUnicodeAttribute"><span class="adef">unicode</span> = "<span class="attr-value">&lt;string&gt;</span>"</dt><dd>One or more Unicode characters indicating the sequence
        of Unicode characters which corresponds to this glyph. If a
        character is provided, then this glyph corresponds to the
        given Unicode character. If multiple characters are
        provided, then this glyph corresponds to the given sequence
        of Unicode characters. One use of a sequence of characters
        is ligatures. For example, if <span class="attr-value">unicode="ffl"</span>, then the given
        glyph will be used to render the sequence of characters
        "f", "f", and "l".<br />
        <br />
         It is often useful to refer to characters using XML
        character references expressed in hexadecimal notation or
        decimal notation. For example, <span class="attr-value">unicode="ffl"</span> could be expressed
        as XML character references in hexadecimal notation as
        <span class="attr-value">unicode="&amp;#x66;&amp;#x66;&amp;#x6c;"</span>
        or in decimal notation as <span class="attr-value">unicode="&amp;#102;&amp;#102;&amp;#108;"</span>.<br />
        <br />
         The <a href="#fonts-GlyphElementUnicodeAttribute"><span class="attr-name">‘unicode’</span></a> attribute
        contributes to the process for deciding which glyph(s) are
        used to represent which character(s). See <a href="#fonts-GlyphSelectionRules">glyph selection
        rules</a>. If the <a href="#fonts-GlyphElementUnicodeAttribute"><span class="attr-name">‘unicode’</span></a> attribute is not
        provided for a given <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, then the only way
        to use this glyph is via an <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> reference.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-GlyphElementGlyphNameAttribute"><span class="adef">glyph-name</span> = "<span class="attr-value">&lt;name&gt; [, &lt;name&gt; ]*</span>
        "</dt><dd>A name for the glyph. It is recommended that glyph
        names be unique within a font. The glyph names can be used
        in situations where Unicode character numbers do not
        provide sufficient information to access the correct glyph,
        such as when there are multiple glyphs per Unicode
        character. The glyph names can be referenced in <a href="#fonts-KernElements">kerning</a>
        definitions.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-GlyphElementDAttribute"><span class="adef">d</span> = "<span class="attr-value">path
        data</span>"</dt><dd>The definition of the outline of a glyph, using the
        same syntax as for the <a href="#paths-DAttribute"><span class="attr-name">‘d’</span></a> attribute on a <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>
        element. See <a href="#paths-PathData">Path data</a>.<br />
         See below for a discussion of this attribute.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-GlyphElementOrientationAttribute"><span class="adef">orientation</span> = "<span class="attr-value">h | v</span>"</dt><dd>Indicates that the given glyph is only to be used for a
        particular inline-progression-direction (i.e., horizontal
        or vertical). If the attribute is not specified, then the
        glyph can be used in all cases (i.e., both horizontal and
        vertical inline-progression-direction).<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-GlyphElementArabicFormAttribute"><span class="adef">arabic-form</span> = "<span class="attr-value">initial | medial | terminal |
        isolated</span>"</dt><dd>For Arabic glyphs, indicates which of the four possible
        forms this glyph represents.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-GlyphElementLangAttribute"><span class="adef">lang</span> = "<span class="attr-value">%LanguageCodes;</span>"</dt><dd>The attribute value is a comma-separated list of
        language names as defined in
        <a href="http://www.ietf.org/rfc/bcp/bcp47.txt">BCP 47</a>
        [<a href="#refs-ref-BCP47">BCP47</a>].
        The glyph can be used if the <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a> attribute exactly
        matches one of the languages given in the value of this
        parameter, or if the <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a> attribute exactly
        equals a prefix of one of the languages given in the value
        of this parameter such that the first tag character
        following the prefix is "-".<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-GlyphElementHorizAdvXAttribute"><span class="adef">horiz-adv-x</span> = "<span class="attr-value">&lt;number&gt;</span>"</dt><dd>The horizontal advance after rendering the glyph in
        horizontal orientation. If the attribute is not specified,
        the effect is as if the attribute were set to the value of
        the font's <a href="#fonts-FontElementHorizAdvXAttribute"><span class="attr-name">‘horiz-adv-x’</span></a> attribute.<br />
         Glyph widths are required to be non-negative, even if the
        glyph is typically rendered right-to-left, as in Hebrew and
        Arabic scripts.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-GlyphElementVertOriginXAttribute"><span class="adef">vert-origin-x</span> = "<span class="attr-value">&lt;number&gt;</span>"</dt><dd>The X-coordinate in the font coordinate system of the
        origin of the glyph to be used when drawing vertically
        oriented text.<br />
         If the attribute is not specified, the effect is as if the
        attribute were set to the value of the font's <a href="#fonts-FontElementVertOriginXAttribute"><span class="attr-name">‘vert-origin-x’</span></a>
        attribute.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-GlyphElementVertOriginYAttribute"><span class="adef">vert-origin-y</span> = "<span class="attr-value">&lt;number&gt;</span>"</dt><dd>The Y-coordinate in the font coordinate system of the
        origin of a glyph to be used when drawing vertically
        oriented text.<br />
         If the attribute is not specified, the effect is as if the
        attribute were set to the value of the font's <a href="#fonts-FontElementVertOriginYAttribute"><span class="attr-name">‘vert-origin-y’</span></a>
        attribute.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-GlyphElementVertAdvYAttribute"><span class="adef">vert-adv-y</span> = "<span class="attr-value">&lt;number&gt;</span>"</dt><dd>The vertical advance after rendering a glyph in
        vertical orientation.<br />
         If the attribute is not specified, the effect is as if the
        attribute were set to the value of the font's <a href="#fonts-FontElementVertAdvYAttribute"><span class="attr-name">‘vert-adv-y’</span></a> attribute.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd></dl>
    </div>
    <p>The graphics for the <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> can be specified using
    either the <a href="#fonts-GlyphElementDAttribute"><span class="attr-name">‘d’</span></a> attribute or arbitrary SVG as
    content within the <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>.</p>
    <p>If the <a href="#fonts-GlyphElementDAttribute"><span class="attr-name">‘d’</span></a> attribute is specified, then the
    path data within this attribute is processed as follows:</p>
    <ul><li>Any relative coordinates within the path data
      specification are converted into equivalent absolute
      coordinates</li><li>Each of these absolute coordinates is transformed from
      the font coordinate system into the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element's current
      coordinate system such that the origin of the font coordinate
      system is properly positioned and rotated to align with the
      <a href="#text-CurrentTextPosition">current text
      position</a> and orientation for the glyph, and scaled so
      that the correct <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a> is achieved.</li><li>The resulting, transformed path specification is rendered
      as if it were a <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element, using the
      styling properties that apply to the characters which
      correspond to the given glyph, and ignoring any styling
      properties specified on the <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a> element or the
      <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> element.</li></ul>
    <p>If the <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> has child
    elements, then those child elements are rendered in a manner
    similar to how the <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> element renders a
    referenced symbol. The rendering effect is as if the contents
    of the referenced <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>
    element were deeply cloned into a separate non-exposed DOM
    tree. Because the cloned DOM tree is non-exposed, the SVG DOM
    does not show the cloned instance.</p>
    <p>For user agents that support <a href="#styling-StylingWithCSS">Styling with CSS</a>, the
    conceptual deep cloning of the referenced <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> element into a non-exposed
    DOM tree also copies any property values resulting from
    <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html">the CSS cascade</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], chapter 6)
    on the referenced <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> and
    its contents, and also applies any property values on the
    <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a> element. CSS2 selectors
    can be applied to the original (i.e., referenced) elements
    because they are part of the formal document structure. CSS2
    selectors cannot be applied to the (conceptually) cloned DOM
    tree because its contents are not part of the formal document
    structure.</p>
    <p>Property inheritance, however, works as if the referenced
    <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> had been textually
    included as a deeply cloned child within the document tree. The
    referenced <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> inherits
    properties from the element that contains the characters that
    correspond to the <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>.
    The <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> does not inherit
    properties from the <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a> element's original
    parents.</p>
    <p>In the generated content, for each instance of a given <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, a
    <a href="#struct-GElement"><span class="element-name">‘g’</span></a> is created which carries
    with it all property values resulting from the CSS cascade
    on the <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a> element for the
    referenced <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>. Within
    this <a href="#struct-GElement"><span class="element-name">‘g’</span></a> is another <a href="#struct-GElement"><span class="element-name">‘g’</span></a> which carries with it all
    property values resulting from the CSS cascade
    on the <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> element. The
    original contents of the <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> element are deep-cloned
    within the inner <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element.</p>
    <p>If the <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> has both a
    <a href="#fonts-GlyphElementDAttribute"><span class="attr-name">‘d’</span></a> attribute and child elements,
    the <a href="#fonts-GlyphElementDAttribute"><span class="attr-name">‘d’</span></a> attribute is rendered first, and
    then the child elements.</p>
    <p>In general, the <a href="#fonts-GlyphElementDAttribute"><span class="attr-name">‘d’</span></a> attribute renders in the same
    manner as system fonts. For example, a dashed pattern will
    usually look the same if applied to a system font or to an SVG
    font which defines its glyphs using the <a href="#fonts-GlyphElementDAttribute"><span class="attr-name">‘d’</span></a> attribute. Many implementations
    will be able to render glyphs defined with the <a href="#fonts-GlyphElementDAttribute"><span class="attr-name">‘d’</span></a> attribute quickly and will be
    able to use a font cache for further performance gains.</p>
    <p>Defining a glyph by including child elements within the
    <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> gives greater
    flexibility but more complexity. Different fill and stroke
    techniques can be used on different parts of the glyphs. For
    example, the base of an "i" could be red, and the dot could be
    blue. This approach has an inherent complexity with units. Any
    properties specified on a text elements which represents a
    length, such as the <a href="#painting-StrokeWidthProperty"><span class="prop-name">‘stroke-width’</span></a> property, might
    produce surprising results since the length value will be
    processed in the coordinate system of the glyph.</p>



<h2 id="fonts-MissingGlyphElement">20.5 The <span class="element-name">‘missing-glyph’</span> element</h2>



<p>The <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a> element defines the graphics to use if
there is an attempt to draw a glyph from a given font and the given
glyph has not been defined. The attributes on the <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a>
element have the same meaning as the corresponding attributes on the
<a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> element.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘missing-glyph’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermContainerElement">Container element</a></dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#intro-TermAnimationElement">animation elements</a><span class="expanding"> — <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></span></li><li><a href="#intro-TermDescriptiveElement">descriptive elements</a><span class="expanding"> — <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></span></li><li><a href="#intro-TermShapeElement">shape elements</a><span class="expanding"> — <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></span></li><li><a href="#intro-TermStructuralElement">structural elements</a><span class="expanding"> — <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></span></li><li><a href="#intro-TermGradientElement">gradient elements</a><span class="expanding"> — <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></span></li><li><a href="#linking-AElement"><span class="element-name">‘a’</span></a></li><li><a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a></li><li><a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a></li><li><a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a></li><li><a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a></li><li><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></li><li><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></li><li><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></li><li><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></li><li><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></li><li><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></li><li><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></li><li><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></li><li><a href="#script-ScriptElement"><span class="element-name">‘script’</span></a></li><li><a href="#styling-StyleElement"><span class="element-name">‘style’</span></a></li><li><a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a></li><li><a href="#text-TextElement"><span class="element-name">‘text’</span></a></li><li><a href="#linking-ViewElement"><span class="element-name">‘view’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#fonts-GlyphElementDAttribute"><span class="attr-name">‘d’</span></a></li><li><a href="#fonts-GlyphElementHorizAdvXAttribute"><span class="attr-name">‘horiz-adv-x’</span></a></li><li><a href="#fonts-GlyphElementVertOriginXAttribute"><span class="attr-name">‘vert-origin-x’</span></a></li><li><a href="#fonts-GlyphElementVertOriginYAttribute"><span class="attr-name">‘vert-origin-y’</span></a></li><li><a href="#fonts-GlyphElementVertAdvYAttribute"><span class="attr-name">‘vert-adv-y’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#fonts-InterfaceSVGMissingGlyphElement">SVGMissingGlyphElement</a></li></ul></dd></dl></div>



<h2 id="fonts-GlyphSelectionRules">20.6 Glyph selection rules</h2>

<p>When determining the glyph(s) to draw a given character sequence, the
<a href="#fonts-FontElement"><span class="element-name">‘font’</span></a> element is searched from its first <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>
element to its last in logical order to see if the upcoming sequence
of Unicode characters to be rendered matches the sequence of Unicode
characters specified in the <a href="#fonts-GlyphElementUnicodeAttribute"><span class="attr-name">‘unicode’</span></a> attribute for the
given <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> element. The first successful match is used. Thus,
the "ffl" ligature needs to be defined in the font before the "f" glyph;
otherwise, the "ffl" will never be selected.</p>

<p>Note that any occurrences of <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a> take precedence over
the above glyph selection rules within an SVG font.</p>

<h2 id="fonts-KernElements">20.7 The <span class="element-name">‘hkern’</span> and <span class="element-name">‘vkern’</span> elements</h2>

    <p>The <a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a> and <a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a> elements define kerning
    pairs for horizontally-oriented and vertically-oriented pairs
    of glyphs, respectively.</p>
    <p>Kern pairs identify pairs of glyphs within a single font
    whose inter-glyph spacing is adjusted when the pair of glyphs
    are rendered next to each other. In addition to the requirement
    that the pair of glyphs are from the same font, SVG font
    kerning happens only when the two glyphs correspond to
    characters which have the same values for properties <a href="#text-FontFamilyProperty"><span class="prop-name">‘font-family’</span></a>,
    <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a>, <a href="#text-FontStyleProperty"><span class="prop-name">‘font-style’</span></a>, <a href="#text-FontWeightProperty"><span class="prop-name">‘font-weight’</span></a>,
    <a href="#text-FontVariantProperty"><span class="prop-name">‘font-variant’</span></a>, <a href="#text-FontStretchProperty"><span class="prop-name">‘font-stretch’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="prop-name">‘font-size-adjust’</span></a>
    and <a href="#text-FontProperty"><span class="prop-name">‘font’</span></a>.</p>
    <p>An example of a kerning pair are the letters "Va", where the
    typographic result might look better if the letters "V" and the
    "a" were rendered slightly closer together.</p>
    <p>Right-to-left and bidirectional text in SVG is laid out in a
    two-step process, which is described in <a href="#text-RelationshipWithBiDirectionality">Relationship
    with bidirectionality</a>. If SVG fonts are used, before
    kerning is applied, characters are re-ordered into
    left-to-right (or top-to-bottom, for vertical text) visual
    rendering order. Kerning from SVG fonts is then applied on
    pairs of glyphs which are rendered contiguously. The first
    glyph in the kerning pair is the left (or top) glyph in visual
    rendering order. The second glyph in the kerning pair is the
    right (or bottom) glyph in the pair.</p>
    <p>For convenience to font designers and to minimize file
    sizes, a single <a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a> and
    <a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a> can define a single
    kerning adjustment value between one set of glyphs (e.g., a
    range of Unicode characters) and another set of glyphs (e.g.,
    another range of Unicode characters).</p>

    <p id="fonts-HKernElement">The <a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a> element
    defines kerning pairs and adjustment values in the horizontal
    advance value when drawing pairs of glyphs which the two glyphs
    are contiguous and are both rendered horizontally (i.e.,
    side-by-side). The spacing between characters is reduced by the
    kerning adjustment. (Negative kerning adjustments increase the
    spacing between characters.)</p>

    <p id="fonts-VKernElement">The <a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a> element
    defines kerning pairs and adjustment values in the vertical
    advance value when drawing pairs of glyphs together when
    stacked vertically. The spacing between characters is reduced
    by the kerning adjustment.</p>



<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘hkern’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Empty.</dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#fonts-HKernElementU1Attribute"><span class="attr-name">‘u1’</span></a></li><li><a href="#fonts-HKernElementG1Attribute"><span class="attr-name">‘g1’</span></a></li><li><a href="#fonts-HKernElementU2Attribute"><span class="attr-name">‘u2’</span></a></li><li><a href="#fonts-HKernElementG2Attribute"><span class="attr-name">‘g2’</span></a></li><li><a href="#fonts-HKernElementKAttribute"><span class="attr-name">‘k’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#fonts-InterfaceSVGHKernElement">SVGHKernElement</a></li></ul></dd></dl></div>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘vkern’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Empty.</dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#fonts-HKernElementU1Attribute"><span class="attr-name">‘u1’</span></a></li><li><a href="#fonts-HKernElementG1Attribute"><span class="attr-name">‘g1’</span></a></li><li><a href="#fonts-HKernElementU2Attribute"><span class="attr-name">‘u2’</span></a></li><li><a href="#fonts-HKernElementG2Attribute"><span class="attr-name">‘g2’</span></a></li><li><a href="#fonts-HKernElementKAttribute"><span class="attr-name">‘k’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#fonts-InterfaceSVGVKernElement">SVGVKernElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="fonts-HKernElementU1Attribute"><span class="adef">u1</span> = "<span class="attr-value">[&lt;character&gt; | &lt;urange&gt; ] [,
        [&lt;character&gt; | &lt;urange&gt;] ]*</span> "</dt><dd>A sequence (comma-separated) of Unicode characters
        (refer to the description of the <a href="#fonts-GlyphElementUnicodeAttribute"><span class="attr-name">‘unicode’</span></a>
        attribute to the <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> element for a
        description of how to express individual Unicode
        characters) and/or ranges of Unicode characters (see
        <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#dataqual">description of ranges of Unicode characters in CSS2</a>;
        [<a href="#refs-ref-CSS2">CSS2</a>], section 15.3.3) which
        identify a set of possible first glyphs in the kerning
        pair. If a given Unicode character within the set has
        multiple corresponding <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> elements (i.e.,
        there are multiple <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> elements with the
        same <a href="#fonts-GlyphElementUnicodeAttribute"><span class="attr-name">‘unicode’</span></a> attribute value, but
        different <a href="#fonts-GlyphElementGlyphNameAttribute"><span class="attr-name">‘glyph-name’</span></a> values), then all
        such glyphs are included in the set. Comma is the separator
        character; thus, to kern a comma, specify the comma as part
        of a range of Unicode characters or as a glyph name using
        the <a href="#fonts-HKernElementG1Attribute"><span class="attr-name">‘g1’</span></a> attribute. The total set of
        possible first glyphs in the kerning pair is the union of
        glyphs specified by the <a href="#fonts-HKernElementU1Attribute"><span class="attr-name">‘u1’</span></a> and <a href="#fonts-HKernElementG1Attribute"><span class="attr-name">‘g1’</span></a> attributes.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-HKernElementG1Attribute"><span class="adef">g1</span> = "<span class="attr-value">&lt;name&gt; [, &lt;name&gt; ]*</span>
        "</dt><dd>A sequence (comma-separated) of glyph names (i.e.,
        values that match <a href="#fonts-GlyphElementGlyphNameAttribute"><span class="attr-name">‘glyph-name’</span></a> attributes
        on <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> elements) which
        identify a set of possible first glyphs in the kerning
        pair. All glyphs with the given glyph name are included in
        the set. The total set of possible first glyphs in the
        kerning pair is the union of glyphs specified by the
        <a href="#fonts-HKernElementU1Attribute"><span class="attr-name">‘u1’</span></a> and <a href="#fonts-HKernElementG1Attribute"><span class="attr-name">‘g1’</span></a> attributes.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-HKernElementU2Attribute"><span class="adef">u2</span> = "<span class="attr-value">[&lt;character&gt; | &lt;urange&gt;] [,
        [&lt;character&gt; | &lt;urange&gt;] ]*</span> "</dt><dd>Same as the <a href="#fonts-HKernElementU1Attribute"><span class="attr-name">‘u1’</span></a> attribute, except that <a href="#fonts-HKernElementU2Attribute"><span class="attr-name">‘u2’</span></a>
        specifies possible second glyphs in the kerning pair.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-HKernElementG2Attribute"><span class="adef">g2</span> = "<span class="attr-value">&lt;name&gt; [, &lt;name&gt; ]*</span>
        "</dt><dd>Same as the <a href="#fonts-HKernElementG1Attribute"><span class="attr-name">‘g1’</span></a> attribute, except that <a href="#fonts-HKernElementG2Attribute"><span class="attr-name">‘g2’</span></a>
        specifies possible second
        glyphs in the kerning pair.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-HKernElementKAttribute"><span class="adef">k</span> = "<span class="attr-value">&lt;number&gt;</span>"</dt><dd>The amount to decrease the spacing between the two
        glyphs in the kerning pair. The value is in the font
        coordinate system. This attribute is required.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd></dl>
    </div>

<p>At least one each of <a href="#fonts-HKernElementU1Attribute"><span class="attr-name">‘u1’</span></a> or <a href="#fonts-HKernElementG1Attribute"><span class="attr-name">‘g1’</span></a> and at least one
of <a href="#fonts-HKernElementU2Attribute"><span class="attr-name">‘u2’</span></a> or <a href="#fonts-HKernElementG2Attribute"><span class="attr-name">‘g2’</span></a> must be provided.</p>



<h2 id="fonts-FontDescriptions">20.8 Describing a font</h2>

<h3 id="fonts-FontDescriptionsOverview">20.8.1 Overview of font descriptions</h3>

    <p>A font description provides the bridge between an author's
    font specification and the font data, which is the data needed
    to format text and to render the abstract glyphs to which the
    characters map — the actual scalable outlines or bitmaps. Fonts
    are referenced by properties, such as the <a href="#text-FontFamilyProperty"><span class="prop-name">‘font-family’</span></a> property.</p>
    <p>Each specified font description is added to the font
    database and so that it can be used to select the relevant font
    data. The font description contains descriptors such as the
    location of the font data on the Web, and characterizations of
    that font data. The font descriptors are also needed to match
    the font properties to particular font data. The level of
    detail of a font description can vary from just the name of the
    font up to a list of glyph widths.</p>
    <p>For more about font descriptions, refer to the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html">Fonts chapter</a>
    in the CSS2 specification ([<a href="#refs-ref-CSS2">CSS2</a>], chapter 15).</p>

<h3 id="fonts-FontDescriptionsAlternatives">20.8.2 Alternative ways for providing a font description</h3>

    <p>Font descriptions can be specified in either of the
    following ways:</p>
    <ul><li>a <a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a> element</li><li id="fonts-AtFontFace">an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">@font-face rule</a>
      ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.3.1) within a CSS
      style sheet (only applicable for user agents which support using CSS to
      style the SVG content)</li></ul>

<h3 id="fonts-FontFaceElement">20.8.3 The <span class="element-name">‘font-face’</span> element</h3>



    <p>The <a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a> element
    corresponds directly to the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">@font-face facility</a>
    in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.3.1). It can be used to describe the
    characteristics of any font, SVG font or otherwise.</p>
    <p>When used to describe the characteristics of an SVG font
    contained within the same document, it is recommended that the
    <a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a> element be a
    child of the <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a> element it is describing
    so that the <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a> element can be
    self-contained and fully-described. In this case, any
    <a href="#fonts-FontFaceSrcElement"><span class="element-name">‘font-face-src’</span></a> elements within
    the <a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a> element are
    ignored as it is assumed that the <a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a> element is describing
    the characteristics of its parent <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a> element.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘font-face’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Any number of <a href="#intro-TermDescriptiveElement"><span class="svg-term">descriptive elements</span></a> and at most one <a href="#fonts-FontFaceSrcElement"><span class="element-name">‘font-face-src’</span></a> element, in any order.</dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#fonts-FontFaceElementFontFamilyAttribute"><span class="attr-name">‘font-family’</span></a></li><li><a href="#fonts-FontFaceElementFontStyleAttribute"><span class="attr-name">‘font-style’</span></a></li><li><a href="#fonts-FontFaceElementFontVariantAttribute"><span class="attr-name">‘font-variant’</span></a></li><li><a href="#fonts-FontFaceElementFontWeightAttribute"><span class="attr-name">‘font-weight’</span></a></li><li><a href="#fonts-FontFaceElementFontStretchAttribute"><span class="attr-name">‘font-stretch’</span></a></li><li><a href="#fonts-FontFaceElementFontSizeAttribute"><span class="attr-name">‘font-size’</span></a></li><li><a href="#fonts-FontFaceElementUnicodeRangeAttribute"><span class="attr-name">‘unicode-range’</span></a></li><li><a href="#fonts-FontFaceElementUnitsPerEmAttribute"><span class="attr-name">‘units-per-em’</span></a></li><li><a href="#fonts-FontFaceElementPanose1Attribute"><span class="attr-name">‘panose-1’</span></a></li><li><a href="#fonts-FontFaceElementStemvAttribute"><span class="attr-name">‘stemv’</span></a></li><li><a href="#fonts-FontFaceElementStemhAttribute"><span class="attr-name">‘stemh’</span></a></li><li><a href="#fonts-FontFaceElementSlopeAttribute"><span class="attr-name">‘slope’</span></a></li><li><a href="#fonts-FontFaceElementCapHeightAttribute"><span class="attr-name">‘cap-height’</span></a></li><li><a href="#fonts-FontFaceElementXHeightAttribute"><span class="attr-name">‘x-height’</span></a></li><li><a href="#fonts-FontFaceElementAccentHeightAttribute"><span class="attr-name">‘accent-height’</span></a></li><li><a href="#fonts-FontFaceElementAscentAttribute"><span class="attr-name">‘ascent’</span></a></li><li><a href="#fonts-FontFaceElementDescentAttribute"><span class="attr-name">‘descent’</span></a></li><li><a href="#fonts-FontFaceElementWidthsAttribute"><span class="attr-name">‘widths’</span></a></li><li><a href="#fonts-FontFaceElementBboxAttribute"><span class="attr-name">‘bbox’</span></a></li><li><a href="#fonts-FontFaceElementIdeographicAttribute"><span class="attr-name">‘ideographic’</span></a></li><li><a href="#fonts-FontFaceElementAlphabeticAttribute"><span class="attr-name">‘alphabetic’</span></a></li><li><a href="#fonts-FontFaceElementMathematicalAttribute"><span class="attr-name">‘mathematical’</span></a></li><li><a href="#fonts-FontFaceElementHangingAttribute"><span class="attr-name">‘hanging’</span></a></li><li><a href="#fonts-FontFaceElementVertIdeographicAttribute"><span class="attr-name">‘v-ideographic’</span></a></li><li><a href="#fonts-FontFaceElementVertAlphabeticAttribute"><span class="attr-name">‘v-alphabetic’</span></a></li><li><a href="#fonts-FontFaceElementVertMathematicalAttribute"><span class="attr-name">‘v-mathematical’</span></a></li><li><a href="#fonts-FontFaceElementVertHangingAttribute"><span class="attr-name">‘v-hanging’</span></a></li><li><a href="#fonts-FontFaceElementUnderlinePositionAttribute"><span class="attr-name">‘underline-position’</span></a></li><li><a href="#fonts-FontFaceElementUnderlineThicknessAttribute"><span class="attr-name">‘underline-thickness’</span></a></li><li><a href="#fonts-FontFaceElementStrikeThroughPositionAttribute"><span class="attr-name">‘strikethrough-position’</span></a></li><li><a href="#fonts-FontFaceElementStrikeThroughThicknessAttribute"><span class="attr-name">‘strikethrough-thickness’</span></a></li><li><a href="#fonts-FontFaceElementOverlinePositionAttribute"><span class="attr-name">‘overline-position’</span></a></li><li><a href="#fonts-FontFaceElementOverlineThicknessAttribute"><span class="attr-name">‘overline-thickness’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#fonts-InterfaceSVGFontFaceElement">SVGFontFaceElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="fonts-FontFaceElementFontFamilyAttribute"><span class="adef">font-family</span> = "<span class="attr-value">&lt;string&gt;</span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-font-family">
        <span class="prop-name">‘font-family’</span></a> descriptor
        within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementFontStyleAttribute"><span class="adef">font-style</span> = "<span class="attr-value">all | [ normal | italic | oblique] [,
        [normal | italic | oblique]]*</span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-font-style">
        <span class="prop-name">‘font-style’</span></a> descriptor
        within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>. The style of a font. Takes on the same
        values as the <a href="#text-FontStyleProperty"><span class="prop-name">‘font-style’</span></a>
        property, except that a comma-separated list is
        permitted.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'all'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementFontVariantAttribute"><span class="adef">font-variant</span> = "<span class="attr-value">[normal | small-caps] [,[normal |
        small-caps]]*</span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-font-variant">
        <span class="prop-name">‘font-variant’</span></a>
        descriptor within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>. Indication of whether this face is the
        small-caps variant of a font. Takes on the same values as
        the <a href="#text-FontVariantProperty"><span class="prop-name">‘font-variant’</span></a>
        property, except that a comma-separated list is
        permitted.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'normal'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementFontWeightAttribute"><span class="adef">font-weight</span> = "<span class="attr-value">all | [normal | bold | 100 | 200 | 300 |
        400 | 500 | 600 | 700 | 800 | 900] [, [normal | bold | 100 |
        200 | 300 | 400 | 500 | 600 | 700 | 800 |
        900]]*</span>"</dt><dd>
          Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-font-weight">
          <span class="prop-name">‘font-weight’</span></a>
          descriptor within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
          @font-face rule</a>.<br />
           The weight of a face relative to others in the same font
          family. Takes on the same values as the <a href="#text-FontWeightProperty"><span class="prop-name">‘font-weight’</span></a>
          property with three exceptions: 
          <ul><li>relative keywords (<span class="prop-value">bolder</span>, <span class="prop-value">lighter</span>) are not
            permitted</li><li>a comma-separated list of values is permitted, for
            fonts that contain multiple weights</li><li>an additional keyword, <span class="attr-value">'all'</span>, is permitted, which
            means that the font will match for all possible
            weights; either because it contains multiple weights,
            or because that face only has a single weight.</li></ul>
          If the attribute is not specified, the effect is as if a
          value of <span class="attr-value">'all'</span> were specified.<br />
           <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: no.</span>
        </dd><dt id="fonts-FontFaceElementFontStretchAttribute"><span class="adef">font-stretch</span> = "<span class="attr-value">all | [ normal | ultra-condensed |
        extra-condensed | condensed | semi-condensed |
        semi-expanded | expanded | extra-expanded | ultra-expanded]
        [, [ normal | ultra-condensed | extra-condensed | condensed
        | semi-condensed | semi-expanded | expanded |
        extra-expanded | ultra-expanded] ]*</span>"</dt><dd>
          Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-font-stretch">
          <span class="prop-name">‘font-stretch’</span></a>
          descriptor within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
          @font-face rule</a>. Indication of the condensed or
          expanded nature of the face relative to others in the
          same font family. Takes on the same values as the <a href="#text-FontStretchProperty"><span class="prop-name">‘font-stretch’</span></a>
          property except that: 
          <ul><li>relative keywords (<span class="prop-value">wider</span>, <span class="prop-value">narrower</span>) are not
            permitted</li><li>a comma-separated list is permitted</li><li>the keyword <span class="attr-value">'all'</span> is permitted</li></ul>
          If the attribute is not specified, the effect is as if a
          value of <span class="attr-value">'normal'</span> were specified.<br />
           <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: no.</span>
        </dd><dt id="fonts-FontFaceElementFontSizeAttribute"><span class="adef">font-size</span> = "<span class="attr-value">&lt;string&gt;</span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-font-size">
        <span class="prop-name">‘font-size’</span></a> descriptor
        within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementUnicodeRangeAttribute"><span class="adef">unicode-range</span> = "<span class="attr-value">&lt;urange&gt; [,
        &lt;urange&gt;]*</span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-unicode-range">
        <span class="prop-name">‘unicode-range’</span></a>
        descriptor within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>. The range of ISO 10646 characters [<a href="#refs-ref-UNICODE">UNICODE</a>]
        possibly covered by the glyphs in the font. Except for any
        additional information provided in this specification, the
        <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#dataqual">normative definition of the attribute</a>
        is in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.3.3).<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'U+0-10FFFF'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementUnitsPerEmAttribute"><span class="adef">units-per-em</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-units-per-em">
        <span class="prop-name">‘units-per-em’</span></a>
        descriptor within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>. The number of coordinate units on the
        em square, the size of the design grid on which glyphs are
        laid out.<br />
         This value is almost always necessary as nearly every
        other attribute requires the definition of a design
        grid.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'1000'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementPanose1Attribute"><span class="adef">panose-1</span> = "<span class="attr-value">[&lt;integer&gt;]{10}</span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-panose-1">
        <span class="prop-name">‘panose-1’</span></a> descriptor
        within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>. The Panose-1 number, consisting of ten
        decimal integers, separated by whitespace. Except for any
        additional information provided in this specification, the
        <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#matching">normative definition of the attribute</a>
        is in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.3.6).<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'0 0 0 0 0 0 0 0 0 0'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementStemvAttribute"><span class="adef">stemv</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-stemv">
        <span class="prop-name">‘stemv’</span></a> descriptor
        within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementStemhAttribute"><span class="adef">stemh</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-stemh">
        <span class="prop-name">‘stemh’</span></a> descriptor
        within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementSlopeAttribute"><span class="adef">slope</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-slope">
        <span class="prop-name">‘slope’</span></a> descriptor
        within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>. The vertical stroke angle of the font.
        Except for any additional information provided in this
        specification, the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#matching">normative definition of the attribute</a>
        is in CSS2 ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.3.6).<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'0'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementCapHeightAttribute"><span class="adef">cap-height</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-cap-height">
        <span class="prop-name">‘cap-height’</span></a> descriptor
        within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>. The height of uppercase glyphs in the
        font within the font coordinate system.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementXHeightAttribute"><span class="adef">x-height</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-x-height">
        <span class="prop-name">‘x-height’</span></a> descriptor
        within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>. The height of lowercase glyphs in the
        font within the font coordinate system.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementAccentHeightAttribute"><span class="adef">accent-height</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>The distance from the origin to the top of accent
        characters, measured by a distance within the font
        coordinate system.<br />
         If the attribute is not specified, the effect is as if the
        attribute were set to the value of the <a href="#fonts-FontFaceElementAscentAttribute"><span class="attr-name">‘ascent’</span></a> attribute.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementAscentAttribute"><span class="adef">ascent</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-ascent">
        <span class="prop-name">‘ascent’</span></a> descriptor
        within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>. The maximum unaccented height of the
        font within the font coordinate system.<br />
         If the attribute is not specified, the effect is as if the
        attribute were set to the difference between the <a href="#fonts-FontFaceElementUnitsPerEmAttribute"><span class="attr-name">‘units-per-em’</span></a>
        value and the <a href="#fonts-FontElementVertOriginYAttribute"><span class="attr-name">‘vert-origin-y’</span></a> value for the
        corresponding font.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementDescentAttribute"><span class="adef">descent</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-descent">
        <span class="prop-name">‘descent’</span></a> descriptor
        within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>. The maximum unaccented depth of the
        font within the font coordinate system.<br />
         If the attribute is not specified, the effect is as if the
        attribute were set to the <a href="#fonts-FontElementVertOriginYAttribute"><span class="attr-name">‘vert-origin-y’</span></a> value for the
        corresponding font.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementWidthsAttribute"><span class="adef">widths</span> = "<span class="attr-value">&lt;string&gt;</span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-widths">
        <span class="prop-name">‘widths’</span></a> descriptor
        within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementBboxAttribute"><span class="adef">bbox</span> = "<span class="attr-value">&lt;string&gt;</span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-bbox">
        <span class="prop-name">‘bbox’</span></a> descriptor within
        an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementIdeographicAttribute"><span class="adef">ideographic</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>For horizontally oriented glyph layouts, indicates the
        alignment coordinate for glyphs to achieve ideographic
        baseline alignment. The value is an offset in the font
        coordinate system.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementAlphabeticAttribute"><span class="adef">alphabetic</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-baseline">
        <span class="prop-name">‘baseline’</span></a> descriptor
        within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>. For horizontally oriented glyph
        layouts, indicates the alignment coordinate for glyphs to
        achieve alphabetic baseline alignment. The value is an
        offset in the font coordinate system.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementMathematicalAttribute"><span class="adef">mathematical</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>Same syntax and semantics as the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-mathline">
        <span class="prop-name">‘mathline’</span></a> descriptor
        within an <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">
        @font-face rule</a>. For horizontally oriented glyph
        layouts, indicates the alignment coordinate for glyphs to
        achieve mathematical baseline alignment. The value is an
        offset in the font coordinate system.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementHangingAttribute"><span class="adef">hanging</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>For horizontally oriented glyph layouts, indicates the
        alignment coordinate for glyphs to achieve hanging baseline
        alignment. The value is an offset in the font coordinate
        system.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementVertIdeographicAttribute"><span class="adef">v-ideographic</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>For vertically oriented glyph layouts, indicates the
        alignment coordinate for glyphs to achieve ideographic
        baseline alignment. The value is an offset in the font
        coordinate system relative to the glyph-specific <a href="#fonts-GlyphElementVertOriginXAttribute"><span class="attr-name">‘vert-origin-x’</span></a> attribute.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementVertAlphabeticAttribute"><span class="adef">v-alphabetic</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>For vertically oriented glyph layouts, indicates the
        alignment coordinate for glyphs to achieve alphabetic
        baseline alignment. The value is an offset in the font
        coordinate system relative to the glyph-specific <a href="#fonts-GlyphElementVertOriginXAttribute"><span class="attr-name">‘vert-origin-x’</span></a> attribute.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementVertMathematicalAttribute"><span class="adef">v-mathematical</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>For vertically oriented glyph layouts, indicates the
        alignment coordinate for glyphs to achieve mathematical
        baseline alignment. The value is an offset in the font
        coordinate system relative to the glyph-specific <a href="#fonts-GlyphElementVertOriginXAttribute"><span class="attr-name">‘vert-origin-x’</span></a> attribute.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementVertHangingAttribute"><span class="adef">v-hanging</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>For vertically oriented glyph layouts, indicates the
        alignment coordinate for glyphs to achieve hanging baseline
        alignment. The value is an offset in the font coordinate
        system relative to the glyph-specific <a href="#fonts-GlyphElementVertOriginXAttribute"><span class="attr-name">‘vert-origin-x’</span></a> attribute.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementUnderlinePositionAttribute"><span class="adef">underline-position</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>The ideal position of an underline within the font
        coordinate system.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementUnderlineThicknessAttribute"><span class="adef">underline-thickness</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>The ideal thickness of an underline, expressed as a
        length within the font coordinate system.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementStrikeThroughPositionAttribute"><span class="adef">strikethrough-position</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>The ideal position of a strike-through within the font
        coordinate system.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementStrikeThroughThicknessAttribute"><span class="adef">strikethrough-thickness</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>The ideal thickness of a strike-through, expressed as a
        length within the font coordinate system.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementOverlinePositionAttribute"><span class="adef">overline-position</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>The ideal position of an overline within the font
        coordinate system.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd><dt id="fonts-FontFaceElementOverlineThicknessAttribute"><span class="adef">overline-thickness</span> = "<span class="attr-value"><a href="#types-DataTypeNumber">&lt;number&gt;</a></span>"</dt><dd>The ideal thickness of an overline, expressed as a
        length within the font coordinate system.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        no.</span></dd></dl>
    </div>



<p>The following elements and attributes correspond to the
<span class="prop-name">‘src’</span> descriptor within an
@font-face rule. (Refer to the descriptions of the
<a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">@font-face rule</a> and
<a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-src">'src' descriptor</a>
in the CSS2 specification ([<a href="#refs-ref-CSS2">CSS2</a>],
sections 15.3.1 and 15.3.5.)</p>

<h3 id="fonts-FontFaceSrcElement">20.8.4 The <span class="element-name">‘font-face-src’</span> element</h3>



<p>The <a href="#fonts-FontFaceSrcElement"><span class="element-name">‘font-face-src’</span></a> element, together with the
<a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a> and <a href="#fonts-FontFaceFormatElement"><span class="element-name">‘font-face-format’</span></a> elements described in the
following sections, correspond to the <span class="prop-name">‘src’</span>
descriptor within an @font-face rule.  (Refer to the descriptions of the
<a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions">@font-face rule</a>
and <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#descdef-src">'src' descriptor</a>
in the CSS2 specification ([<a href="#refs-ref-CSS2">CSS2</a>], sections
15.3.1 and 15.3.5).</p>

<p>A <a href="#fonts-FontFaceSrcElement"><span class="element-name">‘font-face-src’</span></a> element contains <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a> and
<a href="#fonts-FontFaceNameElement"><span class="element-name">‘font-face-name’</span></a> elements, which are used for referencing external
and local fonts, respectively.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘font-face-src’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>One or more of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#fonts-FontFaceNameElement"><span class="element-name">‘font-face-name’</span></a></li><li><a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#fonts-InterfaceSVGFontFaceSrcElement">SVGFontFaceSrcElement</a></li></ul></dd></dl></div>



<h3 id="fonts-FontFaceURIElement">20.8.5 The <span class="element-name">‘font-face-uri’</span> and <span class="element-name">‘font-face-format’</span> elements</h3>



<p>The <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a> element is used within a <a href="#fonts-FontFaceSrcElement"><span class="element-name">‘font-face-src’</span></a>
element to reference a font defined inside or outside of the current SVG
document.</p>

<p>When a <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a> is referencing an <a href="#fonts-SVGFontsOverview">SVG font</a>,
then that reference must be to an SVG <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a> element, therefore
requiring the use of a fragment identifier [<a href="#refs-ref-RFC3986">RFC3986</a>].
The referenced <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a> element can be local (i.e., within the same
document as the <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a> element) or remote (i.e., within a
different document).</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘font-face-uri’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Any number of the following elements, in any order:
                <ul class="no-bullets"><li><a href="#fonts-FontFaceFormatElement"><span class="element-name">‘font-face-format’</span></a></li></ul></dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermXLinkAttributes">xlink attributes</a><span class="expanding"> — <a href="#fonts-FontFaceUriElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a>, <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a>, <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></span></li><li><a href="#fonts-FontFaceUriElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#fonts-InterfaceSVGFontFaceUriElement">SVGFontFaceUriElement</a></li></ul></dd></dl></div>

<div class="adef-list">
  <p><em>Attribute definitions:</em></p>
  <dl><dt id="fonts-FontFaceUriElementHrefAttribute"><span class="adef">xlink:href</span> =
    "<span class="attr-value"><a href="#types-DataTypeIRI">&lt;IRI&gt;</a></span>"</dt><dd>
      The <a href="#fonts-FontFaceUriElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a> attribute specifies the location of the referenced
      font.<br />
      <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: no.</span>
    </dd></dl>
</div>





<p>Child <a href="#fonts-FontFaceFormatElement"><span class="element-name">‘font-face-format’</span></a> elements of a <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a>
element are used to specify the supported formats of the font referenced by that
<a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a> element.  They correspond to entries in a
<span class="prop-value">format(…)</span> clause of the
<span class="prop-name">‘src’</span> descriptor in an @font-face rule.</p>

<div id="fonts-FontFaceFormatElement">
<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘font-face-format’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Empty.</dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#fonts-FontFaceFormatElementStringAttribute"><span class="attr-name">‘string’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#fonts-InterfaceSVGFontFaceFormatElement">SVGFontFaceFormatElement</a></li></ul></dd></dl></div>
</div>

<div class="adef-list">
  <p><em>Attribute definitions:</em></p>
  <dl><dt id="fonts-FontFaceFormatElementStringAttribute"><span class="adef">string</span> =
    "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dd>
      The <a href="#fonts-FontFaceFormatElementStringAttribute"><span class="attr-name">‘string’</span></a> attribute is a hint to the user agent, and specifies
      a list of formats that the font referenced by the parent <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a>
      element supports.  The syntax of the attribute value is a format string
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#referencing">as defined in CSS2</a>,
      such as <span class="attr-value">'truetype'</span>.  Refer to the description of the
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#referencing">'src' descriptor</a>
      in CSS2 for details on how the format hint is interpreted
      ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.3.5).<br />
      <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: no.</span>
    </dd></dl>
</div>



<h3 id="fonts-FontFaceNameElement">20.8.6 The <span class="element-name">‘font-face-name’</span> element</h3>



<p>The <a href="#fonts-FontFaceNameElement"><span class="element-name">‘font-face-name’</span></a> element is used within a <a href="#fonts-FontFaceSrcElement"><span class="element-name">‘font-face-src’</span></a>
element to reference a local font by name.  It corresponds to a <span class="prop-value">local(…)</span>
clause in an @font-face rule <span class="prop-name">‘src’</span> descriptor.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘font-face-name’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>Empty.</dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#fonts-FontFaceNameElementNameAttribute"><span class="attr-name">‘name’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#fonts-InterfaceSVGFontFaceNameElement">SVGFontFaceNameElement</a></li></ul></dd></dl></div>

<div class="adef-list">
  <p><em>Attribute definitions:</em></p>
  <dl><dt id="fonts-FontFaceNameElementNameAttribute"><span class="adef">name</span> =
    "<span class="attr-value"><a href="#types-DataTypeAnything">&lt;anything&gt;</a></span>"</dt><dd>
      The <a href="#fonts-FontFaceNameElementNameAttribute"><span class="attr-name">‘name’</span></a> attribute specifies the name of a local font.  Unlike
      the syntax allowed between the parentheses of the <span class="prop-value">local(…)</span>
      clause in an @font-face rule <span class="prop-name">‘src’</span> descriptor,
      the font name specified in this attribute is not surrounded in single or
      double quotes.  Refer to the description of the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#referencing">'src' descriptor</a>
      in CSS2 for details on how the font name is interpreted
      ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.3.5).<br />
      <span class="anim-target"><a href="#animate-Animatable">Animatable</a>: no.</span>
    </dd></dl>
</div>



<h2 id="fonts-DOMInterfaces">20.9 DOM interfaces</h2>

<h3 id="fonts-InterfaceSVGFontElement">20.9.1 Interface SVGFontElement</h3>


 <p>The <a class="idlinterface" href="#fonts-InterfaceSVGFontElement">SVGFontElement</a> interface corresponds to the
 <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a> element.</p>

 <p>Object-oriented access to the attributes of the <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a> element
 via the SVG DOM is not available.</p>
<pre class="idl">interface <b>SVGFontElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
};</pre>

<h3 id="fonts-InterfaceSVGGlyphElement">20.9.2 Interface SVGGlyphElement</h3>


 <p>The <a class="idlinterface" href="#fonts-InterfaceSVGGlyphElement">SVGGlyphElement</a> interface corresponds to the
 <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> element.</p>

 <p>Object-oriented access to the attributes of the <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a> element
 via the SVG DOM is not available.</p>
<pre class="idl">interface <b>SVGGlyphElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
};</pre>

<h3 id="fonts-InterfaceSVGMissingGlyphElement">20.9.3 Interface SVGMissingGlyphElement</h3>


 <p>The <a class="idlinterface" href="#fonts-InterfaceSVGMissingGlyphElement">SVGMissingGlyphElement</a> interface corresponds to the
 <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a> element.</p>

 <p>Object-oriented access to the attributes of the <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a> element
 via the SVG DOM is not available.</p>
<pre class="idl">interface <b>SVGMissingGlyphElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                   <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
};</pre>

<h3 id="fonts-InterfaceSVGHKernElement">20.9.4 Interface SVGHKernElement</h3>


 <p>The <a class="idlinterface" href="#fonts-InterfaceSVGHKernElement">SVGHKernElement</a> interface corresponds to the
 <a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a> element.</p>

 <p>Object-oriented access to the attributes of the <a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a> element
 via the SVG DOM is not available.</p>
<pre class="idl">interface <b>SVGHKernElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};</pre>

<h3 id="fonts-InterfaceSVGVKernElement">20.9.5 Interface SVGVKernElement</h3>


 <p>The <a class="idlinterface" href="#fonts-InterfaceSVGVKernElement">SVGVKernElement</a> interface corresponds to the
 <a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a> element.</p>

 <p>Object-oriented access to the attributes of the <a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a> element
 via the SVG DOM is not available.</p>
<pre class="idl">interface <b>SVGVKernElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};</pre>

<h3 id="fonts-InterfaceSVGFontFaceElement">20.9.6 Interface SVGFontFaceElement</h3>


 <p>The <a class="idlinterface" href="#fonts-InterfaceSVGFontFaceElement">SVGFontFaceElement</a> interface corresponds to the
 <a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a> element.</p>

 <p>Object-oriented access to the attributes of the <a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a> element
 via the SVG DOM is not available.</p>
<pre class="idl">interface <b>SVGFontFaceElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};</pre>

<h3 id="fonts-InterfaceSVGFontFaceSrcElement">20.9.7 Interface SVGFontFaceSrcElement</h3>


 <p>The <a class="idlinterface" href="#fonts-InterfaceSVGFontFaceSrcElement">SVGFontFaceSrcElement</a> interface corresponds to the
 <a href="#fonts-FontFaceSrcElement"><span class="element-name">‘font-face-src’</span></a> element.</p>

 <p>Object-oriented access to the attributes of the <a href="#fonts-FontFaceSrcElement"><span class="element-name">‘font-face-src’</span></a> element
 via the SVG DOM is not available.</p>
<pre class="idl">interface <b>SVGFontFaceSrcElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};</pre>

<h3 id="fonts-InterfaceSVGFontFaceUriElement">20.9.8 Interface SVGFontFaceUriElement</h3>


 <p>The <a class="idlinterface" href="#fonts-InterfaceSVGFontFaceUriElement">SVGFontFaceUriElement</a> interface corresponds to the
 <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a> element.</p>

 <p>Object-oriented access to the attributes of the <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a> element
 via the SVG DOM is not available.</p>
<pre class="idl">interface <b>SVGFontFaceUriElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};</pre>

<h3 id="fonts-InterfaceSVGFontFaceFormatElement">20.9.9 Interface SVGFontFaceFormatElement</h3>


 <p>The <a class="idlinterface" href="#fonts-InterfaceSVGFontFaceFormatElement">SVGFontFaceFormatElement</a> interface corresponds to the
 <a href="#fonts-FontFaceFormatElement"><span class="element-name">‘font-face-format’</span></a> element.</p>

 <p>Object-oriented access to the attributes of the <a href="#fonts-FontFaceFormatElement"><span class="element-name">‘font-face-format’</span></a> element
 via the SVG DOM is not available.</p>
<pre class="idl">interface <b>SVGFontFaceFormatElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};</pre>

<h3 id="fonts-InterfaceSVGFontFaceNameElement">20.9.10 Interface SVGFontFaceNameElement</h3>


 <p>The <a class="idlinterface" href="#fonts-InterfaceSVGFontFaceNameElement">SVGFontFaceNameElement</a> interface corresponds to the
 <a href="#fonts-FontFaceNameElement"><span class="element-name">‘font-face-name’</span></a> element.</p>

 <p>Object-oriented access to the attributes of the <a href="#fonts-FontFaceNameElement"><span class="element-name">‘font-face-name’</span></a> element
 via the SVG DOM is not available.</p>
<pre class="idl">interface <b>SVGFontFaceNameElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};</pre>


</div><hr class="chapter-divider" />
<div id="chapter-metadata">

<h1>21 Metadata</h1><h2 id="metadata-toc">Contents</h2><ul class="toc">
<li><a href="#metadata-Introduction">21.1 Introduction</a></li>
<li><a href="#metadata-MetadataElement">21.2 The <span class="element-name">‘metadata’</span> element</a></li>
<li><a href="#metadata-Example">21.3 An example</a></li>
<li><a href="#metadata-DOMInterfaces">21.4 DOM interfaces</a><ul class="toc">
<li><a href="#metadata-InterfaceSVGMetadataElement">21.4.1 Interface SVGMetadataElement</a></li></ul></li></ul>

<h2 id="metadata-Introduction">21.1 Introduction</h2>
     
    <p>Metadata is structured data about data.</p>
    <p>In the computing industry, there are ongoing standardization
    efforts towards metadata with the goal of promoting industry
    interoperability and efficiency. Content creators should track
    these developments and include appropriate metadata in their
    SVG content which conforms to these various metadata standards
    as they emerge.</p>
    <p>The W3C has a <a href="http://www.w3.org/2001/sw/Activity">Semantic Web
    Activity</a> which has been established to serve a leadership
    role, in both the design of enabling specifications and the
    open, collaborative development of technologies that support
    the automation, integration and reuse of data across various
    applications. The Semantic Web Activity builds upon the earlier
    W3C Metadata Activity, including the definition of Resource
    Description Framework (RDF). The
    <a href="http://www.w3.org/TR/2004/REC-rdf-primer-20040210/"><cite>RDF Primer</cite></a>
    is the first in a set of six documents that define the Resource Description Framework
    [<a href="#refs-ref-RDF-PRIMER">RDF-PRIMER</a>].</p>
    <p>Another activity relevant to most applications of metadata
    is the <a href="http://dublincore.org/">Dublin Core</a>
    [<a href="#refs-ref-DCORE">DCORE</a>], which is
    a set of generally applicable core metadata properties (e.g.,
    Title, Creator/Author, Subject, Description, etc.).</p>
    <p>Individual industries or individual content creators are
    free to define their own metadata schema but are encouraged to
    follow existing metadata standards and use standard metadata
    schema wherever possible to promote interchange and
    interoperability. If a particular standard metadata schema does
    not meet your needs, then it is usually better to define an
    additional metadata schema in an existing framework such as RDF
    and to use custom metadata schema in combination with standard
    metadata schema, rather than totally ignore the standard
    schema.</p>

<h2 id="metadata-MetadataElement">21.2 The <span class="element-name">‘metadata’</span> element</h2>

    <p>Metadata which is included with SVG content should be
    specified within <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>
    elements. The contents of the <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a> should be elements from
    other XML namespaces, with these elements from these namespaces
    expressed in a manner conforming with the <a href="http://www.w3.org/TR/2006/REC-xml-names-20060816/"><cite>Namespaces in XML</cite></a> Recommendation
    [<a href="#refs-ref-XML-NS">XML-NS</a>].</p>
    <p>Authors should provide a <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a> child element to the
    <a href="#intro-TermOutermostSVGElement"><span class="svg-term">outermost svg element</span></a> within a
    stand-alone SVG document. The <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a> child element to an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element serves the
    purposes of identifying document-level metadata.</p>
    <p>The DTD definitions of many of SVG's elements (particularly,
    container and text elements) place no restriction on the
    placement or number of the <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a> sub-elements. This
    flexibility is only present so that there will be a consistent
    content model for container elements, because some container
    elements in SVG allow for mixed content, and because <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#sec-mixed-content">the mixed
    content rules for XML</a> ([<a href="#refs-ref-XML10">XML10</a>], section 3.2.2)
    do not permit the desired restrictions. Representations of
    future versions of the SVG language might use more expressive
    representations than DTDs which allow for more restrictive
    mixed content rules. It is strongly recommended that at most
    one <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a> element appear
    as a child of any particular element, and that this element
    appear before any other child elements (except possibly <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a> or
    <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> elements) or character
    data content. If metadata-processing user agents need to choose
    among multiple <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>
    elements for processing it should choose the first one.</p>

<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘metadata’</span></div><dl><dt>Categories:</dt><dd><a href="#intro-TermDescriptiveElement">Descriptive element</a></dd><dt>Content model:</dt><dd>
                Any elements or character data.
              </dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#metadata-InterfaceSVGMetadataElement">SVGMetadataElement</a></li></ul></dd></dl></div>

<h2 id="metadata-Example">21.3 An example</h2>

    <p>Here is an example of how metadata can be included in an SVG
    document. The example uses the Dublin Core version 1.1 schema.
    (Other XML-compatible metadata languages, including ones not
    based on RDF, can be used also.)</p>
<pre>
&lt;?xml version="1.0" standalone="yes"?&gt;
&lt;svg width="4in" height="3in" version="1.1"
    xmlns = 'http://www.w3.org/2000/svg'&gt;
    &lt;desc xmlns:myfoo="http://example.org/myfoo"&gt;
      &lt;myfoo:title&gt;This is a financial report&lt;/myfoo:title&gt;
      &lt;myfoo:descr&gt;The global description uses markup from the
        &lt;myfoo:emph&gt;myfoo&lt;/myfoo:emph&gt; namespace.&lt;/myfoo:descr&gt;
      &lt;myfoo:scene&gt;&lt;myfoo:what&gt;widget $growth&lt;/myfoo:what&gt;
      &lt;myfoo:contains&gt;$three $graph-bar&lt;/myfoo:contains&gt;
        &lt;myfoo:when&gt;1998 $through 2000&lt;/myfoo:when&gt; &lt;/myfoo:scene&gt;
   &lt;/desc&gt;
    &lt;metadata&gt;
      &lt;rdf:RDF
           xmlns:rdf = "http://www.w3.org/1999/02/22-rdf-syntax-ns#"
           xmlns:rdfs = "http://www.w3.org/2000/01/rdf-schema#"
           xmlns:dc = "http://purl.org/dc/elements/1.1/" &gt;
        &lt;rdf:Description about="http://example.org/myfoo"
             dc:title="MyFoo Financial Report"
             dc:description="$three $bar $thousands $dollars $from 1998 $through 2000"
             dc:publisher="Example Organization"
             dc:date="2000-04-11"
             dc:format="image/svg+xml"
             dc:language="en" &gt;
          &lt;dc:creator&gt;
            &lt;rdf:Bag&gt;
              &lt;rdf:li&gt;Irving Bird&lt;/rdf:li&gt;
              &lt;rdf:li&gt;Mary Lambert&lt;/rdf:li&gt;
            &lt;/rdf:Bag&gt;
          &lt;/dc:creator&gt;
        &lt;/rdf:Description&gt;
      &lt;/rdf:RDF&gt;
    &lt;/metadata&gt;
&lt;/svg&gt;
</pre>

<h2 id="metadata-DOMInterfaces">21.4 DOM interfaces</h2>

<h3 id="metadata-InterfaceSVGMetadataElement">21.4.1 Interface SVGMetadataElement</h3>


 The <a class="idlinterface" href="#metadata-InterfaceSVGMetadataElement">SVGMetadataElement</a> interface corresponds to the <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>
 element.
<pre class="idl">interface <b>SVGMetadataElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};</pre>

</div><hr class="chapter-divider" />
<div id="chapter-backward">

<h1 id="backward-BackwardsCompatibility">22 Backwards Compatibility</h1>

<p>A user agent (UA) might not have the ability to process and
view SVG content. The following list outlines two of the
backwards compatibility scenarios associated with SVG
content:</p>

<ul><li>
    <p>For XML grammars with the ability to embed SVG content, it
    is assumed that some sort of alternate representation
    capability such as the <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> element and some sort of
    feature-availability test facility (such as what is
    described in the <a href="http://www.w3.org/TR/2008/REC-SMIL3-20081201/">SMIL 3.0 specification</a>
    [<a href="#refs-ref-SMIL">SMIL</a>]) will be
    available.</p>

    <p>This <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> element and feature-availability test
    facility (or their equivalents) are the recommended way for
    XML authors to provide an alternate representation to SVG
    content, such as an image or a text string. The following
    example shows how to embed an SVG drawing within a SMIL 1.0
    document such that an alternate image will display in the
    event the user agent doesn't support SVG. Note that the
    MIME type in the <span class="attr-name">‘type’</span> attribute
    is an important means for the user agent to decide if it can decode
    the referenced media.</p>

    <p>In this example, the SVG content is included via a URL
    reference. With some parent XML grammars it will also be
    possible to include an SVG document fragment inline within
    the same file as its parent grammar.</p>

<pre>
&lt;?xml version="1.0" standalone="yes"?&gt;
&lt;smil&gt;
  &lt;body&gt;
    &lt;!-- With SMIL 1.0, the first child element of 'switch'
         which the SMIL 1.0 user agent is able to process 
         and which tests true will get processed and all other 
         child elements will have no visual effect. In this case, 
         if the SMIL 1.0 user agent can process "image/svg+xml", 
         then the SVG will appear; otherwise, the alternate image 
         (the second child element) will appear. --&gt;
    &lt;switch&gt;
      &lt;!-- Render the SVG if possible. --&gt;
      &lt;ref type="image/svg+xml" src="drawing.svg" /&gt;
      &lt;!-- Else, render the alternate image. --&gt;
      &lt;img src="alternate_image.jpg" /&gt;
    &lt;/switch&gt;
  &lt;/body&gt;
&lt;/smil&gt;
</pre>
  </li><li>
    <p>For HTML 4, SVG drawings can be embedded using the
    <span class="element-name">‘object’</span> element. An alternate
    representation such as an image can be included as the content
    of the <span class="element-name">‘object’</span> element. In
    this case, the SVG content usually will be included via a URL
    reference. The following example shows how to use the
    <span class="element-name">‘object’</span> element to include an SVG
    drawing via a URL reference with an image serving as the alternate
    representation in the absence of an SVG user agent:</p>

<pre>
&lt;html&gt;
  &lt;body&gt;
    &lt;object type="image/svg+xml" data="drawing.svg"&gt;
      &lt;!-- The contents of the 'object' element (i.e., an alternate
         image) are drawn in the event the user agent cannot process 
         the SVG drawing. --&gt;
      &lt;img src="alternate_image.jpg" alt="alternate description"&gt;
    &lt;/object&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>
  </li></ul>

</div><hr class="chapter-divider" />
<div id="chapter-extend">

<h1>23 Extensibility</h1><h2 id="extend-toc">Contents</h2><ul class="toc">
<li><a href="#extend-ForeignNamespaces">23.1 Foreign namespaces and private data</a></li>
<li><a href="#extend-EmbeddingForeignObjects">23.2 Embedding foreign object types</a></li>
<li><a href="#extend-ForeignObjectElement">23.3 The <span class="element-name">‘foreignObject’</span> element</a></li>
<li><a href="#extend-AnExample">23.4 An example</a></li>
<li><a href="#extend-PrivateElementsAndAttribute">23.5 Adding private elements and attributes to the DTD</a></li>
<li><a href="#extend-DOMInterfaces">23.6 DOM interfaces</a><ul class="toc">
<li><a href="#extend-InterfaceSVGForeignObjectElement">23.6.1 Interface SVGForeignObjectElement</a></li></ul></li></ul>

<h2 id="extend-ForeignNamespaces">23.1 Foreign namespaces and private data</h2>

    <p>SVG allows inclusion of elements from foreign namespaces
    anywhere with the SVG content. In general, the SVG user agent
    will include the unknown elements in the DOM but will otherwise
    ignore unknown elements. (The notable exception is described
    under <a href="#extend-ForeignObjectElement">Embedding Foreign Object
    Types</a>.)</p>
    <p>Additionally, SVG allows inclusion of attributes from
    foreign namespaces on any SVG element. The SVG user agent will
    include unknown attributes in the DOM but with otherwise ignore
    unknown attributes.</p>
    <p>SVG's ability to include foreign namespaces can be used for
    the following purposes:</p>
    <ul><li>Application-specific information so that authoring
      applications can include model-level data in the SVG content
      to serve their "roundtripping" purposes (i.e., the ability to
      write, then read a file without loss of higher-level
      information).</li><li>Supplemental data for extensibility. For example, suppose
      you have an extrusion extension which takes any 2D graphics
      and extrudes it in three dimensions. When applying the
      extrusion extension, you probably will need to set some
      parameters. The parameters can be included in the SVG content
      by inserting elements from an extrusion extension
      namespace.</li></ul>
    <p>To illustrate, a business graphics authoring application
    might want to include some private data within an SVG document
    so that it could properly reassemble the chart (a pie chart in
    this case) upon reading it back in:</p>
<pre>
&lt;?xml version="1.0" standalone="yes"?&gt;
&lt;svg width="4in" height="3in" version="1.1"
     xmlns = 'http://www.w3.org/2000/svg'&gt;
  &lt;defs&gt;
    &lt;myapp:piechart xmlns:myapp="http://example.org/myapp"
                    title="Sales by Region"&gt;
      &lt;myapp:pieslice label="Northern Region" value="1.23"/&gt;
      &lt;myapp:pieslice label="Eastern Region" value="2.53"/&gt;
      &lt;myapp:pieslice label="Southern Region" value="3.89"/&gt;
      &lt;myapp:pieslice label="Western Region" value="2.04"/&gt;
      &lt;!-- Other private data goes here --&gt;
    &lt;/myapp:piechart&gt;
  &lt;/defs&gt;
  &lt;desc&gt;This chart includes private data in another namespace
  &lt;/desc&gt;
  &lt;!-- In here would be the actual SVG graphics elements which
       draw the pie chart --&gt;
&lt;/svg&gt;
</pre>

<h2 id="extend-EmbeddingForeignObjects">23.2 Embedding foreign object types</h2>

    <p>One goal for SVG is to provide a mechanism by which other
    XML language processors can render into an area within an SVG
    drawing, with those renderings subject to the various
    transformations and compositing parameters that are currently
    active at a given point within the SVG content tree. One
    particular example of this is to provide a frame for XML
    content styled with CSS or XSL so that dynamically reflowing
    text (subject to SVG transformations and compositing) could be
    inserted into the middle of some SVG content. Another example
    is inserting a <a href="http://www.w3.org/TR/2003/REC-MathML2-20031021/">MathML</a> expression into
    an SVG drawing [<a href="#refs-ref-MATHML">MATHML</a>].</p>
    <p>The <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>
    element allows for inclusion of a foreign namespace which has
    its graphical content drawn by a different user agent. The
    included foreign graphical content is subject to SVG
    transformations and compositing.</p>
    <p>The contents of <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a> are assumed to be
    from a different namespace. Any SVG elements within a <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a> will not be drawn,
    except in the situation where a properly defined SVG
    subdocument with a proper <span class="attr-name">‘xmlns’</span>
    (see <a href="http://www.w3.org/TR/2006/REC-xml-names-20060816/"><cite>Namespaces in XML</cite></a>
    [<a href="#refs-ref-XML-NS">XML-NS</a>])
    attribute specification is embedded recursively. One situation
    where this can occur is when an SVG document fragment is
    embedded within another non-SVG document fragment, which in
    turn is embedded within an SVG document fragment (e.g., an SVG
    document fragment contains an XHTML document fragment which in
    turn contains yet another SVG document fragment).</p>
    <p>Usually, a <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>
    will be used in conjunction with the <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> element and
    the <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a> attribute to
    provide proper checking for user agent support and provide an
    alternate rendering in case user agent support is not
    available.</p>

<h2 id="extend-ForeignObjectElement">23.3 The <span class="element-name">‘foreignObject’</span> element</h2>


<div class="element-summary"><div class="element-summary-name"><span class="element-name">‘foreignObject’</span></div><dl><dt>Categories:</dt><dd>None</dd><dt>Content model:</dt><dd>
                Any elements or character data.
              </dd><dt>Attributes:</dt><dd><ul class="no-bullets"><li><a href="#intro-TermCoreAttributes">core attributes</a><span class="expanding"> — <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a>, <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></span></li><li><a href="#intro-TermConditionalProcessingAttribute">conditional processing attributes</a><span class="expanding"> — <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a>, <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></span></li><li><a href="#intro-TermGraphicalEventAttribute">graphical event attributes</a><span class="expanding"> — <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a>, <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></span></li><li><a href="#intro-TermPresentationAttribute">presentation attributes</a><span class="expanding"> — <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a>, <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a></span></li><li><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></li><li><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></li><li><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></li><li><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></li><li><a href="#extend-ForeignObjectElementXAttribute"><span class="attr-name">‘x’</span></a></li><li><a href="#extend-ForeignObjectElementYAttribute"><span class="attr-name">‘y’</span></a></li><li><a href="#extend-ForeignObjectElementWidthAttribute"><span class="attr-name">‘width’</span></a></li><li><a href="#extend-ForeignObjectElementHeightAttribute"><span class="attr-name">‘height’</span></a></li></ul></dd><dt>DOM Interfaces:</dt><dd><ul class="no-bullets"><li><a class="idlinterface" href="#extend-InterfaceSVGForeignObjectElement">SVGForeignObjectElement</a></li></ul></dd></dl></div>

    <div class="adef-list">
      <p><em>Attribute definitions:</em></p>
      <dl><dt id="extend-ForeignObjectElementXAttribute"><span class="adef">x</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The x-axis coordinate of one corner of the rectangular
        region into which the graphics associated with the contents
        of the <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>
        will be rendered.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'0'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="extend-ForeignObjectElementYAttribute"><span class="adef">y</span> = "<span class="attr-value"><a href="#types-DataTypeCoordinate">&lt;coordinate&gt;</a></span>"</dt><dd>The y-axis coordinate of one corner of the rectangular
        region into which the referenced document is placed.<br />
         If the attribute is not specified, the effect is as if a
        value of <span class="attr-value">'0'</span> were specified.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="extend-ForeignObjectElementWidthAttribute"><span class="adef">width</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>The width of the rectangular region into which the
        referenced document is placed.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables rendering of the element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd><dt id="extend-ForeignObjectElementHeightAttribute"><span class="adef">height</span> = "<span class="attr-value"><a href="#types-DataTypeLength">&lt;length&gt;</a></span>"</dt><dd>The height of the rectangular region into which the
        referenced document is placed.<br />
         A negative value is an error (see <a href="#implnote-ErrorProcessing">Error processing</a>).
        A value of zero disables rendering of the element.<br />
         <span class="anim-target"><a href="#animate-Animatable">Animatable</a>:
        yes.</span></dd></dl>
    </div>



<h2 id="extend-AnExample">23.4 An example</h2>

    <p>Here is an example:</p>
<pre>
&lt;?xml version="1.0" standalone="yes"?&gt;
&lt;svg width="4in" height="3in" version="1.1"
 xmlns = 'http://www.w3.org/2000/svg'&gt;
  &lt;desc&gt;This example uses the 'switch' element to provide a 
        fallback graphical representation of an paragraph, if 
        XMHTML is not supported.&lt;/desc&gt;
  &lt;!-- The 'switch' element will process the first child element
       whose testing attributes evaluate to true.--&gt;
  &lt;switch&gt;
    &lt;!-- Process the embedded XHTML if the requiredExtensions attribute
         evaluates to true (i.e., the user agent supports XHTML
         embedded within SVG). --&gt;
    &lt;foreignObject width="100" height="50"
                   requiredExtensions="http://example.com/SVGExtensions/EmbeddedXHTML"&gt;
      &lt;!-- XHTML content goes here --&gt;
      &lt;body xmlns="http://www.w3.org/1999/xhtml"&gt;
        &lt;p&gt;Here is a paragraph that requires word wrap&lt;/p&gt;
      &lt;/body&gt;
    &lt;/foreignObject&gt;
    &lt;!-- Else, process the following alternate SVG.
         Note that there are no testing attributes on the 'text' element.
         If no testing attributes are provided, it is as if there
         were testing attributes and they evaluated to true.--&gt;
    &lt;text font-size="10" font-family="Verdana"&gt;
      &lt;tspan x="10" y="10"&gt;Here is a paragraph that&lt;/tspan&gt;
      &lt;tspan x="10" y="20"&gt;requires word wrap.&lt;/tspan&gt;
    &lt;/text&gt;
  &lt;/switch&gt;
&lt;/svg&gt;
</pre>

    <p>It is not required that SVG user agent support the ability
    to invoke other arbitrary user agents to handle embedded
    foreign object types; however, all conforming SVG user agents
    would need to support the <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> element and
    must be able to render valid SVG elements when they appear as
    one of the alternatives within a <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>
    element.</p>
    <p>Ultimately, it is expected that commercial Web browsers will
    support the ability for SVG to embed content from other XML
    grammars which use CSS or XSL to format their content, with the
    resulting CSS- or XSL-formatted content subject to SVG
    transformations and compositing. At this time, such a
    capability is not a requirement.</p>

<h2 id="extend-PrivateElementsAndAttribute">23.5 Adding private elements and attributes to the DTD</h2>

    <p>Using foreign namespaces as an extension mechanism adds flexibility, is
    readily handled by validation technologies like NVDL and RelaxNG, but typically
    breaks DTD validation unless the DTD has explicit extensibility hooks.</p>
    <p>The SVG DTD allows for extending the SVG language within the
    internal DTD subset. Within the internal DTD subset, you have
    the ability to add custom elements and attributes to most SVG
    elements. This facility may be used if DTD validation is desired.</p>
    <p>The DTD defines an extension entity for most of SVG
    elements. For example, the <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a> element is defined in
    the DTD as follows:</p>

<pre class="dtd-fragment">
&lt;!ENTITY % SVG.view.extra.content "" &gt;

&lt;!ENTITY % SVG.view.element "INCLUDE" &gt;
&lt;![%SVG.view.element;[
&lt;!ENTITY % SVG.view.content
    "( %SVG.Description.class; %SVG.view.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.view.qname; %SVG.view.content; &gt;
&lt;!-- end of SVG.view.element --&gt;]]&gt;

&lt;!ENTITY % SVG.view.attlist "INCLUDE" &gt;
&lt;![%SVG.view.attlist;[
&lt;!ATTLIST %SVG.view.qname;
    %SVG.Core.attrib;
    %SVG.External.attrib;
    viewBox %ViewBoxSpec.datatype; #IMPLIED
    preserveAspectRatio %PreserveAspectRatioSpec.datatype; 'xMidYMid meet'
    zoomAndPan ( disable | magnify ) 'magnify'
    viewTarget CDATA #IMPLIED
&gt;
&lt;!-- end of SVG.view.attlist --&gt;]]&gt;
</pre>

    <p>The entity <code>SVG.view.extra.content</code> can be defined in the
    internal DTD subset to add custom sub-elements
    attributes to the <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a> element within a given
    document, and an <code>&lt;!ATTLIST&gt;</code> can be used to add
    custom attributes. For example, the following extends the <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a> element with an
    additional child element <span class="element-name">‘customNS:customElement’</span> and an
    additional attribute <span class="attr-name">‘customNS:customAttr’</span>:</p>
<pre>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd" [
&lt;!ENTITY % SVG.view.extra.content  "| customNS:customElement" &gt;
&lt;!ATTLIST %SVG.view.qname;
  xmlns:customNS CDATA #FIXED "http://www.example.org/customNS"
  customNS:customAttr CDATA #IMPLIED&gt;
&lt;!ELEMENT customNS:customElement EMPTY&gt;
&lt;!ATTLIST customNS:customElement
  xmlns:customNS CDATA #FIXED "http://www.example.org/customNS"
  info CDATA #IMPLIED&gt;
]&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1"
     width="8cm" height="4cm"&gt;
  &lt;desc&gt;Extend the 'view' element via the internal DTD subset&lt;/desc&gt;
  &lt;!-- Presumably, some great graphics would go here. --&gt;
  &lt;view viewBox="100 110 20 30" customNS:customAttr="123"&gt;
    &lt;customNS:customElement info="abc"/&gt;
  &lt;/view&gt;
&lt;/svg&gt;
</pre>

<h2 id="extend-DOMInterfaces">23.6 DOM interfaces</h2>

<h3 id="extend-InterfaceSVGForeignObjectElement">23.6.1 Interface SVGForeignObjectElement</h3>



 The <a class="idlinterface" href="#extend-InterfaceSVGForeignObjectElement">SVGForeignObjectElement</a> interface corresponds to the
 <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a> element.
<pre class="idl">interface <b>SVGForeignObjectElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                    <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                                    <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                                    <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                                    <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                                    <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#extend-__svg__SVGForeignObjectElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#extend-__svg__SVGForeignObjectElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#extend-__svg__SVGForeignObjectElement__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#extend-__svg__SVGForeignObjectElement__height">height</a>;
};</pre><dl class="interface"><dt class="attributes-header">Attributes:</dt><dd><dl class="attributes">
<dt id="extend-__svg__SVGForeignObjectElement__x" class="attribute first-child"><b>x</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#extend-ForeignObjectElementXAttribute"><span class="attr-name">‘x’</span></a> on the given <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>
 element.
</div></dd>
<dt id="extend-__svg__SVGForeignObjectElement__y" class="attribute"><b>y</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#extend-ForeignObjectElementYAttribute"><span class="attr-name">‘y’</span></a> on the given <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>
 element.
</div></dd>
<dt id="extend-__svg__SVGForeignObjectElement__width" class="attribute"><b>width</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#extend-ForeignObjectElementWidthAttribute"><span class="attr-name">‘width’</span></a> on the given <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>
 element.
</div></dd>
<dt id="extend-__svg__SVGForeignObjectElement__height" class="attribute"><b>height</b><span class="idl-type-parenthetical"> (readonly <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a>)</span></dt><dd class="attribute"><div>
 Corresponds to attribute <a href="#extend-ForeignObjectElementHeightAttribute"><span class="attr-name">‘height’</span></a> on the given <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>
 element.
</div></dd></dl></dd></dl>


</div><hr class="chapter-divider" />
<div id="chapter-svgdtd">

<h1>Appendix A: Document Type Definition</h1><h2 id="svgdtd-toc">Contents</h2><ul class="toc">
<li><a href="#svgdtd-Introduction">A.1 Introduction</a></li>
<li><a href="#svgdtd-Modularization">A.2 Modularization</a><ul class="toc">
<li><a href="#svgdtd-ElementAndAttributeCollections">A.2.1 Element and attribute collections</a></li>
<li><a href="#svgdtd-Profiling">A.2.2 Profiling the SVG specification</a></li>
<li><a href="#svgdtd-PracticalConsiderations">A.2.3 Practical considerations</a></li></ul></li>
<li><a href="#svgdtd-DTD.1">A.3 SVG 1.1 module definitions and DTD implementations</a><ul class="toc">
<li><a href="#svgdtd-DTD.1.1">A.3.1 Modular Framework Module</a></li>
<li><a href="#svgdtd-DTD.1.2">A.3.2 Datatypes Module</a></li>
<li><a href="#svgdtd-DTD.1.3">A.3.3 Qualified Name Module</a></li>
<li><a href="#svgdtd-DTD.1.4">A.3.4 Core Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.5">A.3.5 Container Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.6">A.3.6 Viewport Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.7">A.3.7 Paint Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.8">A.3.8 Basic Paint Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.9">A.3.9 Paint Opacity Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.10">A.3.10 Graphics Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.11">A.3.11 Basic Graphics Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.12">A.3.12 Document Events Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.13">A.3.13 Graphical Element Events Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.14">A.3.14 Animation Events Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.15">A.3.15 XLink Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.16">A.3.16 External Resources Attribute Module</a></li>
<li><a href="#svgdtd-DTD.1.17">A.3.17 Structure Module</a></li>
<li><a href="#svgdtd-DTD.1.18">A.3.18 Basic Structure Module</a></li>
<li><a href="#svgdtd-DTD.1.19">A.3.19 Conditional Processing Module</a></li>
<li><a href="#svgdtd-DTD.1.20">A.3.20 Image Module</a></li>
<li><a href="#svgdtd-DTD.1.21">A.3.21 Style Module</a></li>
<li><a href="#svgdtd-DTD.1.22">A.3.22 Shape Module</a></li>
<li><a href="#svgdtd-DTD.1.23">A.3.23 Text Module</a></li>
<li><a href="#svgdtd-DTD.1.24">A.3.24 Basic Text Module</a></li>
<li><a href="#svgdtd-DTD.1.25">A.3.25 Marker Module</a></li>
<li><a href="#svgdtd-DTD.1.26">A.3.26 Color Profile Module</a></li>
<li><a href="#svgdtd-DTD.1.27">A.3.27 Gradient Module</a></li>
<li><a href="#svgdtd-DTD.1.28">A.3.28 Pattern Module</a></li>
<li><a href="#svgdtd-DTD.1.29">A.3.29 Clip Module</a></li>
<li><a href="#svgdtd-DTD.1.30">A.3.30 Basic Clip Module</a></li>
<li><a href="#svgdtd-DTD.1.31">A.3.31 Mask Module</a></li>
<li><a href="#svgdtd-DTD.1.32">A.3.32 Filter Module</a></li>
<li><a href="#svgdtd-DTD.1.33">A.3.33 Basic Filter Module</a></li>
<li><a href="#svgdtd-DTD.1.34">A.3.34 Cursor Module</a></li>
<li><a href="#svgdtd-DTD.1.35">A.3.35 Hyperlinking Module</a></li>
<li><a href="#svgdtd-DTD.1.36">A.3.36 View Module</a></li>
<li><a href="#svgdtd-DTD.1.37">A.3.37 Scripting Module</a></li>
<li><a href="#svgdtd-DTD.1.38">A.3.38 Animation Module</a></li>
<li><a href="#svgdtd-DTD.1.39">A.3.39 Font Module</a></li>
<li><a href="#svgdtd-DTD.1.40">A.3.40 Basic Font Module</a></li>
<li><a href="#svgdtd-DTD.1.41">A.3.41 Extensibility Module</a></li></ul></li>
<li><a href="#svgdtd-DTD.2">A.4 SVG 1.1 Document Type Definition</a><ul class="toc">
<li><a href="#svgdtd-DTD.2.1">A.4.1 SVG 1.1 DTD Driver</a></li>
<li><a href="#svgdtd-DTD.2.2">A.4.2 SVG 1.1 Document Model</a></li>
<li><a href="#svgdtd-DTD.2.3">A.4.3 SVG 1.1 Attribute Collection</a></li></ul></li></ul>

<p class="normativity"><strong>This appendix is normative.</strong></p>

<h2 id="svgdtd-Introduction">A.1 Introduction</h2>

<p>This appendix defines a DTD for SVG 1.1, which is used as part of
determining whether a given document or document fragment is
conforming.  See <a href="#chapter-conform">Conformance Criteria</a>
for details on how the DTD is to be used in this regard.  Note
in particular that simply validating a given XML document against
this DTD cannot definitively, by itself, determine conformance
to this specification.</p>

<p>If errors are found in this DTD, then they will be listed in the 
<a href="http://www.w3.org/2011/08/REC-SVG11-20110816-errata">SVG 1.1 Second Edition errata</a>.
A dated version of the flattened DTD will always be available from
<a href="http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-flat-20110816.dtd">http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-flat-20110816.dtd</a>.</p>


<h2 id="svgdtd-Modularization">A.2 Modularization</h2>

<p>The modularization of SVG included here is a decomposition of
<a href="http://www.w3.org/TR/2001/REC-SVG-20010904/">SVG 1.0</a>
[<a href="#refs-ref-SVG10">SVG10</a>] and errata into a
collection of abstract modules that provide specific units of
functionality. These modules may be combined with each other
and with modules defined in other specifications (such as
XHTML) to create SVG subset and extension document types that
qualify as members of the SVG family of document types. See
<a href="#chapter-conform">Conformance</a> for a description of SVG
family documents, and
<a href="http://www.w3.org/TR/2002/WD-XHTMLplusMathMLplusSVG-20020809/"><cite>An XHTML + MathML + SVG Profile</cite></a>
[<a href="#refs-ref-XHTMLplusMathMLplusSVG">XHTMLplusMathMLplusSVG</a>]
for a profile that combines XHTML, MathML and SVG.</p>

<p>Each major section of the SVG specification corresponds to a
module named after that section, e.g. "Text Module" or "Basic
Structure Module". A module without the "Basic" prefix implies
that the module includes the complete set of elements and
attributes, with no restrictions, from the corresponding
section of the specification. If there is a need to provide a
subset of the functionality of the complete module, then
a Basic module is created with the "Basic" prefix added to the
name of the complete module. For example, the "Basic Text Module"
is a subset of the "Text Module".</p>

<p>It is an error for a profile of SVG 1.1 to include both the
complete module and its basic subset (e.g. the
"Text Module" and the "Basic Text Module").</p>

<h3 id="svgdtd-ElementAndAttributeCollections">A.2.1 Element and attribute collections</h3>

<p>Most modules define a named collection of elements or attributes.
These collections are used as a shorthand when describing the set of
attributes allowed on a particular element (e.g. the "Style" attribute
collection) or the set of elements allowed as children of a particular
element (e.g. the "Shape" element collection). All collections have
names that begin with an uppercase character.</p>

<p>When defining a profile, it is assumed that all the element and
attribute collections are defined to be empty. That way, a module
can redefine the collection as it is included in the profile, adding
elements or attributes to make them available within the profile.
Therefore, it is not a mistake to refer to an element or attribute
collection from a module that is not included in the profile, it simply
means that collection is empty.</p>

<p>The exception to this is the collection Presentation.attrib, which is
the union of all the presentation attribute collections (i.e. all the
attribute collections with the string "Presentation" in their name).
Presentation.attrib is not defined in any module, but it exists in every
profile.</p>

<p>A subset module (i.e. a Basic module) may define a different named
collection from a superset module. Since it is an error to include a
subset and superset module of the same group in a profile, all attribute
and element collections will either be defined once by the module
that includes them, or will have their default empty value (again,
with the exception of Presentation.attrib which is not defined by any
module).</p>

<h3 id="svgdtd-Profiling">A.2.2 Profiling the SVG specification</h3>

<p>The modularization of SVG 1.1 allows profiles to be described
by listing the SVG modules they allow and possibly a small number
of restrictions or extensions on the elements provided by those
modules.</p>

<p>The "Full" profile of SVG 1.1 is the collection of all the complete
modules listed in this specification (i.e., every module that is not a
subset module).</p>

<p>When applied to conformance, the unqualified term "SVG" implies
the "Full" profile of SVG 1.1 defined by this specification. If an
implementation does not implement the Full profile, it must state either
the profile to which it conforms, or that it implements a subset of
SVG.</p>

<h3 id="svgdtd-PracticalConsiderations">A.2.3 Practical considerations</h3>

<p>DTD-based modularization has proven to be an unwieldy method of defining
composable XML languages, due to the inherent inability to describe
certain complex content models in DTDs as well as their being
agnostic with respect to XML namespaces.  While the SVG 1.1 DTD
is provided in a modularized form, it is recommended
that alternate technologies such as Namespace-based Validation
Dispatch Language [<a href="#refs-ref-NVDL">NVDL</a>] be
used to accomplish XML language composition instead.</p>

<h2 id="svgdtd-DTD.1">A.3 SVG 1.1 module definitions and DTD implementations</h2>

<p>This section contains the formal definition of each of the
SVG abstract modules as a DTD module.  Any element and attribute
collections defined by the module are also listed.</p>

<h3 id="svgdtd-DTD.1.1">A.3.1 Modular Framework Module</h3>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Modular Framework Module ...................................... --&gt;
&lt;!-- file: svg-framework.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 Modular Framework//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-framework.mod"

     ....................................................................... --&gt;

&lt;!-- Modular Framework

     This module instantiates the modules needed to support the SVG
     modularization model, including:

        + Datatypes
        + Qualified Name
        + Document Model
        + Attribute Collection
--&gt;

&lt;!ENTITY % svg-datatypes.module "INCLUDE" &gt;
&lt;![%svg-datatypes.module;[
&lt;!ENTITY % svg-datatypes.mod
    PUBLIC "-//W3C//ENTITIES SVG 1.1 Datatypes//EN"
           "svg-datatypes.mod" &gt;
%svg-datatypes.mod;]]&gt;

&lt;!ENTITY % svg-qname.module "INCLUDE" &gt;
&lt;![%svg-qname.module;[
&lt;!ENTITY % svg-qname.mod
    PUBLIC "-//W3C//ENTITIES SVG 1.1 Qualified Name//EN"
           "svg-qname.mod" &gt;
%svg-qname.mod;]]&gt;

&lt;!ENTITY % svg-model.module "INCLUDE" &gt;
&lt;![%svg-model.module;[
&lt;!-- instantiate the Document Model declared in the DTD driver --&gt;
%svg-model.mod;]]&gt;

&lt;!ENTITY % svg-attribs.module "INCLUDE" &gt;
&lt;![%svg-attribs.module;[
&lt;!-- instantiate the Attribute Collection declared in the DTD driver --&gt;
%svg-attribs.mod;]]&gt;

&lt;!-- end of svg-framework.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.2">A.3.2 Datatypes Module</h3>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Datatypes Module .............................................. --&gt;
&lt;!-- file: svg-datatypes.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 Datatypes//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-datatypes.mod"

     ....................................................................... --&gt;

&lt;!-- Datatypes

     This module declares common data types for properties and attributes.
--&gt;

&lt;!-- feature specification --&gt;
&lt;!ENTITY % Boolean.datatype "( false | true )" &gt;

&lt;!-- 'clip-rule' or 'fill-rule' property/attribute value --&gt;
&lt;!ENTITY % ClipFillRule.datatype "( nonzero | evenodd | inherit )" &gt;

&lt;!-- media type, as per [RFC2045] --&gt;
&lt;!ENTITY % ContentType.datatype "CDATA" &gt;

&lt;!-- a &lt;coordinate&gt; --&gt;
&lt;!ENTITY % Coordinate.datatype "CDATA" &gt;

&lt;!-- a list of &lt;coordinate&gt;s --&gt;
&lt;!ENTITY % Coordinates.datatype "CDATA" &gt;

&lt;!-- a &lt;color&gt; value --&gt;
&lt;!ENTITY % Color.datatype "CDATA" &gt;

&lt;!-- a &lt;integer&gt; --&gt;
&lt;!ENTITY % Integer.datatype "CDATA" &gt;

&lt;!-- a language code, as per [BCP47] --&gt;
&lt;!ENTITY % LanguageCode.datatype "NMTOKEN" &gt;

&lt;!-- comma-separated list of language codes, as per [BCP47] --&gt;
&lt;!ENTITY % LanguageCodes.datatype "CDATA" &gt;

&lt;!-- a &lt;length&gt; --&gt;
&lt;!ENTITY % Length.datatype "CDATA" &gt;

&lt;!-- a list of &lt;length&gt;s --&gt;
&lt;!ENTITY % Lengths.datatype "CDATA" &gt;

&lt;!-- a &lt;number&gt; --&gt;
&lt;!ENTITY % Number.datatype "CDATA" &gt;

&lt;!-- a list of &lt;number&gt;s --&gt;
&lt;!ENTITY % Numbers.datatype "CDATA" &gt;

&lt;!-- opacity value (e.g., &lt;number&gt;) --&gt;
&lt;!ENTITY % OpacityValue.datatype "CDATA" &gt;

&lt;!-- a path data specification --&gt;
&lt;!ENTITY % PathData.datatype "CDATA" &gt;

&lt;!-- 'preserveAspectRatio' attribute specification --&gt;
&lt;!ENTITY % PreserveAspectRatioSpec.datatype "CDATA" &gt;

&lt;!-- script expression --&gt;
&lt;!ENTITY % Script.datatype "CDATA" &gt;

&lt;!-- An SVG color value (RGB plus optional ICC) --&gt;
&lt;!ENTITY % SVGColor.datatype "CDATA" &gt;

&lt;!-- arbitrary text string --&gt;
&lt;!ENTITY % Text.datatype "CDATA" &gt;

&lt;!-- list of transforms --&gt;
&lt;!ENTITY % TransformList.datatype "CDATA" &gt;

&lt;!-- a Uniform Resource Identifier, see [URI] --&gt;
&lt;!ENTITY % URI.datatype "CDATA" &gt;

&lt;!-- 'viewBox' attribute specification --&gt;
&lt;!ENTITY % ViewBoxSpec.datatype "CDATA" &gt;

&lt;!-- end of svg-datatypes.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.3">A.3.3 Qualified Name Module</h3>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Qualified Name Module ......................................... --&gt;
&lt;!-- file: svg-qname.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 Qualified Name//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-qname.mod"

     ....................................................................... --&gt;

&lt;!-- Qualified Name

     This module is contained in two parts, labeled Section 'A' and 'B':

        Section A declares parameter entities to support namespace-
        qualified names, namespace declarations, and name prefixing
        for SVG and extensions.

        Section B declares parameter entities used to provide
        namespace-qualified names for all SVG element types:
--&gt;

&lt;!-- Section A: SVG XML Namespace Framework :::::::::::::::::::::: --&gt;

&lt;!-- 1. Declare a %SVG.prefixed; conditional section keyword, used
        to activate namespace prefixing. The default value should
        inherit '%NS.prefixed;' from the DTD driver, so that unless
        overridden, the default behaviour follows the overall DTD
        prefixing scheme.
--&gt;
&lt;!ENTITY % NS.prefixed "IGNORE" &gt;
&lt;!ENTITY % SVG.prefixed "%NS.prefixed;" &gt;

&lt;!-- 2. Declare a parameter entity (eg., %SVG.xmlns;) containing
        the URI reference used to identify the SVG namespace:
--&gt;
&lt;!ENTITY % SVG.xmlns "http://www.w3.org/2000/svg" &gt;
&lt;!ENTITY % XLINK.xmlns "http://www.w3.org/1999/xlink" &gt;

&lt;!-- 3. Declare parameter entities (eg., %SVG.prefix;) containing
        the default namespace prefix string(s) to use when prefixing
        is enabled. This may be overridden in the DTD driver or the
        internal subset of an document instance. If no default prefix
        is desired, this may be declared as an empty string.
--&gt;
&lt;!ENTITY % SVG.prefix "" &gt;
&lt;!ENTITY % XLINK.prefix "xlink" &gt;

&lt;!-- 4. Declare parameter entities (eg., %SVG.pfx;) containing the
        colonized prefix(es) (eg., '%SVG.prefix;:') used when
        prefixing is active, an empty string when it is not.
--&gt;
&lt;![%SVG.prefixed;[
&lt;!ENTITY % SVG.pfx "%SVG.prefix;:" &gt;
]]&gt;
&lt;!ENTITY % SVG.pfx "" &gt;
&lt;!ENTITY % XLINK.pfx "%XLINK.prefix;:" &gt;

&lt;!-- 5. The parameter entity %SVG.xmlns.extra.attrib; may be
        redeclared to contain any non-SVG namespace declaration
        attributes for namespaces embedded in SVG. The default
        is an empty string.
--&gt;
&lt;!ENTITY % SVG.xmlns.extra.attrib "" &gt;

&lt;!-- Declare a parameter entity XLINK.xmlns.attrib containing
     the XML Namespace declarations for XLink.
--&gt;
&lt;!ENTITY % XLINK.xmlns.attrib
     "xmlns:%XLINK.prefix; %URI.datatype; #FIXED '%XLINK.xmlns;'"
&gt;

&lt;!-- Declare a parameter entity %NS.decl.attrib; containing
     all XML Namespace declarations used in the DTD, plus the
     xmlns declaration for SVG, its form dependent on whether
     prefixing is active.
--&gt;
&lt;![%SVG.prefixed;[
&lt;!ENTITY % NS.decl.attrib
    "xmlns:%SVG.prefix; %URI.datatype; #FIXED '%SVG.xmlns;'
     %XLINK.xmlns.attrib;
     %SVG.xmlns.extra.attrib;"
&gt;
]]&gt;
&lt;!ENTITY % NS.decl.attrib
    "%XLINK.xmlns.attrib;
     %SVG.xmlns.extra.attrib;"
&gt;

&lt;!-- Declare a parameter entity %SVG.xmlns.attrib; containing
     all XML namespace declaration attributes used by SVG,
     including a default xmlns attribute when prefixing is
     inactive.
--&gt;
&lt;![%SVG.prefixed;[
&lt;!ENTITY % SVG.xmlns.attrib
     "%NS.decl.attrib;"
&gt;
]]&gt;
&lt;!ENTITY % SVG.xmlns.attrib
     "xmlns %URI.datatype; #FIXED '%SVG.xmlns;'
      %XLINK.xmlns.attrib;"
&gt;

&lt;!-- Section B: SVG Qualified Names :::::::::::::::::::::::::::::: --&gt;

&lt;!-- 6. This section declares parameter entities used to provide
        namespace-qualified names for all SVG element types.
--&gt;

&lt;!-- module: svg-structure.mod ......................... --&gt;

&lt;!ENTITY % SVG.svg.qname "%SVG.pfx;svg" &gt;
&lt;!ENTITY % SVG.g.qname "%SVG.pfx;g" &gt;
&lt;!ENTITY % SVG.defs.qname "%SVG.pfx;defs" &gt;
&lt;!ENTITY % SVG.desc.qname "%SVG.pfx;desc" &gt;
&lt;!ENTITY % SVG.title.qname "%SVG.pfx;title" &gt;
&lt;!ENTITY % SVG.metadata.qname "%SVG.pfx;metadata" &gt;
&lt;!ENTITY % SVG.symbol.qname "%SVG.pfx;symbol" &gt;
&lt;!ENTITY % SVG.use.qname "%SVG.pfx;use" &gt;

&lt;!-- module: svg-conditional.mod ....................... --&gt;

&lt;!ENTITY % SVG.switch.qname "%SVG.pfx;switch" &gt;

&lt;!-- module: svg-image.mod ............................. --&gt;

&lt;!ENTITY % SVG.image.qname "%SVG.pfx;image" &gt;

&lt;!-- module: svg-style.mod ............................. --&gt;

&lt;!ENTITY % SVG.style.qname "%SVG.pfx;style" &gt;

&lt;!-- module: svg-shape.mod ............................. --&gt;

&lt;!ENTITY % SVG.path.qname "%SVG.pfx;path" &gt;
&lt;!ENTITY % SVG.rect.qname "%SVG.pfx;rect" &gt;
&lt;!ENTITY % SVG.circle.qname "%SVG.pfx;circle" &gt;
&lt;!ENTITY % SVG.line.qname "%SVG.pfx;line" &gt;
&lt;!ENTITY % SVG.ellipse.qname "%SVG.pfx;ellipse" &gt;
&lt;!ENTITY % SVG.polyline.qname "%SVG.pfx;polyline" &gt;
&lt;!ENTITY % SVG.polygon.qname "%SVG.pfx;polygon" &gt;

&lt;!-- module: svg-text.mod .............................. --&gt;

&lt;!ENTITY % SVG.text.qname "%SVG.pfx;text" &gt;
&lt;!ENTITY % SVG.tspan.qname "%SVG.pfx;tspan" &gt;
&lt;!ENTITY % SVG.tref.qname "%SVG.pfx;tref" &gt;
&lt;!ENTITY % SVG.textPath.qname "%SVG.pfx;textPath" &gt;
&lt;!ENTITY % SVG.altGlyph.qname "%SVG.pfx;altGlyph" &gt;
&lt;!ENTITY % SVG.altGlyphDef.qname "%SVG.pfx;altGlyphDef" &gt;
&lt;!ENTITY % SVG.altGlyphItem.qname "%SVG.pfx;altGlyphItem" &gt;
&lt;!ENTITY % SVG.glyphRef.qname "%SVG.pfx;glyphRef" &gt;

&lt;!-- module: svg-marker.mod ............................ --&gt;

&lt;!ENTITY % SVG.marker.qname "%SVG.pfx;marker" &gt;

&lt;!-- module: svg-profile.mod ........................... --&gt;

&lt;!ENTITY % SVG.color-profile.qname "%SVG.pfx;color-profile" &gt;

&lt;!-- module: svg-gradient.mod .......................... --&gt;

&lt;!ENTITY % SVG.linearGradient.qname "%SVG.pfx;linearGradient" &gt;
&lt;!ENTITY % SVG.radialGradient.qname "%SVG.pfx;radialGradient" &gt;
&lt;!ENTITY % SVG.stop.qname "%SVG.pfx;stop" &gt;

&lt;!-- module: svg-pattern.mod ........................... --&gt;

&lt;!ENTITY % SVG.pattern.qname "%SVG.pfx;pattern" &gt;

&lt;!-- module: svg-clip.mod .............................. --&gt;

&lt;!ENTITY % SVG.clipPath.qname "%SVG.pfx;clipPath" &gt;

&lt;!-- module: svg-mask.mod .............................. --&gt;

&lt;!ENTITY % SVG.mask.qname "%SVG.pfx;mask" &gt;

&lt;!-- module: svg-filter.mod ............................ --&gt;

&lt;!ENTITY % SVG.filter.qname "%SVG.pfx;filter" &gt;
&lt;!ENTITY % SVG.feBlend.qname "%SVG.pfx;feBlend" &gt;
&lt;!ENTITY % SVG.feColorMatrix.qname "%SVG.pfx;feColorMatrix" &gt;
&lt;!ENTITY % SVG.feComponentTransfer.qname "%SVG.pfx;feComponentTransfer" &gt;
&lt;!ENTITY % SVG.feComposite.qname "%SVG.pfx;feComposite" &gt;
&lt;!ENTITY % SVG.feConvolveMatrix.qname "%SVG.pfx;feConvolveMatrix" &gt;
&lt;!ENTITY % SVG.feDiffuseLighting.qname "%SVG.pfx;feDiffuseLighting" &gt;
&lt;!ENTITY % SVG.feDisplacementMap.qname "%SVG.pfx;feDisplacementMap" &gt;
&lt;!ENTITY % SVG.feFlood.qname "%SVG.pfx;feFlood" &gt;
&lt;!ENTITY % SVG.feGaussianBlur.qname "%SVG.pfx;feGaussianBlur" &gt;
&lt;!ENTITY % SVG.feImage.qname "%SVG.pfx;feImage" &gt;
&lt;!ENTITY % SVG.feMerge.qname "%SVG.pfx;feMerge" &gt;
&lt;!ENTITY % SVG.feMergeNode.qname "%SVG.pfx;feMergeNode" &gt;
&lt;!ENTITY % SVG.feMorphology.qname "%SVG.pfx;feMorphology" &gt;
&lt;!ENTITY % SVG.feOffset.qname "%SVG.pfx;feOffset" &gt;
&lt;!ENTITY % SVG.feSpecularLighting.qname "%SVG.pfx;feSpecularLighting" &gt;
&lt;!ENTITY % SVG.feTile.qname "%SVG.pfx;feTile" &gt;
&lt;!ENTITY % SVG.feTurbulence.qname "%SVG.pfx;feTurbulence" &gt;
&lt;!ENTITY % SVG.feDistantLight.qname "%SVG.pfx;feDistantLight" &gt;
&lt;!ENTITY % SVG.fePointLight.qname "%SVG.pfx;fePointLight" &gt;
&lt;!ENTITY % SVG.feSpotLight.qname "%SVG.pfx;feSpotLight" &gt;
&lt;!ENTITY % SVG.feFuncR.qname "%SVG.pfx;feFuncR" &gt;
&lt;!ENTITY % SVG.feFuncG.qname "%SVG.pfx;feFuncG" &gt;
&lt;!ENTITY % SVG.feFuncB.qname "%SVG.pfx;feFuncB" &gt;
&lt;!ENTITY % SVG.feFuncA.qname "%SVG.pfx;feFuncA" &gt;

&lt;!-- module: svg-cursor.mod ............................ --&gt;

&lt;!ENTITY % SVG.cursor.qname "%SVG.pfx;cursor" &gt;

&lt;!-- module: svg-hyperlink.mod ......................... --&gt;

&lt;!ENTITY % SVG.a.qname "%SVG.pfx;a" &gt;

&lt;!-- module: svg-view.mod .............................. --&gt;

&lt;!ENTITY % SVG.view.qname "%SVG.pfx;view" &gt;

&lt;!-- module: svg-script.mod ............................ --&gt;

&lt;!ENTITY % SVG.script.qname "%SVG.pfx;script" &gt;

&lt;!-- module: svg-animation.mod ......................... --&gt;

&lt;!ENTITY % SVG.animate.qname "%SVG.pfx;animate" &gt;
&lt;!ENTITY % SVG.set.qname "%SVG.pfx;set" &gt;
&lt;!ENTITY % SVG.animateMotion.qname "%SVG.pfx;animateMotion" &gt;
&lt;!ENTITY % SVG.animateColor.qname "%SVG.pfx;animateColor" &gt;
&lt;!ENTITY % SVG.animateTransform.qname "%SVG.pfx;animateTransform" &gt;
&lt;!ENTITY % SVG.mpath.qname "%SVG.pfx;mpath" &gt;

&lt;!-- module: svg-font.mod .............................. --&gt;

&lt;!ENTITY % SVG.font.qname "%SVG.pfx;font" &gt;
&lt;!ENTITY % SVG.font-face.qname "%SVG.pfx;font-face" &gt;
&lt;!ENTITY % SVG.glyph.qname "%SVG.pfx;glyph" &gt;
&lt;!ENTITY % SVG.missing-glyph.qname "%SVG.pfx;missing-glyph" &gt;
&lt;!ENTITY % SVG.hkern.qname "%SVG.pfx;hkern" &gt;
&lt;!ENTITY % SVG.vkern.qname "%SVG.pfx;vkern" &gt;
&lt;!ENTITY % SVG.font-face-src.qname "%SVG.pfx;font-face-src" &gt;
&lt;!ENTITY % SVG.font-face-uri.qname "%SVG.pfx;font-face-uri" &gt;
&lt;!ENTITY % SVG.font-face-format.qname "%SVG.pfx;font-face-format" &gt;
&lt;!ENTITY % SVG.font-face-name.qname "%SVG.pfx;font-face-name" &gt;

&lt;!-- module: svg-extensibility.mod ..................... --&gt;

&lt;!ENTITY % SVG.foreignObject.qname "%SVG.pfx;foreignObject" &gt;

&lt;!-- end of svg-qname.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.4">A.3.4 Core Attribute Module</h3>

<p>The Core Attribute Module defines the attribute collection Core.attrib that is the
core set of attributes that can be present on any element.</p>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Core.attrib</td><td>id, xml:base, xml:lang, xml:space</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Core Attribute Module ......................................... --&gt;
&lt;!-- file: svg-core-attrib.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 Core Attribute//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-core-attrib.mod"

     ....................................................................... --&gt;

&lt;!-- Core Attribute

        id, xml:base, xml:lang, xml:space

     This module defines the core set of attributes that can be present on
     any element.
--&gt;

&lt;!ENTITY % SVG.id.attrib
    "id ID #IMPLIED"
&gt;

&lt;!ENTITY % SVG.base.attrib
    "xml:base %URI.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.lang.attrib
    "xml:lang %LanguageCode.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.space.attrib
    "xml:space ( default | preserve ) #IMPLIED"
&gt;

&lt;!ENTITY % SVG.Core.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Core.attrib
    "%SVG.id.attrib;
     %SVG.base.attrib;
     %SVG.lang.attrib;
     %SVG.space.attrib;
     %SVG.Core.extra.attrib;"
&gt;

&lt;!-- end of svg-core-attrib.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.5">A.3.5 Container Attribute Module</h3>

<p>The Container Attribute Module defines the Container.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Container.attrib</td><td>enable-background</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Container Attribute Module .................................... --&gt;
&lt;!-- file: svg-container-attrib.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 Container Attribute//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-container-attrib.mod"

     ....................................................................... --&gt;

&lt;!-- Container Attribute

        enable-background

     This module defines the Container attribute set.
--&gt;

&lt;!-- 'enable-background' property/attribute value (e.g., 'new', 'accumulate') --&gt;
&lt;!ENTITY % EnableBackgroundValue.datatype "CDATA" &gt;

&lt;!ENTITY % SVG.enable-background.attrib
    "enable-background %EnableBackgroundValue.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.Container.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Container.attrib
    "%SVG.enable-background.attrib;
     %SVG.Container.extra.attrib;"
&gt;

&lt;!-- end of svg-container-attrib.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.6">A.3.6 Viewport Attribute Module</h3>

<p>The Container Attribute Module defines the Container.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Viewport.attrib</td><td>clip, overflow</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Viewport Attribute Module ..................................... --&gt;
&lt;!-- file: svg-viewport-attrib.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 Viewport Attribute//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-viewport-attrib.mod"

     ....................................................................... --&gt;

&lt;!-- Viewport Attribute

        clip, overflow

     This module defines the Viewport attribute set.
--&gt;

&lt;!-- 'clip' property/attribute value (e.g., 'auto', rect(...)) --&gt;
&lt;!ENTITY % ClipValue.datatype "CDATA" &gt;

&lt;!ENTITY % SVG.clip.attrib
    "clip %ClipValue.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.overflow.attrib
    "overflow ( visible | hidden | scroll | auto | inherit ) #IMPLIED"
&gt;

&lt;!ENTITY % SVG.Viewport.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Viewport.attrib
    "%SVG.clip.attrib;
     %SVG.overflow.attrib;
     %SVG.Viewport.extra.attrib;"
&gt;

&lt;!-- end of svg-viewport-attrib.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.7">A.3.7 Paint Attribute Module</h3>

<p>The Paint Attribute Module defines the Paint.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Paint.attrib</td><td>color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation, color-rendering</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Paint Attribute Module ........................................ --&gt;
&lt;!-- file: svg-paint-attrib.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 Paint Attribute//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-paint-attrib.mod"

     ....................................................................... --&gt;

&lt;!-- Paint Attribute

        fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,
        stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width, color,
        color-interpolation, color-rendering

     This module defines the Paint and Color attribute sets.
--&gt;

&lt;!-- a 'fill' or 'stroke' property/attribute value: &lt;paint&gt; --&gt;
&lt;!ENTITY % Paint.datatype "CDATA" &gt;

&lt;!-- 'stroke-dasharray' property/attribute value (e.g., 'none', list of &lt;number&gt;s) --&gt;
&lt;!ENTITY % StrokeDashArrayValue.datatype "CDATA" &gt;

&lt;!-- 'stroke-dashoffset' property/attribute value (e.g., 'none', &lt;legnth&gt;) --&gt;
&lt;!ENTITY % StrokeDashOffsetValue.datatype "CDATA" &gt;

&lt;!-- 'stroke-miterlimit' property/attribute value (e.g., &lt;number&gt;) --&gt;
&lt;!ENTITY % StrokeMiterLimitValue.datatype "CDATA" &gt;

&lt;!-- 'stroke-width' property/attribute value (e.g., &lt;length&gt;) --&gt;
&lt;!ENTITY % StrokeWidthValue.datatype "CDATA" &gt;

&lt;!ENTITY % SVG.fill.attrib
    "fill %Paint.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.fill-rule.attrib
    "fill-rule %ClipFillRule.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.stroke.attrib
    "stroke %Paint.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.stroke-dasharray.attrib
    "stroke-dasharray %StrokeDashArrayValue.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.stroke-dashoffset.attrib
    "stroke-dashoffset %StrokeDashOffsetValue.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.stroke-linecap.attrib
    "stroke-linecap ( butt | round | square | inherit ) #IMPLIED"
&gt;

&lt;!ENTITY % SVG.stroke-linejoin.attrib
    "stroke-linejoin ( miter | round | bevel | inherit ) #IMPLIED"
&gt;

&lt;!ENTITY % SVG.stroke-miterlimit.attrib
    "stroke-miterlimit %StrokeMiterLimitValue.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.stroke-width.attrib
    "stroke-width %StrokeWidthValue.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.Paint.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Paint.attrib
    "%SVG.fill.attrib;
     %SVG.fill-rule.attrib;
     %SVG.stroke.attrib;
     %SVG.stroke-dasharray.attrib;
     %SVG.stroke-dashoffset.attrib;
     %SVG.stroke-linecap.attrib;
     %SVG.stroke-linejoin.attrib;
     %SVG.stroke-miterlimit.attrib;
     %SVG.stroke-width.attrib;
     %SVG.Paint.extra.attrib;"
&gt;

&lt;!ENTITY % SVG.color.attrib
    "color %Color.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.color-interpolation.attrib
    "color-interpolation ( auto | sRGB | linearRGB | inherit ) #IMPLIED"
&gt;

&lt;!ENTITY % SVG.color-rendering.attrib
    "color-rendering ( auto | optimizeSpeed | optimizeQuality | inherit )
                       #IMPLIED"
&gt;

&lt;!ENTITY % SVG.Color.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Color.attrib
    "%SVG.color.attrib;
     %SVG.color-interpolation.attrib;
     %SVG.color-rendering.attrib;
     %SVG.Color.extra.attrib;"
&gt;

&lt;!-- end of svg-paint-attrib.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.8">A.3.8 Basic Paint Attribute Module</h3>

<p>The Basic Paint Attribute Module defines the Paint.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Paint.attrib</td><td>color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width, color-rendering</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Basic Paint Attribute Module .................................. --&gt;
&lt;!-- file: svg-basic-paint-attrib.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 Basic Paint Attribute//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-basic-paint-attrib.mod"

     ....................................................................... --&gt;

&lt;!-- Basic Paint Attribute

        fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,
        stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width, color,
        color-rendering

     This module defines the Paint and Color attribute sets.
--&gt;

&lt;!-- a 'fill' or 'stroke' property/attribute value: &lt;paint&gt; --&gt;
&lt;!ENTITY % Paint.datatype "CDATA" &gt;

&lt;!-- 'stroke-dasharray' property/attribute value (e.g., 'none', list of &lt;number&gt;s) --&gt;
&lt;!ENTITY % StrokeDashArrayValue.datatype "CDATA" &gt;

&lt;!-- 'stroke-dashoffset' property/attribute value (e.g., 'none', &lt;legnth&gt;) --&gt;
&lt;!ENTITY % StrokeDashOffsetValue.datatype "CDATA" &gt;

&lt;!-- 'stroke-miterlimit' property/attribute value (e.g., &lt;number&gt;) --&gt;
&lt;!ENTITY % StrokeMiterLimitValue.datatype "CDATA" &gt;

&lt;!-- 'stroke-width' property/attribute value (e.g., &lt;length&gt;) --&gt;
&lt;!ENTITY % StrokeWidthValue.datatype "CDATA" &gt;

&lt;!ENTITY % SVG.fill.attrib
    "fill %Paint.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.fill-rule.attrib
    "fill-rule %ClipFillRule.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.stroke.attrib
    "stroke %Paint.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.stroke-dasharray.attrib
    "stroke-dasharray %StrokeDashArrayValue.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.stroke-dashoffset.attrib
    "stroke-dashoffset %StrokeDashOffsetValue.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.stroke-linecap.attrib
    "stroke-linecap ( butt | round | square | inherit ) #IMPLIED"
&gt;

&lt;!ENTITY % SVG.stroke-linejoin.attrib
    "stroke-linejoin ( miter | round | bevel | inherit ) #IMPLIED"
&gt;

&lt;!ENTITY % SVG.stroke-miterlimit.attrib
    "stroke-miterlimit %StrokeMiterLimitValue.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.stroke-width.attrib
    "stroke-width %StrokeWidthValue.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.Paint.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Paint.attrib
    "%SVG.fill.attrib;
     %SVG.fill-rule.attrib;
     %SVG.stroke.attrib;
     %SVG.stroke-dasharray.attrib;
     %SVG.stroke-dashoffset.attrib;
     %SVG.stroke-linecap.attrib;
     %SVG.stroke-linejoin.attrib;
     %SVG.stroke-miterlimit.attrib;
     %SVG.stroke-width.attrib;
     %SVG.Paint.extra.attrib;"
&gt;

&lt;!ENTITY % SVG.color.attrib
    "color %Color.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.color-rendering.attrib
    "color-rendering ( auto | optimizeSpeed | optimizeQuality | inherit )
                       #IMPLIED"
&gt;

&lt;!ENTITY % SVG.Color.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Color.attrib
    "%SVG.color.attrib;
     %SVG.color-rendering.attrib;
     %SVG.Color.extra.attrib;"
&gt;

&lt;!-- end of svg-basic-paint-attrib.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.9">A.3.9 Paint Opacity Attribute Module</h3>

<p>The Paint Opacity Attribute Module defines the Opacity.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Opacity.attrib</td><td>opacity, stroke-opacity, fill-opacity</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Paint Opacity Attribute Module ................................ --&gt;
&lt;!-- file: svg-opacity-attrib.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 Paint Opacity Attribute//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-opacity-attrib.mod"

     ....................................................................... --&gt;

&lt;!-- Paint Opacity Attribute

        opacity, fill-opacity, stroke-opacity

     This module defines the Opacity attribute set.
--&gt;

&lt;!ENTITY % SVG.opacity.attrib
    "opacity %OpacityValue.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.fill-opacity.attrib
    "fill-opacity %OpacityValue.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.stroke-opacity.attrib
    "stroke-opacity %OpacityValue.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.Opacity.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Opacity.attrib
    "%SVG.opacity.attrib;
     %SVG.fill-opacity.attrib;
     %SVG.stroke-opacity.attrib;
     %SVG.Opacity.extra.attrib;"
&gt;

&lt;!-- end of svg-opacity-attrib.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.10">A.3.10 Graphics Attribute Module</h3>

<p>The Graphics Attribute Module defines the Graphics.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Graphics.attrib</td><td>display, image-rendering, pointer-events, shape-rendering, text-rendering, visibility</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Graphics Attribute Module ..................................... --&gt;
&lt;!-- file: svg-graphics-attrib.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 Graphics Attribute//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-graphics-attrib.mod"

     ....................................................................... --&gt;

&lt;!-- Graphics Attribute

        display, image-rendering, pointer-events, shape-rendering,
        text-rendering, visibility

     This module defines the Graphics attribute set.
--&gt;

&lt;!ENTITY % SVG.display.attrib
    "display ( inline | block | list-item | run-in | compact | marker |
               table | inline-table | table-row-group | table-header-group |
               table-footer-group | table-row | table-column-group |
               table-column | table-cell | table-caption | none | inherit )
               #IMPLIED"
&gt;

&lt;!ENTITY % SVG.image-rendering.attrib
    "image-rendering ( auto | optimizeSpeed | optimizeQuality | inherit )
                       #IMPLIED"
&gt;

&lt;!ENTITY % SVG.pointer-events.attrib
    "pointer-events ( visiblePainted | visibleFill | visibleStroke | visible |
                      painted | fill | stroke | all | none | inherit )
                      #IMPLIED"
&gt;

&lt;!ENTITY % SVG.shape-rendering.attrib
    "shape-rendering ( auto | optimizeSpeed | crispEdges | geometricPrecision |
                       inherit ) #IMPLIED"
&gt;

&lt;!ENTITY % SVG.text-rendering.attrib
    "text-rendering ( auto | optimizeSpeed | optimizeLegibility |
                      geometricPrecision | inherit ) #IMPLIED"
&gt;

&lt;!ENTITY % SVG.visibility.attrib
    "visibility ( visible | hidden | inherit ) #IMPLIED"
&gt;

&lt;!ENTITY % SVG.Graphics.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Graphics.attrib
    "%SVG.display.attrib;
     %SVG.image-rendering.attrib;
     %SVG.pointer-events.attrib;
     %SVG.shape-rendering.attrib;
     %SVG.text-rendering.attrib;
     %SVG.visibility.attrib;
     %SVG.Graphics.extra.attrib;"
&gt;

&lt;!-- end of svg-graphics-attrib.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.11">A.3.11 Basic Graphics Attribute Module</h3>

<p>The Basic Graphics Attribute Module defines the Graphics.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Graphics.attrib</td><td>display, visibility</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Basic Graphics Attribute Module ............................... --&gt;
&lt;!-- file: svg-basic-graphics-attrib.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 Basic Graphics Attribute//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-basic-graphics-attrib.mod"

     ....................................................................... --&gt;

&lt;!-- Basic Graphics Attribute

        display, visibility

     This module defines the Graphics attribute set.
--&gt;

&lt;!ENTITY % SVG.display.attrib
    "display ( inline | block | list-item | run-in | compact | marker |
               table | inline-table | table-row-group | table-header-group |
               table-footer-group | table-row | table-column-group |
               table-column | table-cell | table-caption | none | inherit )
               #IMPLIED"
&gt;

&lt;!ENTITY % SVG.visibility.attrib
    "visibility ( visible | hidden | inherit ) #IMPLIED"
&gt;

&lt;!ENTITY % SVG.Graphics.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Graphics.attrib
    "%SVG.display.attrib;
     %SVG.visibility.attrib;
     %SVG.Graphics.extra.attrib;"
&gt;

&lt;!-- end of svg-basic-graphics-attrib.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.12">A.3.12 Document Events Attribute Module</h3>

<p>The Document Events Attribute Module defines the DocumentEvents.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>DocumentEvents.attrib</td><td>onunload, onabort, onerror, onresize, onscroll, onzoom</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Document Events Attribute Module .............................. --&gt;
&lt;!-- file: svg-docevents-attrib.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 Document Events Attribute//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-docevents-attrib.mod"

     ....................................................................... --&gt;

&lt;!-- Document Events Attribute

        onunload, onabort, onerror, onresize, onscroll, onzoom

     This module defines the DocumentEvents attribute set.
--&gt;

&lt;!ENTITY % SVG.onunload.attrib
    "onunload %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onabort.attrib
    "onabort %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onerror.attrib
    "onerror %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onresize.attrib
    "onresize %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onscroll.attrib
    "onscroll %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onzoom.attrib
    "onzoom %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.DocumentEvents.extra.attrib "" &gt;

&lt;!ENTITY % SVG.DocumentEvents.attrib
    "%SVG.onunload.attrib;
     %SVG.onabort.attrib;
     %SVG.onerror.attrib;
     %SVG.onresize.attrib;
     %SVG.onscroll.attrib;
     %SVG.onzoom.attrib;
     %SVG.DocumentEvents.extra.attrib;"
&gt;

&lt;!-- end of svg-docevents-attrib.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.13">A.3.13 Graphical Element Events Attribute Module</h3>

<p>The Graphical Events Attribute Module defines the GraphicalEvents.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>GraphicalEvents.attrib</td><td>onfocusin, onfocusout, onactivate, onclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onload</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Graphical Element Events Attribute Module ..................... --&gt;
&lt;!-- file: svg-graphevents-attrib.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 Graphical Element Events Attribute//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-graphevents-attrib.mod"

     ....................................................................... --&gt;

&lt;!-- Graphical Element Events Attribute

        onfocusin, onfocusout, onactivate, onclick, onmousedown, onmouseup,
        onmouseover, onmousemove, onmouseout, onload

     This module defines the GraphicalEvents attribute set.
--&gt;

&lt;!ENTITY % SVG.onfocusin.attrib
    "onfocusin %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onfocusout.attrib
    "onfocusout %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onactivate.attrib
    "onactivate %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onclick.attrib
    "onclick %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onmousedown.attrib
    "onmousedown %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onmouseup.attrib
    "onmouseup %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onmouseover.attrib
    "onmouseover %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onmousemove.attrib
    "onmousemove %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onmouseout.attrib
    "onmouseout %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onload.attrib
    "onload %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.GraphicalEvents.extra.attrib "" &gt;

&lt;!ENTITY % SVG.GraphicalEvents.attrib
    "%SVG.onfocusin.attrib;
     %SVG.onfocusout.attrib;
     %SVG.onactivate.attrib;
     %SVG.onclick.attrib;
     %SVG.onmousedown.attrib;
     %SVG.onmouseup.attrib;
     %SVG.onmouseover.attrib;
     %SVG.onmousemove.attrib;
     %SVG.onmouseout.attrib;
     %SVG.onload.attrib;
     %SVG.GraphicalEvents.extra.attrib;"
&gt;

&lt;!-- end of svg-graphevents-attrib.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.14">A.3.14 Animation Events Attribute Module</h3>

<p>The Animation Events Attribute Module defines the AnimationEvents.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>AnimationEvents.attrib</td><td>onbegin, onend, onrepeat, onload</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Animation Events Attribute Module ............................. --&gt;
&lt;!-- file: svg-animevents-attrib.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 Animation Events Attribute//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-animevents-attrib.mod"

     ....................................................................... --&gt;

&lt;!-- Animation Events Attribute

        onbegin, onend, onrepeat, onload

     This module defines the AnimationEvents attribute set.
--&gt;

&lt;!ENTITY % SVG.onbegin.attrib
    "onbegin %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onend.attrib
    "onend %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onrepeat.attrib
    "onrepeat %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.onload.attrib
    "onload %Script.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.AnimationEvents.extra.attrib "" &gt;

&lt;!ENTITY % SVG.AnimationEvents.attrib
    "%SVG.onbegin.attrib;
     %SVG.onend.attrib;
     %SVG.onrepeat.attrib;
     %SVG.onload.attrib;
     %SVG.AnimationEvents.extra.attrib;"
&gt;

&lt;!-- end of svg-animevents-attrib.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.15">A.3.15 XLink Attribute Module</h3>

<p>The XLink Attribute Module defines the XLink.attrib, XLinkRequired.attrib,
XLinkEmbed.attrib and XLinkReplace.attrib attribute collections.  These
collections differ only in whether the <span class="attr-name">‘xlink:href’</span>
attribute is required or what the default value for the <span class="attr-name">‘xlink:show’</span>
attribute is.</p>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>XLink.attrib</td><td>xlink:type, xlink:href, xlink:role, xlink:arcrole, xlink:title, xlink:show, xlink:actuate</td></tr><tr><td>XLinkRequired.attrib</td><td>xlink:type, xlink:href, xlink:role, xlink:arcrole, xlink:title, xlink:show, xlink:actuate</td></tr><tr><td>XLinkEmbed.attrib</td><td>xlink:type, xlink:href, xlink:role, xlink:arcrole, xlink:title, xlink:show, xlink:actuate</td></tr><tr><td>XLinkReplace.attrib</td><td>xlink:type, xlink:href, xlink:role, xlink:arcrole, xlink:title, xlink:show, xlink:actuate</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 XLink Attribute Module ........................................ --&gt;
&lt;!-- file: svg-xlink-attrib.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 XLink Attribute//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-xlink-attrib.mod"

     ....................................................................... --&gt;

&lt;!-- XLink Attribute

       type, href, role, arcrole, title, show, actuate

     This module defines the XLink, XLinkRequired, XLinkEmbed, and
     XLinkReplace attribute set.
--&gt;

&lt;!ENTITY % SVG.XLink.extra.attrib "" &gt;

&lt;!ENTITY % SVG.XLink.attrib
    "%XLINK.xmlns.attrib;
     %XLINK.pfx;type ( simple ) #FIXED 'simple'
     %XLINK.pfx;href %URI.datatype; #IMPLIED
     %XLINK.pfx;role %URI.datatype; #IMPLIED
     %XLINK.pfx;arcrole %URI.datatype; #IMPLIED
     %XLINK.pfx;title CDATA #IMPLIED
     %XLINK.pfx;show ( other ) 'other'
     %XLINK.pfx;actuate ( onLoad ) #FIXED 'onLoad'
     %SVG.XLink.extra.attrib;"
&gt;

&lt;!ENTITY % SVG.XLinkRequired.extra.attrib "" &gt;

&lt;!ENTITY % SVG.XLinkRequired.attrib
    "%XLINK.xmlns.attrib;
     %XLINK.pfx;type ( simple ) #FIXED 'simple'
     %XLINK.pfx;href %URI.datatype; #REQUIRED
     %XLINK.pfx;role %URI.datatype; #IMPLIED
     %XLINK.pfx;arcrole %URI.datatype; #IMPLIED
     %XLINK.pfx;title CDATA #IMPLIED
     %XLINK.pfx;show ( other ) 'other'
     %XLINK.pfx;actuate ( onLoad ) #FIXED 'onLoad'
     %SVG.XLinkRequired.extra.attrib;"
&gt;

&lt;!ENTITY % SVG.XLinkEmbed.extra.attrib "" &gt;

&lt;!ENTITY % SVG.XLinkEmbed.attrib
    "%XLINK.xmlns.attrib;
     %XLINK.pfx;type ( simple ) #FIXED 'simple'
     %XLINK.pfx;href %URI.datatype; #REQUIRED
     %XLINK.pfx;role %URI.datatype; #IMPLIED
     %XLINK.pfx;arcrole %URI.datatype; #IMPLIED
     %XLINK.pfx;title CDATA #IMPLIED
     %XLINK.pfx;show ( embed ) 'embed'
     %XLINK.pfx;actuate ( onLoad ) #FIXED 'onLoad'
     %SVG.XLinkEmbed.extra.attrib;"
&gt;

&lt;!ENTITY % SVG.XLinkReplace.extra.attrib "" &gt;

&lt;!ENTITY % SVG.XLinkReplace.attrib
    "%XLINK.xmlns.attrib;
     %XLINK.pfx;type ( simple ) #FIXED 'simple'
     %XLINK.pfx;href %URI.datatype; #REQUIRED
     %XLINK.pfx;role %URI.datatype; #IMPLIED
     %XLINK.pfx;arcrole %URI.datatype; #IMPLIED
     %XLINK.pfx;title CDATA #IMPLIED
     %XLINK.pfx;show ( new | replace ) 'replace'
     %XLINK.pfx;actuate ( onRequest ) #FIXED 'onRequest'
     %SVG.XLinkReplace.extra.attrib;"
&gt;

&lt;!-- end of svg-xlink-attrib.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.16">A.3.16 External Resources Attribute Module</h3>

<p>The External Resources Attribute Module defines the External.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>External.attrib</td><td>externalResourcesRequired</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 External Resources Attribute Module ........................... --&gt;
&lt;!-- file: svg-extresources-attrib.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 External Resources Attribute//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-extresources-attrib.mod"

     ....................................................................... --&gt;

&lt;!-- External Resources Attribute

        externalResourcesRequired

     This module defines the External attribute set.
--&gt;

&lt;!ENTITY % SVG.externalResourcesRequired.attrib
    "externalResourcesRequired %Boolean.datatype; #IMPLIED"
&gt;

&lt;!ENTITY % SVG.External.extra.attrib "" &gt;

&lt;!ENTITY % SVG.External.attrib
    "%SVG.externalResourcesRequired.attrib;
     %SVG.External.extra.attrib;"
&gt;

&lt;!-- end of svg-extresources-attrib.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.17">A.3.17 Structure Module</h3>

<p>The Structure Module defines the Description.class, Structure.class and
Use.class element collections.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Description.class</td><td>desc, title, metadata</td></tr><tr><td>Use.class</td><td>use</td></tr><tr><td>Structure.class</td><td>svg, g, defs, symbol, Use.class</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Structure Module .............................................. --&gt;
&lt;!-- file: svg-structure.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Structure//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-structure.mod"

     ....................................................................... --&gt;

&lt;!-- Structure

        svg, g, defs, desc, title, metadata, symbol, use

     This module declares the major structural elements and their attributes.
--&gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.svg.qname "svg" &gt;
&lt;!ENTITY % SVG.g.qname "g" &gt;
&lt;!ENTITY % SVG.defs.qname "defs" &gt;
&lt;!ENTITY % SVG.desc.qname "desc" &gt;
&lt;!ENTITY % SVG.title.qname "title" &gt;
&lt;!ENTITY % SVG.metadata.qname "metadata" &gt;
&lt;!ENTITY % SVG.symbol.qname "symbol" &gt;
&lt;!ENTITY % SVG.use.qname "use" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Container.attrib "" &gt;
&lt;!ENTITY % SVG.Conditional.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Viewport.attrib "" &gt;
&lt;!ENTITY % SVG.Text.attrib "" &gt;
&lt;!ENTITY % SVG.TextContent.attrib "" &gt;
&lt;!ENTITY % SVG.Font.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.Marker.attrib "" &gt;
&lt;!ENTITY % SVG.ColorProfile.attrib "" &gt;
&lt;!ENTITY % SVG.Gradient.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib "" &gt;
&lt;!ENTITY % SVG.FilterColor.attrib "" &gt;
&lt;!ENTITY % SVG.DocumentEvents.attrib "" &gt;
&lt;!ENTITY % SVG.GraphicalEvents.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.XLinkEmbed.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Description.class ............................. --&gt;

&lt;!ENTITY % SVG.Description.extra.class "" &gt;

&lt;!ENTITY % SVG.Description.class
    "%SVG.desc.qname; | %SVG.title.qname; | %SVG.metadata.qname;
     %SVG.Description.extra.class;"
&gt;

&lt;!-- SVG.Use.class ..................................... --&gt;

&lt;!ENTITY % SVG.Use.extra.class "" &gt;

&lt;!ENTITY % SVG.Use.class
    "| %SVG.use.qname; %SVG.Use.extra.class;"
&gt;

&lt;!-- SVG.Structure.class ............................... --&gt;

&lt;!ENTITY % SVG.Structure.extra.class "" &gt;

&lt;!ENTITY % SVG.Structure.class
    "| %SVG.svg.qname; | %SVG.g.qname; | %SVG.defs.qname; | %SVG.symbol.qname;
       %SVG.Use.class; %SVG.Structure.extra.class;"
&gt;

&lt;!-- SVG.Presentation.attrib ........................... --&gt;

&lt;!ENTITY % SVG.Presentation.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Presentation.attrib
    "%SVG.Container.attrib;
     %SVG.Viewport.attrib;
     %SVG.Text.attrib;
     %SVG.TextContent.attrib;
     %SVG.Font.attrib;
     %SVG.Paint.attrib;
     %SVG.Color.attrib;
     %SVG.Opacity.attrib;
     %SVG.Graphics.attrib;
     %SVG.Marker.attrib;
     %SVG.ColorProfile.attrib;
     %SVG.Gradient.attrib;
     %SVG.Clip.attrib;
     %SVG.Mask.attrib;
     %SVG.Filter.attrib;
     %SVG.FilterColor.attrib;
     %SVG.Cursor.attrib;
     flood-color %SVGColor.datatype; #IMPLIED
     flood-opacity %OpacityValue.datatype; #IMPLIED
     lighting-color %SVGColor.datatype; #IMPLIED
     %SVG.Presentation.extra.attrib;"
&gt;

&lt;!-- svg: SVG Document Element ......................... --&gt;

&lt;!ENTITY % SVG.svg.extra.content "" &gt;

&lt;!ENTITY % SVG.svg.element "INCLUDE" &gt;
&lt;![%SVG.svg.element;[
&lt;!ENTITY % SVG.svg.content
    "( %SVG.Description.class; | %SVG.Animation.class; %SVG.Structure.class;
       %SVG.Conditional.class; %SVG.Image.class; %SVG.Style.class;
       %SVG.Shape.class; %SVG.Text.class; %SVG.Marker.class;
       %SVG.ColorProfile.class; %SVG.Gradient.class; %SVG.Pattern.class;
       %SVG.Clip.class; %SVG.Mask.class; %SVG.Filter.class; %SVG.Cursor.class;
       %SVG.Hyperlink.class; %SVG.View.class; %SVG.Script.class;
       %SVG.Font.class; %SVG.Extensibility.class; %SVG.svg.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.svg.qname; %SVG.svg.content; &gt;
&lt;!-- end of SVG.svg.element --&gt;]]&gt;

&lt;!ENTITY % SVG.svg.attlist "INCLUDE" &gt;
&lt;![%SVG.svg.attlist;[
&lt;!ATTLIST %SVG.svg.qname;
    %SVG.xmlns.attrib;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.DocumentEvents.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    x %Coordinate.datatype; #IMPLIED
    y %Coordinate.datatype; #IMPLIED
    width %Length.datatype; #IMPLIED
    height %Length.datatype; #IMPLIED
    viewBox %ViewBoxSpec.datatype; #IMPLIED
    preserveAspectRatio %PreserveAspectRatioSpec.datatype; 'xMidYMid meet'
    zoomAndPan ( disable | magnify ) 'magnify'
    version %Number.datatype; #FIXED '1.1'
    baseProfile %Text.datatype; #IMPLIED
    contentScriptType %ContentType.datatype; 'application/ecmascript'
    contentStyleType %ContentType.datatype; 'text/css'
&gt;
&lt;!-- end of SVG.svg.attlist --&gt;]]&gt;

&lt;!-- g: Group Element .................................. --&gt;

&lt;!ENTITY % SVG.g.extra.content "" &gt;

&lt;!ENTITY % SVG.g.element "INCLUDE" &gt;
&lt;![%SVG.g.element;[
&lt;!ENTITY % SVG.g.content
    "( %SVG.Description.class; | %SVG.Animation.class; %SVG.Structure.class;
       %SVG.Conditional.class; %SVG.Image.class; %SVG.Style.class;
       %SVG.Shape.class; %SVG.Text.class; %SVG.Marker.class;
       %SVG.ColorProfile.class; %SVG.Gradient.class; %SVG.Pattern.class;
       %SVG.Clip.class; %SVG.Mask.class; %SVG.Filter.class; %SVG.Cursor.class;
       %SVG.Hyperlink.class; %SVG.View.class; %SVG.Script.class;
       %SVG.Font.class; %SVG.Extensibility.class; %SVG.g.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.g.qname; %SVG.g.content; &gt;
&lt;!-- end of SVG.g.element --&gt;]]&gt;

&lt;!ENTITY % SVG.g.attlist "INCLUDE" &gt;
&lt;![%SVG.g.attlist;[
&lt;!ATTLIST %SVG.g.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.g.attlist --&gt;]]&gt;

&lt;!-- defs: Definisions Element ......................... --&gt;

&lt;!ENTITY % SVG.defs.extra.content "" &gt;

&lt;!ENTITY % SVG.defs.element "INCLUDE" &gt;
&lt;![%SVG.defs.element;[
&lt;!ENTITY % SVG.defs.content
    "( %SVG.Description.class; | %SVG.Animation.class; %SVG.Structure.class;
       %SVG.Conditional.class; %SVG.Image.class; %SVG.Style.class;
       %SVG.Shape.class; %SVG.Text.class; %SVG.Marker.class;
       %SVG.ColorProfile.class; %SVG.Gradient.class; %SVG.Pattern.class;
       %SVG.Clip.class; %SVG.Mask.class; %SVG.Filter.class; %SVG.Cursor.class;
       %SVG.Hyperlink.class; %SVG.View.class; %SVG.Script.class;
       %SVG.Font.class; %SVG.Extensibility.class; %SVG.defs.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.defs.qname; %SVG.defs.content; &gt;
&lt;!-- end of SVG.defs.element --&gt;]]&gt;

&lt;!ENTITY % SVG.defs.attlist "INCLUDE" &gt;
&lt;![%SVG.defs.attlist;[
&lt;!ATTLIST %SVG.defs.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.defs.attlist --&gt;]]&gt;

&lt;!-- desc: Description Element ......................... --&gt;

&lt;!ENTITY % SVG.desc.extra.content "" &gt;

&lt;!ENTITY % SVG.desc.element "INCLUDE" &gt;
&lt;![%SVG.desc.element;[
&lt;!ENTITY % SVG.desc.content
    "( #PCDATA %SVG.desc.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.desc.qname; %SVG.desc.content; &gt;
&lt;!-- end of SVG.desc.element --&gt;]]&gt;

&lt;!ENTITY % SVG.desc.attlist "INCLUDE" &gt;
&lt;![%SVG.desc.attlist;[
&lt;!ATTLIST %SVG.desc.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
&gt;
&lt;!-- end of SVG.desc.attlist --&gt;]]&gt;

&lt;!-- title: Title Element .............................. --&gt;

&lt;!ENTITY % SVG.title.extra.content "" &gt;

&lt;!ENTITY % SVG.title.element "INCLUDE" &gt;
&lt;![%SVG.title.element;[
&lt;!ENTITY % SVG.title.content
    "( #PCDATA %SVG.title.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.title.qname; %SVG.title.content; &gt;
&lt;!-- end of SVG.title.element --&gt;]]&gt;

&lt;!ENTITY % SVG.title.attlist "INCLUDE" &gt;
&lt;![%SVG.title.attlist;[
&lt;!ATTLIST %SVG.title.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
&gt;
&lt;!-- end of SVG.title.attlist --&gt;]]&gt;

&lt;!-- metadata: Metadata Element ........................ --&gt;

&lt;!ENTITY % SVG.metadata.extra.content "" &gt;

&lt;!ENTITY % SVG.metadata.element "INCLUDE" &gt;
&lt;![%SVG.metadata.element;[
&lt;!ENTITY % SVG.metadata.content
    "( #PCDATA %SVG.metadata.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.metadata.qname; %SVG.metadata.content; &gt;
&lt;!-- end of SVG.metadata.element --&gt;]]&gt;

&lt;!ENTITY % SVG.metadata.attlist "INCLUDE" &gt;
&lt;![%SVG.metadata.attlist;[
&lt;!ATTLIST %SVG.metadata.qname;
    %SVG.Core.attrib;
&gt;
&lt;!-- end of SVG.metadata.attlist --&gt;]]&gt;

&lt;!-- symbol: Symbol Element ............................ --&gt;

&lt;!ENTITY % SVG.symbol.extra.content "" &gt;

&lt;!ENTITY % SVG.symbol.element "INCLUDE" &gt;
&lt;![%SVG.symbol.element;[
&lt;!ENTITY % SVG.symbol.content
    "( %SVG.Description.class; | %SVG.Animation.class; %SVG.Structure.class;
       %SVG.Conditional.class; %SVG.Image.class; %SVG.Style.class;
       %SVG.Shape.class; %SVG.Text.class; %SVG.Marker.class;
       %SVG.ColorProfile.class; %SVG.Gradient.class; %SVG.Pattern.class;
       %SVG.Clip.class; %SVG.Mask.class; %SVG.Filter.class; %SVG.Cursor.class;
       %SVG.Hyperlink.class; %SVG.View.class; %SVG.Script.class;
       %SVG.Font.class; %SVG.Extensibility.class; %SVG.symbol.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.symbol.qname; %SVG.symbol.content; &gt;
&lt;!-- end of SVG.symbol.element --&gt;]]&gt;

&lt;!ENTITY % SVG.symbol.attlist "INCLUDE" &gt;
&lt;![%SVG.symbol.attlist;[
&lt;!ATTLIST %SVG.symbol.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    viewBox %ViewBoxSpec.datatype; #IMPLIED
    preserveAspectRatio %PreserveAspectRatioSpec.datatype; 'xMidYMid meet'
&gt;
&lt;!-- end of SVG.symbol.attlist --&gt;]]&gt;

&lt;!-- use: Use Element .................................. --&gt;

&lt;!ENTITY % SVG.use.extra.content "" &gt;

&lt;!ENTITY % SVG.use.element "INCLUDE" &gt;
&lt;![%SVG.use.element;[
&lt;!ENTITY % SVG.use.content
    "( %SVG.Description.class; | %SVG.Animation.class;
        %SVG.use.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.use.qname; %SVG.use.content; &gt;
&lt;!-- end of SVG.use.element --&gt;]]&gt;

&lt;!ENTITY % SVG.use.attlist "INCLUDE" &gt;
&lt;![%SVG.use.attlist;[
&lt;!ATTLIST %SVG.use.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.XLinkEmbed.attrib;
    %SVG.External.attrib;
    x %Coordinate.datatype; #IMPLIED
    y %Coordinate.datatype; #IMPLIED
    width %Length.datatype; #IMPLIED
    height %Length.datatype; #IMPLIED
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.use.attlist --&gt;]]&gt;

&lt;!-- end of svg-structure.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.18">A.3.18 Basic Structure Module</h3>

<p>The Basic Structure Module defines the Description.class, Structure.class and
Use.class element collections.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Description.class</td><td>desc, title, metadata</td></tr><tr><td>Use.class</td><td>use</td></tr><tr><td>Structure.class</td><td>svg, g, defs, Use.class</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Basic Structure Module ........................................ --&gt;
&lt;!-- file: svg-basic-structure.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Basic Structure//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-basic-structure.mod"

     ....................................................................... --&gt;

&lt;!-- Basic Structure

        svg, g, defs, desc, title, metadata, use

     This module declares the major structural elements and their attributes.
--&gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.svg.qname "svg" &gt;
&lt;!ENTITY % SVG.g.qname "g" &gt;
&lt;!ENTITY % SVG.defs.qname "defs" &gt;
&lt;!ENTITY % SVG.desc.qname "desc" &gt;
&lt;!ENTITY % SVG.title.qname "title" &gt;
&lt;!ENTITY % SVG.metadata.qname "metadata" &gt;
&lt;!ENTITY % SVG.use.qname "use" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Container.attrib "" &gt;
&lt;!ENTITY % SVG.Conditional.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Viewport.attrib "" &gt;
&lt;!ENTITY % SVG.Text.attrib "" &gt;
&lt;!ENTITY % SVG.TextContent.attrib "" &gt;
&lt;!ENTITY % SVG.Font.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.Marker.attrib "" &gt;
&lt;!ENTITY % SVG.ColorProfile.attrib "" &gt;
&lt;!ENTITY % SVG.Gradient.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib "" &gt;
&lt;!ENTITY % SVG.FilterColor.attrib "" &gt;
&lt;!ENTITY % SVG.DocumentEvents.attrib "" &gt;
&lt;!ENTITY % SVG.GraphicalEvents.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.XLinkEmbed.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Description.class ............................. --&gt;

&lt;!ENTITY % SVG.Description.extra.class "" &gt;

&lt;!ENTITY % SVG.Description.class
    "%SVG.desc.qname; | %SVG.title.qname; | %SVG.metadata.qname;
     %SVG.Description.extra.class;"
&gt;

&lt;!-- SVG.Use.class ..................................... --&gt;

&lt;!ENTITY % SVG.Use.extra.class "" &gt;

&lt;!ENTITY % SVG.Use.class
    "| %SVG.use.qname; %SVG.Use.extra.class;"
&gt;

&lt;!-- SVG.Structure.class ............................... --&gt;

&lt;!ENTITY % SVG.Structure.extra.class "" &gt;

&lt;!ENTITY % SVG.Structure.class
    "| %SVG.g.qname; | %SVG.defs.qname; %SVG.Use.class;
       %SVG.Structure.extra.class;"
&gt;

&lt;!-- SVG.Presentation.attrib ........................... --&gt;

&lt;!ENTITY % SVG.Presentation.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Presentation.attrib
    "%SVG.Container.attrib;
     %SVG.Viewport.attrib;
     %SVG.Text.attrib;
     %SVG.TextContent.attrib;
     %SVG.Font.attrib;
     %SVG.Paint.attrib;
     %SVG.Color.attrib;
     %SVG.Opacity.attrib;
     %SVG.Graphics.attrib;
     %SVG.Marker.attrib;
     %SVG.ColorProfile.attrib;
     %SVG.Gradient.attrib;
     %SVG.Clip.attrib;
     %SVG.Mask.attrib;
     %SVG.Filter.attrib;
     %SVG.FilterColor.attrib;
     %SVG.Cursor.attrib;
     flood-color %SVGColor.datatype; #IMPLIED
     flood-opacity %OpacityValue.datatype; #IMPLIED
     lighting-color %SVGColor.datatype; #IMPLIED
     %SVG.Presentation.extra.attrib;"
&gt;

&lt;!-- svg: SVG Document Element ......................... --&gt;

&lt;!ENTITY % SVG.svg.extra.content "" &gt;

&lt;!ENTITY % SVG.svg.element "INCLUDE" &gt;
&lt;![%SVG.svg.element;[
&lt;!ENTITY % SVG.svg.content
    "( %SVG.Description.class; | %SVG.Animation.class; %SVG.Structure.class;
       %SVG.Conditional.class; %SVG.Image.class; %SVG.Style.class;
       %SVG.Shape.class; %SVG.Text.class; %SVG.Marker.class;
       %SVG.ColorProfile.class; %SVG.Gradient.class; %SVG.Pattern.class;
       %SVG.Clip.class; %SVG.Mask.class; %SVG.Filter.class; %SVG.Cursor.class;
       %SVG.Hyperlink.class; %SVG.View.class; %SVG.Script.class;
       %SVG.Font.class; %SVG.Extensibility.class; %SVG.svg.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.svg.qname; %SVG.svg.content; &gt;
&lt;!-- end of SVG.svg.element --&gt;]]&gt;

&lt;!ENTITY % SVG.svg.attlist "INCLUDE" &gt;
&lt;![%SVG.svg.attlist;[
&lt;!ATTLIST %SVG.svg.qname;
    %SVG.xmlns.attrib;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.DocumentEvents.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    x %Coordinate.datatype; #IMPLIED
    y %Coordinate.datatype; #IMPLIED
    width %Length.datatype; #IMPLIED
    height %Length.datatype; #IMPLIED
    viewBox %ViewBoxSpec.datatype; #IMPLIED
    preserveAspectRatio %PreserveAspectRatioSpec.datatype; 'xMidYMid meet'
    zoomAndPan ( disable | magnify ) 'magnify'
    version %Number.datatype; #FIXED '1.1'
    baseProfile %Text.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.svg.attlist --&gt;]]&gt;

&lt;!-- g: Group Element .................................. --&gt;

&lt;!ENTITY % SVG.g.extra.content "" &gt;

&lt;!ENTITY % SVG.g.element "INCLUDE" &gt;
&lt;![%SVG.g.element;[
&lt;!ENTITY % SVG.g.content
    "( %SVG.Description.class; | %SVG.Animation.class; %SVG.Structure.class;
       %SVG.Conditional.class; %SVG.Image.class; %SVG.Style.class;
       %SVG.Shape.class; %SVG.Text.class; %SVG.Marker.class;
       %SVG.ColorProfile.class; %SVG.Gradient.class; %SVG.Pattern.class;
       %SVG.Clip.class; %SVG.Mask.class; %SVG.Filter.class; %SVG.Cursor.class;
       %SVG.Hyperlink.class; %SVG.View.class; %SVG.Script.class;
       %SVG.Font.class; %SVG.Extensibility.class; %SVG.g.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.g.qname; %SVG.g.content; &gt;
&lt;!-- end of SVG.g.element --&gt;]]&gt;

&lt;!ENTITY % SVG.g.attlist "INCLUDE" &gt;
&lt;![%SVG.g.attlist;[
&lt;!ATTLIST %SVG.g.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.g.attlist --&gt;]]&gt;

&lt;!-- defs: Definisions Element ......................... --&gt;

&lt;!ENTITY % SVG.defs.extra.content "" &gt;

&lt;!ENTITY % SVG.defs.element "INCLUDE" &gt;
&lt;![%SVG.defs.element;[
&lt;!ENTITY % SVG.defs.content
    "( %SVG.Description.class; | %SVG.Animation.class; %SVG.Structure.class;
       %SVG.Conditional.class; %SVG.Image.class; %SVG.Style.class;
       %SVG.Shape.class; %SVG.Text.class; %SVG.Marker.class;
       %SVG.ColorProfile.class; %SVG.Gradient.class; %SVG.Pattern.class;
       %SVG.Clip.class; %SVG.Mask.class; %SVG.Filter.class; %SVG.Cursor.class;
       %SVG.Hyperlink.class; %SVG.View.class; %SVG.Script.class;
       %SVG.Font.class; %SVG.Extensibility.class; %SVG.defs.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.defs.qname; %SVG.defs.content; &gt;
&lt;!-- end of SVG.defs.element --&gt;]]&gt;

&lt;!ENTITY % SVG.defs.attlist "INCLUDE" &gt;
&lt;![%SVG.defs.attlist;[
&lt;!ATTLIST %SVG.defs.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.defs.attlist --&gt;]]&gt;

&lt;!-- desc: Description Element ......................... --&gt;

&lt;!ENTITY % SVG.desc.extra.content "" &gt;

&lt;!ENTITY % SVG.desc.element "INCLUDE" &gt;
&lt;![%SVG.desc.element;[
&lt;!ENTITY % SVG.desc.content
    "( #PCDATA %SVG.desc.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.desc.qname; %SVG.desc.content; &gt;
&lt;!-- end of SVG.desc.element --&gt;]]&gt;

&lt;!ENTITY % SVG.desc.attlist "INCLUDE" &gt;
&lt;![%SVG.desc.attlist;[
&lt;!ATTLIST %SVG.desc.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
&gt;
&lt;!-- end of SVG.desc.attlist --&gt;]]&gt;

&lt;!-- title: Title Element .............................. --&gt;

&lt;!ENTITY % SVG.title.extra.content "" &gt;

&lt;!ENTITY % SVG.title.element "INCLUDE" &gt;
&lt;![%SVG.title.element;[
&lt;!ENTITY % SVG.title.content
    "( #PCDATA %SVG.title.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.title.qname; %SVG.title.content; &gt;
&lt;!-- end of SVG.title.element --&gt;]]&gt;

&lt;!ENTITY % SVG.title.attlist "INCLUDE" &gt;
&lt;![%SVG.title.attlist;[
&lt;!ATTLIST %SVG.title.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
&gt;
&lt;!-- end of SVG.title.attlist --&gt;]]&gt;

&lt;!-- metadata: Metadata Element ........................ --&gt;

&lt;!ENTITY % SVG.metadata.extra.content "" &gt;

&lt;!ENTITY % SVG.metadata.element "INCLUDE" &gt;
&lt;![%SVG.metadata.element;[
&lt;!ENTITY % SVG.metadata.content
    "( #PCDATA %SVG.metadata.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.metadata.qname; %SVG.metadata.content; &gt;
&lt;!-- end of SVG.metadata.element --&gt;]]&gt;

&lt;!ENTITY % SVG.metadata.attlist "INCLUDE" &gt;
&lt;![%SVG.metadata.attlist;[
&lt;!ATTLIST %SVG.metadata.qname;
    %SVG.Core.attrib;
&gt;
&lt;!-- end of SVG.metadata.attlist --&gt;]]&gt;

&lt;!-- use: Use Element .................................. --&gt;

&lt;!ENTITY % SVG.use.extra.content "" &gt;

&lt;!ENTITY % SVG.use.element "INCLUDE" &gt;
&lt;![%SVG.use.element;[
&lt;!ENTITY % SVG.use.content
    "( %SVG.Description.class; | %SVG.Animation.class;
        %SVG.use.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.use.qname; %SVG.use.content; &gt;
&lt;!-- end of SVG.use.element --&gt;]]&gt;

&lt;!ENTITY % SVG.use.attlist "INCLUDE" &gt;
&lt;![%SVG.use.attlist;[
&lt;!ATTLIST %SVG.use.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.XLinkEmbed.attrib;
    %SVG.External.attrib;
    x %Coordinate.datatype; #IMPLIED
    y %Coordinate.datatype; #IMPLIED
    width %Length.datatype; #IMPLIED
    height %Length.datatype; #IMPLIED
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.use.attlist --&gt;]]&gt;

&lt;!-- end of svg-basic-structure.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.19">A.3.19 Conditional Processing Module</h3>

<p>The Conditional Processing Module defines the Conditional.class element
collection and the Conditional.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Conditional.class</td><td>switch</td></tr></table>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Conditional.attrib</td><td>requiredFeatures, requiredExtensions, systemLanguage</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Conditional Processing Module ................................. --&gt;
&lt;!-- file: svg-conditional.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Conditional Processing//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-conditional.mod"

     ....................................................................... --&gt;

&lt;!-- Conditional Processing

        switch

     This module declares markup to provide support for conditional processing.
--&gt;

&lt;!-- extension list specification --&gt;
&lt;!ENTITY % ExtensionList.datatype "CDATA" &gt;

&lt;!-- feature list specification --&gt;
&lt;!ENTITY % FeatureList.datatype "CDATA" &gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.switch.qname "switch" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Container.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Viewport.attrib "" &gt;
&lt;!ENTITY % SVG.Text.attrib "" &gt;
&lt;!ENTITY % SVG.TextContent.attrib "" &gt;
&lt;!ENTITY % SVG.Font.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.Marker.attrib "" &gt;
&lt;!ENTITY % SVG.ColorProfile.attrib "" &gt;
&lt;!ENTITY % SVG.Gradient.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib "" &gt;
&lt;!ENTITY % SVG.FilterColor.attrib "" &gt;
&lt;!ENTITY % SVG.GraphicalEvents.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Conditional.class ............................. --&gt;

&lt;!ENTITY % SVG.Conditional.extra.class "" &gt;

&lt;!ENTITY % SVG.Conditional.class
    "| %SVG.switch.qname; %SVG.Conditional.extra.class;"
&gt;

&lt;!-- SVG.Conditional.attrib ............................ --&gt;

&lt;!ENTITY % SVG.Conditional.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Conditional.attrib
    "requiredFeatures %FeatureList.datatype; #IMPLIED
     requiredExtensions %ExtensionList.datatype; #IMPLIED
     systemLanguage %LanguageCodes.datatype; #IMPLIED
     %SVG.Conditional.extra.attrib;"
&gt;

&lt;!-- SVG.Presentation.attrib ........................... --&gt;

&lt;!ENTITY % SVG.Presentation.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Presentation.attrib
    "%SVG.Container.attrib;
     %SVG.Viewport.attrib;
     %SVG.Text.attrib;
     %SVG.TextContent.attrib;
     %SVG.Font.attrib;
     %SVG.Paint.attrib;
     %SVG.Color.attrib;
     %SVG.Opacity.attrib;
     %SVG.Graphics.attrib;
     %SVG.Marker.attrib;
     %SVG.ColorProfile.attrib;
     %SVG.Gradient.attrib;
     %SVG.Clip.attrib;
     %SVG.Mask.attrib;
     %SVG.Filter.attrib;
     %SVG.FilterColor.attrib;
     %SVG.Cursor.attrib;
     flood-color %SVGColor.datatype; #IMPLIED
     flood-opacity %OpacityValue.datatype; #IMPLIED
     lighting-color %SVGColor.datatype; #IMPLIED
     %SVG.Presentation.extra.attrib;"
&gt;

&lt;!-- switch: Switch Element ............................ --&gt;

&lt;!ENTITY % SVG.switch.extra.content "" &gt;

&lt;!ENTITY % SVG.switch.element "INCLUDE" &gt;
&lt;![%SVG.switch.element;[
&lt;!ENTITY % SVG.switch.content
    "( %SVG.Description.class; | %SVG.svg.qname; | %SVG.g.qname;
     | %SVG.use.qname; | %SVG.text.qname; | %SVG.Animation.class;
       %SVG.Conditional.class; %SVG.Image.class; %SVG.Shape.class;
       %SVG.Hyperlink.class; %SVG.Extensibility.class;
       %SVG.switch.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.switch.qname; %SVG.switch.content; &gt;
&lt;!-- end of SVG.switch.element --&gt;]]&gt;

&lt;!ENTITY % SVG.switch.attlist "INCLUDE" &gt;
&lt;![%SVG.switch.attlist;[
&lt;!ATTLIST %SVG.switch.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.switch.attlist --&gt;]]&gt;

&lt;!-- end of svg-conditional.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.20">A.3.20 Image Module</h3>

<p>The Image Module defines the Image.class element collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Image.class</td><td>image</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Image Module .................................................. --&gt;
&lt;!-- file: svg-image.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Image//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-image.mod"

     ....................................................................... --&gt;

&lt;!-- Image

        image

     This module declares markup to provide support for image.
--&gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.image.qname "image" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Conditional.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Viewport.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.ColorProfile.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib "" &gt;
&lt;!ENTITY % SVG.GraphicalEvents.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.XLinkEmbed.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Image.class ................................... --&gt;

&lt;!ENTITY % SVG.Image.extra.class "" &gt;

&lt;!ENTITY % SVG.Image.class
    "| %SVG.image.qname; %SVG.Image.extra.class;"
&gt;

&lt;!-- image: Image Element .............................. --&gt;

&lt;!ENTITY % SVG.image.extra.content "" &gt;

&lt;!ENTITY % SVG.image.element "INCLUDE" &gt;
&lt;![%SVG.image.element;[
&lt;!ENTITY % SVG.image.content
    "( %SVG.Description.class; | %SVG.Animation.class;
        %SVG.image.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.image.qname; %SVG.image.content; &gt;
&lt;!-- end of SVG.image.element --&gt;]]&gt;

&lt;!ENTITY % SVG.image.attlist "INCLUDE" &gt;
&lt;![%SVG.image.attlist;[
&lt;!ATTLIST %SVG.image.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.XLinkEmbed.attrib;
    %SVG.External.attrib;
    x %Coordinate.datatype; #IMPLIED
    y %Coordinate.datatype; #IMPLIED
    width %Length.datatype; #REQUIRED
    height %Length.datatype; #REQUIRED
    preserveAspectRatio %PreserveAspectRatioSpec.datatype; 'xMidYMid meet'
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.image.attlist --&gt;]]&gt;

&lt;!-- end of svg-image.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.21">A.3.21 Style Module</h3>

<p>The Style Module defines the Style.class element collection and the Style.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Style.class</td><td>style</td></tr></table>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Style.attrib</td><td>style, class</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Style Module .................................................. --&gt;
&lt;!-- file: svg-style.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Style//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-style.mod"

     ....................................................................... --&gt;

&lt;!-- Style

        style

     This module declares markup to provide support for stylesheet.
--&gt;

&lt;!-- list of classes --&gt;
&lt;!ENTITY % ClassList.datatype "CDATA" &gt;

&lt;!-- comma-separated list of media descriptors. --&gt;
&lt;!ENTITY % MediaDesc.datatype "CDATA" &gt;

&lt;!-- style sheet data --&gt;
&lt;!ENTITY % StyleSheet.datatype "CDATA" &gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.style.qname "style" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;

&lt;!-- SVG.Style.class ................................... --&gt;

&lt;!ENTITY % SVG.Style.extra.class "" &gt;

&lt;!ENTITY % SVG.Style.class
    "| %SVG.style.qname; %SVG.Style.extra.class;"
&gt;

&lt;!-- SVG.Style.attrib .................................. --&gt;

&lt;!ENTITY % SVG.Style.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Style.attrib
    "style %StyleSheet.datatype; #IMPLIED
     class %ClassList.datatype; #IMPLIED
     %SVG.Style.extra.attrib;"
&gt;

&lt;!-- style: Style Element .............................. --&gt;

&lt;!ENTITY % SVG.style.extra.content "" &gt;

&lt;!ENTITY % SVG.style.element "INCLUDE" &gt;
&lt;![%SVG.style.element;[
&lt;!ENTITY % SVG.style.content
    "( #PCDATA %SVG.style.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.style.qname; %SVG.style.content; &gt;
&lt;!-- end of SVG.style.element --&gt;]]&gt;

&lt;!ENTITY % SVG.style.attlist "INCLUDE" &gt;
&lt;![%SVG.style.attlist;[
&lt;!ATTLIST %SVG.style.qname;
    xml:space ( preserve ) #FIXED 'preserve'
    %SVG.id.attrib;
    %SVG.base.attrib;
    %SVG.lang.attrib;
    %SVG.Core.extra.attrib;
    type %ContentType.datatype; #REQUIRED
    media %MediaDesc.datatype; #IMPLIED
    title %Text.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.style.attlist --&gt;]]&gt;

&lt;!-- end of svg-style.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.22">A.3.22 Shape Module</h3>

<p>The Shape Module defines the Shape.class element collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Shape.class</td><td>rect, circle, line, polyline, polygon, ellipse, path</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Shape Module .................................................. --&gt;
&lt;!-- file: svg-shape.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Shape//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-shape.mod"

     ....................................................................... --&gt;

&lt;!-- Shape

        path, rect, circle, line, ellipse, polyline, polygon

     This module declares markup to provide support for graphical shapes.
--&gt;

&lt;!-- a list of points --&gt;
&lt;!ENTITY % Points.datatype "CDATA" &gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.path.qname "path" &gt;
&lt;!ENTITY % SVG.rect.qname "rect" &gt;
&lt;!ENTITY % SVG.circle.qname "circle" &gt;
&lt;!ENTITY % SVG.line.qname "line" &gt;
&lt;!ENTITY % SVG.ellipse.qname "ellipse" &gt;
&lt;!ENTITY % SVG.polyline.qname "polyline" &gt;
&lt;!ENTITY % SVG.polygon.qname "polygon" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Conditional.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.Marker.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib "" &gt;
&lt;!ENTITY % SVG.GraphicalEvents.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Shape.class ................................... --&gt;

&lt;!ENTITY % SVG.Shape.extra.class "" &gt;

&lt;!ENTITY % SVG.Shape.class
    "| %SVG.path.qname; | %SVG.rect.qname; | %SVG.circle.qname;
     | %SVG.line.qname; | %SVG.ellipse.qname; | %SVG.polyline.qname;
     | %SVG.polygon.qname; %SVG.Shape.extra.class;"
&gt;

&lt;!-- path: Path Element ................................ --&gt;

&lt;!ENTITY % SVG.path.extra.content "" &gt;

&lt;!ENTITY % SVG.path.element "INCLUDE" &gt;
&lt;![%SVG.path.element;[
&lt;!ENTITY % SVG.path.content
    "( %SVG.Description.class; | %SVG.Animation.class;
        %SVG.path.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.path.qname; %SVG.path.content; &gt;
&lt;!-- end of SVG.path.element --&gt;]]&gt;

&lt;!ENTITY % SVG.path.attlist "INCLUDE" &gt;
&lt;![%SVG.path.attlist;[
&lt;!ATTLIST %SVG.path.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    d %PathData.datatype; #REQUIRED
    pathLength %Number.datatype; #IMPLIED
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.path.attlist --&gt;]]&gt;

&lt;!-- rect: Rectangle Element ........................... --&gt;

&lt;!ENTITY % SVG.rect.extra.content "" &gt;

&lt;!ENTITY % SVG.rect.element "INCLUDE" &gt;
&lt;![%SVG.rect.element;[
&lt;!ENTITY % SVG.rect.content
    "( %SVG.Description.class; | %SVG.Animation.class;
        %SVG.rect.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.rect.qname; %SVG.rect.content; &gt;
&lt;!-- end of SVG.rect.element --&gt;]]&gt;

&lt;!ENTITY % SVG.rect.attlist "INCLUDE" &gt;
&lt;![%SVG.rect.attlist;[
&lt;!ATTLIST %SVG.rect.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    x %Coordinate.datatype; #IMPLIED
    y %Coordinate.datatype; #IMPLIED
    width %Length.datatype; #REQUIRED
    height %Length.datatype; #REQUIRED
    rx %Length.datatype; #IMPLIED
    ry %Length.datatype; #IMPLIED
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.rect.attlist --&gt;]]&gt;

&lt;!-- circle: Circle Element ............................ --&gt;

&lt;!ENTITY % SVG.circle.extra.content "" &gt;

&lt;!ENTITY % SVG.circle.element "INCLUDE" &gt;
&lt;![%SVG.circle.element;[
&lt;!ENTITY % SVG.circle.content
    "( %SVG.Description.class; | %SVG.Animation.class;
        %SVG.circle.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.circle.qname; %SVG.circle.content; &gt;
&lt;!-- end of SVG.circle.element --&gt;]]&gt;

&lt;!ENTITY % SVG.circle.attlist "INCLUDE" &gt;
&lt;![%SVG.circle.attlist;[
&lt;!ATTLIST %SVG.circle.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    cx %Coordinate.datatype; #IMPLIED
    cy %Coordinate.datatype; #IMPLIED
    r %Length.datatype; #REQUIRED
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.circle.attlist --&gt;]]&gt;

&lt;!-- line: Line Element ................................ --&gt;

&lt;!ENTITY % SVG.line.extra.content "" &gt;

&lt;!ENTITY % SVG.line.element "INCLUDE" &gt;
&lt;![%SVG.line.element;[
&lt;!ENTITY % SVG.line.content
    "( %SVG.Description.class; | %SVG.Animation.class;
        %SVG.line.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.line.qname; %SVG.line.content; &gt;
&lt;!-- end of SVG.line.element --&gt;]]&gt;

&lt;!ENTITY % SVG.line.attlist "INCLUDE" &gt;
&lt;![%SVG.line.attlist;[
&lt;!ATTLIST %SVG.line.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    x1 %Coordinate.datatype; #IMPLIED
    y1 %Coordinate.datatype; #IMPLIED
    x2 %Coordinate.datatype; #IMPLIED
    y2 %Coordinate.datatype; #IMPLIED
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.line.attlist --&gt;]]&gt;

&lt;!-- ellipse: Ellipse Element .......................... --&gt;

&lt;!ENTITY % SVG.ellipse.extra.content "" &gt;

&lt;!ENTITY % SVG.ellipse.element "INCLUDE" &gt;
&lt;![%SVG.ellipse.element;[
&lt;!ENTITY % SVG.ellipse.content
    "( %SVG.Description.class; | %SVG.Animation.class;
        %SVG.ellipse.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.ellipse.qname; %SVG.ellipse.content; &gt;
&lt;!-- end of SVG.ellipse.element --&gt;]]&gt;

&lt;!ENTITY % SVG.ellipse.attlist "INCLUDE" &gt;
&lt;![%SVG.ellipse.attlist;[
&lt;!ATTLIST %SVG.ellipse.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    cx %Coordinate.datatype; #IMPLIED
    cy %Coordinate.datatype; #IMPLIED
    rx %Length.datatype; #REQUIRED
    ry %Length.datatype; #REQUIRED
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.ellipse.attlist --&gt;]]&gt;

&lt;!-- polyline: Polyline Element ........................ --&gt;

&lt;!ENTITY % SVG.polyline.extra.content "" &gt;

&lt;!ENTITY % SVG.polyline.element "INCLUDE" &gt;
&lt;![%SVG.polyline.element;[
&lt;!ENTITY % SVG.polyline.content
    "( %SVG.Description.class; | %SVG.Animation.class;
        %SVG.polyline.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.polyline.qname; %SVG.polyline.content; &gt;
&lt;!-- end of SVG.polyline.element --&gt;]]&gt;

&lt;!ENTITY % SVG.polyline.attlist "INCLUDE" &gt;
&lt;![%SVG.polyline.attlist;[
&lt;!ATTLIST %SVG.polyline.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    points %Points.datatype; #REQUIRED
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.polyline.attlist --&gt;]]&gt;

&lt;!-- polygon: Polygon Element .......................... --&gt;

&lt;!ENTITY % SVG.polygon.extra.content "" &gt;

&lt;!ENTITY % SVG.polygon.element "INCLUDE" &gt;
&lt;![%SVG.polygon.element;[
&lt;!ENTITY % SVG.polygon.content
    "( %SVG.Description.class; | %SVG.Animation.class;
        %SVG.polygon.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.polygon.qname; %SVG.polygon.content; &gt;
&lt;!-- end of SVG.polygon.element --&gt;]]&gt;

&lt;!ENTITY % SVG.polygon.attlist "INCLUDE" &gt;
&lt;![%SVG.polygon.attlist;[
&lt;!ATTLIST %SVG.polygon.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    points %Points.datatype; #REQUIRED
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.polygon.attlist --&gt;]]&gt;

&lt;!-- end of svg-shape.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.23">A.3.23 Text Module</h3>

<p>The Text Module defines the Text.class and TextContent.class element collections and the Text.attrib, TextContent.attrib and Font.attrib attribute sets.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Text.class</td><td>text, altGlyphDef</td></tr><tr><td>TextContent.class</td><td>tspan, tref, textPath, altGlyph</td></tr></table>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Text.attrib</td><td>writing-mode</td></tr><tr><td>TextContent.attrib</td><td>alignment-baseline, baseline-shift, direction, dominant-baseline, glyph-orientation-horizontal, glyph-orientation-vertical, kerning, letter-spacing, text-anchor, text-decoration, unicode-bidi, word-spacing</td></tr><tr><td>Font.attrib</td><td>font-family, font-size, font-size-adjust, font-stretch, font-style, font-variant, font-weight</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Text Module ................................................... --&gt;
&lt;!-- file: svg-text.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Text//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-text.mod"

     ....................................................................... --&gt;

&lt;!-- Text

        text, tspan, tref, textPath, altGlyph, altGlyphDef, altGlyphItem,
        glyphRef

     This module declares markup to provide support for alternate glyph.
--&gt;

&lt;!-- 'baseline-shift' property/attribute value (e.g., 'baseline', 'sub', etc.) --&gt;
&lt;!ENTITY % BaselineShiftValue.datatype "CDATA" &gt;

&lt;!-- 'font-family' property/attribute value (i.e., list of fonts) --&gt;
&lt;!ENTITY % FontFamilyValue.datatype "CDATA" &gt;

&lt;!-- 'font-size' property/attribute value --&gt;
&lt;!ENTITY % FontSizeValue.datatype "CDATA" &gt;

&lt;!-- 'font-size-adjust' property/attribute value --&gt;
&lt;!ENTITY % FontSizeAdjustValue.datatype "CDATA" &gt;

&lt;!-- 'glyph-orientation-horizontal' property/attribute value (e.g., &lt;angle&gt;) --&gt;
&lt;!ENTITY % GlyphOrientationHorizontalValue.datatype "CDATA" &gt;

&lt;!-- 'glyph-orientation-vertical' property/attribute value (e.g., 'auto', &lt;angle&gt;) --&gt;
&lt;!ENTITY % GlyphOrientationVerticalValue.datatype "CDATA" &gt;

&lt;!-- 'kerning' property/attribute value (e.g., 'auto', &lt;length&gt;) --&gt;
&lt;!ENTITY % KerningValue.datatype "CDATA" &gt;

&lt;!-- 'letter-spacing' or 'word-spacing' property/attribute value (e.g., 'normal', &lt;length&gt;) --&gt;
&lt;!ENTITY % SpacingValue.datatype "CDATA" &gt;

&lt;!-- 'text-decoration' property/attribute value (e.g., 'none', 'underline') --&gt;
&lt;!ENTITY % TextDecorationValue.datatype "CDATA" &gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.text.qname "text" &gt;
&lt;!ENTITY % SVG.tspan.qname "tspan" &gt;
&lt;!ENTITY % SVG.tref.qname "tref" &gt;
&lt;!ENTITY % SVG.textPath.qname "textPath" &gt;
&lt;!ENTITY % SVG.altGlyph.qname "altGlyph" &gt;
&lt;!ENTITY % SVG.altGlyphDef.qname "altGlyphDef" &gt;
&lt;!ENTITY % SVG.altGlyphItem.qname "altGlyphItem" &gt;
&lt;!ENTITY % SVG.glyphRef.qname "glyphRef" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Conditional.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib "" &gt;
&lt;!ENTITY % SVG.GraphicalEvents.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.XLink.attrib "" &gt;
&lt;!ENTITY % SVG.XLinkRequired.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Text.class .................................... --&gt;

&lt;!ENTITY % SVG.Text.extra.class "" &gt;

&lt;!ENTITY % SVG.Text.class
    "| %SVG.text.qname; | %SVG.altGlyphDef.qname; %SVG.Text.extra.class;"
&gt;

&lt;!-- SVG.TextContent.class ............................. --&gt;

&lt;!ENTITY % SVG.TextContent.extra.class "" &gt;

&lt;!ENTITY % SVG.TextContent.class
    "| %SVG.tspan.qname; | %SVG.tref.qname; | %SVG.textPath.qname;
     | %SVG.altGlyph.qname; %SVG.TextContent.extra.class;"
&gt;

&lt;!-- SVG.Text.attrib ................................... --&gt;

&lt;!ENTITY % SVG.Text.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Text.attrib
    "writing-mode ( lr-tb | rl-tb | tb-rl | lr | rl | tb | inherit ) #IMPLIED
     %SVG.Text.extra.attrib;"
&gt;

&lt;!-- SVG.TextContent.attrib ............................ --&gt;

&lt;!ENTITY % SVG.TextContent.extra.attrib "" &gt;

&lt;!ENTITY % SVG.TextContent.attrib
    "alignment-baseline ( auto | baseline | before-edge | text-before-edge |
                          middle | central | after-edge | text-after-edge |
                          ideographic | alphabetic | hanging | mathematical |
                          inherit ) #IMPLIED
     baseline-shift %BaselineShiftValue.datatype; #IMPLIED
     direction ( ltr | rtl | inherit ) #IMPLIED
     dominant-baseline ( auto | use-script | no-change | reset-size |
                         ideographic | alphabetic | hanging | mathematical |
                         central | middle | text-after-edge | text-before-edge |
                         inherit ) #IMPLIED
     glyph-orientation-horizontal %GlyphOrientationHorizontalValue.datatype;
                                  #IMPLIED
     glyph-orientation-vertical %GlyphOrientationVerticalValue.datatype;
                                #IMPLIED
     kerning %KerningValue.datatype; #IMPLIED
     letter-spacing %SpacingValue.datatype; #IMPLIED
     text-anchor ( start | middle | end | inherit ) #IMPLIED
     text-decoration %TextDecorationValue.datatype; #IMPLIED
     unicode-bidi ( normal | embed | bidi-override | inherit ) #IMPLIED
     word-spacing %SpacingValue.datatype; #IMPLIED
     %SVG.TextContent.extra.attrib;"
&gt;

&lt;!-- SVG.Font.attrib ................................... --&gt;

&lt;!ENTITY % SVG.Font.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Font.attrib
    "font-family %FontFamilyValue.datatype; #IMPLIED
     font-size %FontSizeValue.datatype; #IMPLIED
     font-size-adjust %FontSizeAdjustValue.datatype; #IMPLIED
     font-stretch ( normal | wider | narrower | ultra-condensed |
                    extra-condensed | condensed | semi-condensed |
                    semi-expanded | expanded | extra-expanded |
                    ultra-expanded | inherit ) #IMPLIED
     font-style ( normal | italic | oblique | inherit ) #IMPLIED
     font-variant ( normal | small-caps | inherit ) #IMPLIED
     font-weight ( normal | bold | bolder | lighter | 100 | 200 | 300 | 400 |
                   500 | 600 | 700 | 800 | 900 | inherit ) #IMPLIED
     %SVG.Font.extra.attrib;"
&gt;

&lt;!-- text: Text Element ................................ --&gt;

&lt;!ENTITY % SVG.text.extra.content "" &gt;

&lt;!ENTITY % SVG.text.element "INCLUDE" &gt;
&lt;![%SVG.text.element;[
&lt;!ENTITY % SVG.text.content
    "( #PCDATA | %SVG.Description.class; | %SVG.Animation.class;
       %SVG.TextContent.class; %SVG.Hyperlink.class;
       %SVG.text.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.text.qname; %SVG.text.content; &gt;
&lt;!-- end of SVG.text.element --&gt;]]&gt;

&lt;!ENTITY % SVG.text.attlist "INCLUDE" &gt;
&lt;![%SVG.text.attlist;[
&lt;!ATTLIST %SVG.text.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    x %Coordinates.datatype; #IMPLIED
    y %Coordinates.datatype; #IMPLIED
    dx %Lengths.datatype; #IMPLIED
    dy %Lengths.datatype; #IMPLIED
    rotate %Numbers.datatype; #IMPLIED
    textLength %Length.datatype; #IMPLIED
    lengthAdjust ( spacing | spacingAndGlyphs ) #IMPLIED
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.text.attlist --&gt;]]&gt;

&lt;!-- tspan: Text Span Element .......................... --&gt;

&lt;!ENTITY % SVG.tspan.extra.content "" &gt;

&lt;!ENTITY % SVG.tspan.element "INCLUDE" &gt;
&lt;![%SVG.tspan.element;[
&lt;!ENTITY % SVG.tspan.content
    "( #PCDATA | %SVG.tspan.qname; | %SVG.tref.qname; | %SVG.altGlyph.qname;
     | %SVG.animate.qname; | %SVG.set.qname; | %SVG.animateColor.qname;
     | %SVG.Description.class; %SVG.Hyperlink.class;
       %SVG.tspan.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.tspan.qname; %SVG.tspan.content; &gt;
&lt;!-- end of SVG.tspan.element --&gt;]]&gt;

&lt;!ENTITY % SVG.tspan.attlist "INCLUDE" &gt;
&lt;![%SVG.tspan.attlist;[
&lt;!ATTLIST %SVG.tspan.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    x %Coordinates.datatype; #IMPLIED
    y %Coordinates.datatype; #IMPLIED
    dx %Lengths.datatype; #IMPLIED
    dy %Lengths.datatype; #IMPLIED
    rotate %Numbers.datatype; #IMPLIED
    textLength %Length.datatype; #IMPLIED
    lengthAdjust ( spacing | spacingAndGlyphs ) #IMPLIED
&gt;
&lt;!-- end of SVG.tspan.attlist --&gt;]]&gt;

&lt;!-- tref: Text Reference Element ...................... --&gt;

&lt;!ENTITY % SVG.tref.extra.content "" &gt;

&lt;!ENTITY % SVG.tref.element "INCLUDE" &gt;
&lt;![%SVG.tref.element;[
&lt;!ENTITY % SVG.tref.content
    "( %SVG.animate.qname; | %SVG.set.qname; | %SVG.animateColor.qname;
     | %SVG.Description.class; %SVG.tref.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.tref.qname; %SVG.tref.content; &gt;
&lt;!-- end of SVG.tref.element --&gt;]]&gt;

&lt;!ENTITY % SVG.tref.attlist "INCLUDE" &gt;
&lt;![%SVG.tref.attlist;[
&lt;!ATTLIST %SVG.tref.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.XLinkRequired.attrib;
    %SVG.External.attrib;
    x %Coordinates.datatype; #IMPLIED
    y %Coordinates.datatype; #IMPLIED
    dx %Lengths.datatype; #IMPLIED
    dy %Lengths.datatype; #IMPLIED
    rotate %Numbers.datatype; #IMPLIED
    textLength %Length.datatype; #IMPLIED
    lengthAdjust ( spacing | spacingAndGlyphs ) #IMPLIED
&gt;
&lt;!-- end of SVG.tref.attlist --&gt;]]&gt;

&lt;!-- textPath: Text Path Element ....................... --&gt;

&lt;!ENTITY % SVG.textPath.extra.content "" &gt;

&lt;!ENTITY % SVG.textPath.element "INCLUDE" &gt;
&lt;![%SVG.textPath.element;[
&lt;!ENTITY % SVG.textPath.content
    "( #PCDATA | %SVG.tspan.qname; | %SVG.tref.qname; | %SVG.altGlyph.qname;
     | %SVG.animate.qname; | %SVG.set.qname; | %SVG.animateColor.qname;
     | %SVG.Description.class; %SVG.Hyperlink.class;
       %SVG.textPath.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.textPath.qname; %SVG.textPath.content; &gt;
&lt;!-- end of SVG.textPath.element --&gt;]]&gt;

&lt;!ENTITY % SVG.textPath.attlist "INCLUDE" &gt;
&lt;![%SVG.textPath.attlist;[
&lt;!ATTLIST %SVG.textPath.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.XLinkRequired.attrib;
    %SVG.External.attrib;
    startOffset %Length.datatype; #IMPLIED
    textLength %Length.datatype; #IMPLIED
    lengthAdjust ( spacing | spacingAndGlyphs ) #IMPLIED
    method ( align | stretch ) #IMPLIED
    spacing ( auto | exact ) #IMPLIED
&gt;
&lt;!-- end of SVG.textPath.attlist --&gt;]]&gt;

&lt;!-- altGlyph: Alternate Glyph Element ................. --&gt;

&lt;!ENTITY % SVG.altGlyph.extra.content "" &gt;

&lt;!ENTITY % SVG.altGlyph.element "INCLUDE" &gt;
&lt;![%SVG.altGlyph.element;[
&lt;!ENTITY % SVG.altGlyph.content
    "( #PCDATA %SVG.altGlyph.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.altGlyph.qname; %SVG.altGlyph.content; &gt;
&lt;!-- end of SVG.altGlyph.element --&gt;]]&gt;

&lt;!ENTITY % SVG.altGlyph.attlist "INCLUDE" &gt;
&lt;![%SVG.altGlyph.attlist;[
&lt;!ATTLIST %SVG.altGlyph.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.XLink.attrib;
    %SVG.External.attrib;
    x %Coordinates.datatype; #IMPLIED
    y %Coordinates.datatype; #IMPLIED
    dx %Lengths.datatype; #IMPLIED
    dy %Lengths.datatype; #IMPLIED
    glyphRef CDATA #IMPLIED
    format CDATA #IMPLIED
    rotate %Numbers.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.altGlyph.attlist --&gt;]]&gt;

&lt;!-- altGlyphDef: Alternate Glyph Definition Element ... --&gt;

&lt;!ENTITY % SVG.altGlyphDef.extra.content "" &gt;

&lt;!ENTITY % SVG.altGlyphDef.element "INCLUDE" &gt;
&lt;![%SVG.altGlyphDef.element;[
&lt;!ENTITY % SVG.altGlyphDef.content
    "(( %SVG.glyphRef.qname;+ | %SVG.altGlyphItem.qname;+ )
        %SVG.altGlyphDef.extra.content; )"
&gt;
&lt;!ELEMENT %SVG.altGlyphDef.qname; %SVG.altGlyphDef.content; &gt;
&lt;!-- end of SVG.altGlyphDef.element --&gt;]]&gt;

&lt;!ENTITY % SVG.altGlyphDef.attlist "INCLUDE" &gt;
&lt;![%SVG.altGlyphDef.attlist;[
&lt;!ATTLIST %SVG.altGlyphDef.qname;
    %SVG.Core.attrib;
&gt;
&lt;!-- end of SVG.altGlyphDef.attlist --&gt;]]&gt;

&lt;!-- altGlyphItem: Alternate Glyph Item Element ........ --&gt;

&lt;!ENTITY % SVG.altGlyphItem.extra.content "" &gt;

&lt;!ENTITY % SVG.altGlyphItem.element "INCLUDE" &gt;
&lt;![%SVG.altGlyphItem.element;[
&lt;!ENTITY % SVG.altGlyphItem.content
    "( %SVG.glyphRef.qname;+ %SVG.altGlyphItem.extra.content; )"
&gt;
&lt;!ELEMENT %SVG.altGlyphItem.qname; %SVG.altGlyphItem.content; &gt;
&lt;!-- end of SVG.altGlyphItem.element --&gt;]]&gt;

&lt;!ENTITY % SVG.altGlyphItem.attlist "INCLUDE" &gt;
&lt;![%SVG.altGlyphItem.attlist;[
&lt;!ATTLIST %SVG.altGlyphItem.qname;
    %SVG.Core.attrib;
&gt;
&lt;!-- end of SVG.altGlyphItem.attlist --&gt;]]&gt;

&lt;!-- glyphRef: Glyph Reference Element ................. --&gt;

&lt;!ENTITY % SVG.glyphRef.element "INCLUDE" &gt;
&lt;![%SVG.glyphRef.element;[
&lt;!ENTITY % SVG.glyphRef.content "EMPTY" &gt;
&lt;!ELEMENT %SVG.glyphRef.qname; %SVG.glyphRef.content; &gt;
&lt;!-- end of SVG.glyphRef.element --&gt;]]&gt;

&lt;!ENTITY % SVG.glyphRef.attlist "INCLUDE" &gt;
&lt;![%SVG.glyphRef.attlist;[
&lt;!ATTLIST %SVG.glyphRef.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.XLink.attrib;
    x %Number.datatype; #IMPLIED
    y %Number.datatype; #IMPLIED
    dx %Number.datatype; #IMPLIED
    dy %Number.datatype; #IMPLIED
    glyphRef CDATA #IMPLIED
    format CDATA #IMPLIED
&gt;
&lt;!-- end of SVG.glyphRef.attlist --&gt;]]&gt;

&lt;!-- end of svg-text.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.24">A.3.24 Basic Text Module</h3>

<p>The Basic Text Module defines the Text.class and TextContent.class element collections and the TextContent.attrib and Font.attrib attribute sets.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Text.class</td><td>text</td></tr><tr><td>TextContent.class</td><td>(empty)</td></tr></table>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>TextContent.attrib</td><td>text-anchor</td></tr><tr><td>Font.attrib</td><td>font-family, font-size, font-style, font-weight</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Basic Text Module ............................................. --&gt;
&lt;!-- file: svg-basic-text.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Basic Text//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-basic-text.mod"

     ....................................................................... --&gt;

&lt;!-- Basic Text

        text

     This module declares markup to provide support for text.
--&gt;

&lt;!-- 'font-family' property/attribute value (i.e., list of fonts) --&gt;
&lt;!ENTITY % FontFamilyValue.datatype "CDATA" &gt;

&lt;!-- 'font-size' property/attribute value --&gt;
&lt;!ENTITY % FontSizeValue.datatype "CDATA" &gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.text.qname "text" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Conditional.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib "" &gt;
&lt;!ENTITY % SVG.GraphicalEvents.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Text.class .................................... --&gt;

&lt;!ENTITY % SVG.Text.extra.class "" &gt;

&lt;!ENTITY % SVG.Text.class
    "| %SVG.text.qname; %SVG.Text.extra.class;"
&gt;

&lt;!-- SVG.TextContent.attrib ............................ --&gt;

&lt;!ENTITY % SVG.TextContent.extra.attrib "" &gt;

&lt;!ENTITY % SVG.TextContent.attrib
    "text-anchor ( start | middle | end | inherit ) #IMPLIED
     %SVG.TextContent.extra.attrib;"
&gt;

&lt;!-- SVG.Font.attrib ................................... --&gt;

&lt;!ENTITY % SVG.Font.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Font.attrib
    "font-family %FontFamilyValue.datatype; #IMPLIED
     font-size %FontSizeValue.datatype; #IMPLIED
     font-style ( normal | italic | oblique | inherit ) #IMPLIED
     font-weight ( normal | bold | bolder | lighter | 100 | 200 | 300 | 400 |
                   500 | 600 | 700 | 800 | 900 | inherit ) #IMPLIED
     %SVG.Font.extra.attrib;"
&gt;

&lt;!-- text: Text Element ................................ --&gt;

&lt;!ENTITY % SVG.text.extra.content "" &gt;

&lt;!ENTITY % SVG.text.element "INCLUDE" &gt;
&lt;![%SVG.text.element;[
&lt;!ENTITY % SVG.text.content
    "( #PCDATA | %SVG.Description.class; | %SVG.Animation.class;
       %SVG.Hyperlink.class; %SVG.text.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.text.qname; %SVG.text.content; &gt;
&lt;!-- end of SVG.text.element --&gt;]]&gt;

&lt;!ENTITY % SVG.text.attlist "INCLUDE" &gt;
&lt;![%SVG.text.attlist;[
&lt;!ATTLIST %SVG.text.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    x %Coordinates.datatype; #IMPLIED
    y %Coordinates.datatype; #IMPLIED
    rotate %Numbers.datatype; #IMPLIED
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.text.attlist --&gt;]]&gt;

&lt;!-- end of svg-basic-text.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.25">A.3.25 Marker Module</h3>

<p>The Marker Module defines the Marker.class element collection and the Marker.attrib attribute set.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Marker.class</td><td>marker</td></tr></table>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Marker.attrib</td><td>marker-start, marker-mid, marker-end</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Marker Module ................................................. --&gt;
&lt;!-- file: svg-marker.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Marker//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-marker.mod"

     ....................................................................... --&gt;

&lt;!-- Marker

        marker

     This module declares markup to provide support for marker.
--&gt;

&lt;!-- 'marker' property/attribute value (e.g., 'none', &lt;uri&gt;) --&gt;
&lt;!ENTITY % MarkerValue.datatype "CDATA" &gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.marker.qname "marker" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Container.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Viewport.attrib "" &gt;
&lt;!ENTITY % SVG.Text.attrib "" &gt;
&lt;!ENTITY % SVG.TextContent.attrib "" &gt;
&lt;!ENTITY % SVG.Font.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.ColorProfile.attrib "" &gt;
&lt;!ENTITY % SVG.Gradient.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib "" &gt;
&lt;!ENTITY % SVG.FilterColor.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Marker.class .................................. --&gt;

&lt;!ENTITY % SVG.Marker.extra.class "" &gt;

&lt;!ENTITY % SVG.Marker.class
    "| %SVG.marker.qname; %SVG.Marker.extra.class;"
&gt;

&lt;!-- SVG.Marker.attrib ................................. --&gt;

&lt;!ENTITY % SVG.Marker.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Marker.attrib
    "marker-start %MarkerValue.datatype; #IMPLIED
     marker-mid %MarkerValue.datatype; #IMPLIED
     marker-end %MarkerValue.datatype; #IMPLIED
     %SVG.Marker.extra.attrib;"
&gt;

&lt;!-- SVG.Presentation.attrib ........................... --&gt;

&lt;!ENTITY % SVG.Presentation.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Presentation.attrib
    "%SVG.Container.attrib;
     %SVG.Viewport.attrib;
     %SVG.Text.attrib;
     %SVG.TextContent.attrib;
     %SVG.Font.attrib;
     %SVG.Paint.attrib;
     %SVG.Color.attrib;
     %SVG.Opacity.attrib;
     %SVG.Graphics.attrib;
     %SVG.Marker.attrib;
     %SVG.ColorProfile.attrib;
     %SVG.Gradient.attrib;
     %SVG.Clip.attrib;
     %SVG.Mask.attrib;
     %SVG.Filter.attrib;
     %SVG.FilterColor.attrib;
     %SVG.Cursor.attrib;
     flood-color %SVGColor.datatype; #IMPLIED
     flood-opacity %OpacityValue.datatype; #IMPLIED
     lighting-color %SVGColor.datatype; #IMPLIED
     %SVG.Presentation.extra.attrib;"
&gt;

&lt;!-- marker: Marker Element ............................ --&gt;

&lt;!ENTITY % SVG.marker.extra.content "" &gt;

&lt;!ENTITY % SVG.marker.element "INCLUDE" &gt;
&lt;![%SVG.marker.element;[
&lt;!ENTITY % SVG.marker.content
    "( %SVG.Description.class; | %SVG.Animation.class; %SVG.Structure.class;
       %SVG.Conditional.class; %SVG.Image.class; %SVG.Style.class;
       %SVG.Shape.class; %SVG.Text.class; %SVG.Marker.class;
       %SVG.ColorProfile.class; %SVG.Gradient.class; %SVG.Pattern.class;
       %SVG.Clip.class; %SVG.Mask.class; %SVG.Filter.class; %SVG.Cursor.class;
       %SVG.Hyperlink.class; %SVG.View.class; %SVG.Script.class;
       %SVG.Font.class; %SVG.Extensibility.class; %SVG.marker.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.marker.qname; %SVG.marker.content; &gt;
&lt;!-- end of SVG.marker.element --&gt;]]&gt;

&lt;!ENTITY % SVG.marker.attlist "INCLUDE" &gt;
&lt;![%SVG.marker.attlist;[
&lt;!ATTLIST %SVG.marker.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.External.attrib;
    refX %Coordinate.datatype; #IMPLIED
    refY %Coordinate.datatype; #IMPLIED
    markerUnits ( strokeWidth | userSpaceOnUse ) #IMPLIED
    markerWidth  %Length.datatype; #IMPLIED
    markerHeight %Length.datatype; #IMPLIED
    orient CDATA #IMPLIED
    viewBox %ViewBoxSpec.datatype; #IMPLIED
    preserveAspectRatio %PreserveAspectRatioSpec.datatype; 'xMidYMid meet'
&gt;
&lt;!-- end of SVG.marker.attlist --&gt;]]&gt;

&lt;!-- end of svg-marker.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.26">A.3.26 Color Profile Module</h3>

<p>The Color Profile Module defines the ColorProfile.class element collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>ColorProfile.class</td><td>color-profile</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Color Profile Module .......................................... --&gt;
&lt;!-- file: svg-profile.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Color Profile//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-profile.mod"

     ....................................................................... --&gt;

&lt;!-- Color Profile

        color-profile

     This module declares markup to provide support for color profile.
--&gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.color-profile.qname "color-profile" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.XLink.attrib "" &gt;

&lt;!-- SVG.ColorProfile.class ............................ --&gt;

&lt;!ENTITY % SVG.ColorProfile.extra.class "" &gt;

&lt;!ENTITY % SVG.ColorProfile.class
    "| %SVG.color-profile.qname; %SVG.ColorProfile.extra.class;"
&gt;

&lt;!-- SVG.ColorProfile.attrib ........................... --&gt;

&lt;!ENTITY % SVG.ColorProfile.extra.attrib "" &gt;

&lt;!ENTITY % SVG.ColorProfile.attrib
    "color-profile CDATA #IMPLIED
     %SVG.ColorProfile.extra.attrib;"
&gt;

&lt;!-- color-profile: Color Profile Element .............. --&gt;

&lt;!ENTITY % SVG.color-profile.extra.content "" &gt;

&lt;!ENTITY % SVG.color-profile.element "INCLUDE" &gt;
&lt;![%SVG.color-profile.element;[
&lt;!ENTITY % SVG.color-profile.content
    "( %SVG.Description.class; %SVG.color-profile.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.color-profile.qname; %SVG.color-profile.content; &gt;
&lt;!-- end of SVG.color-profile.element --&gt;]]&gt;

&lt;!ENTITY % SVG.color-profile.attlist "INCLUDE" &gt;
&lt;![%SVG.color-profile.attlist;[
&lt;!ATTLIST %SVG.color-profile.qname;
    %SVG.Core.attrib;
    %SVG.XLink.attrib;
    local CDATA #IMPLIED
    name CDATA #REQUIRED
    rendering-intent ( auto | perceptual | relative-colorimetric | saturation |
                       absolute-colorimetric ) 'auto'
&gt;
&lt;!-- end of SVG.color-profile.attlist --&gt;]]&gt;

&lt;!-- end of svg-profile.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.27">A.3.27 Gradient Module</h3>

<p>The Gradient Module defines the Gradient.class element collection and the Gradient.attrib attribute set.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Gradient.class</td><td>linearGradient, radialGradient</td></tr></table>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Gradient.attrib</td><td>stop-color, stop-opacity</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Gradient Module ............................................... --&gt;
&lt;!-- file: svg-gradient.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Gradient//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-gradient.mod"

     ....................................................................... --&gt;

&lt;!-- Gradient

        linearGradient, radialGradient, stop

     This module declares markup to provide support for gradient fill.
--&gt;

&lt;!-- a &lt;number&gt; or a &lt;percentage&gt; --&gt;
&lt;!ENTITY % NumberOrPercentage.datatype "CDATA" &gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.linearGradient.qname "linearGradient" &gt;
&lt;!ENTITY % SVG.radialGradient.qname "radialGradient" &gt;
&lt;!ENTITY % SVG.stop.qname "stop" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.XLink.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Gradient.class ................................ --&gt;

&lt;!ENTITY % SVG.Gradient.extra.class "" &gt;

&lt;!ENTITY % SVG.Gradient.class
    "| %SVG.linearGradient.qname; | %SVG.radialGradient.qname;
       %SVG.Gradient.extra.class;"
&gt;

&lt;!-- SVG.Gradient.attrib ............................... --&gt;

&lt;!ENTITY % SVG.Gradient.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Gradient.attrib
    "stop-color %SVGColor.datatype; #IMPLIED
     stop-opacity %OpacityValue.datatype; #IMPLIED
     %SVG.Gradient.extra.attrib;"
&gt;

&lt;!-- linearGradient: Linear Gradient Element ........... --&gt;

&lt;!ENTITY % SVG.linearGradient.extra.content "" &gt;

&lt;!ENTITY % SVG.linearGradient.element "INCLUDE" &gt;
&lt;![%SVG.linearGradient.element;[
&lt;!ENTITY % SVG.linearGradient.content
    "( %SVG.Description.class; | %SVG.stop.qname; | %SVG.animate.qname;
     | %SVG.set.qname; | %SVG.animateTransform.qname;
       %SVG.linearGradient.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.linearGradient.qname; %SVG.linearGradient.content; &gt;
&lt;!-- end of SVG.linearGradient.element --&gt;]]&gt;

&lt;!ENTITY % SVG.linearGradient.attlist "INCLUDE" &gt;
&lt;![%SVG.linearGradient.attlist;[
&lt;!ATTLIST %SVG.linearGradient.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.XLink.attrib;
    %SVG.External.attrib;
    x1 %Coordinate.datatype; #IMPLIED
    y1 %Coordinate.datatype; #IMPLIED
    x2 %Coordinate.datatype; #IMPLIED
    y2 %Coordinate.datatype; #IMPLIED
    gradientUnits ( userSpaceOnUse | objectBoundingBox ) #IMPLIED
    gradientTransform %TransformList.datatype; #IMPLIED
    spreadMethod ( pad | reflect | repeat ) #IMPLIED
&gt;
&lt;!-- end of SVG.linearGradient.attlist --&gt;]]&gt;

&lt;!-- radialGradient: Radial Gradient Element ........... --&gt;

&lt;!ENTITY % SVG.radialGradient.extra.content "" &gt;

&lt;!ENTITY % SVG.radialGradient.element "INCLUDE" &gt;
&lt;![%SVG.radialGradient.element;[
&lt;!ENTITY % SVG.radialGradient.content
    "( %SVG.Description.class; | %SVG.stop.qname; | %SVG.animate.qname;
     | %SVG.set.qname; | %SVG.animateTransform.qname;
       %SVG.radialGradient.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.radialGradient.qname; %SVG.radialGradient.content; &gt;
&lt;!-- end of SVG.radialGradient.element --&gt;]]&gt;

&lt;!ENTITY % SVG.radialGradient.attlist "INCLUDE" &gt;
&lt;![%SVG.radialGradient.attlist;[
&lt;!ATTLIST %SVG.radialGradient.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.XLink.attrib;
    %SVG.External.attrib;
    cx %Coordinate.datatype; #IMPLIED
    cy %Coordinate.datatype; #IMPLIED
    r %Length.datatype; #IMPLIED
    fx %Coordinate.datatype; #IMPLIED
    fy %Coordinate.datatype; #IMPLIED
    gradientUnits ( userSpaceOnUse | objectBoundingBox ) #IMPLIED
    gradientTransform %TransformList.datatype; #IMPLIED
    spreadMethod ( pad | reflect | repeat ) #IMPLIED
&gt;
&lt;!-- end of SVG.radialGradient.attlist --&gt;]]&gt;

&lt;!-- stop: Stop Element ................................ --&gt;

&lt;!ENTITY % SVG.stop.extra.content "" &gt;

&lt;!ENTITY % SVG.stop.element "INCLUDE" &gt;
&lt;![%SVG.stop.element;[
&lt;!ENTITY % SVG.stop.content
    "( %SVG.animate.qname; | %SVG.set.qname; | %SVG.animateColor.qname;
       %SVG.stop.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.stop.qname; %SVG.stop.content; &gt;
&lt;!-- end of SVG.stop.element --&gt;]]&gt;

&lt;!ENTITY % SVG.stop.attlist "INCLUDE" &gt;
&lt;![%SVG.stop.attlist;[
&lt;!ATTLIST %SVG.stop.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    offset %NumberOrPercentage.datatype; #REQUIRED
&gt;
&lt;!-- end of SVG.stop.attlist --&gt;]]&gt;

&lt;!-- end of svg-gradient.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.28">A.3.28 Pattern Module</h3>

<p>The Pattern Module defines the Pattern.class element collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Pattern.class</td><td>pattern</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Pattern Module ................................................ --&gt;
&lt;!-- file: svg-pattern.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Pattern//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-pattern.mod"

     ....................................................................... --&gt;

&lt;!-- Pattern

        pattern

     This module declares markup to provide support for pattern fill.
--&gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.pattern.qname "pattern" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Container.attrib "" &gt;
&lt;!ENTITY % SVG.Conditional.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Viewport.attrib "" &gt;
&lt;!ENTITY % SVG.Text.attrib "" &gt;
&lt;!ENTITY % SVG.TextContent.attrib "" &gt;
&lt;!ENTITY % SVG.Font.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.Marker.attrib "" &gt;
&lt;!ENTITY % SVG.ColorProfile.attrib "" &gt;
&lt;!ENTITY % SVG.Gradient.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib "" &gt;
&lt;!ENTITY % SVG.FilterColor.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.XLink.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Pattern.class ................................. --&gt;

&lt;!ENTITY % SVG.Pattern.extra.class "" &gt;

&lt;!ENTITY % SVG.Pattern.class
    "| %SVG.pattern.qname; %SVG.Pattern.extra.class;"
&gt;

&lt;!-- SVG.Presentation.attrib ........................... --&gt;

&lt;!ENTITY % SVG.Presentation.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Presentation.attrib
    "%SVG.Container.attrib;
     %SVG.Viewport.attrib;
     %SVG.Text.attrib;
     %SVG.TextContent.attrib;
     %SVG.Font.attrib;
     %SVG.Paint.attrib;
     %SVG.Color.attrib;
     %SVG.Opacity.attrib;
     %SVG.Graphics.attrib;
     %SVG.Marker.attrib;
     %SVG.ColorProfile.attrib;
     %SVG.Gradient.attrib;
     %SVG.Clip.attrib;
     %SVG.Mask.attrib;
     %SVG.Filter.attrib;
     %SVG.FilterColor.attrib;
     %SVG.Cursor.attrib;
     flood-color %SVGColor.datatype; #IMPLIED
     flood-opacity %OpacityValue.datatype; #IMPLIED
     lighting-color %SVGColor.datatype; #IMPLIED
     %SVG.Presentation.extra.attrib;"
&gt;

&lt;!-- pattern: Pattern Element .......................... --&gt;

&lt;!ENTITY % SVG.pattern.extra.content "" &gt;

&lt;!ENTITY % SVG.pattern.element "INCLUDE" &gt;
&lt;![%SVG.pattern.element;[
&lt;!ENTITY % SVG.pattern.content
    "( %SVG.Description.class; | %SVG.Animation.class; %SVG.Structure.class;
       %SVG.Conditional.class; %SVG.Image.class; %SVG.Style.class;
       %SVG.Shape.class; %SVG.Text.class; %SVG.Marker.class;
       %SVG.ColorProfile.class; %SVG.Gradient.class; %SVG.Pattern.class;
       %SVG.Clip.class; %SVG.Mask.class; %SVG.Filter.class; %SVG.Cursor.class;
       %SVG.Hyperlink.class; %SVG.View.class; %SVG.Script.class;
       %SVG.Font.class; %SVG.Extensibility.class; %SVG.pattern.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.pattern.qname; %SVG.pattern.content; &gt;
&lt;!-- end of SVG.pattern.element --&gt;]]&gt;

&lt;!ENTITY % SVG.pattern.attlist "INCLUDE" &gt;
&lt;![%SVG.pattern.attlist;[
&lt;!ATTLIST %SVG.pattern.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.XLink.attrib;
    %SVG.External.attrib;
    x %Coordinate.datatype; #IMPLIED
    y %Coordinate.datatype; #IMPLIED
    width %Length.datatype; #IMPLIED
    height %Length.datatype; #IMPLIED
    patternUnits ( userSpaceOnUse | objectBoundingBox ) #IMPLIED
    patternContentUnits ( userSpaceOnUse | objectBoundingBox ) #IMPLIED
    patternTransform %TransformList.datatype; #IMPLIED
    viewBox %ViewBoxSpec.datatype; #IMPLIED
    preserveAspectRatio %PreserveAspectRatioSpec.datatype; 'xMidYMid meet'
&gt;
&lt;!-- end of SVG.pattern.attlist --&gt;]]&gt;

&lt;!-- end of svg-pattern.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.29">A.3.29 Clip Module</h3>

<p>The Clip Module defines the Clip.class element collection and the Clip.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Clip.class</td><td>clipPath</td></tr></table>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Clip.attrib</td><td>clip-path, clip-rule</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Clip Module ................................................... --&gt;
&lt;!-- file: svg-clip.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Clip//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-clip.mod"

     ....................................................................... --&gt;

&lt;!-- Clip

        clipPath

     This module declares markup to provide support for clipping.
--&gt;

&lt;!-- 'clip-path' property/attribute value (e.g., 'none', &lt;uri&gt;) --&gt;
&lt;!ENTITY % ClipPathValue.datatype "CDATA" &gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.clipPath.qname "clipPath" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Conditional.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Text.attrib "" &gt;
&lt;!ENTITY % SVG.TextContent.attrib "" &gt;
&lt;!ENTITY % SVG.Font.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Clip.class .................................... --&gt;

&lt;!ENTITY % SVG.Clip.extra.class "" &gt;

&lt;!ENTITY % SVG.Clip.class
    "| %SVG.clipPath.qname; %SVG.Clip.extra.class;"
&gt;

&lt;!-- SVG.Clip.attrib ................................... --&gt;

&lt;!ENTITY % SVG.Clip.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Clip.attrib
    "clip-path %ClipPathValue.datatype; #IMPLIED
     clip-rule %ClipFillRule.datatype; #IMPLIED
     %SVG.Clip.extra.attrib;"
&gt;

&lt;!-- clipPath: Clip Path Element ....................... --&gt;

&lt;!ENTITY % SVG.clipPath.extra.content "" &gt;

&lt;!ENTITY % SVG.clipPath.element "INCLUDE" &gt;
&lt;![%SVG.clipPath.element;[
&lt;!ENTITY % SVG.clipPath.content
    "( %SVG.Description.class; | %SVG.Animation.class; %SVG.Use.class;
       %SVG.Shape.class; | %SVG.text.qname; %SVG.clipPath.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.clipPath.qname; %SVG.clipPath.content; &gt;
&lt;!-- end of SVG.clipPath.element --&gt;]]&gt;

&lt;!ENTITY % SVG.clipPath.attlist "INCLUDE" &gt;
&lt;![%SVG.clipPath.attlist;[
&lt;!ATTLIST %SVG.clipPath.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.External.attrib;
    transform %TransformList.datatype; #IMPLIED
    clipPathUnits ( userSpaceOnUse | objectBoundingBox ) #IMPLIED
&gt;
&lt;!-- end of SVG.clipPath.attlist --&gt;]]&gt;

&lt;!-- end of svg-clip.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.30">A.3.30 Basic Clip Module</h3>

<p>The Basic Clip Module defines the Clip.class element collection and the Clip.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Clip.class</td><td>clipPath</td></tr></table>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Clip.attrib</td><td>clip-path, clip-rule</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Basic Clip Module ............................................. --&gt;
&lt;!-- file: svg-basic-clip.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Basic Clip//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-basic-clip.mod"

     ....................................................................... --&gt;

&lt;!-- Basic Clip

        clipPath

     This module declares markup to provide support for clipping.
--&gt;

&lt;!-- 'clip-path' property/attribute value (e.g., 'none', &lt;uri&gt;) --&gt;
&lt;!ENTITY % ClipPathValue.datatype "CDATA" &gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.clipPath.qname "clipPath" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Conditional.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Text.attrib "" &gt;
&lt;!ENTITY % SVG.TextContent.attrib "" &gt;
&lt;!ENTITY % SVG.Font.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Clip.class .................................... --&gt;

&lt;!ENTITY % SVG.Clip.extra.class "" &gt;

&lt;!ENTITY % SVG.Clip.class
    "| %SVG.clipPath.qname; %SVG.Clip.extra.class;"
&gt;

&lt;!-- SVG.Clip.attrib ................................... --&gt;

&lt;!ENTITY % SVG.Clip.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Clip.attrib
    "clip-path %ClipPathValue.datatype; #IMPLIED
     clip-rule %ClipFillRule.datatype; #IMPLIED
     %SVG.Clip.extra.attrib;"
&gt;

&lt;!-- clipPath: Clip Path Element ....................... --&gt;

&lt;!ENTITY % SVG.clipPath.extra.content "" &gt;

&lt;!ENTITY % SVG.clipPath.element "INCLUDE" &gt;
&lt;![%SVG.clipPath.element;[
&lt;!ENTITY % SVG.clipPath.content
    "( %SVG.Description.class; | %SVG.Animation.class; %SVG.Use.class;
       %SVG.Shape.class; | %SVG.text.qname; %SVG.clipPath.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.clipPath.qname; %SVG.clipPath.content; &gt;
&lt;!-- end of SVG.clipPath.element --&gt;]]&gt;

&lt;!ENTITY % SVG.clipPath.attlist "INCLUDE" &gt;
&lt;![%SVG.clipPath.attlist;[
&lt;!ATTLIST %SVG.clipPath.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.External.attrib;
    transform %TransformList.datatype; #IMPLIED
    clipPathUnits ( userSpaceOnUse | objectBoundingBox ) #IMPLIED
&gt;
&lt;!-- end of SVG.clipPath.attlist --&gt;]]&gt;

&lt;!-- end of svg-basic-clip.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.31">A.3.31 Mask Module</h3>

<p>The Mask Module defines the Mask.class element collection and the Mask.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Mask.class</td><td>mask</td></tr></table>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Mask.attrib</td><td>mask</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Mask Module ................................................... --&gt;
&lt;!-- file: svg-mask.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Mask//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-mask.mod"

     ....................................................................... --&gt;

&lt;!-- Mask

        mask

     This module declares markup to provide support for masking.
--&gt;

&lt;!-- 'mask' property/attribute value (e.g., 'none', &lt;uri&gt;) --&gt;
&lt;!ENTITY % MaskValue.datatype "CDATA" &gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.mask.qname "mask" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Container.attrib "" &gt;
&lt;!ENTITY % SVG.Conditional.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Viewport.attrib "" &gt;
&lt;!ENTITY % SVG.Text.attrib "" &gt;
&lt;!ENTITY % SVG.TextContent.attrib "" &gt;
&lt;!ENTITY % SVG.Font.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.Marker.attrib "" &gt;
&lt;!ENTITY % SVG.ColorProfile.attrib "" &gt;
&lt;!ENTITY % SVG.Gradient.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib "" &gt;
&lt;!ENTITY % SVG.FilterColor.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Mask.class .................................... --&gt;

&lt;!ENTITY % SVG.Mask.extra.class "" &gt;

&lt;!ENTITY % SVG.Mask.class
    "| %SVG.mask.qname; %SVG.Mask.extra.class;"
&gt;

&lt;!-- SVG.Mask.attrib ................................... --&gt;

&lt;!ENTITY % SVG.Mask.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Mask.attrib
    "mask %MaskValue.datatype; #IMPLIED
     %SVG.Mask.extra.attrib;"
&gt;

&lt;!-- SVG.Presentation.attrib ........................... --&gt;

&lt;!ENTITY % SVG.Presentation.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Presentation.attrib
    "%SVG.Container.attrib;
     %SVG.Viewport.attrib;
     %SVG.Text.attrib;
     %SVG.TextContent.attrib;
     %SVG.Font.attrib;
     %SVG.Paint.attrib;
     %SVG.Color.attrib;
     %SVG.Opacity.attrib;
     %SVG.Graphics.attrib;
     %SVG.Marker.attrib;
     %SVG.ColorProfile.attrib;
     %SVG.Gradient.attrib;
     %SVG.Clip.attrib;
     %SVG.Mask.attrib;
     %SVG.Filter.attrib;
     %SVG.FilterColor.attrib;
     %SVG.Cursor.attrib;
     flood-color %SVGColor.datatype; #IMPLIED
     flood-opacity %OpacityValue.datatype; #IMPLIED
     lighting-color %SVGColor.datatype; #IMPLIED
     %SVG.Presentation.extra.attrib;"
&gt;

&lt;!-- mask: Mask Element ................................ --&gt;

&lt;!ENTITY % SVG.mask.extra.content "" &gt;

&lt;!ENTITY % SVG.mask.element "INCLUDE" &gt;
&lt;![%SVG.mask.element;[
&lt;!ENTITY % SVG.mask.content
    "( %SVG.Description.class; | %SVG.Animation.class; %SVG.Structure.class;
       %SVG.Conditional.class; %SVG.Image.class; %SVG.Style.class;
       %SVG.Shape.class; %SVG.Text.class; %SVG.Marker.class;
       %SVG.ColorProfile.class; %SVG.Gradient.class; %SVG.Pattern.class;
       %SVG.Clip.class; %SVG.Mask.class; %SVG.Filter.class; %SVG.Cursor.class;
       %SVG.Hyperlink.class; %SVG.View.class; %SVG.Script.class;
       %SVG.Font.class; %SVG.Extensibility.class; %SVG.mask.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.mask.qname; %SVG.mask.content; &gt;
&lt;!-- end of SVG.mask.element --&gt;]]&gt;

&lt;!ENTITY % SVG.mask.attlist "INCLUDE" &gt;
&lt;![%SVG.mask.attlist;[
&lt;!ATTLIST %SVG.mask.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.External.attrib;
    x %Coordinate.datatype; #IMPLIED
    y %Coordinate.datatype; #IMPLIED
    width %Length.datatype; #IMPLIED
    height %Length.datatype; #IMPLIED
    maskUnits ( userSpaceOnUse | objectBoundingBox ) #IMPLIED
    maskContentUnits ( userSpaceOnUse | objectBoundingBox ) #IMPLIED
&gt;
&lt;!-- end of SVG.mask.attlist --&gt;]]&gt;

&lt;!-- end of svg-mask.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.32">A.3.32 Filter Module</h3>

<p>The Filter Module defines the Filter.class and FilterPrimitive.class element collections and the Filter.attrib, FilterColor.attrib, FilterPrimitive.attrib and FilterPrimitiveWithIn.attrib attribute collections.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Filter.class</td><td>filter</td></tr><tr><td>FilterPrimitive.class</td><td>feBlend, feFlood, feColorMatrix, feComponentTransfer, feComposite, feConvolveMatrix, feDiffuseLighting, feDisplacementMap, feGaussianBlur, feImage, feMerge, feMorphology, feOffset, feSpecularLighting, feTile, feTurbulence</td></tr></table>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Filter.attrib</td><td>filter</td></tr><tr><td>FilterColor.attrib</td><td>color-interpolation-filters</td></tr><tr><td>FilterPrimitive.attrib</td><td>x, y, width, height, result</td></tr><tr><td>FilterPrimitiveWithIn.attrib</td><td>FilterPrimitive.attrib, in</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Filter Module ................................................. --&gt;
&lt;!-- file: svg-filter.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Filter//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-filter.mod"

     ....................................................................... --&gt;

&lt;!-- Filter

        filter, feBlend, feColorMatrix, feComponentTransfer, feComposite,
        feConvolveMatrix, feDiffuseLighting, feDisplacementMap, feFlood,
        feGaussianBlur, feImage, feMerge, feMergeNode, feMorphology, feOffset,
        feSpecularLighting, feTile, feTurbulence, feDistantLight, fePointLight,
        feSpotLight, feFuncR, feFuncG, feFuncB, feFuncA

     This module declares markup to provide support for filter effect.
--&gt;

&lt;!-- 'filter' property/attribute value (e.g., 'none', &lt;uri&gt;) --&gt;
&lt;!ENTITY % FilterValue.datatype "CDATA" &gt;

&lt;!-- list of &lt;number&gt;s, but at least one and at most two --&gt;
&lt;!ENTITY % NumberOptionalNumber.datatype "CDATA" &gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.filter.qname "filter" &gt;
&lt;!ENTITY % SVG.feBlend.qname "feBlend" &gt;
&lt;!ENTITY % SVG.feColorMatrix.qname "feColorMatrix" &gt;
&lt;!ENTITY % SVG.feComponentTransfer.qname "feComponentTransfer" &gt;
&lt;!ENTITY % SVG.feComposite.qname "feComposite" &gt;
&lt;!ENTITY % SVG.feConvolveMatrix.qname "feConvolveMatrix" &gt;
&lt;!ENTITY % SVG.feDiffuseLighting.qname "feDiffuseLighting" &gt;
&lt;!ENTITY % SVG.feDisplacementMap.qname "feDisplacementMap" &gt;
&lt;!ENTITY % SVG.feFlood.qname "feFlood" &gt;
&lt;!ENTITY % SVG.feGaussianBlur.qname "feGaussianBlur" &gt;
&lt;!ENTITY % SVG.feImage.qname "feImage" &gt;
&lt;!ENTITY % SVG.feMerge.qname "feMerge" &gt;
&lt;!ENTITY % SVG.feMergeNode.qname "feMergeNode" &gt;
&lt;!ENTITY % SVG.feMorphology.qname "feMorphology" &gt;
&lt;!ENTITY % SVG.feOffset.qname "feOffset" &gt;
&lt;!ENTITY % SVG.feSpecularLighting.qname "feSpecularLighting" &gt;
&lt;!ENTITY % SVG.feTile.qname "feTile" &gt;
&lt;!ENTITY % SVG.feTurbulence.qname "feTurbulence" &gt;
&lt;!ENTITY % SVG.feDistantLight.qname "feDistantLight" &gt;
&lt;!ENTITY % SVG.fePointLight.qname "fePointLight" &gt;
&lt;!ENTITY % SVG.feSpotLight.qname "feSpotLight" &gt;
&lt;!ENTITY % SVG.feFuncR.qname "feFuncR" &gt;
&lt;!ENTITY % SVG.feFuncG.qname "feFuncG" &gt;
&lt;!ENTITY % SVG.feFuncB.qname "feFuncB" &gt;
&lt;!ENTITY % SVG.feFuncA.qname "feFuncA" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Container.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Viewport.attrib "" &gt;
&lt;!ENTITY % SVG.Text.attrib "" &gt;
&lt;!ENTITY % SVG.TextContent.attrib "" &gt;
&lt;!ENTITY % SVG.Font.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.Marker.attrib "" &gt;
&lt;!ENTITY % SVG.ColorProfile.attrib "" &gt;
&lt;!ENTITY % SVG.Gradient.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.XLink.attrib "" &gt;
&lt;!ENTITY % SVG.XLinkEmbed.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Filter.class .................................. --&gt;

&lt;!ENTITY % SVG.Filter.extra.class "" &gt;

&lt;!ENTITY % SVG.Filter.class
    "| %SVG.filter.qname; %SVG.Filter.extra.class;"
&gt;

&lt;!-- SVG.FilterPrimitive.class ......................... --&gt;

&lt;!ENTITY % SVG.FilterPrimitive.extra.class "" &gt;

&lt;!ENTITY % SVG.FilterPrimitive.class
    "| %SVG.feBlend.qname; | %SVG.feColorMatrix.qname;
     | %SVG.feComponentTransfer.qname; | %SVG.feComposite.qname;
     | %SVG.feConvolveMatrix.qname; | %SVG.feDiffuseLighting.qname;
     | %SVG.feDisplacementMap.qname; | %SVG.feFlood.qname;
     | %SVG.feGaussianBlur.qname; | %SVG.feImage.qname; | %SVG.feMerge.qname;
     | %SVG.feMorphology.qname; | %SVG.feOffset.qname;
     | %SVG.feSpecularLighting.qname; | %SVG.feTile.qname;
     | %SVG.feTurbulence.qname; %SVG.FilterPrimitive.extra.class;"
&gt;

&lt;!-- SVG.Filter.attrib ................................. --&gt;

&lt;!ENTITY % SVG.Filter.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Filter.attrib
    "filter %FilterValue.datatype; #IMPLIED
     %SVG.Filter.extra.attrib;"
&gt;

&lt;!-- SVG.FilterColor.attrib ............................ --&gt;

&lt;!ENTITY % SVG.FilterColor.extra.attrib "" &gt;

&lt;!ENTITY % SVG.FilterColor.attrib
    "color-interpolation-filters ( auto | sRGB | linearRGB | inherit )
                                   #IMPLIED
     %SVG.FilterColor.extra.attrib;"
&gt;

&lt;!-- SVG.FilterPrimitive.attrib ........................ --&gt;

&lt;!ENTITY % SVG.FilterPrimitive.extra.attrib "" &gt;

&lt;!ENTITY % SVG.FilterPrimitive.attrib
    "x %Coordinate.datatype; #IMPLIED
     y %Coordinate.datatype; #IMPLIED
     width %Length.datatype; #IMPLIED
     height %Length.datatype; #IMPLIED
     result CDATA #IMPLIED
     %SVG.FilterPrimitive.extra.attrib;"
&gt;

&lt;!-- SVG.FilterPrimitiveWithIn.attrib .................. --&gt;

&lt;!ENTITY % SVG.FilterPrimitiveWithIn.extra.attrib "" &gt;

&lt;!ENTITY % SVG.FilterPrimitiveWithIn.attrib
    "%SVG.FilterPrimitive.attrib;
     in CDATA #IMPLIED
     %SVG.FilterPrimitiveWithIn.extra.attrib;"
&gt;

&lt;!-- SVG.Presentation.attrib ........................... --&gt;

&lt;!ENTITY % SVG.Presentation.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Presentation.attrib
    "%SVG.Container.attrib;
     %SVG.Viewport.attrib;
     %SVG.Text.attrib;
     %SVG.TextContent.attrib;
     %SVG.Font.attrib;
     %SVG.Paint.attrib;
     %SVG.Color.attrib;
     %SVG.Opacity.attrib;
     %SVG.Graphics.attrib;
     %SVG.Marker.attrib;
     %SVG.ColorProfile.attrib;
     %SVG.Gradient.attrib;
     %SVG.Clip.attrib;
     %SVG.Mask.attrib;
     %SVG.Filter.attrib;
     %SVG.FilterColor.attrib;
     %SVG.Cursor.attrib;
     flood-color %SVGColor.datatype; #IMPLIED
     flood-opacity %OpacityValue.datatype; #IMPLIED
     lighting-color %SVGColor.datatype; #IMPLIED
     %SVG.Presentation.extra.attrib;"
&gt;

&lt;!-- filter: Filter Element ............................ --&gt;

&lt;!ENTITY % SVG.filter.extra.content "" &gt;

&lt;!ENTITY % SVG.filter.element "INCLUDE" &gt;
&lt;![%SVG.filter.element;[
&lt;!ENTITY % SVG.filter.content
    "( %SVG.Description.class; | %SVG.animate.qname; | %SVG.set.qname;
        %SVG.FilterPrimitive.class; %SVG.filter.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.filter.qname; %SVG.filter.content; &gt;
&lt;!-- end of SVG.filter.element --&gt;]]&gt;

&lt;!ENTITY % SVG.filter.attlist "INCLUDE" &gt;
&lt;![%SVG.filter.attlist;[
&lt;!ATTLIST %SVG.filter.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.XLink.attrib;
    %SVG.External.attrib;
    x %Coordinate.datatype; #IMPLIED
    y %Coordinate.datatype; #IMPLIED
    width %Length.datatype; #IMPLIED
    height %Length.datatype; #IMPLIED
    filterRes %NumberOptionalNumber.datatype; #IMPLIED
    filterUnits ( userSpaceOnUse | objectBoundingBox ) #IMPLIED
    primitiveUnits ( userSpaceOnUse | objectBoundingBox ) #IMPLIED
&gt;
&lt;!-- end of SVG.filter.attlist --&gt;]]&gt;

&lt;!-- feBlend: Filter Effect Blend Element .............. --&gt;

&lt;!ENTITY % SVG.feBlend.extra.content "" &gt;

&lt;!ENTITY % SVG.feBlend.element "INCLUDE" &gt;
&lt;![%SVG.feBlend.element;[
&lt;!ENTITY % SVG.feBlend.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feBlend.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feBlend.qname; %SVG.feBlend.content; &gt;
&lt;!-- end of SVG.feBlend.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feBlend.attlist "INCLUDE" &gt;
&lt;![%SVG.feBlend.attlist;[
&lt;!ATTLIST %SVG.feBlend.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
    in2 CDATA #REQUIRED
    mode ( normal | multiply | screen | darken | lighten ) 'normal'
&gt;
&lt;!-- end of SVG.feBlend.attlist --&gt;]]&gt;

&lt;!-- feColorMatrix: Filter Effect Color Matrix Element . --&gt;

&lt;!ENTITY % SVG.feColorMatrix.extra.content "" &gt;

&lt;!ENTITY % SVG.feColorMatrix.element "INCLUDE" &gt;
&lt;![%SVG.feColorMatrix.element;[
&lt;!ENTITY % SVG.feColorMatrix.content
    "( %SVG.animate.qname; | %SVG.set.qname;
       %SVG.feColorMatrix.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feColorMatrix.qname; %SVG.feColorMatrix.content; &gt;
&lt;!-- end of SVG.feColorMatrix.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feColorMatrix.attlist "INCLUDE" &gt;
&lt;![%SVG.feColorMatrix.attlist;[
&lt;!ATTLIST %SVG.feColorMatrix.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
    type ( matrix | saturate | hueRotate | luminanceToAlpha ) 'matrix'
    values CDATA #IMPLIED
&gt;
&lt;!-- end of SVG.feColorMatrix.attlist --&gt;]]&gt;

&lt;!-- feComponentTransfer: Filter Effect Component Transfer Element --&gt;

&lt;!ENTITY % SVG.feComponentTransfer.extra.content "" &gt;

&lt;!ENTITY % SVG.feComponentTransfer.element "INCLUDE" &gt;
&lt;![%SVG.feComponentTransfer.element;[
&lt;!ENTITY % SVG.feComponentTransfer.content
    "( %SVG.feFuncR.qname;?, %SVG.feFuncG.qname;?, %SVG.feFuncB.qname;?,
       %SVG.feFuncA.qname;? %SVG.feComponentTransfer.extra.content; )"
&gt;
&lt;!ELEMENT %SVG.feComponentTransfer.qname; %SVG.feComponentTransfer.content; &gt;
&lt;!-- end of SVG.feComponentTransfer.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feComponentTransfer.attlist "INCLUDE" &gt;
&lt;![%SVG.feComponentTransfer.attlist;[
&lt;!ATTLIST %SVG.feComponentTransfer.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
&gt;
&lt;!-- end of SVG.feComponentTransfer.attlist --&gt;]]&gt;

&lt;!-- feComposite: Filter Effect Composite Element ...... --&gt;

&lt;!ENTITY % SVG.feComposite.extra.content "" &gt;

&lt;!ENTITY % SVG.feComposite.element "INCLUDE" &gt;
&lt;![%SVG.feComposite.element;[
&lt;!ENTITY % SVG.feComposite.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feComposite.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feComposite.qname; %SVG.feComposite.content; &gt;
&lt;!-- end of SVG.feComposite.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feComposite.attlist "INCLUDE" &gt;
&lt;![%SVG.feComposite.attlist;[
&lt;!ATTLIST %SVG.feComposite.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
    in2 CDATA #REQUIRED
    operator ( over | in | out | atop | xor | arithmetic ) 'over'
    k1 %Number.datatype; #IMPLIED
    k2 %Number.datatype; #IMPLIED
    k3 %Number.datatype; #IMPLIED
    k4 %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feComposite.attlist --&gt;]]&gt;

&lt;!-- feConvolveMatrix: Filter Effect Convolve Matrix Element --&gt;

&lt;!ENTITY % SVG.feConvolveMatrix.extra.content "" &gt;

&lt;!ENTITY % SVG.feConvolveMatrix.element "INCLUDE" &gt;
&lt;![%SVG.feConvolveMatrix.element;[
&lt;!ENTITY % SVG.feConvolveMatrix.content
    "( %SVG.animate.qname; | %SVG.set.qname;
       %SVG.feConvolveMatrix.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feConvolveMatrix.qname; %SVG.feConvolveMatrix.content; &gt;
&lt;!-- end of SVG.feConvolveMatrix.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feConvolveMatrix.attlist "INCLUDE" &gt;
&lt;![%SVG.feConvolveMatrix.attlist;[
&lt;!ATTLIST %SVG.feConvolveMatrix.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
    order %NumberOptionalNumber.datatype; #IMPLIED
    kernelMatrix CDATA #REQUIRED
    divisor %Number.datatype; #IMPLIED
    bias %Number.datatype; #IMPLIED
    targetX %Integer.datatype; #IMPLIED
    targetY %Integer.datatype; #IMPLIED
    edgeMode ( duplicate | wrap | none ) 'duplicate'
    kernelUnitLength %NumberOptionalNumber.datatype; #IMPLIED
    preserveAlpha %Boolean.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feConvolveMatrix.attlist --&gt;]]&gt;

&lt;!-- feDiffuseLighting: Filter Effect Diffuse Lighting Element --&gt;

&lt;!ENTITY % SVG.feDiffuseLighting.extra.content "" &gt;

&lt;!ENTITY % SVG.feDiffuseLighting.element "INCLUDE" &gt;
&lt;![%SVG.feDiffuseLighting.element;[
&lt;!ENTITY % SVG.feDiffuseLighting.content
    "(( %SVG.feDistantLight.qname; | %SVG.fePointLight.qname;
      | %SVG.feSpotLight.qname; ), ( %SVG.animate.qname; | %SVG.set.qname;
      | %SVG.animateColor.qname; %SVG.feDiffuseLighting.extra.content; )*)"
&gt;
&lt;!ELEMENT %SVG.feDiffuseLighting.qname; %SVG.feDiffuseLighting.content; &gt;
&lt;!-- end of SVG.feDiffuseLighting.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feDiffuseLighting.attlist "INCLUDE" &gt;
&lt;![%SVG.feDiffuseLighting.attlist;[
&lt;!ATTLIST %SVG.feDiffuseLighting.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
    surfaceScale %Number.datatype; #IMPLIED
    diffuseConstant %Number.datatype; #IMPLIED
    kernelUnitLength %NumberOptionalNumber.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feDiffuseLighting.attlist --&gt;]]&gt;

&lt;!-- feDisplacementMap: Filter Effect Displacement Map Element --&gt;

&lt;!ENTITY % SVG.feDisplacementMap.extra.content "" &gt;

&lt;!ENTITY % SVG.feDisplacementMap.element "INCLUDE" &gt;
&lt;![%SVG.feDisplacementMap.element;[
&lt;!ENTITY % SVG.feDisplacementMap.content
    "( %SVG.animate.qname; | %SVG.set.qname;
       %SVG.feDisplacementMap.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feDisplacementMap.qname; %SVG.feDisplacementMap.content; &gt;
&lt;!-- end of SVG.feDisplacementMap.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feDisplacementMap.attlist "INCLUDE" &gt;
&lt;![%SVG.feDisplacementMap.attlist;[
&lt;!ATTLIST %SVG.feDisplacementMap.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
    in2 CDATA #REQUIRED
    scale %Number.datatype; #IMPLIED
    xChannelSelector ( R | G | B | A ) 'A'
    yChannelSelector ( R | G | B | A ) 'A'
&gt;
&lt;!-- end of SVG.feDisplacementMap.attlist --&gt;]]&gt;

&lt;!-- feFlood: Filter Effect Flood Element .............. --&gt;

&lt;!ENTITY % SVG.feFlood.extra.content "" &gt;

&lt;!ENTITY % SVG.feFlood.element "INCLUDE" &gt;
&lt;![%SVG.feFlood.element;[
&lt;!ENTITY % SVG.feFlood.content
    "( %SVG.animate.qname; | %SVG.set.qname; | %SVG.animateColor.qname;
       %SVG.feFlood.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feFlood.qname; %SVG.feFlood.content; &gt;
&lt;!-- end of SVG.feFlood.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feFlood.attlist "INCLUDE" &gt;
&lt;![%SVG.feFlood.attlist;[
&lt;!ATTLIST %SVG.feFlood.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitive.attrib;
&gt;
&lt;!-- end of SVG.feFlood.attlist --&gt;]]&gt;

&lt;!-- feGaussianBlur: Filter Effect Gaussian Blur Element --&gt;

&lt;!ENTITY % SVG.feGaussianBlur.extra.content "" &gt;

&lt;!ENTITY % SVG.feGaussianBlur.element "INCLUDE" &gt;
&lt;![%SVG.feGaussianBlur.element;[
&lt;!ENTITY % SVG.feGaussianBlur.content
    "( %SVG.animate.qname; | %SVG.set.qname;
       %SVG.feGaussianBlur.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feGaussianBlur.qname; %SVG.feGaussianBlur.content; &gt;
&lt;!-- end of SVG.feGaussianBlur.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feGaussianBlur.attlist "INCLUDE" &gt;
&lt;![%SVG.feGaussianBlur.attlist;[
&lt;!ATTLIST %SVG.feGaussianBlur.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
    stdDeviation %NumberOptionalNumber.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feGaussianBlur.attlist --&gt;]]&gt;

&lt;!-- feImage: Filter Effect Image Element .............. --&gt;

&lt;!ENTITY % SVG.feImage.extra.content "" &gt;

&lt;!ENTITY % SVG.feImage.element "INCLUDE" &gt;
&lt;![%SVG.feImage.element;[
&lt;!ENTITY % SVG.feImage.content
    "( %SVG.animate.qname; | %SVG.set.qname; | %SVG.animateTransform.qname;
       %SVG.feImage.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feImage.qname; %SVG.feImage.content; &gt;
&lt;!-- end of SVG.feImage.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feImage.attlist "INCLUDE" &gt;
&lt;![%SVG.feImage.attlist;[
&lt;!ATTLIST %SVG.feImage.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitive.attrib;
    %SVG.XLinkEmbed.attrib;
    %SVG.External.attrib;
    preserveAspectRatio %PreserveAspectRatioSpec.datatype; 'xMidYMid meet'
&gt;
&lt;!-- end of SVG.feImage.attlist --&gt;]]&gt;

&lt;!-- feMerge: Filter Effect Merge Element .............. --&gt;

&lt;!ENTITY % SVG.feMerge.extra.content "" &gt;

&lt;!ENTITY % SVG.feMerge.element "INCLUDE" &gt;
&lt;![%SVG.feMerge.element;[
&lt;!ENTITY % SVG.feMerge.content
    "( %SVG.feMergeNode.qname; %SVG.feMerge.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feMerge.qname; %SVG.feMerge.content; &gt;
&lt;!-- end of SVG.feMerge.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feMerge.attlist "INCLUDE" &gt;
&lt;![%SVG.feMerge.attlist;[
&lt;!ATTLIST %SVG.feMerge.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitive.attrib;
&gt;
&lt;!-- end of SVG.feMerge.attlist --&gt;]]&gt;

&lt;!-- feMergeNode: Filter Effect Merge Node Element ..... --&gt;

&lt;!ENTITY % SVG.feMergeNode.extra.content "" &gt;

&lt;!ENTITY % SVG.feMergeNode.element "INCLUDE" &gt;
&lt;![%SVG.feMergeNode.element;[
&lt;!ENTITY % SVG.feMergeNode.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feMergeNode.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feMergeNode.qname; %SVG.feMergeNode.content; &gt;
&lt;!-- end of SVG.feMergeNode.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feMergeNode.attlist "INCLUDE" &gt;
&lt;![%SVG.feMergeNode.attlist;[
&lt;!ATTLIST %SVG.feMergeNode.qname;
    %SVG.Core.attrib;
    in CDATA #IMPLIED
&gt;
&lt;!-- end of SVG.feMergeNode.attlist --&gt;]]&gt;

&lt;!-- feMorphology: Filter Effect Morphology Element .... --&gt;

&lt;!ENTITY % SVG.feMorphology.extra.content "" &gt;

&lt;!ENTITY % SVG.feMorphology.element "INCLUDE" &gt;
&lt;![%SVG.feMorphology.element;[
&lt;!ENTITY % SVG.feMorphology.content
    "( %SVG.animate.qname; | %SVG.set.qname;
       %SVG.feMorphology.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feMorphology.qname; %SVG.feMorphology.content; &gt;
&lt;!-- end of SVG.feMorphology.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feMorphology.attlist "INCLUDE" &gt;
&lt;![%SVG.feMorphology.attlist;[
&lt;!ATTLIST %SVG.feMorphology.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
    operator ( erode | dilate ) 'erode'
    radius %NumberOptionalNumber.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feMorphology.attlist --&gt;]]&gt;

&lt;!-- feOffset: Filter Effect Offset Element ............ --&gt;

&lt;!ENTITY % SVG.feOffset.extra.content "" &gt;

&lt;!ENTITY % SVG.feOffset.element "INCLUDE" &gt;
&lt;![%SVG.feOffset.element;[
&lt;!ENTITY % SVG.feOffset.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feOffset.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feOffset.qname; %SVG.feOffset.content; &gt;
&lt;!-- end of SVG.feOffset.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feOffset.attlist "INCLUDE" &gt;
&lt;![%SVG.feOffset.attlist;[
&lt;!ATTLIST %SVG.feOffset.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
    dx %Number.datatype; #IMPLIED
    dy %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feOffset.attlist --&gt;]]&gt;

&lt;!-- feSpecularLighting: Filter Effect Specular Lighting Element --&gt;

&lt;!ENTITY % SVG.feSpecularLighting.extra.content "" &gt;

&lt;!ENTITY % SVG.feSpecularLighting.element "INCLUDE" &gt;
&lt;![%SVG.feSpecularLighting.element;[
&lt;!ENTITY % SVG.feSpecularLighting.content
    "(( %SVG.feDistantLight.qname; | %SVG.fePointLight.qname;
      | %SVG.feSpotLight.qname; ), ( %SVG.animate.qname; | %SVG.set.qname;
      | %SVG.animateColor.qname; %SVG.feSpecularLighting.extra.content; )*)"
&gt;
&lt;!ELEMENT %SVG.feSpecularLighting.qname; %SVG.feSpecularLighting.content; &gt;
&lt;!-- end of SVG.feSpecularLighting.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feSpecularLighting.attlist "INCLUDE" &gt;
&lt;![%SVG.feSpecularLighting.attlist;[
&lt;!ATTLIST %SVG.feSpecularLighting.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
    surfaceScale %Number.datatype; #IMPLIED
    specularConstant %Number.datatype; #IMPLIED
    specularExponent %Number.datatype; #IMPLIED
    kernelUnitLength %NumberOptionalNumber.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feSpecularLighting.attlist --&gt;]]&gt;

&lt;!-- feTile: Filter Effect Tile Element ................ --&gt;

&lt;!ENTITY % SVG.feTile.extra.content "" &gt;

&lt;!ENTITY % SVG.feTile.element "INCLUDE" &gt;
&lt;![%SVG.feTile.element;[
&lt;!ENTITY % SVG.feTile.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feTile.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feTile.qname; %SVG.feTile.content; &gt;
&lt;!-- end of SVG.feTile.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feTile.attlist "INCLUDE" &gt;
&lt;![%SVG.feTile.attlist;[
&lt;!ATTLIST %SVG.feTile.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
&gt;
&lt;!-- end of SVG.feTile.attlist --&gt;]]&gt;

&lt;!-- feTurbulence: Filter Effect Turbulence Element .... --&gt;

&lt;!ENTITY % SVG.feTurbulence.extra.content "" &gt;

&lt;!ENTITY % SVG.feTurbulence.element "INCLUDE" &gt;
&lt;![%SVG.feTurbulence.element;[
&lt;!ENTITY % SVG.feTurbulence.content
    "( %SVG.animate.qname; | %SVG.set.qname;
       %SVG.feTurbulence.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feTurbulence.qname; %SVG.feTurbulence.content; &gt;
&lt;!-- end of SVG.feTurbulence.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feTurbulence.attlist "INCLUDE" &gt;
&lt;![%SVG.feTurbulence.attlist;[
&lt;!ATTLIST %SVG.feTurbulence.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitive.attrib;
    baseFrequency %NumberOptionalNumber.datatype; #IMPLIED
    numOctaves %Integer.datatype; #IMPLIED
    seed %Number.datatype; #IMPLIED
    stitchTiles ( stitch | noStitch ) 'noStitch'
    type ( fractalNoise | turbulence ) 'turbulence'
&gt;
&lt;!-- end of SVG.feTurbulence.attlist --&gt;]]&gt;

&lt;!-- feDistantLight: Filter Effect Distant Light Element --&gt;

&lt;!ENTITY % SVG.feDistantLight.extra.content "" &gt;

&lt;!ENTITY % SVG.feDistantLight.element "INCLUDE" &gt;
&lt;![%SVG.feDistantLight.element;[
&lt;!ENTITY % SVG.feDistantLight.content
    "( %SVG.animate.qname; | %SVG.set.qname;
       %SVG.feDistantLight.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feDistantLight.qname; %SVG.feDistantLight.content; &gt;
&lt;!-- end of SVG.feDistantLight.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feDistantLight.attlist "INCLUDE" &gt;
&lt;![%SVG.feDistantLight.attlist;[
&lt;!ATTLIST %SVG.feDistantLight.qname;
    %SVG.Core.attrib;
    azimuth %Number.datatype; #IMPLIED
    elevation %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feDistantLight.attlist --&gt;]]&gt;

&lt;!-- fePointLight: Filter Effect Point Light Element ... --&gt;

&lt;!ENTITY % SVG.fePointLight.extra.content "" &gt;

&lt;!ENTITY % SVG.fePointLight.element "INCLUDE" &gt;
&lt;![%SVG.fePointLight.element;[
&lt;!ENTITY % SVG.fePointLight.content
    "( %SVG.animate.qname; | %SVG.set.qname;
       %SVG.fePointLight.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.fePointLight.qname; %SVG.fePointLight.content; &gt;
&lt;!-- end of SVG.fePointLight.element --&gt;]]&gt;

&lt;!ENTITY % SVG.fePointLight.attlist "INCLUDE" &gt;
&lt;![%SVG.fePointLight.attlist;[
&lt;!ATTLIST %SVG.fePointLight.qname;
    %SVG.Core.attrib;
    x %Number.datatype; #IMPLIED
    y %Number.datatype; #IMPLIED
    z %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.fePointLight.attlist --&gt;]]&gt;

&lt;!-- feSpotLight: Filter Effect Spot Light Element ..... --&gt;

&lt;!ENTITY % SVG.feSpotLight.extra.content "" &gt;

&lt;!ENTITY % SVG.feSpotLight.element "INCLUDE" &gt;
&lt;![%SVG.feSpotLight.element;[
&lt;!ENTITY % SVG.feSpotLight.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feSpotLight.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feSpotLight.qname; %SVG.feSpotLight.content; &gt;
&lt;!-- end of SVG.feSpotLight.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feSpotLight.attlist "INCLUDE" &gt;
&lt;![%SVG.feSpotLight.attlist;[
&lt;!ATTLIST %SVG.feSpotLight.qname;
    %SVG.Core.attrib;
    x %Number.datatype; #IMPLIED
    y %Number.datatype; #IMPLIED
    z %Number.datatype; #IMPLIED
    pointsAtX %Number.datatype; #IMPLIED
    pointsAtY %Number.datatype; #IMPLIED
    pointsAtZ %Number.datatype; #IMPLIED
    specularExponent %Number.datatype; #IMPLIED
    limitingConeAngle %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feSpotLight.attlist --&gt;]]&gt;

&lt;!-- feFuncR: Filter Effect Function Red Element ....... --&gt;

&lt;!ENTITY % SVG.feFuncR.extra.content "" &gt;

&lt;!ENTITY % SVG.feFuncR.element "INCLUDE" &gt;
&lt;![%SVG.feFuncR.element;[
&lt;!ENTITY % SVG.feFuncR.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feFuncR.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feFuncR.qname; %SVG.feFuncR.content; &gt;
&lt;!-- end of SVG.feFuncR.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feFuncR.attlist "INCLUDE" &gt;
&lt;![%SVG.feFuncR.attlist;[
&lt;!ATTLIST %SVG.feFuncR.qname;
    %SVG.Core.attrib;
    type ( identity | table | discrete | linear | gamma ) #REQUIRED
    tableValues CDATA #IMPLIED
    slope %Number.datatype; #IMPLIED
    intercept %Number.datatype; #IMPLIED
    amplitude %Number.datatype; #IMPLIED
    exponent %Number.datatype; #IMPLIED
    offset %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feFuncR.attlist --&gt;]]&gt;

&lt;!-- feFuncG: Filter Effect Function Green Element ..... --&gt;

&lt;!ENTITY % SVG.feFuncG.extra.content "" &gt;

&lt;!ENTITY % SVG.feFuncG.element "INCLUDE" &gt;
&lt;![%SVG.feFuncG.element;[
&lt;!ENTITY % SVG.feFuncG.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feFuncG.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feFuncG.qname; %SVG.feFuncG.content; &gt;
&lt;!-- end of SVG.feFuncG.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feFuncG.attlist "INCLUDE" &gt;
&lt;![%SVG.feFuncG.attlist;[
&lt;!ATTLIST %SVG.feFuncG.qname;
    %SVG.Core.attrib;
    type ( identity | table | discrete | linear | gamma ) #REQUIRED
    tableValues CDATA #IMPLIED
    slope %Number.datatype; #IMPLIED
    intercept %Number.datatype; #IMPLIED
    amplitude %Number.datatype; #IMPLIED
    exponent %Number.datatype; #IMPLIED
    offset %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feFuncG.attlist --&gt;]]&gt;

&lt;!-- feFuncB: Filter Effect Function Blue Element ...... --&gt;

&lt;!ENTITY % SVG.feFuncB.extra.content "" &gt;

&lt;!ENTITY % SVG.feFuncB.element "INCLUDE" &gt;
&lt;![%SVG.feFuncB.element;[
&lt;!ENTITY % SVG.feFuncB.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feFuncB.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feFuncB.qname; %SVG.feFuncB.content; &gt;
&lt;!-- end of SVG.feFuncB.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feFuncB.attlist "INCLUDE" &gt;
&lt;![%SVG.feFuncB.attlist;[
&lt;!ATTLIST %SVG.feFuncB.qname;
    %SVG.Core.attrib;
    type ( identity | table | discrete | linear | gamma ) #REQUIRED
    tableValues CDATA #IMPLIED
    slope %Number.datatype; #IMPLIED
    intercept %Number.datatype; #IMPLIED
    amplitude %Number.datatype; #IMPLIED
    exponent %Number.datatype; #IMPLIED
    offset %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feFuncB.attlist --&gt;]]&gt;

&lt;!-- feFuncA: Filter Effect Function Alpha Element ..... --&gt;

&lt;!ENTITY % SVG.feFuncA.extra.content "" &gt;

&lt;!ENTITY % SVG.feFuncA.element "INCLUDE" &gt;
&lt;![%SVG.feFuncA.element;[
&lt;!ENTITY % SVG.feFuncA.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feFuncA.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feFuncA.qname; %SVG.feFuncA.content; &gt;
&lt;!-- end of SVG.feFuncA.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feFuncA.attlist "INCLUDE" &gt;
&lt;![%SVG.feFuncA.attlist;[
&lt;!ATTLIST %SVG.feFuncA.qname;
    %SVG.Core.attrib;
    type ( identity | table | discrete | linear | gamma ) #REQUIRED
    tableValues CDATA #IMPLIED
    slope %Number.datatype; #IMPLIED
    intercept %Number.datatype; #IMPLIED
    amplitude %Number.datatype; #IMPLIED
    exponent %Number.datatype; #IMPLIED
    offset %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feFuncA.attlist --&gt;]]&gt;

&lt;!-- end of svg-filter.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.33">A.3.33 Basic Filter Module</h3>

<p>The Basic Filter Module defines the Filter.class and FilterPrimitive.class element collections and the Filter.attrib, FilterColor.attrib, FilterPrimitive.attrib and FilterPrimitiveWithIn.attrib attribute collections.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Filter.class</td><td>filter</td></tr><tr><td>FilterPrimitive.class</td><td>feBlend, feFlood, feColorMatrix, feComponentTransfer, feComposite, feGaussianBlur, feImage, feMerge, feOffset, feTile</td></tr></table>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Filter.attrib</td><td>filter</td></tr><tr><td>FilterColor.attrib</td><td>color-interpolation-filters</td></tr><tr><td>FilterPrimitive.attrib</td><td>x, y, width, height, result</td></tr><tr><td>FilterPrimitiveWithIn.attrib</td><td>FilterPrimitive.attrib, in</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Basic Filter Module ........................................... --&gt;
&lt;!-- file: svg-basic-filter.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Basic Filter//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-basic-filter.mod"

     ....................................................................... --&gt;

&lt;!-- Basic Filter

        filter, feBlend, feColorMatrix, feComponentTransfer, feComposite,
        feFlood, feGaussianBlur, feImage, feMerge, feMergeNode, feOffset,
        feTile, feFuncR, feFuncG, feFuncB, feFuncA

     This module declares markup to provide support for filter effect.
--&gt;

&lt;!-- 'filter' property/attribute value (e.g., 'none', &lt;uri&gt;) --&gt;
&lt;!ENTITY % FilterValue.datatype "CDATA" &gt;

&lt;!-- list of &lt;number&gt;s, but at least one and at most two --&gt;
&lt;!ENTITY % NumberOptionalNumber.datatype "CDATA" &gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.filter.qname "filter" &gt;
&lt;!ENTITY % SVG.feBlend.qname "feBlend" &gt;
&lt;!ENTITY % SVG.feColorMatrix.qname "feColorMatrix" &gt;
&lt;!ENTITY % SVG.feComponentTransfer.qname "feComponentTransfer" &gt;
&lt;!ENTITY % SVG.feComposite.qname "feComposite" &gt;
&lt;!ENTITY % SVG.feFlood.qname "feFlood" &gt;
&lt;!ENTITY % SVG.feGaussianBlur.qname "feGaussianBlur" &gt;
&lt;!ENTITY % SVG.feImage.qname "feImage" &gt;
&lt;!ENTITY % SVG.feMerge.qname "feMerge" &gt;
&lt;!ENTITY % SVG.feMergeNode.qname "feMergeNode" &gt;
&lt;!ENTITY % SVG.feOffset.qname "feOffset" &gt;
&lt;!ENTITY % SVG.feTile.qname "feTile" &gt;
&lt;!ENTITY % SVG.feFuncR.qname "feFuncR" &gt;
&lt;!ENTITY % SVG.feFuncG.qname "feFuncG" &gt;
&lt;!ENTITY % SVG.feFuncB.qname "feFuncB" &gt;
&lt;!ENTITY % SVG.feFuncA.qname "feFuncA" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Container.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Viewport.attrib "" &gt;
&lt;!ENTITY % SVG.Text.attrib "" &gt;
&lt;!ENTITY % SVG.TextContent.attrib "" &gt;
&lt;!ENTITY % SVG.Font.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.Marker.attrib "" &gt;
&lt;!ENTITY % SVG.ColorProfile.attrib "" &gt;
&lt;!ENTITY % SVG.Gradient.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.XLink.attrib "" &gt;
&lt;!ENTITY % SVG.XLinkEmbed.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Filter.class .................................. --&gt;

&lt;!ENTITY % SVG.Filter.extra.class "" &gt;

&lt;!ENTITY % SVG.Filter.class
    "| %SVG.filter.qname; %SVG.Filter.extra.class;"
&gt;

&lt;!-- SVG.FilterPrimitive.class ......................... --&gt;

&lt;!ENTITY % SVG.FilterPrimitive.extra.class "" &gt;

&lt;!ENTITY % SVG.FilterPrimitive.class
    "| %SVG.feBlend.qname; | %SVG.feColorMatrix.qname;
     | %SVG.feComponentTransfer.qname; | %SVG.feComposite.qname;
     | %SVG.feFlood.qname; | %SVG.feGaussianBlur.qname; | %SVG.feImage.qname;
     | %SVG.feMerge.qname; | %SVG.feOffset.qname; | %SVG.feTile.qname;
       %SVG.FilterPrimitive.extra.class;"
&gt;

&lt;!-- SVG.Filter.attrib ................................. --&gt;

&lt;!ENTITY % SVG.Filter.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Filter.attrib
    "filter %FilterValue.datatype; #IMPLIED
     %SVG.Filter.extra.attrib;"
&gt;

&lt;!-- SVG.FilterColor.attrib ............................ --&gt;

&lt;!ENTITY % SVG.FilterColor.extra.attrib "" &gt;

&lt;!ENTITY % SVG.FilterColor.attrib
    "color-interpolation-filters ( auto | sRGB | linearRGB | inherit )
                                   #IMPLIED
     %SVG.FilterColor.extra.attrib;"
&gt;

&lt;!-- SVG.FilterPrimitive.attrib ........................ --&gt;

&lt;!ENTITY % SVG.FilterPrimitive.extra.attrib "" &gt;

&lt;!ENTITY % SVG.FilterPrimitive.attrib
    "x %Coordinate.datatype; #IMPLIED
     y %Coordinate.datatype; #IMPLIED
     width %Length.datatype; #IMPLIED
     height %Length.datatype; #IMPLIED
     result CDATA #IMPLIED
     %SVG.FilterPrimitive.extra.attrib;"
&gt;

&lt;!-- SVG.FilterPrimitiveWithIn.attrib .................. --&gt;

&lt;!ENTITY % SVG.FilterPrimitiveWithIn.extra.attrib "" &gt;

&lt;!ENTITY % SVG.FilterPrimitiveWithIn.attrib
    "%SVG.FilterPrimitive.attrib;
     in CDATA #IMPLIED
     %SVG.FilterPrimitiveWithIn.extra.attrib;"
&gt;

&lt;!-- SVG.Presentation.attrib ........................... --&gt;

&lt;!ENTITY % SVG.Presentation.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Presentation.attrib
    "%SVG.Container.attrib;
     %SVG.Viewport.attrib;
     %SVG.Text.attrib;
     %SVG.TextContent.attrib;
     %SVG.Font.attrib;
     %SVG.Paint.attrib;
     %SVG.Color.attrib;
     %SVG.Opacity.attrib;
     %SVG.Graphics.attrib;
     %SVG.Marker.attrib;
     %SVG.ColorProfile.attrib;
     %SVG.Gradient.attrib;
     %SVG.Clip.attrib;
     %SVG.Mask.attrib;
     %SVG.Filter.attrib;
     %SVG.FilterColor.attrib;
     %SVG.Cursor.attrib;
     flood-color %SVGColor.datatype; #IMPLIED
     flood-opacity %OpacityValue.datatype; #IMPLIED
     lighting-color %SVGColor.datatype; #IMPLIED
     %SVG.Presentation.extra.attrib;"
&gt;

&lt;!-- filter: Filter Element ............................ --&gt;

&lt;!ENTITY % SVG.filter.extra.content "" &gt;

&lt;!ENTITY % SVG.filter.element "INCLUDE" &gt;
&lt;![%SVG.filter.element;[
&lt;!ENTITY % SVG.filter.content
    "( %SVG.Description.class; | %SVG.animate.qname; | %SVG.set.qname;
       %SVG.FilterPrimitive.class; %SVG.filter.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.filter.qname; %SVG.filter.content; &gt;
&lt;!-- end of SVG.filter.element --&gt;]]&gt;

&lt;!ENTITY % SVG.filter.attlist "INCLUDE" &gt;
&lt;![%SVG.filter.attlist;[
&lt;!ATTLIST %SVG.filter.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.XLink.attrib;
    %SVG.External.attrib;
    x %Coordinate.datatype; #IMPLIED
    y %Coordinate.datatype; #IMPLIED
    width %Length.datatype; #IMPLIED
    height %Length.datatype; #IMPLIED
    filterRes %NumberOptionalNumber.datatype; #IMPLIED
    filterUnits ( userSpaceOnUse | objectBoundingBox ) #IMPLIED
    primitiveUnits ( userSpaceOnUse | objectBoundingBox ) #IMPLIED
&gt;
&lt;!-- end of SVG.filter.attlist --&gt;]]&gt;

&lt;!-- feBlend: Filter Effect Blend Element .............. --&gt;

&lt;!ENTITY % SVG.feBlend.extra.content "" &gt;

&lt;!ENTITY % SVG.feBlend.element "INCLUDE" &gt;
&lt;![%SVG.feBlend.element;[
&lt;!ENTITY % SVG.feBlend.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feBlend.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feBlend.qname; %SVG.feBlend.content; &gt;
&lt;!-- end of SVG.feBlend.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feBlend.attlist "INCLUDE" &gt;
&lt;![%SVG.feBlend.attlist;[
&lt;!ATTLIST %SVG.feBlend.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
    in2 CDATA #REQUIRED
    mode ( normal | multiply | screen | darken | lighten ) 'normal'
&gt;
&lt;!-- end of SVG.feBlend.attlist --&gt;]]&gt;

&lt;!-- feColorMatrix: Filter Effect Color Matrix Element . --&gt;

&lt;!ENTITY % SVG.feColorMatrix.extra.content "" &gt;

&lt;!ENTITY % SVG.feColorMatrix.element "INCLUDE" &gt;
&lt;![%SVG.feColorMatrix.element;[
&lt;!ENTITY % SVG.feColorMatrix.content
    "( %SVG.animate.qname; | %SVG.set.qname;
       %SVG.feColorMatrix.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feColorMatrix.qname; %SVG.feColorMatrix.content; &gt;
&lt;!-- end of SVG.feColorMatrix.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feColorMatrix.attlist "INCLUDE" &gt;
&lt;![%SVG.feColorMatrix.attlist;[
&lt;!ATTLIST %SVG.feColorMatrix.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
    type ( matrix | saturate | hueRotate | luminanceToAlpha ) 'matrix'
    values CDATA #IMPLIED
&gt;
&lt;!-- end of SVG.feColorMatrix.attlist --&gt;]]&gt;

&lt;!-- feComponentTransfer: Filter Effect Component Transfer Element --&gt;

&lt;!ENTITY % SVG.feComponentTransfer.extra.content "" &gt;

&lt;!ENTITY % SVG.feComponentTransfer.element "INCLUDE" &gt;
&lt;![%SVG.feComponentTransfer.element;[
&lt;!ENTITY % SVG.feComponentTransfer.content
    "( %SVG.feFuncR.qname;?, %SVG.feFuncG.qname;?, %SVG.feFuncB.qname;?,
       %SVG.feFuncA.qname;? %SVG.feComponentTransfer.extra.content; )"
&gt;
&lt;!ELEMENT %SVG.feComponentTransfer.qname; %SVG.feComponentTransfer.content; &gt;
&lt;!-- end of SVG.feComponentTransfer.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feComponentTransfer.attlist "INCLUDE" &gt;
&lt;![%SVG.feComponentTransfer.attlist;[
&lt;!ATTLIST %SVG.feComponentTransfer.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
&gt;
&lt;!-- end of SVG.feComponentTransfer.attlist --&gt;]]&gt;

&lt;!-- feComposite: Filter Effect Composite Element ...... --&gt;

&lt;!ENTITY % SVG.feComposite.extra.content "" &gt;

&lt;!ENTITY % SVG.feComposite.element "INCLUDE" &gt;
&lt;![%SVG.feComposite.element;[
&lt;!ENTITY % SVG.feComposite.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feComposite.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feComposite.qname; %SVG.feComposite.content; &gt;
&lt;!-- end of SVG.feComposite.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feComposite.attlist "INCLUDE" &gt;
&lt;![%SVG.feComposite.attlist;[
&lt;!ATTLIST %SVG.feComposite.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
    in2 CDATA #REQUIRED
    operator ( over | in | out | atop | xor | arithmetic ) 'over'
    k1 %Number.datatype; #IMPLIED
    k2 %Number.datatype; #IMPLIED
    k3 %Number.datatype; #IMPLIED
    k4 %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feComposite.attlist --&gt;]]&gt;

&lt;!-- feFlood: Filter Effect Flood Element .............. --&gt;

&lt;!ENTITY % SVG.feFlood.extra.content "" &gt;

&lt;!ENTITY % SVG.feFlood.element "INCLUDE" &gt;
&lt;![%SVG.feFlood.element;[
&lt;!ENTITY % SVG.feFlood.content
    "( %SVG.animate.qname; | %SVG.set.qname; | %SVG.animateColor.qname;
       %SVG.feFlood.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feFlood.qname; %SVG.feFlood.content; &gt;
&lt;!-- end of SVG.feFlood.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feFlood.attlist "INCLUDE" &gt;
&lt;![%SVG.feFlood.attlist;[
&lt;!ATTLIST %SVG.feFlood.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Color.attrib;
    %SVG.FilterColor.attrib;
    %SVG.FilterPrimitive.attrib;
    flood-color %SVGColor.datatype; #IMPLIED
    flood-opacity %OpacityValue.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feFlood.attlist --&gt;]]&gt;

&lt;!-- feGaussianBlur: Filter Effect Gaussian Blur Element --&gt;

&lt;!ENTITY % SVG.feGaussianBlur.extra.content "" &gt;

&lt;!ENTITY % SVG.feGaussianBlur.element "INCLUDE" &gt;
&lt;![%SVG.feGaussianBlur.element;[
&lt;!ENTITY % SVG.feGaussianBlur.content
    "( %SVG.animate.qname; | %SVG.set.qname;
       %SVG.feGaussianBlur.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feGaussianBlur.qname; %SVG.feGaussianBlur.content; &gt;
&lt;!-- end of SVG.feGaussianBlur.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feGaussianBlur.attlist "INCLUDE" &gt;
&lt;![%SVG.feGaussianBlur.attlist;[
&lt;!ATTLIST %SVG.feGaussianBlur.qname;
    %SVG.Core.attrib;
    %SVG.FilterColor.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
    stdDeviation %NumberOptionalNumber.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feGaussianBlur.attlist --&gt;]]&gt;

&lt;!-- feImage: Filter Effect Image Element .............. --&gt;

&lt;!ENTITY % SVG.feImage.extra.content "" &gt;

&lt;!ENTITY % SVG.feImage.element "INCLUDE" &gt;
&lt;![%SVG.feImage.element;[
&lt;!ENTITY % SVG.feImage.content
    "( %SVG.animate.qname; | %SVG.set.qname; | %SVG.animateTransform.qname;
       %SVG.feImage.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feImage.qname; %SVG.feImage.content; &gt;
&lt;!-- end of SVG.feImage.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feImage.attlist "INCLUDE" &gt;
&lt;![%SVG.feImage.attlist;[
&lt;!ATTLIST %SVG.feImage.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.FilterPrimitive.attrib;
    %SVG.XLinkEmbed.attrib;
    %SVG.External.attrib;
    preserveAspectRatio %PreserveAspectRatioSpec.datatype; 'xMidYMid meet'
&gt;
&lt;!-- end of SVG.feImage.attlist --&gt;]]&gt;

&lt;!-- feMerge: Filter Effect Merge Element .............. --&gt;

&lt;!ENTITY % SVG.feMerge.extra.content "" &gt;

&lt;!ENTITY % SVG.feMerge.element "INCLUDE" &gt;
&lt;![%SVG.feMerge.element;[
&lt;!ENTITY % SVG.feMerge.content
    "( %SVG.feMergeNode.qname; %SVG.feMerge.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feMerge.qname; %SVG.feMerge.content; &gt;
&lt;!-- end of SVG.feMerge.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feMerge.attlist "INCLUDE" &gt;
&lt;![%SVG.feMerge.attlist;[
&lt;!ATTLIST %SVG.feMerge.qname;
    %SVG.Core.attrib;
    %SVG.FilterColor.attrib;
    %SVG.FilterPrimitive.attrib;
&gt;
&lt;!-- end of SVG.feMerge.attlist --&gt;]]&gt;

&lt;!-- feMergeNode: Filter Effect Merge Node Element ..... --&gt;

&lt;!ENTITY % SVG.feMergeNode.extra.content "" &gt;

&lt;!ENTITY % SVG.feMergeNode.element "INCLUDE" &gt;
&lt;![%SVG.feMergeNode.element;[
&lt;!ENTITY % SVG.feMergeNode.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feMergeNode.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feMergeNode.qname; %SVG.feMergeNode.content; &gt;
&lt;!-- end of SVG.feMergeNode.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feMergeNode.attlist "INCLUDE" &gt;
&lt;![%SVG.feMergeNode.attlist;[
&lt;!ATTLIST %SVG.feMergeNode.qname;
    %SVG.Core.attrib;
    in CDATA #IMPLIED
&gt;
&lt;!-- end of SVG.feMergeNode.attlist --&gt;]]&gt;

&lt;!-- feOffset: Filter Effect Offset Element ............ --&gt;

&lt;!ENTITY % SVG.feOffset.extra.content "" &gt;

&lt;!ENTITY % SVG.feOffset.element "INCLUDE" &gt;
&lt;![%SVG.feOffset.element;[
&lt;!ENTITY % SVG.feOffset.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feOffset.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feOffset.qname; %SVG.feOffset.content; &gt;
&lt;!-- end of SVG.feOffset.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feOffset.attlist "INCLUDE" &gt;
&lt;![%SVG.feOffset.attlist;[
&lt;!ATTLIST %SVG.feOffset.qname;
    %SVG.Core.attrib;
    %SVG.FilterColor.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
    dx %Number.datatype; #IMPLIED
    dy %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feOffset.attlist --&gt;]]&gt;

&lt;!-- feTile: Filter Effect Tile Element ................ --&gt;

&lt;!ENTITY % SVG.feTile.extra.content "" &gt;

&lt;!ENTITY % SVG.feTile.element "INCLUDE" &gt;
&lt;![%SVG.feTile.element;[
&lt;!ENTITY % SVG.feTile.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feTile.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feTile.qname; %SVG.feTile.content; &gt;
&lt;!-- end of SVG.feTile.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feTile.attlist "INCLUDE" &gt;
&lt;![%SVG.feTile.attlist;[
&lt;!ATTLIST %SVG.feTile.qname;
    %SVG.Core.attrib;
    %SVG.FilterColor.attrib;
    %SVG.FilterPrimitiveWithIn.attrib;
&gt;
&lt;!-- end of SVG.feTile.attlist --&gt;]]&gt;

&lt;!-- feFuncR: Filter Effect Function Red Element ....... --&gt;

&lt;!ENTITY % SVG.feFuncR.extra.content "" &gt;

&lt;!ENTITY % SVG.feFuncR.element "INCLUDE" &gt;
&lt;![%SVG.feFuncR.element;[
&lt;!ENTITY % SVG.feFuncR.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feFuncR.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feFuncR.qname; %SVG.feFuncR.content; &gt;
&lt;!-- end of SVG.feFuncR.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feFuncR.attlist "INCLUDE" &gt;
&lt;![%SVG.feFuncR.attlist;[
&lt;!ATTLIST %SVG.feFuncR.qname;
    %SVG.Core.attrib;
    type ( identity | table | discrete | linear | gamma ) #REQUIRED
    tableValues CDATA #IMPLIED
    slope %Number.datatype; #IMPLIED
    intercept %Number.datatype; #IMPLIED
    amplitude %Number.datatype; #IMPLIED
    exponent %Number.datatype; #IMPLIED
    offset %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feFuncR.attlist --&gt;]]&gt;

&lt;!-- feFuncG: Filter Effect Function Green Element ..... --&gt;

&lt;!ENTITY % SVG.feFuncG.extra.content "" &gt;

&lt;!ENTITY % SVG.feFuncG.element "INCLUDE" &gt;
&lt;![%SVG.feFuncG.element;[
&lt;!ENTITY % SVG.feFuncG.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feFuncG.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feFuncG.qname; %SVG.feFuncG.content; &gt;
&lt;!-- end of SVG.feFuncG.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feFuncG.attlist "INCLUDE" &gt;
&lt;![%SVG.feFuncG.attlist;[
&lt;!ATTLIST %SVG.feFuncG.qname;
    %SVG.Core.attrib;
    type ( identity | table | discrete | linear | gamma ) #REQUIRED
    tableValues CDATA #IMPLIED
    slope %Number.datatype; #IMPLIED
    intercept %Number.datatype; #IMPLIED
    amplitude %Number.datatype; #IMPLIED
    exponent %Number.datatype; #IMPLIED
    offset %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feFuncG.attlist --&gt;]]&gt;

&lt;!-- feFuncB: Filter Effect Function Blue Element ...... --&gt;

&lt;!ENTITY % SVG.feFuncB.extra.content "" &gt;

&lt;!ENTITY % SVG.feFuncB.element "INCLUDE" &gt;
&lt;![%SVG.feFuncB.element;[
&lt;!ENTITY % SVG.feFuncB.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feFuncB.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feFuncB.qname; %SVG.feFuncB.content; &gt;
&lt;!-- end of SVG.feFuncB.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feFuncB.attlist "INCLUDE" &gt;
&lt;![%SVG.feFuncB.attlist;[
&lt;!ATTLIST %SVG.feFuncB.qname;
    %SVG.Core.attrib;
    type ( identity | table | discrete | linear | gamma ) #REQUIRED
    tableValues CDATA #IMPLIED
    slope %Number.datatype; #IMPLIED
    intercept %Number.datatype; #IMPLIED
    amplitude %Number.datatype; #IMPLIED
    exponent %Number.datatype; #IMPLIED
    offset %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feFuncB.attlist --&gt;]]&gt;

&lt;!-- feFuncA: Filter Effect Function Alpha Element ..... --&gt;

&lt;!ENTITY % SVG.feFuncA.extra.content "" &gt;

&lt;!ENTITY % SVG.feFuncA.element "INCLUDE" &gt;
&lt;![%SVG.feFuncA.element;[
&lt;!ENTITY % SVG.feFuncA.content
    "( %SVG.animate.qname; | %SVG.set.qname; %SVG.feFuncA.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.feFuncA.qname; %SVG.feFuncA.content; &gt;
&lt;!-- end of SVG.feFuncA.element --&gt;]]&gt;

&lt;!ENTITY % SVG.feFuncA.attlist "INCLUDE" &gt;
&lt;![%SVG.feFuncA.attlist;[
&lt;!ATTLIST %SVG.feFuncA.qname;
    %SVG.Core.attrib;
    type ( identity | table | discrete | linear | gamma ) #REQUIRED
    tableValues CDATA #IMPLIED
    slope %Number.datatype; #IMPLIED
    intercept %Number.datatype; #IMPLIED
    amplitude %Number.datatype; #IMPLIED
    exponent %Number.datatype; #IMPLIED
    offset %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.feFuncA.attlist --&gt;]]&gt;

&lt;!-- end of svg-basic-filter.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.34">A.3.34 Cursor Module</h3>

<p>The Cursor Module defines the Cursor.class element collection and the Cursor.attrib attribute collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Cursor.class</td><td>cursor</td></tr></table>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Cursor.attrib</td><td>cursor</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Cursor Module ................................................. --&gt;
&lt;!-- file: svg-cursor.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Cursor//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-cursor.mod"

     ....................................................................... --&gt;

&lt;!-- Cursor

        cursor

     This module declares markup to provide support for cursor.
--&gt;

&lt;!-- 'cursor' property/attribute value (e.g., 'crosshair', &lt;uri&gt;) --&gt;
&lt;!ENTITY % CursorValue.datatype "CDATA" &gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.cursor.qname "cursor" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Conditional.attrib "" &gt;
&lt;!ENTITY % SVG.XLinkRequired.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Cursor.class .................................. --&gt;

&lt;!ENTITY % SVG.Cursor.extra.class "" &gt;

&lt;!ENTITY % SVG.Cursor.class
    "| %SVG.cursor.qname; %SVG.Cursor.extra.class;"
&gt;

&lt;!-- SVG.Cursor.attrib ................................. --&gt;

&lt;!ENTITY % SVG.Cursor.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Cursor.attrib
    "cursor %CursorValue.datatype; #IMPLIED
     %SVG.Cursor.extra.attrib;"
&gt;

&lt;!-- cursor: Cursor Element ............................ --&gt;

&lt;!ENTITY % SVG.cursor.extra.content "" &gt;

&lt;!ENTITY % SVG.cursor.element "INCLUDE" &gt;
&lt;![%SVG.cursor.element;[
&lt;!ENTITY % SVG.cursor.content
    "( %SVG.Description.class; %SVG.cursor.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.cursor.qname; %SVG.cursor.content; &gt;
&lt;!-- end of SVG.cursor.element --&gt;]]&gt;

&lt;!ENTITY % SVG.cursor.attlist "INCLUDE" &gt;
&lt;![%SVG.cursor.attlist;[
&lt;!ATTLIST %SVG.cursor.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.XLinkRequired.attrib;
    %SVG.External.attrib;
    x %Coordinate.datatype; #IMPLIED
    y %Coordinate.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.cursor.attlist --&gt;]]&gt;

&lt;!-- end of svg-cursor.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.35">A.3.35 Hyperlinking Module</h3>

<p>The Hyperlinking Module defines the Hyperlink.class element collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Hyperlink.class</td><td>a</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Hyperlinking Module ........................................... --&gt;
&lt;!-- file: svg-hyperlink.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Hyperlinking//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-hyperlink.mod"

     ....................................................................... --&gt;

&lt;!-- Hyperlinking

        a

     This module declares markup to provide support for hyper linking.
--&gt;

&lt;!-- link to this target --&gt;
&lt;!ENTITY % LinkTarget.datatype "NMTOKEN" &gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.a.qname "a" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Conditional.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Viewport.attrib "" &gt;
&lt;!ENTITY % SVG.Text.attrib "" &gt;
&lt;!ENTITY % SVG.TextContent.attrib "" &gt;
&lt;!ENTITY % SVG.Font.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.Marker.attrib "" &gt;
&lt;!ENTITY % SVG.Gradient.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib "" &gt;
&lt;!ENTITY % SVG.FilterColor.attrib "" &gt;
&lt;!ENTITY % SVG.GraphicalEvents.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.XLinkReplace.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Hyperlink.class ............................... --&gt;

&lt;!ENTITY % SVG.Hyperlink.extra.class "" &gt;

&lt;!ENTITY % SVG.Hyperlink.class
    "| %SVG.a.qname; %SVG.Hyperlink.extra.class;"
&gt;

&lt;!-- SVG.Presentation.attrib ........................... --&gt;

&lt;!ENTITY % SVG.Presentation.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Presentation.attrib
    "%SVG.Container.attrib;
     %SVG.Viewport.attrib;
     %SVG.Text.attrib;
     %SVG.TextContent.attrib;
     %SVG.Font.attrib;
     %SVG.Paint.attrib;
     %SVG.Color.attrib;
     %SVG.Opacity.attrib;
     %SVG.Graphics.attrib;
     %SVG.Marker.attrib;
     %SVG.ColorProfile.attrib;
     %SVG.Gradient.attrib;
     %SVG.Clip.attrib;
     %SVG.Mask.attrib;
     %SVG.Filter.attrib;
     %SVG.FilterColor.attrib;
     %SVG.Cursor.attrib;
     flood-color %SVGColor.datatype; #IMPLIED
     flood-opacity %OpacityValue.datatype; #IMPLIED
     lighting-color %SVGColor.datatype; #IMPLIED
     %SVG.Presentation.extra.attrib;"
&gt;

&lt;!-- a: Anchor Element ................................. --&gt;

&lt;!ENTITY % SVG.a.extra.content "" &gt;

&lt;!ENTITY % SVG.a.element "INCLUDE" &gt;
&lt;![%SVG.a.element;[
&lt;!ENTITY % SVG.a.content
    "( #PCDATA | %SVG.Description.class; | %SVG.Animation.class;
       %SVG.Structure.class; %SVG.Conditional.class; %SVG.Image.class;
       %SVG.Style.class; %SVG.Shape.class; %SVG.Text.class; %SVG.Marker.class;
       %SVG.ColorProfile.class; %SVG.Gradient.class; %SVG.Pattern.class;
       %SVG.Clip.class; %SVG.Mask.class; %SVG.Filter.class; %SVG.Cursor.class;
       %SVG.Hyperlink.class; %SVG.View.class; %SVG.Script.class;
       %SVG.Font.class; %SVG.Extensibility.class; %SVG.a.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.a.qname; %SVG.a.content; &gt;
&lt;!-- end of SVG.a.element --&gt;]]&gt;

&lt;!ENTITY % SVG.a.attlist "INCLUDE" &gt;
&lt;![%SVG.a.attlist;[
&lt;!ATTLIST %SVG.a.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.XLinkReplace.attrib;
    %SVG.External.attrib;
    transform %TransformList.datatype; #IMPLIED
    target %LinkTarget.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.a.attlist --&gt;]]&gt;

&lt;!-- end of svg-hyperlink.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.36">A.3.36 View Module</h3>

<p>The View Module defines the View.class element collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>View.class</td><td>view</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 View Module ................................................... --&gt;
&lt;!-- file: svg-view.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 View//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-view.mod"

     ....................................................................... --&gt;

&lt;!-- View

        view

     This module declares markup to provide support for view.
--&gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.view.qname "view" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.View.class .................................... --&gt;

&lt;!ENTITY % SVG.View.extra.class "" &gt;

&lt;!ENTITY % SVG.View.class
    "| %SVG.view.qname; %SVG.View.extra.class;"
&gt;

&lt;!-- view: View Element ................................ --&gt;

&lt;!ENTITY % SVG.view.extra.content "" &gt;

&lt;!ENTITY % SVG.view.element "INCLUDE" &gt;
&lt;![%SVG.view.element;[
&lt;!ENTITY % SVG.view.content
    "( %SVG.Description.class; %SVG.view.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.view.qname; %SVG.view.content; &gt;
&lt;!-- end of SVG.view.element --&gt;]]&gt;

&lt;!ENTITY % SVG.view.attlist "INCLUDE" &gt;
&lt;![%SVG.view.attlist;[
&lt;!ATTLIST %SVG.view.qname;
    %SVG.Core.attrib;
    %SVG.External.attrib;
    viewBox %ViewBoxSpec.datatype; #IMPLIED
    preserveAspectRatio %PreserveAspectRatioSpec.datatype; 'xMidYMid meet'
    zoomAndPan ( disable | magnify ) 'magnify'
    viewTarget CDATA #IMPLIED
&gt;
&lt;!-- end of SVG.view.attlist --&gt;]]&gt;

&lt;!-- end of svg-view.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.37">A.3.37 Scripting Module</h3>

<p>The Script Module defines the Script.class element collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Script.class</td><td>script</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Scripting Module .............................................. --&gt;
&lt;!-- file: svg-script.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Scripting//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-script.mod"

     ....................................................................... --&gt;

&lt;!-- Scripting

        script

     This module declares markup to provide support for scripting.
--&gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.script.qname "script" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.XLink.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Script.class .................................. --&gt;

&lt;!ENTITY % SVG.Script.extra.class "" &gt;

&lt;!ENTITY % SVG.Script.class
    "| %SVG.script.qname; %SVG.Script.extra.class;"
&gt;

&lt;!-- script: Script Element ............................ --&gt;

&lt;!ENTITY % SVG.script.extra.content "" &gt;

&lt;!ENTITY % SVG.script.element "INCLUDE" &gt;
&lt;![%SVG.script.element;[
&lt;!ENTITY % SVG.script.content
    "( #PCDATA %SVG.script.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.script.qname; %SVG.script.content; &gt;
&lt;!-- end of SVG.script.element --&gt;]]&gt;

&lt;!ENTITY % SVG.script.attlist "INCLUDE" &gt;
&lt;![%SVG.script.attlist;[
&lt;!ATTLIST %SVG.script.qname;
    %SVG.Core.attrib;
    %SVG.XLink.attrib;
    %SVG.External.attrib;
    type %ContentType.datatype; #REQUIRED
&gt;
&lt;!-- end of SVG.script.attlist --&gt;]]&gt;

&lt;!-- end of svg-script.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.38">A.3.38 Animation Module</h3>

<p>The Animation Module defines the Animation.class element collection and the Animation.attrib, AnimationAttribute.attrib, AnimationTiming.attrib, AnimationValue.attrib and AnimationAddtion.attrib attribute collections.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Animation.class</td><td>animate, animateColor, animateTransform, animateMotion, set</td></tr></table>

<table class="collection"><tr><th>Collection name</th><th>Attributes in collection</th></tr><tr><td>Animation.attrib</td><td>XLink.attrib</td></tr><tr><td>AnimationAttribute.attrib</td><td>attributeName, attributeType</td></tr><tr><td>AnimationTiming.attrib</td><td>begin, dur, end, min, max, restart, repeatCount, repeatDur, fill</td></tr><tr><td>AnimationValue.attrib</td><td>calcMode, values, keyTimes, keySplines, from, to, by</td></tr><tr><td>AnimationAddition.attrib</td><td>additive, accumulate</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Animation Module .............................................. --&gt;
&lt;!-- file: svg-animation.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Animation//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-animation.mod"

     ....................................................................... --&gt;

&lt;!-- Animation

        animate, set, animateMotion, animateColor, animateTransform, mpath

     This module declares markup to provide support for animation.
--&gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.animate.qname "animate" &gt;
&lt;!ENTITY % SVG.set.qname "set" &gt;
&lt;!ENTITY % SVG.animateMotion.qname "animateMotion" &gt;
&lt;!ENTITY % SVG.animateColor.qname "animateColor" &gt;
&lt;!ENTITY % SVG.animateTransform.qname "animateTransform" &gt;
&lt;!ENTITY % SVG.mpath.qname "mpath" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Conditional.attrib "" &gt;
&lt;!ENTITY % SVG.AnimationEvents.attrib "" &gt;
&lt;!ENTITY % SVG.XLink.attrib "" &gt;
&lt;!ENTITY % SVG.XLinkRequired.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Animation.class ............................... --&gt;

&lt;!ENTITY % SVG.Animation.extra.class "" &gt;

&lt;!ENTITY % SVG.Animation.class
    "%SVG.animate.qname; | %SVG.set.qname; | %SVG.animateMotion.qname; |
     %SVG.animateColor.qname; | %SVG.animateTransform.qname;
     %SVG.Animation.extra.class;"
&gt;

&lt;!-- SVG.Animation.attrib .............................. --&gt;

&lt;!ENTITY % SVG.Animation.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Animation.attrib
    "%SVG.XLink.attrib;
     %SVG.Animation.extra.attrib;"
&gt;

&lt;!-- SVG.AnimationAttribute.attrib ..................... --&gt;

&lt;!ENTITY % SVG.AnimationAttribute.extra.attrib "" &gt;

&lt;!ENTITY % SVG.AnimationAttribute.attrib
    "attributeName  CDATA  #REQUIRED
     attributeType  CDATA  #IMPLIED
     %SVG.AnimationAttribute.extra.attrib;"
&gt;

&lt;!-- SVG.AnimationTiming.attrib ........................ --&gt;

&lt;!ENTITY % SVG.AnimationTiming.extra.attrib "" &gt;

&lt;!ENTITY % SVG.AnimationTiming.attrib
    "begin CDATA #IMPLIED
     dur CDATA #IMPLIED
     end CDATA #IMPLIED
     min CDATA #IMPLIED
     max CDATA #IMPLIED
     restart ( always | never | whenNotActive ) 'always'
     repeatCount CDATA #IMPLIED
     repeatDur CDATA #IMPLIED
     fill ( remove | freeze ) 'remove'
     %SVG.AnimationTiming.extra.attrib;"
&gt;

&lt;!-- SVG.AnimationValue.attrib ......................... --&gt;

&lt;!ENTITY % SVG.AnimationValue.extra.attrib "" &gt;

&lt;!ENTITY % SVG.AnimationValue.attrib
    "calcMode ( discrete | linear | paced | spline ) 'linear'
     values CDATA #IMPLIED
     keyTimes CDATA #IMPLIED
     keySplines CDATA #IMPLIED
     from CDATA #IMPLIED
     to CDATA #IMPLIED
     by CDATA #IMPLIED
     %SVG.AnimationValue.extra.attrib;"
&gt;

&lt;!-- SVG.AnimationAddtion.attrib ....................... --&gt;

&lt;!ENTITY % SVG.AnimationAddtion.extra.attrib "" &gt;

&lt;!ENTITY % SVG.AnimationAddtion.attrib
    "additive ( replace | sum ) 'replace'
     accumulate ( none | sum ) 'none'
     %SVG.AnimationAddtion.extra.attrib;"
&gt;

&lt;!-- animate: Animate Element .......................... --&gt;

&lt;!ENTITY % SVG.animate.extra.content "" &gt;

&lt;!ENTITY % SVG.animate.element "INCLUDE" &gt;
&lt;![%SVG.animate.element;[
&lt;!ENTITY % SVG.animate.content
    "( %SVG.Description.class; %SVG.animate.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.animate.qname; %SVG.animate.content; &gt;
&lt;!-- end of SVG.animate.element --&gt;]]&gt;

&lt;!ENTITY % SVG.animate.attlist "INCLUDE" &gt;
&lt;![%SVG.animate.attlist;[
&lt;!ATTLIST %SVG.animate.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.AnimationEvents.attrib;
    %SVG.External.attrib;
    %SVG.Animation.attrib;
    %SVG.AnimationAttribute.attrib;
    %SVG.AnimationTiming.attrib;
    %SVG.AnimationValue.attrib;
    %SVG.AnimationAddtion.attrib;
&gt;
&lt;!-- end of SVG.animate.attlist --&gt;]]&gt;

&lt;!-- set: Set Element .................................. --&gt;

&lt;!ENTITY % SVG.set.extra.content "" &gt;

&lt;!ENTITY % SVG.set.element "INCLUDE" &gt;
&lt;![%SVG.set.element;[
&lt;!ENTITY % SVG.set.content
    "( %SVG.Description.class; %SVG.set.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.set.qname; %SVG.set.content; &gt;
&lt;!-- end of SVG.set.element --&gt;]]&gt;

&lt;!ENTITY % SVG.set.attlist "INCLUDE" &gt;
&lt;![%SVG.set.attlist;[
&lt;!ATTLIST %SVG.set.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.AnimationEvents.attrib;
    %SVG.External.attrib;
    %SVG.Animation.attrib;
    %SVG.AnimationAttribute.attrib;
    %SVG.AnimationTiming.attrib;
    to CDATA #IMPLIED
&gt;
&lt;!-- end of SVG.set.attlist --&gt;]]&gt;

&lt;!-- animateMotion: Animate Motion Element ............. --&gt;

&lt;!ENTITY % SVG.animateMotion.extra.content "" &gt;

&lt;!ENTITY % SVG.animateMotion.element "INCLUDE" &gt;
&lt;![%SVG.animateMotion.element;[
&lt;!ENTITY % SVG.animateMotion.content
    "( ( %SVG.mpath.qname;,
         ( %SVG.Description.class; %SVG.animateMotion.extra.content; )* )
       | ( ( %SVG.Description.class; %SVG.animateMotion.extra.content; )+,
           %SVG.mpath.qname;,
	   ( ( %SVG.Description.class; %SVG.animateMotion.extra.content; )* )? ) )"
&gt;
&lt;!ELEMENT %SVG.animateMotion.qname; %SVG.animateMotion.content; &gt;
&lt;!-- end of SVG.animateMotion.element --&gt;]]&gt;

&lt;!ENTITY % SVG.animateMotion.attlist "INCLUDE" &gt;
&lt;![%SVG.animateMotion.attlist;[
&lt;!ATTLIST %SVG.animateMotion.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.AnimationEvents.attrib;
    %SVG.External.attrib;
    %SVG.Animation.attrib;
    %SVG.AnimationTiming.attrib;
    %SVG.AnimationAddtion.attrib;
    calcMode ( discrete | linear | paced | spline ) 'paced'
    values CDATA #IMPLIED
    keyTimes CDATA #IMPLIED
    keySplines CDATA #IMPLIED
    from CDATA #IMPLIED
    to CDATA #IMPLIED
    by CDATA #IMPLIED
    path CDATA #IMPLIED
    keyPoints CDATA #IMPLIED
    rotate CDATA #IMPLIED
    origin CDATA #IMPLIED
&gt;
&lt;!-- end of SVG.animateMotion.attlist --&gt;]]&gt;

&lt;!-- animateColor: Animate Color Element ............... --&gt;

&lt;!ENTITY % SVG.animateColor.extra.content "" &gt;

&lt;!ENTITY % SVG.animateColor.element "INCLUDE" &gt;
&lt;![%SVG.animateColor.element;[
&lt;!ENTITY % SVG.animateColor.content
    "( %SVG.Description.class; %SVG.animateColor.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.animateColor.qname; %SVG.animateColor.content; &gt;
&lt;!-- end of SVG.animateColor.element --&gt;]]&gt;

&lt;!ENTITY % SVG.animateColor.attlist "INCLUDE" &gt;
&lt;![%SVG.animateColor.attlist;[
&lt;!ATTLIST %SVG.animateColor.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.AnimationEvents.attrib;
    %SVG.External.attrib;
    %SVG.Animation.attrib;
    %SVG.AnimationAttribute.attrib;
    %SVG.AnimationTiming.attrib;
    %SVG.AnimationValue.attrib;
    %SVG.AnimationAddtion.attrib;
&gt;
&lt;!-- end of SVG.animateColor.attlist --&gt;]]&gt;

&lt;!-- animateTransform: Animate Transform Element ....... --&gt;

&lt;!ENTITY % SVG.animateTransform.extra.content "" &gt;

&lt;!ENTITY % SVG.animateTransform.element "INCLUDE" &gt;
&lt;![%SVG.animateTransform.element;[
&lt;!ENTITY % SVG.animateTransform.content
    "( %SVG.Description.class; %SVG.animateTransform.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.animateTransform.qname; %SVG.animateTransform.content; &gt;
&lt;!-- end of SVG.animateTransform.element --&gt;]]&gt;

&lt;!ENTITY % SVG.animateTransform.attlist "INCLUDE" &gt;
&lt;![%SVG.animateTransform.attlist;[
&lt;!ATTLIST %SVG.animateTransform.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.AnimationEvents.attrib;
    %SVG.External.attrib;
    %SVG.Animation.attrib;
    %SVG.AnimationAttribute.attrib;
    %SVG.AnimationTiming.attrib;
    %SVG.AnimationValue.attrib;
    %SVG.AnimationAddtion.attrib;
    type ( translate | scale | rotate | skewX | skewY ) 'translate'
&gt;
&lt;!-- end of SVG.animateTransform.attlist --&gt;]]&gt;

&lt;!-- mpath: Motion Path Element ........................ --&gt;

&lt;!ENTITY % SVG.mpath.extra.content "" &gt;

&lt;!ENTITY % SVG.mpath.element "INCLUDE" &gt;
&lt;![%SVG.mpath.element;[
&lt;!ENTITY % SVG.mpath.content
    "( %SVG.Description.class; %SVG.mpath.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.mpath.qname; %SVG.mpath.content; &gt;
&lt;!-- end of SVG.mpath.element --&gt;]]&gt;

&lt;!ENTITY % SVG.mpath.attlist "INCLUDE" &gt;
&lt;![%SVG.mpath.attlist;[
&lt;!ATTLIST %SVG.mpath.qname;
    %SVG.Core.attrib;
    %SVG.XLinkRequired.attrib;
    %SVG.External.attrib;
&gt;
&lt;!-- end of SVG.mpath.attlist --&gt;]]&gt;

&lt;!-- end of svg-animation.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.39">A.3.39 Font Module</h3>

<p>The Font Module defines the Font.class element collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Font.class</td><td>font, font-face</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Font Module ................................................... --&gt;
&lt;!-- file: svg-font.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Font//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-font.mod"

     ....................................................................... --&gt;

&lt;!-- Font

        font, font-face, glyph, missing-glyph, hkern, vkern, font-face-src,
        font-face-uri, font-face-format, font-face-name

     This module declares markup to provide support for template.
--&gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.font.qname "font" &gt;
&lt;!ENTITY % SVG.font-face.qname "font-face" &gt;
&lt;!ENTITY % SVG.glyph.qname "glyph" &gt;
&lt;!ENTITY % SVG.missing-glyph.qname "missing-glyph" &gt;
&lt;!ENTITY % SVG.hkern.qname "hkern" &gt;
&lt;!ENTITY % SVG.vkern.qname "vkern" &gt;
&lt;!ENTITY % SVG.font-face-src.qname "font-face-src" &gt;
&lt;!ENTITY % SVG.font-face-uri.qname "font-face-uri" &gt;
&lt;!ENTITY % SVG.font-face-format.qname "font-face-format" &gt;
&lt;!ENTITY % SVG.font-face-name.qname "font-face-name" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Container.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Viewport.attrib "" &gt;
&lt;!ENTITY % SVG.Text.attrib "" &gt;
&lt;!ENTITY % SVG.TextContent.attrib "" &gt;
&lt;!ENTITY % SVG.Font.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.Marker.attrib "" &gt;
&lt;!ENTITY % SVG.ColorProfile.attrib "" &gt;
&lt;!ENTITY % SVG.Gradient.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib "" &gt;
&lt;!ENTITY % SVG.FilterColor.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.XLinkRequired.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Font.class .................................... --&gt;

&lt;!ENTITY % SVG.Font.extra.class "" &gt;

&lt;!ENTITY % SVG.Font.class
    "| %SVG.font.qname; | %SVG.font-face.qname; %SVG.Font.extra.class;"
&gt;

&lt;!-- SVG.Presentation.attrib ........................... --&gt;

&lt;!ENTITY % SVG.Presentation.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Presentation.attrib
    "%SVG.Container.attrib;
     %SVG.Viewport.attrib;
     %SVG.Text.attrib;
     %SVG.TextContent.attrib;
     %SVG.Font.attrib;
     %SVG.Paint.attrib;
     %SVG.Color.attrib;
     %SVG.Opacity.attrib;
     %SVG.Graphics.attrib;
     %SVG.Marker.attrib;
     %SVG.ColorProfile.attrib;
     %SVG.Gradient.attrib;
     %SVG.Clip.attrib;
     %SVG.Mask.attrib;
     %SVG.Filter.attrib;
     %SVG.FilterColor.attrib;
     %SVG.Cursor.attrib;
     flood-color %SVGColor.datatype; #IMPLIED
     flood-opacity %OpacityValue.datatype; #IMPLIED
     lighting-color %SVGColor.datatype; #IMPLIED
     %SVG.Presentation.extra.attrib;"
&gt;

&lt;!-- font: Font Element ................................ --&gt;

&lt;!ENTITY % SVG.font.extra.content "" &gt;

&lt;!ENTITY % SVG.font.element "INCLUDE" &gt;
&lt;![%SVG.font.element;[
&lt;!ENTITY % SVG.font.content
    "( %SVG.Description.class; | %SVG.font-face.qname;
     | %SVG.missing-glyph.qname; | %SVG.glyph.qname; | %SVG.hkern.qname;
     | %SVG.vkern.qname; %SVG.font.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.font.qname; %SVG.font.content; &gt;
&lt;!-- end of SVG.font.element --&gt;]]&gt;

&lt;!ENTITY % SVG.font.attlist "INCLUDE" &gt;
&lt;![%SVG.font.attlist;[
&lt;!ATTLIST %SVG.font.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.External.attrib;
    horiz-origin-x %Number.datatype; #IMPLIED
    horiz-origin-y %Number.datatype; #IMPLIED
    horiz-adv-x %Number.datatype; #REQUIRED
    vert-origin-x %Number.datatype; #IMPLIED
    vert-origin-y %Number.datatype; #IMPLIED
    vert-adv-y %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.font.attlist --&gt;]]&gt;

&lt;!-- font-face: Font Face Element ...................... --&gt;

&lt;!ENTITY % SVG.font-face.extra.content "" &gt;

&lt;!ENTITY % SVG.font-face.element "INCLUDE" &gt;
&lt;![%SVG.font-face.element;[
&lt;!ENTITY % SVG.font-face.content
    "( ( %SVG.font-face-src.qname;,
         ( %SVG.Description.class; %SVG.font-face.extra.content; )* )
       | ( ( %SVG.Description.class; %SVG.font-face.extra.content; )+,
           %SVG.font-face-src.qname;,
	   ( ( %SVG.Description.class; %SVG.font-face.extra.content; )* )? ) )"
&gt;
&lt;!ELEMENT %SVG.font-face.qname; %SVG.font-face.content; &gt;
&lt;!-- end of SVG.font-face.element --&gt;]]&gt;

&lt;!ENTITY % SVG.font-face.attlist "INCLUDE" &gt;
&lt;![%SVG.font-face.attlist;[
&lt;!ATTLIST %SVG.font-face.qname;
    %SVG.Core.attrib;
    font-family CDATA #IMPLIED
    font-style CDATA #IMPLIED
    font-variant CDATA #IMPLIED
    font-weight CDATA #IMPLIED
    font-stretch CDATA #IMPLIED
    font-size CDATA #IMPLIED
    unicode-range CDATA #IMPLIED
    units-per-em %Number.datatype; #IMPLIED
    panose-1 CDATA #IMPLIED
    stemv %Number.datatype; #IMPLIED
    stemh %Number.datatype; #IMPLIED
    slope %Number.datatype; #IMPLIED
    cap-height %Number.datatype; #IMPLIED
    x-height %Number.datatype; #IMPLIED
    accent-height %Number.datatype; #IMPLIED
    ascent %Number.datatype; #IMPLIED
    descent %Number.datatype; #IMPLIED
    widths CDATA #IMPLIED
    bbox CDATA #IMPLIED
    ideographic %Number.datatype; #IMPLIED
    alphabetic %Number.datatype; #IMPLIED
    mathematical %Number.datatype; #IMPLIED
    hanging %Number.datatype; #IMPLIED
    v-ideographic %Number.datatype; #IMPLIED
    v-alphabetic %Number.datatype; #IMPLIED
    v-mathematical %Number.datatype; #IMPLIED
    v-hanging %Number.datatype; #IMPLIED
    underline-position %Number.datatype; #IMPLIED
    underline-thickness %Number.datatype; #IMPLIED
    strikethrough-position %Number.datatype; #IMPLIED
    strikethrough-thickness %Number.datatype; #IMPLIED
    overline-position %Number.datatype; #IMPLIED
    overline-thickness %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.font-face.attlist --&gt;]]&gt;

&lt;!-- glyph: Glyph Element .............................. --&gt;

&lt;!ENTITY % SVG.glyph.extra.content "" &gt;

&lt;!ENTITY % SVG.glyph.element "INCLUDE" &gt;
&lt;![%SVG.glyph.element;[
&lt;!ENTITY % SVG.glyph.content
    "( %SVG.Description.class; | %SVG.Animation.class; %SVG.Structure.class;
       %SVG.Conditional.class; %SVG.Image.class; %SVG.Style.class;
       %SVG.Shape.class; %SVG.Text.class; %SVG.Marker.class;
       %SVG.ColorProfile.class; %SVG.Gradient.class; %SVG.Pattern.class;
       %SVG.Clip.class; %SVG.Mask.class; %SVG.Filter.class; %SVG.Cursor.class;
       %SVG.Hyperlink.class; %SVG.View.class; %SVG.Script.class;
       %SVG.Font.class; %SVG.Extensibility.class; %SVG.glyph.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.glyph.qname; %SVG.glyph.content; &gt;
&lt;!-- end of SVG.glyph.element --&gt;]]&gt;

&lt;!ENTITY % SVG.glyph.attlist "INCLUDE" &gt;
&lt;![%SVG.glyph.attlist;[
&lt;!ATTLIST %SVG.glyph.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    unicode CDATA #IMPLIED
    glyph-name CDATA #IMPLIED
    d %PathData.datatype; #IMPLIED
    orientation CDATA #IMPLIED
    arabic-form CDATA #IMPLIED
    lang %LanguageCodes.datatype; #IMPLIED
    horiz-adv-x %Number.datatype; #IMPLIED
    vert-origin-x %Number.datatype; #IMPLIED
    vert-origin-y %Number.datatype; #IMPLIED
    vert-adv-y %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.glyph.attlist --&gt;]]&gt;

&lt;!-- missing-glyph: Missing Glyph Element .............. --&gt;

&lt;!ENTITY % SVG.missing-glyph.extra.content "" &gt;

&lt;!ENTITY % SVG.missing-glyph.element "INCLUDE" &gt;
&lt;![%SVG.missing-glyph.element;[
&lt;!ENTITY % SVG.missing-glyph.content
    "( %SVG.Description.class; | %SVG.Animation.class; %SVG.Structure.class;
       %SVG.Conditional.class; %SVG.Image.class; %SVG.Style.class;
       %SVG.Shape.class; %SVG.Text.class; %SVG.Marker.class;
       %SVG.ColorProfile.class; %SVG.Gradient.class; %SVG.Pattern.class;
       %SVG.Clip.class; %SVG.Mask.class; %SVG.Filter.class; %SVG.Cursor.class;
       %SVG.Hyperlink.class; %SVG.View.class; %SVG.Script.class;
       %SVG.Font.class; %SVG.Extensibility.class; %SVG.missing-glyph.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.missing-glyph.qname; %SVG.missing-glyph.content; &gt;
&lt;!-- end of SVG.missing-glyph.element --&gt;]]&gt;

&lt;!ENTITY % SVG.missing-glyph.attlist "INCLUDE" &gt;
&lt;![%SVG.missing-glyph.attlist;[
&lt;!ATTLIST %SVG.missing-glyph.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    d %PathData.datatype; #IMPLIED
    horiz-adv-x %Number.datatype; #IMPLIED
    vert-origin-x %Number.datatype; #IMPLIED
    vert-origin-y %Number.datatype; #IMPLIED
    vert-adv-y %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.missing-glyph.attlist --&gt;]]&gt;

&lt;!-- hkern: Horizontal Kerning Element ................. --&gt;

&lt;!ENTITY % SVG.hkern.element "INCLUDE" &gt;
&lt;![%SVG.hkern.element;[
&lt;!ENTITY % SVG.hkern.content "EMPTY" &gt;
&lt;!ELEMENT %SVG.hkern.qname; %SVG.hkern.content; &gt;
&lt;!-- end of SVG.hkern.element --&gt;]]&gt;

&lt;!ENTITY % SVG.hkern.attlist "INCLUDE" &gt;
&lt;![%SVG.hkern.attlist;[
&lt;!ATTLIST %SVG.hkern.qname;
    %SVG.Core.attrib;
    u1 CDATA #IMPLIED
    g1 CDATA #IMPLIED
    u2 CDATA #IMPLIED
    g2 CDATA #IMPLIED
    k %Number.datatype; #REQUIRED
&gt;
&lt;!-- end of SVG.hkern.attlist --&gt;]]&gt;

&lt;!-- vkern: Vertical Kerning Element ................... --&gt;

&lt;!ENTITY % SVG.vkern.element "INCLUDE" &gt;
&lt;![%SVG.vkern.element;[
&lt;!ENTITY % SVG.vkern.content "EMPTY" &gt;
&lt;!ELEMENT %SVG.vkern.qname; %SVG.vkern.content; &gt;
&lt;!-- end of SVG.vkern.element --&gt;]]&gt;

&lt;!ENTITY % SVG.vkern.attlist "INCLUDE" &gt;
&lt;![%SVG.vkern.attlist;[
&lt;!ATTLIST %SVG.vkern.qname;
    %SVG.Core.attrib;
    u1 CDATA #IMPLIED
    g1 CDATA #IMPLIED
    u2 CDATA #IMPLIED
    g2 CDATA #IMPLIED
    k %Number.datatype; #REQUIRED
&gt;
&lt;!-- end of SVG.vkern.attlist --&gt;]]&gt;

&lt;!-- font-face-src: Font Face Source Element ........... --&gt;

&lt;!ENTITY % SVG.font-face-src.extra.content "" &gt;

&lt;!ENTITY % SVG.font-face-src.element "INCLUDE" &gt;
&lt;![%SVG.font-face-src.element;[
&lt;!ENTITY % SVG.font-face-src.content
    "( %SVG.font-face-uri.qname; | %SVG.font-face-name.qname;
       %SVG.font-face-src.extra.content; )+"
&gt;
&lt;!ELEMENT %SVG.font-face-src.qname; %SVG.font-face-src.content; &gt;
&lt;!-- end of SVG.font-face-src.element --&gt;]]&gt;

&lt;!ENTITY % SVG.font-face-src.attlist "INCLUDE" &gt;
&lt;![%SVG.font-face-src.attlist;[
&lt;!ATTLIST %SVG.font-face-src.qname;
    %SVG.Core.attrib;
&gt;
&lt;!-- end of SVG.font-face-src.attlist --&gt;]]&gt;

&lt;!-- font-face-uri: Font Face URI Element .............. --&gt;

&lt;!ENTITY % SVG.font-face-uri.extra.content "" &gt;

&lt;!ENTITY % SVG.font-face-uri.element "INCLUDE" &gt;
&lt;![%SVG.font-face-uri.element;[
&lt;!ENTITY % SVG.font-face-uri.content
    "( %SVG.font-face-format.qname; %SVG.font-face-uri.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.font-face-uri.qname; %SVG.font-face-uri.content; &gt;
&lt;!-- end of SVG.font-face-uri.element --&gt;]]&gt;

&lt;!ENTITY % SVG.font-face-uri.attlist "INCLUDE" &gt;
&lt;![%SVG.font-face-uri.attlist;[
&lt;!ATTLIST %SVG.font-face-uri.qname;
    %SVG.Core.attrib;
    %SVG.XLinkRequired.attrib;
&gt;
&lt;!-- end of SVG.font-face-uri.attlist --&gt;]]&gt;

&lt;!-- font-face-format: Font Face Format Element ........ --&gt;

&lt;!ENTITY % SVG.font-face-format.element "INCLUDE" &gt;
&lt;![%SVG.font-face-format.element;[
&lt;!ENTITY % SVG.font-face-format.content "EMPTY" &gt;
&lt;!ELEMENT %SVG.font-face-format.qname; %SVG.font-face-format.content; &gt;
&lt;!-- end of SVG.font-face-format.element --&gt;]]&gt;

&lt;!ENTITY % SVG.font-face-format.attlist "INCLUDE" &gt;
&lt;![%SVG.font-face-format.attlist;[
&lt;!ATTLIST %SVG.font-face-format.qname;
    %SVG.Core.attrib;
    string CDATA #IMPLIED
&gt;
&lt;!-- end of SVG.font-face-format.attlist --&gt;]]&gt;

&lt;!-- font-face-name: Font Face Name Element ............ --&gt;

&lt;!ENTITY % SVG.font-face-name.element "INCLUDE" &gt;
&lt;![%SVG.font-face-name.element;[
&lt;!ENTITY % SVG.font-face-name.content "EMPTY" &gt;
&lt;!ELEMENT %SVG.font-face-name.qname; %SVG.font-face-name.content; &gt;
&lt;!-- end of SVG.font-face-name.element --&gt;]]&gt;

&lt;!ENTITY % SVG.font-face-name.attlist "INCLUDE" &gt;
&lt;![%SVG.font-face-name.attlist;[
&lt;!ATTLIST %SVG.font-face-name.qname;
    %SVG.Core.attrib;
    name CDATA #IMPLIED
&gt;
&lt;!-- end of SVG.font-face-name.attlist --&gt;]]&gt;

&lt;!-- end of svg-font.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.40">A.3.40 Basic Font Module</h3>

<p>The Basic Font Module defines the Font.class element collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Font.class</td><td>font, font-face</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Basic Font Module ............................................. --&gt;
&lt;!-- file: svg-basic-font.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Basic Font//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-basic-font.mod"

     ....................................................................... --&gt;

&lt;!-- Basic Font

        font, font-face, glyph, missing-glyph, hkern, font-face-src,
        font-face-name

     This module declares markup to provide support for template.
--&gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.font.qname "font" &gt;
&lt;!ENTITY % SVG.font-face.qname "font-face" &gt;
&lt;!ENTITY % SVG.glyph.qname "glyph" &gt;
&lt;!ENTITY % SVG.missing-glyph.qname "missing-glyph" &gt;
&lt;!ENTITY % SVG.hkern.qname "hkern" &gt;
&lt;!ENTITY % SVG.font-face-src.qname "font-face-src" &gt;
&lt;!ENTITY % SVG.font-face-name.qname "font-face-name" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Container.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Viewport.attrib "" &gt;
&lt;!ENTITY % SVG.Text.attrib "" &gt;
&lt;!ENTITY % SVG.TextContent.attrib "" &gt;
&lt;!ENTITY % SVG.Font.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.Marker.attrib "" &gt;
&lt;!ENTITY % SVG.ColorProfile.attrib "" &gt;
&lt;!ENTITY % SVG.Gradient.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib "" &gt;
&lt;!ENTITY % SVG.FilterColor.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.XLinkRequired.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Font.class .................................... --&gt;

&lt;!ENTITY % SVG.Font.extra.class "" &gt;

&lt;!ENTITY % SVG.Font.class
    "| %SVG.font.qname; | %SVG.font-face.qname; %SVG.Font.extra.class;"
&gt;

&lt;!-- font: Font Element ................................ --&gt;

&lt;!ENTITY % SVG.font.extra.content "" &gt;

&lt;!ENTITY % SVG.font.element "INCLUDE" &gt;
&lt;![%SVG.font.element;[
&lt;!ENTITY % SVG.font.content
    "( %SVG.Description.class; | %SVG.font-face.qname;
     | %SVG.missing-glyph.qname; | %SVG.glyph.qname; | %SVG.hkern.qname;
       %SVG.font.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.font.qname; %SVG.font.content; &gt;
&lt;!-- end of SVG.font.element --&gt;]]&gt;

&lt;!ENTITY % SVG.font.attlist "INCLUDE" &gt;
&lt;![%SVG.font.attlist;[
&lt;!ATTLIST %SVG.font.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    %SVG.External.attrib;
    horiz-origin-x %Number.datatype; #IMPLIED
    horiz-adv-x %Number.datatype; #REQUIRED
&gt;
&lt;!-- end of SVG.font.attlist --&gt;]]&gt;

&lt;!-- font-face: Font Face Element ...................... --&gt;

&lt;!ENTITY % SVG.font-face.extra.content "" &gt;

&lt;!ENTITY % SVG.font-face.element "INCLUDE" &gt;
&lt;![%SVG.font-face.element;[
&lt;!ENTITY % SVG.font-face.content
    "( ( %SVG.font-face-src.qname;,
         ( %SVG.Description.class; %SVG.font-face.extra.content; )* )
       | ( ( %SVG.Description.class; %SVG.font-face.extra.content; )+,
           %SVG.font-face-src.qname;,
	   ( ( %SVG.Description.class; %SVG.font-face.extra.content; )* )? ) )"
&gt;
&lt;!ELEMENT %SVG.font-face.qname; %SVG.font-face.content; &gt;
&lt;!-- end of SVG.font-face.element --&gt;]]&gt;

&lt;!ENTITY % SVG.font-face.attlist "INCLUDE" &gt;
&lt;![%SVG.font-face.attlist;[
&lt;!ATTLIST %SVG.font-face.qname;
    %SVG.Core.attrib;
    font-family CDATA #IMPLIED
    font-style CDATA #IMPLIED
    font-variant CDATA #IMPLIED
    font-weight CDATA #IMPLIED
    font-stretch CDATA #IMPLIED
    font-size CDATA #IMPLIED
    unicode-range CDATA #IMPLIED
    units-per-em %Number.datatype; #IMPLIED
    panose-1 CDATA #IMPLIED
    stemv %Number.datatype; #IMPLIED
    stemh %Number.datatype; #IMPLIED
    slope %Number.datatype; #IMPLIED
    cap-height %Number.datatype; #IMPLIED
    x-height %Number.datatype; #IMPLIED
    accent-height %Number.datatype; #IMPLIED
    ascent %Number.datatype; #IMPLIED
    descent %Number.datatype; #IMPLIED
    widths CDATA #IMPLIED
    bbox CDATA #IMPLIED
    ideographic %Number.datatype; #IMPLIED
    alphabetic %Number.datatype; #IMPLIED
    mathematical %Number.datatype; #IMPLIED
    hanging %Number.datatype; #IMPLIED
    underline-position %Number.datatype; #IMPLIED
    underline-thickness %Number.datatype; #IMPLIED
    strikethrough-position %Number.datatype; #IMPLIED
    strikethrough-thickness %Number.datatype; #IMPLIED
    overline-position %Number.datatype; #IMPLIED
    overline-thickness %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.font-face.attlist --&gt;]]&gt;

&lt;!-- glyph: Glyph Element .............................. --&gt;

&lt;!ENTITY % SVG.glyph.extra.content "" &gt;

&lt;!ENTITY % SVG.glyph.element "INCLUDE" &gt;
&lt;![%SVG.glyph.element;[
&lt;!ENTITY % SVG.glyph.content
    "( %SVG.Description.class; %SVG.glyph.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.glyph.qname; %SVG.glyph.content; &gt;
&lt;!-- end of SVG.glyph.element --&gt;]]&gt;

&lt;!ENTITY % SVG.glyph.attlist "INCLUDE" &gt;
&lt;![%SVG.glyph.attlist;[
&lt;!ATTLIST %SVG.glyph.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    unicode CDATA #IMPLIED
    glyph-name CDATA #IMPLIED
    d %PathData.datatype; #IMPLIED
    arabic-form CDATA #IMPLIED
    lang %LanguageCodes.datatype; #IMPLIED
    horiz-adv-x %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.glyph.attlist --&gt;]]&gt;

&lt;!-- missing-glyph: Missing Glyph Element .............. --&gt;

&lt;!ENTITY % SVG.missing-glyph.extra.content "" &gt;

&lt;!ENTITY % SVG.missing-glyph.element "INCLUDE" &gt;
&lt;![%SVG.missing-glyph.element;[
&lt;!ENTITY % SVG.missing-glyph.content
    "( %SVG.Description.class; %SVG.missing-glyph.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.missing-glyph.qname; %SVG.missing-glyph.content; &gt;
&lt;!-- end of SVG.missing-glyph.element --&gt;]]&gt;

&lt;!ENTITY % SVG.missing-glyph.attlist "INCLUDE" &gt;
&lt;![%SVG.missing-glyph.attlist;[
&lt;!ATTLIST %SVG.missing-glyph.qname;
    %SVG.Core.attrib;
    %SVG.Style.attrib;
    d %PathData.datatype; #IMPLIED
    horiz-adv-x %Number.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.missing-glyph.attlist --&gt;]]&gt;

&lt;!-- hkern: Horizontal Kerning Element ................. --&gt;

&lt;!ENTITY % SVG.hkern.element "INCLUDE" &gt;
&lt;![%SVG.hkern.element;[
&lt;!ENTITY % SVG.hkern.content "EMPTY" &gt;
&lt;!ELEMENT %SVG.hkern.qname; %SVG.hkern.content; &gt;
&lt;!-- end of SVG.hkern.element --&gt;]]&gt;

&lt;!ENTITY % SVG.hkern.attlist "INCLUDE" &gt;
&lt;![%SVG.hkern.attlist;[
&lt;!ATTLIST %SVG.hkern.qname;
    %SVG.Core.attrib;
    u1 CDATA #IMPLIED
    g1 CDATA #IMPLIED
    u2 CDATA #IMPLIED
    g2 CDATA #IMPLIED
    k %Number.datatype; #REQUIRED
&gt;
&lt;!-- end of SVG.hkern.attlist --&gt;]]&gt;

&lt;!-- font-face-src: Font Face Source Element ........... --&gt;

&lt;!ENTITY % SVG.font-face-src.extra.content "" &gt;

&lt;!ENTITY % SVG.font-face-src.element "INCLUDE" &gt;
&lt;![%SVG.font-face-src.element;[
&lt;!ENTITY % SVG.font-face-src.content
    "( %SVG.font-face-name.qname; %SVG.font-face-src.extra.content; )+"
&gt;
&lt;!ELEMENT %SVG.font-face-src.qname; %SVG.font-face-src.content; &gt;
&lt;!-- end of SVG.font-face-src.element --&gt;]]&gt;

&lt;!ENTITY % SVG.font-face-src.attlist "INCLUDE" &gt;
&lt;![%SVG.font-face-src.attlist;[
&lt;!ATTLIST %SVG.font-face-src.qname;
    %SVG.Core.attrib;
&gt;
&lt;!-- end of SVG.font-face-src.attlist --&gt;]]&gt;

&lt;!-- font-face-name: Font Face Name Element ............ --&gt;

&lt;!ENTITY % SVG.font-face-name.element "INCLUDE" &gt;
&lt;![%SVG.font-face-name.element;[
&lt;!ENTITY % SVG.font-face-name.content "EMPTY" &gt;
&lt;!ELEMENT %SVG.font-face-name.qname; %SVG.font-face-name.content; &gt;
&lt;!-- end of SVG.font-face-name.element --&gt;]]&gt;

&lt;!ENTITY % SVG.font-face-name.attlist "INCLUDE" &gt;
&lt;![%SVG.font-face-name.attlist;[
&lt;!ATTLIST %SVG.font-face-name.qname;
    %SVG.Core.attrib;
    name CDATA #IMPLIED
&gt;
&lt;!-- end of SVG.font-face-name.attlist --&gt;]]&gt;

&lt;!-- end of svg-basic-font.mod --&gt;</pre>

<h3 id="svgdtd-DTD.1.41">A.3.41 Extensibility Module</h3>

<p>The Extensibility Module defines the Extensibility.class element collection.</p>

<table class="collection"><tr><th>Collection name</th><th>Elements in collection</th></tr><tr><td>Extensibility.class</td><td>foreignObject</td></tr></table>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Extensibility Module .......................................... --&gt;
&lt;!-- file: svg-extensibility.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ELEMENTS SVG 1.1 Extensibility//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg-extensibility.mod"

     ....................................................................... --&gt;

&lt;!-- Extensibility

        foreignObject

     This module declares markup to provide support for extensibility.
--&gt;

&lt;!-- Qualified Names (Default) ......................... --&gt;

&lt;!ENTITY % SVG.foreignObject.qname "foreignObject" &gt;

&lt;!-- Attribute Collections (Default) ................... --&gt;

&lt;!ENTITY % SVG.Core.attrib "" &gt;
&lt;!ENTITY % SVG.Conditional.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib "" &gt;
&lt;!ENTITY % SVG.Viewport.attrib "" &gt;
&lt;!ENTITY % SVG.Text.attrib "" &gt;
&lt;!ENTITY % SVG.TextContent.attrib "" &gt;
&lt;!ENTITY % SVG.Font.attrib "" &gt;
&lt;!ENTITY % SVG.Paint.attrib "" &gt;
&lt;!ENTITY % SVG.Color.attrib "" &gt;
&lt;!ENTITY % SVG.Opacity.attrib "" &gt;
&lt;!ENTITY % SVG.Graphics.attrib "" &gt;
&lt;!ENTITY % SVG.Marker.attrib "" &gt;
&lt;!ENTITY % SVG.Gradient.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib "" &gt;
&lt;!ENTITY % SVG.FilterColor.attrib "" &gt;
&lt;!ENTITY % SVG.GraphicalEvents.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib "" &gt;
&lt;!ENTITY % SVG.External.attrib "" &gt;

&lt;!-- SVG.Extensibility.class ........................... --&gt;

&lt;!ENTITY % SVG.Extensibility.extra.class "" &gt;

&lt;!ENTITY % SVG.Extensibility.class
    "| %SVG.foreignObject.qname; %SVG.Extensibility.extra.class;"
&gt;

&lt;!-- SVG.Presentation.attrib ........................... --&gt;

&lt;!ENTITY % SVG.Presentation.extra.attrib "" &gt;

&lt;!ENTITY % SVG.Presentation.attrib
    "%SVG.Container.attrib;
     %SVG.Viewport.attrib;
     %SVG.Text.attrib;
     %SVG.TextContent.attrib;
     %SVG.Font.attrib;
     %SVG.Paint.attrib;
     %SVG.Color.attrib;
     %SVG.Opacity.attrib;
     %SVG.Graphics.attrib;
     %SVG.Marker.attrib;
     %SVG.ColorProfile.attrib;
     %SVG.Gradient.attrib;
     %SVG.Clip.attrib;
     %SVG.Mask.attrib;
     %SVG.Filter.attrib;
     %SVG.FilterColor.attrib;
     %SVG.Cursor.attrib;
     flood-color %SVGColor.datatype; #IMPLIED
     flood-opacity %OpacityValue.datatype; #IMPLIED
     lighting-color %SVGColor.datatype; #IMPLIED
     %SVG.Presentation.extra.attrib;"
&gt;

&lt;!-- foreignObject: Foreign Object Element ............. --&gt;

&lt;!ENTITY % SVG.foreignObject.extra.content "" &gt;

&lt;!ENTITY % SVG.foreignObject.element "INCLUDE" &gt;
&lt;![%SVG.foreignObject.element;[
&lt;!ENTITY % SVG.foreignObject.content
    "( #PCDATA %SVG.foreignObject.extra.content; )*"
&gt;
&lt;!ELEMENT %SVG.foreignObject.qname; %SVG.foreignObject.content; &gt;
&lt;!-- end of SVG.foreignObject.element --&gt;]]&gt;

&lt;!ENTITY % SVG.foreignObject.attlist "INCLUDE" &gt;
&lt;![%SVG.foreignObject.attlist;[
&lt;!ATTLIST %SVG.foreignObject.qname;
    %SVG.Core.attrib;
    %SVG.Conditional.attrib;
    %SVG.Style.attrib;
    %SVG.Presentation.attrib;
    %SVG.GraphicalEvents.attrib;
    %SVG.External.attrib;
    x %Coordinate.datatype; #IMPLIED
    y %Coordinate.datatype; #IMPLIED
    width %Length.datatype; #REQUIRED
    height %Length.datatype; #REQUIRED
    transform %TransformList.datatype; #IMPLIED
&gt;
&lt;!-- end of SVG.foreignObject.attlist --&gt;]]&gt;

&lt;!-- end of svg-extensibility.mod --&gt;</pre>

<h2 id="svgdtd-DTD.2">A.4 SVG 1.1 Document Type Definition</h2>

<h3 id="svgdtd-DTD.2.1">A.4.1 SVG 1.1 DTD Driver</h3>

<p>This section contains the DTD driver for the SVG 1.1
document type implementation as an XML DTD. It relies upon SVG
1.1 module implementations defined in <a href="#svgdtd-DTD.1">Section A.3</a>.</p>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 DTD ........................................................... --&gt;
&lt;!-- file: svg11.dtd
--&gt;

&lt;!-- SVG 1.1 DTD

     This is SVG, a language for describing two-dimensional graphics in XML.

     The Scalable Vector Graphics (SVG)
     Copyright 2001, 2002, 2011 World Wide Web Consortium
        (Massachusetts Institute of Technology, Institut National de
         Recherche en Informatique et en Automatique, Keio University).
         All Rights Reserved.

     Permission to use, copy, modify and distribute the SVG DTD and its
     accompanying documentation for any purpose and without fee is hereby
     granted in perpetuity, provided that the above copyright notice and
     this paragraph appear in all copies.  The copyright holders make no
     representation about the suitability of the DTD for any purpose.

     It is provided "as is" without expressed or implied warranty.

        Author:   Jun Fujisawa &lt;fujisawa.jun@canon.co.jp&gt;
        Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

--&gt;
&lt;!-- This is the driver file for version 1.1 of the SVG DTD.

     This DTD is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//DTD SVG 1.1//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"
--&gt;
&lt;!ENTITY % SVG.version "-//W3C//DTD SVG 1.1//EN" &gt;

&lt;!-- Use this URI to identify the default namespace:

        "http://www.w3.org/2000/svg"

     See the Qualified Names module for information
     on the use of namespace prefixes in the DTD.
--&gt;
&lt;!ENTITY % NS.prefixed "IGNORE" &gt;
&lt;!ENTITY % SVG.prefix "" &gt;

&lt;!-- reserved for future use with document profiles --&gt;
&lt;!ENTITY % SVG.profile "" &gt;

&lt;!-- ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: --&gt;

&lt;!-- Pre-Framework Redeclaration Placeholder ..................... --&gt;
&lt;!ENTITY % svg-prefw-redecl.module "IGNORE" &gt;
&lt;![%svg-prefw-redecl.module;[
%svg-prefw-redecl.mod;]]&gt;

&lt;!-- Document Model Module ....................................... --&gt;
&lt;!ENTITY % svg-model.mod
    PUBLIC "-//W3C//ENTITIES SVG 1.1 Document Model//EN"
           "svg11-model.mod" &gt;

&lt;!-- Attribute Collection Module ................................. --&gt;
&lt;!ENTITY % svg-attribs.mod
    PUBLIC "-//W3C//ENTITIES SVG 1.1 Attribute Collection//EN"
           "svg11-attribs.mod" &gt;

&lt;!-- Modular Framework Module .................................... --&gt;
&lt;!ENTITY % svg-framework.module "INCLUDE" &gt;
&lt;![%svg-framework.module;[
&lt;!ENTITY % svg-framework.mod
    PUBLIC "-//W3C//ENTITIES SVG 1.1 Modular Framework//EN"
           "svg-framework.mod" &gt;
%svg-framework.mod;]]&gt;

&lt;!-- Post-Framework Redeclaration Placeholder .................... --&gt;
&lt;!ENTITY % svg-postfw-redecl.module "IGNORE" &gt;
&lt;![%svg-postfw-redecl.module;[
%svg-postfw-redecl.mod;]]&gt;

&lt;!-- ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: --&gt;

&lt;!-- Core Attribute Module ....................................... --&gt;
&lt;!ENTITY % svg-core-attrib.module "INCLUDE" &gt;
&lt;![%svg-core-attrib.module;[
&lt;!ENTITY % svg-core-attrib.mod
    PUBLIC "-//W3C//ENTITIES SVG 1.1 Core Attribute//EN"
           "svg-core-attrib.mod" &gt;
%svg-core-attrib.mod;]]&gt;

&lt;!-- Container Attribute Module .................................. --&gt;
&lt;!ENTITY % svg-container-attrib.module "INCLUDE" &gt;
&lt;![%svg-container-attrib.module;[
&lt;!ENTITY % svg-container-attrib.mod
    PUBLIC "-//W3C//ENTITIES SVG 1.1 Container Attribute//EN"
           "svg-container-attrib.mod" &gt;
%svg-container-attrib.mod;]]&gt;

&lt;!-- Viewport Attribute Module ................................... --&gt;
&lt;!ENTITY % svg-viewport-attrib.module "INCLUDE" &gt;
&lt;![%svg-viewport-attrib.module;[
&lt;!ENTITY % svg-viewport-attrib.mod
    PUBLIC "-//W3C//ENTITIES SVG 1.1 Viewport Attribute//EN"
           "svg-viewport-attrib.mod" &gt;
%svg-viewport-attrib.mod;]]&gt;

&lt;!-- Paint Attribute Module ...................................... --&gt;
&lt;!ENTITY % svg-paint-attrib.module "INCLUDE" &gt;
&lt;![%svg-paint-attrib.module;[
&lt;!ENTITY % svg-paint-attrib.mod
    PUBLIC "-//W3C//ENTITIES SVG 1.1 Paint Attribute//EN"
           "svg-paint-attrib.mod" &gt;
%svg-paint-attrib.mod;]]&gt;

&lt;!-- Paint Opacity Attribute Module .............................. --&gt;
&lt;!ENTITY % svg-opacity-attrib.module "INCLUDE" &gt;
&lt;![%svg-opacity-attrib.module;[
&lt;!ENTITY % svg-opacity-attrib.mod
    PUBLIC "-//W3C//ENTITIES SVG 1.1 Paint Opacity Attribute//EN"
           "svg-opacity-attrib.mod" &gt;
%svg-opacity-attrib.mod;]]&gt;

&lt;!-- Graphics Attribute Module ................................... --&gt;
&lt;!ENTITY % svg-graphics-attrib.module "INCLUDE" &gt;
&lt;![%svg-graphics-attrib.module;[
&lt;!ENTITY % svg-graphics-attrib.mod
    PUBLIC "-//W3C//ENTITIES SVG 1.1 Graphics Attribute//EN"
           "svg-graphics-attrib.mod" &gt;
%svg-graphics-attrib.mod;]]&gt;

&lt;!-- Document Events Attribute Module ............................ --&gt;
&lt;!ENTITY % svg-docevents-attrib.module "INCLUDE" &gt;
&lt;![%svg-docevents-attrib.module;[
&lt;!ENTITY % svg-docevents-attrib.mod
    PUBLIC "-//W3C//ENTITIES SVG 1.1 Document Events Attribute//EN"
           "svg-docevents-attrib.mod" &gt;
%svg-docevents-attrib.mod;]]&gt;

&lt;!-- Graphical Element Events Attribute Module ................... --&gt;
&lt;!ENTITY % svg-graphevents-attrib.module "INCLUDE" &gt;
&lt;![%svg-graphevents-attrib.module;[
&lt;!ENTITY % svg-graphevents-attrib.mod
    PUBLIC "-//W3C//ENTITIES SVG 1.1 Graphical Element Events Attribute//EN"
           "svg-graphevents-attrib.mod" &gt;
%svg-graphevents-attrib.mod;]]&gt;

&lt;!-- Animation Events Attribute Module ........................... --&gt;
&lt;!ENTITY % svg-animevents-attrib.module "INCLUDE" &gt;
&lt;![%svg-animevents-attrib.module;[
&lt;!ENTITY % svg-animevents-attrib.mod
    PUBLIC "-//W3C//ENTITIES SVG 1.1 Animation Events Attribute//EN"
           "svg-animevents-attrib.mod" &gt;
%svg-animevents-attrib.mod;]]&gt;

&lt;!-- XLink Attribute Module ...................................... --&gt;
&lt;!ENTITY % svg-xlink-attrib.module "INCLUDE" &gt;
&lt;![%svg-xlink-attrib.module;[
&lt;!ENTITY % svg-xlink-attrib.mod
    PUBLIC "-//W3C//ENTITIES SVG 1.1 XLink Attribute//EN"
           "svg-xlink-attrib.mod" &gt;
%svg-xlink-attrib.mod;]]&gt;

&lt;!-- External Resources Attribute Module ......................... --&gt;
&lt;!ENTITY % svg-extresources-attrib.module "INCLUDE" &gt;
&lt;![%svg-extresources-attrib.module;[
&lt;!ENTITY % svg-extresources-attrib.mod
    PUBLIC "-//W3C//ENTITIES SVG 1.1 External Resources Attribute//EN"
           "svg-extresources-attrib.mod" &gt;
%svg-extresources-attrib.mod;]]&gt;

&lt;!-- ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: --&gt;

&lt;!-- Structure Module ............................................ --&gt;
&lt;!ENTITY % svg-structure.module "INCLUDE" &gt;
&lt;![%svg-structure.module;[
&lt;!ENTITY % svg-structure.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Structure//EN"
           "svg-structure.mod" &gt;
%svg-structure.mod;]]&gt;

&lt;!-- Conditional Processing Module ............................... --&gt;
&lt;!ENTITY % svg-conditional.module "INCLUDE" &gt;
&lt;![%svg-conditional.module;[
&lt;!ENTITY % svg-conditional.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Conditional Processing//EN"
           "svg-conditional.mod" &gt;
%svg-conditional.mod;]]&gt;

&lt;!-- Image Module ................................................ --&gt;
&lt;!ENTITY % svg-image.module "INCLUDE" &gt;
&lt;![%svg-image.module;[
&lt;!ENTITY % svg-image.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Image//EN"
           "svg-image.mod" &gt;
%svg-image.mod;]]&gt;

&lt;!-- Style Module ................................................ --&gt;
&lt;!ENTITY % svg-style.module "INCLUDE" &gt;
&lt;![%svg-style.module;[
&lt;!ENTITY % svg-style.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Style//EN"
           "svg-style.mod" &gt;
%svg-style.mod;]]&gt;

&lt;!-- Shape Module ................................................ --&gt;
&lt;!ENTITY % svg-shape.module "INCLUDE" &gt;
&lt;![%svg-shape.module;[
&lt;!ENTITY % svg-shape.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Shape//EN"
           "svg-shape.mod" &gt;
%svg-shape.mod;]]&gt;

&lt;!-- Text Module ................................................. --&gt;
&lt;!ENTITY % svg-text.module "INCLUDE" &gt;
&lt;![%svg-text.module;[
&lt;!ENTITY % svg-text.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Text//EN"
           "svg-text.mod" &gt;
%svg-text.mod;]]&gt;

&lt;!-- Marker Module ............................................... --&gt;
&lt;!ENTITY % svg-marker.module "INCLUDE" &gt;
&lt;![%svg-marker.module;[
&lt;!ENTITY % svg-marker.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Marker//EN"
           "svg-marker.mod" &gt;
%svg-marker.mod;]]&gt;

&lt;!-- Color Profile Module ........................................ --&gt;
&lt;!ENTITY % svg-profile.module "INCLUDE" &gt;
&lt;![%svg-profile.module;[
&lt;!ENTITY % svg-profile.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Color Profile//EN"
           "svg-profile.mod" &gt;
%svg-profile.mod;]]&gt;

&lt;!-- Gradient Module ............................................. --&gt;
&lt;!ENTITY % svg-gradient.module "INCLUDE" &gt;
&lt;![%svg-gradient.module;[
&lt;!ENTITY % svg-gradient.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Gradient//EN"
           "svg-gradient.mod" &gt;
%svg-gradient.mod;]]&gt;

&lt;!-- Pattern Module .............................................. --&gt;
&lt;!ENTITY % svg-pattern.module "INCLUDE" &gt;
&lt;![%svg-pattern.module;[
&lt;!ENTITY % svg-pattern.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Pattern//EN"
           "svg-pattern.mod" &gt;
%svg-pattern.mod;]]&gt;

&lt;!-- Clip Module ................................................. --&gt;
&lt;!ENTITY % svg-clip.module "INCLUDE" &gt;
&lt;![%svg-clip.module;[
&lt;!ENTITY % svg-clip.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Clip//EN"
           "svg-clip.mod" &gt;
%svg-clip.mod;]]&gt;

&lt;!-- Mask Module ................................................. --&gt;
&lt;!ENTITY % svg-mask.module "INCLUDE" &gt;
&lt;![%svg-mask.module;[
&lt;!ENTITY % svg-mask.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Mask//EN"
           "svg-mask.mod" &gt;
%svg-mask.mod;]]&gt;

&lt;!-- Filter Module ............................................... --&gt;
&lt;!ENTITY % svg-filter.module "INCLUDE" &gt;
&lt;![%svg-filter.module;[
&lt;!ENTITY % svg-filter.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Filter//EN"
           "svg-filter.mod" &gt;
%svg-filter.mod;]]&gt;

&lt;!-- Cursor Module ............................................... --&gt;
&lt;!ENTITY % svg-cursor.module "INCLUDE" &gt;
&lt;![%svg-cursor.module;[
&lt;!ENTITY % svg-cursor.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Cursor//EN"
           "svg-cursor.mod" &gt;
%svg-cursor.mod;]]&gt;

&lt;!-- Hyperlinking Module ......................................... --&gt;
&lt;!ENTITY % svg-hyperlink.module "INCLUDE" &gt;
&lt;![%svg-hyperlink.module;[
&lt;!ENTITY % svg-hyperlink.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Hyperlinking//EN"
           "svg-hyperlink.mod" &gt;
%svg-hyperlink.mod;]]&gt;

&lt;!-- View Module ................................................. --&gt;
&lt;!ENTITY % svg-view.module "INCLUDE" &gt;
&lt;![%svg-view.module;[
&lt;!ENTITY % svg-view.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 View//EN"
           "svg-view.mod" &gt;
%svg-view.mod;]]&gt;

&lt;!-- Scripting Module ............................................ --&gt;
&lt;!ENTITY % svg-script.module "INCLUDE" &gt;
&lt;![%svg-script.module;[
&lt;!ENTITY % svg-script.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Scripting//EN"
           "svg-script.mod" &gt;
%svg-script.mod;]]&gt;

&lt;!-- Animation Module ............................................ --&gt;
&lt;!ENTITY % svg-animation.module "INCLUDE" &gt;
&lt;![%svg-animation.module;[
&lt;!ENTITY % svg-animation.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Animation//EN"
           "svg-animation.mod" &gt;
%svg-animation.mod;]]&gt;

&lt;!-- Font Module ................................................. --&gt;
&lt;!ENTITY % svg-font.module "INCLUDE" &gt;
&lt;![%svg-font.module;[
&lt;!ENTITY % svg-font.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Font//EN"
           "svg-font.mod" &gt;
%svg-font.mod;]]&gt;

&lt;!-- Extensibility Module ........................................ --&gt;
&lt;!ENTITY % svg-extensibility.module "INCLUDE" &gt;
&lt;![%svg-extensibility.module;[
&lt;!ENTITY % svg-extensibility.mod
    PUBLIC "-//W3C//ELEMENTS SVG 1.1 Extensibility//EN"
           "svg-extensibility.mod" &gt;
%svg-extensibility.mod;]]&gt;

&lt;!-- end of SVG 1.1 DTD .................................................... --&gt;
&lt;!-- ....................................................................... --&gt;</pre>

<h3 id="svgdtd-DTD.2.2">A.4.2 SVG 1.1 Document Model</h3>

<p>A SVG Family Document Type (such as SVG 1.1) must define the
content model that it uses. This is done through a separate
content model module that is instantiated by the SVG Modular
Framework. The content model module and the SVG 1.1 DTD Driver
(above) work together to customize the module implementations
to the document type's specific requirements. The content model
module for SVG 1.1 is defined below:</p>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Document Model Module ......................................... --&gt;
&lt;!-- file: svg11-model.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 Document Model//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-model.mod"

     ....................................................................... --&gt;

&lt;!-- SVG 1.1 Document Model

     This module describes the groupings of elements that make up
     common content models for SVG elements.
--&gt;

&lt;!-- module: svg-structure.mod ......................... --&gt;

&lt;!ENTITY % SVG.Description.extra.class "" &gt;
&lt;!ENTITY % SVG.Description.class
    "%SVG.desc.qname; | %SVG.title.qname; | %SVG.metadata.qname;
     %SVG.Description.extra.class;"
&gt;

&lt;!ENTITY % SVG.Use.extra.class "" &gt;
&lt;!ENTITY % SVG.Use.class
    "| %SVG.use.qname; %SVG.Use.extra.class;"
&gt;

&lt;!ENTITY % SVG.Structure.extra.class "" &gt;
&lt;!ENTITY % SVG.Structure.class
    "| %SVG.svg.qname; | %SVG.g.qname; | %SVG.defs.qname; | %SVG.symbol.qname;
       %SVG.Use.class; %SVG.Structure.extra.class;"
&gt;

&lt;!-- module: svg-conditional.mod ....................... --&gt;

&lt;!ENTITY % SVG.Conditional.extra.class "" &gt;
&lt;!ENTITY % SVG.Conditional.class
    "| %SVG.switch.qname; %SVG.Conditional.extra.class;"
&gt;

&lt;!-- module: svg-image.mod ............................. --&gt;

&lt;!ENTITY % SVG.Image.extra.class "" &gt;
&lt;!ENTITY % SVG.Image.class
    "| %SVG.image.qname; %SVG.Image.extra.class;"
&gt;

&lt;!-- module: svg-style.mod ............................. --&gt;

&lt;!ENTITY % SVG.Style.extra.class "" &gt;
&lt;!ENTITY % SVG.Style.class
    "| %SVG.style.qname; %SVG.Style.extra.class;"
&gt;

&lt;!-- module: svg-shape.mod ............................. --&gt;

&lt;!ENTITY % SVG.Shape.extra.class "" &gt;
&lt;!ENTITY % SVG.Shape.class
    "| %SVG.path.qname; | %SVG.rect.qname; | %SVG.circle.qname;
     | %SVG.line.qname; | %SVG.ellipse.qname; | %SVG.polyline.qname;
     | %SVG.polygon.qname; %SVG.Shape.extra.class;"
&gt;

&lt;!-- module: svg-text.mod .............................. --&gt;

&lt;!ENTITY % SVG.Text.extra.class "" &gt;
&lt;!ENTITY % SVG.Text.class
    "| %SVG.text.qname; | %SVG.altGlyphDef.qname; %SVG.Text.extra.class;"
&gt;

&lt;!ENTITY % SVG.TextContent.extra.class "" &gt;
&lt;!ENTITY % SVG.TextContent.class
    "| %SVG.tspan.qname; | %SVG.tref.qname; | %SVG.textPath.qname;
     | %SVG.altGlyph.qname; %SVG.TextContent.extra.class;"
&gt;

&lt;!-- module: svg-marker.mod ............................ --&gt;

&lt;!ENTITY % SVG.Marker.extra.class "" &gt;
&lt;!ENTITY % SVG.Marker.class
    "| %SVG.marker.qname; %SVG.Marker.extra.class;"
&gt;

&lt;!-- module: svg-profile.mod ........................... --&gt;

&lt;!ENTITY % SVG.ColorProfile.extra.class "" &gt;
&lt;!ENTITY % SVG.ColorProfile.class
    "| %SVG.color-profile.qname; %SVG.ColorProfile.extra.class;"
&gt;

&lt;!-- module: svg-gradient.mod .......................... --&gt;

&lt;!ENTITY % SVG.Gradient.extra.class "" &gt;
&lt;!ENTITY % SVG.Gradient.class
    "| %SVG.linearGradient.qname; | %SVG.radialGradient.qname;
       %SVG.Gradient.extra.class;"
&gt;

&lt;!-- module: svg-pattern.mod ........................... --&gt;

&lt;!ENTITY % SVG.Pattern.extra.class "" &gt;
&lt;!ENTITY % SVG.Pattern.class
    "| %SVG.pattern.qname; %SVG.Pattern.extra.class;"
&gt;

&lt;!-- module: svg-clip.mod .............................. --&gt;

&lt;!ENTITY % SVG.Clip.extra.class "" &gt;
&lt;!ENTITY % SVG.Clip.class
    "| %SVG.clipPath.qname; %SVG.Clip.extra.class;"
&gt;

&lt;!-- module: svg-mask.mod .............................. --&gt;

&lt;!ENTITY % SVG.Mask.extra.class "" &gt;
&lt;!ENTITY % SVG.Mask.class
    "| %SVG.mask.qname; %SVG.Mask.extra.class;"
&gt;

&lt;!-- module: svg-filter.mod ............................ --&gt;

&lt;!ENTITY % SVG.Filter.extra.class "" &gt;
&lt;!ENTITY % SVG.Filter.class
    "| %SVG.filter.qname; %SVG.Filter.extra.class;"
&gt;

&lt;!ENTITY % SVG.FilterPrimitive.extra.class "" &gt;
&lt;!ENTITY % SVG.FilterPrimitive.class
    "| %SVG.feBlend.qname; | %SVG.feColorMatrix.qname;
     | %SVG.feComponentTransfer.qname; | %SVG.feComposite.qname;
     | %SVG.feConvolveMatrix.qname; | %SVG.feDiffuseLighting.qname;
     | %SVG.feDisplacementMap.qname; | %SVG.feFlood.qname;
     | %SVG.feGaussianBlur.qname; | %SVG.feImage.qname; | %SVG.feMerge.qname;
     | %SVG.feMorphology.qname; | %SVG.feOffset.qname;
     | %SVG.feSpecularLighting.qname; | %SVG.feTile.qname;
     | %SVG.feTurbulence.qname; %SVG.FilterPrimitive.extra.class;"
&gt;

&lt;!-- module: svg-cursor.mod ............................ --&gt;

&lt;!ENTITY % SVG.Cursor.extra.class "" &gt;
&lt;!ENTITY % SVG.Cursor.class
    "| %SVG.cursor.qname; %SVG.Cursor.extra.class;"
&gt;

&lt;!-- module: svg-hyperlink.mod ......................... --&gt;

&lt;!ENTITY % SVG.Hyperlink.extra.class "" &gt;
&lt;!ENTITY % SVG.Hyperlink.class
    "| %SVG.a.qname; %SVG.Hyperlink.extra.class;"
&gt;

&lt;!-- module: svg-view.mod .............................. --&gt;

&lt;!ENTITY % SVG.View.extra.class "" &gt;
&lt;!ENTITY % SVG.View.class
    "| %SVG.view.qname; %SVG.View.extra.class;"
&gt;

&lt;!-- module: svg-script.mod ............................ --&gt;

&lt;!ENTITY % SVG.Script.extra.class "" &gt;
&lt;!ENTITY % SVG.Script.class
    "| %SVG.script.qname; %SVG.Script.extra.class;"
&gt;

&lt;!-- module: svg-animation.mod ......................... --&gt;

&lt;!ENTITY % SVG.Animation.extra.class "" &gt;
&lt;!ENTITY % SVG.Animation.class
    "%SVG.animate.qname; | %SVG.set.qname; | %SVG.animateMotion.qname; |
     %SVG.animateColor.qname; | %SVG.animateTransform.qname;
     %SVG.Animation.extra.class;"
&gt;

&lt;!-- module: svg-font.mod .............................. --&gt;

&lt;!ENTITY % SVG.Font.extra.class "" &gt;
&lt;!ENTITY % SVG.Font.class
    "| %SVG.font.qname; | %SVG.font-face.qname; %SVG.Font.extra.class;"
&gt;

&lt;!-- module: svg-extensibility.mod ..................... --&gt;

&lt;!ENTITY % SVG.Extensibility.extra.class "" &gt;
&lt;!ENTITY % SVG.Extensibility.class
    "| %SVG.foreignObject.qname; %SVG.Extensibility.extra.class;"
&gt;

&lt;!-- end of svg11-model.mod --&gt;</pre>

<h3 id="svgdtd-DTD.2.3">A.4.3 SVG 1.1 Attribute Collection</h3>

<p>This section contains the attribute collection for SVG 1.1.
The attribute collection module and the SVG 1.1 DTD Driver work
together to customize the module implementations to the document
type's specific requirements.</p>

<pre>&lt;!-- ....................................................................... --&gt;
&lt;!-- SVG 1.1 Attribute Collection Module ................................... --&gt;
&lt;!-- file: svg11-attribs.mod

     This is SVG, a language for describing two-dimensional graphics in XML.
     Copyright 2001, 2002, 2011 W3C (MIT, INRIA, Keio), All Rights Reserved.
     Revision: $Id: single-page.html,v 1.2 2011/08/10 04:43:17 schepers Exp $

     This DTD module is identified by the PUBLIC and SYSTEM identifiers:

        PUBLIC "-//W3C//ENTITIES SVG 1.1 Attribute Collection//EN"
        SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-attribs.mod"

     ....................................................................... --&gt;

&lt;!-- SVG 1.1 Attribute Collection

     This module defines the set of common attributes that can be present
     on many SVG elements.
--&gt;

&lt;!-- module: svg-conditional.mod ....................... --&gt;

&lt;!ENTITY % ExtensionList.datatype "CDATA" &gt;
&lt;!ENTITY % FeatureList.datatype "CDATA" &gt;

&lt;!ENTITY % SVG.Conditional.extra.attrib "" &gt;
&lt;!ENTITY % SVG.Conditional.attrib
    "requiredFeatures %FeatureList.datatype; #IMPLIED
     requiredExtensions %ExtensionList.datatype; #IMPLIED
     systemLanguage %LanguageCodes.datatype; #IMPLIED
     %SVG.Conditional.extra.attrib;"
&gt;

&lt;!-- module: svg-style.mod ............................. --&gt;

&lt;!ENTITY % ClassList.datatype "CDATA" &gt;
&lt;!ENTITY % StyleSheet.datatype "CDATA" &gt;

&lt;!ENTITY % SVG.Style.extra.attrib "" &gt;
&lt;!ENTITY % SVG.Style.attrib
    "style %StyleSheet.datatype; #IMPLIED
     class %ClassList.datatype; #IMPLIED
     %SVG.Style.extra.attrib;"
&gt;

&lt;!-- module: svg-text.mod .............................. --&gt;

&lt;!ENTITY % BaselineShiftValue.datatype "CDATA" &gt;
&lt;!ENTITY % FontFamilyValue.datatype "CDATA" &gt;
&lt;!ENTITY % FontSizeValue.datatype "CDATA" &gt;
&lt;!ENTITY % FontSizeAdjustValue.datatype "CDATA" &gt;
&lt;!ENTITY % GlyphOrientationHorizontalValue.datatype "CDATA" &gt;
&lt;!ENTITY % GlyphOrientationVerticalValue.datatype "CDATA" &gt;
&lt;!ENTITY % KerningValue.datatype "CDATA" &gt;
&lt;!ENTITY % SpacingValue.datatype "CDATA" &gt;
&lt;!ENTITY % TextDecorationValue.datatype "CDATA" &gt;

&lt;!ENTITY % SVG.Text.extra.attrib "" &gt;
&lt;!ENTITY % SVG.Text.attrib
    "writing-mode ( lr-tb | rl-tb | tb-rl | lr | rl | tb | inherit ) #IMPLIED
     %SVG.Text.extra.attrib;"
&gt;

&lt;!ENTITY % SVG.TextContent.extra.attrib "" &gt;
&lt;!ENTITY % SVG.TextContent.attrib
    "alignment-baseline ( auto | baseline | before-edge | text-before-edge |
                          middle | central | after-edge | text-after-edge |
                          ideographic | alphabetic | hanging | mathematical |
                          inherit ) #IMPLIED
     baseline-shift %BaselineShiftValue.datatype; #IMPLIED
     direction ( ltr | rtl | inherit ) #IMPLIED
     dominant-baseline ( auto | use-script | no-change | reset-size |
                         ideographic | alphabetic | hanging | mathematical |
                         central | middle | text-after-edge | text-before-edge |
                         inherit ) #IMPLIED
     glyph-orientation-horizontal %GlyphOrientationHorizontalValue.datatype;
                                  #IMPLIED
     glyph-orientation-vertical %GlyphOrientationVerticalValue.datatype;
                                #IMPLIED
     kerning %KerningValue.datatype; #IMPLIED
     letter-spacing %SpacingValue.datatype; #IMPLIED
     text-anchor ( start | middle | end | inherit ) #IMPLIED
     text-decoration %TextDecorationValue.datatype; #IMPLIED
     unicode-bidi ( normal | embed | bidi-override | inherit ) #IMPLIED
     word-spacing %SpacingValue.datatype; #IMPLIED
     %SVG.TextContent.extra.attrib;"
&gt;

&lt;!ENTITY % SVG.Font.extra.attrib "" &gt;
&lt;!ENTITY % SVG.Font.attrib
    "font-family %FontFamilyValue.datatype; #IMPLIED
     font-size %FontSizeValue.datatype; #IMPLIED
     font-size-adjust %FontSizeAdjustValue.datatype; #IMPLIED
     font-stretch ( normal | wider | narrower | ultra-condensed |
                    extra-condensed | condensed | semi-condensed |
                    semi-expanded | expanded | extra-expanded |
                    ultra-expanded | inherit ) #IMPLIED
     font-style ( normal | italic | oblique | inherit ) #IMPLIED
     font-variant ( normal | small-caps | inherit ) #IMPLIED
     font-weight ( normal | bold | bolder | lighter | 100 | 200 | 300 | 400 |
                   500 | 600 | 700 | 800 | 900 | inherit ) #IMPLIED
     %SVG.Font.extra.attrib;"
&gt;

&lt;!-- module: svg-marker.mod ............................ --&gt;

&lt;!ENTITY % MarkerValue.datatype "CDATA" &gt;

&lt;!ENTITY % SVG.Marker.extra.attrib "" &gt;
&lt;!ENTITY % SVG.Marker.attrib
    "marker-start %MarkerValue.datatype; #IMPLIED
     marker-mid %MarkerValue.datatype; #IMPLIED
     marker-end %MarkerValue.datatype; #IMPLIED
     %SVG.Marker.extra.attrib;"
&gt;

&lt;!-- module: svg-profile.mod ........................... --&gt;

&lt;!ENTITY % SVG.ColorProfile.extra.attrib "" &gt;
&lt;!ENTITY % SVG.ColorProfile.attrib
    "color-profile CDATA #IMPLIED
     %SVG.ColorProfile.extra.attrib;"
&gt;

&lt;!-- module: svg-gradient.mod .......................... --&gt;

&lt;!ENTITY % NumberOrPercentage.datatype "CDATA" &gt;

&lt;!ENTITY % SVG.Gradient.extra.attrib "" &gt;
&lt;!ENTITY % SVG.Gradient.attrib
    "stop-color %SVGColor.datatype; #IMPLIED
     stop-opacity %OpacityValue.datatype; #IMPLIED
     %SVG.Gradient.extra.attrib;"
&gt;

&lt;!-- module: svg-clip.mod .............................. --&gt;

&lt;!ENTITY % ClipPathValue.datatype "CDATA" &gt;

&lt;!ENTITY % SVG.Clip.extra.attrib "" &gt;
&lt;!ENTITY % SVG.Clip.attrib
    "clip-path %ClipPathValue.datatype; #IMPLIED
     clip-rule %ClipFillRule.datatype; #IMPLIED
     %SVG.Clip.extra.attrib;"
&gt;

&lt;!-- module: svg-mask.mod .............................. --&gt;

&lt;!ENTITY % MaskValue.datatype "CDATA" &gt;

&lt;!ENTITY % SVG.Mask.extra.attrib "" &gt;
&lt;!ENTITY % SVG.Mask.attrib
    "mask %MaskValue.datatype; #IMPLIED
     %SVG.Mask.extra.attrib;"
&gt;

&lt;!-- module: svg-filter.mod ............................ --&gt;

&lt;!ENTITY % FilterValue.datatype "CDATA" &gt;
&lt;!ENTITY % NumberOptionalNumber.datatype "CDATA" &gt;

&lt;!ENTITY % SVG.Filter.extra.attrib "" &gt;
&lt;!ENTITY % SVG.Filter.attrib
    "filter %FilterValue.datatype; #IMPLIED
     %SVG.Filter.extra.attrib;"
&gt;

&lt;!ENTITY % SVG.FilterColor.extra.attrib "" &gt;
&lt;!ENTITY % SVG.FilterColor.attrib
    "color-interpolation-filters ( auto | sRGB | linearRGB | inherit )
                                   #IMPLIED
     %SVG.FilterColor.extra.attrib;"
&gt;

&lt;!-- module: svg-cursor.mod ............................ --&gt;

&lt;!ENTITY % CursorValue.datatype "CDATA" &gt;

&lt;!ENTITY % SVG.Cursor.extra.attrib "" &gt;
&lt;!ENTITY % SVG.Cursor.attrib
    "cursor %CursorValue.datatype; #IMPLIED
     %SVG.Cursor.extra.attrib;"
&gt;

&lt;!-- end of svg11-attribs.mod --&gt;</pre>

</div><hr class="chapter-divider" />
<div id="chapter-svgdom">

<h1>Appendix B: SVG Document Object Model (DOM)</h1><h2 id="svgdom-toc">Contents</h2><ul class="toc">
<li><a href="#svgdom-SVGDOMOverview">B.1 SVG DOM overview</a><ul class="toc">
<li><a href="#svgdom-SVGObjectInitialization">B.1.1 SVG DOM object initialization</a></li></ul></li>
<li><a href="#svgdom-ElementsInTheSVGDOM">B.2 Elements in the SVG DOM</a></li>
<li><a href="#svgdom-SVGDOMNamingConventions">B.3 Naming conventions</a></li>
<li><a href="#svgdom-ExceptionSVGException">B.4 Exception SVGException</a></li>
<li><a href="#svgdom-FeatureStrings">B.5 Feature strings for the <strong>hasFeature</strong> method call</a></li>
<li><a href="#svgdom-RelationshipWithDOM2Events">B.6 Relationship with DOM Level 2 Events</a></li>
<li><a href="#svgdom-RelationshipWithCSSOM">B.7 Relationship with DOM Level 2 CSS</a><ul class="toc">
<li><a href="#svgdom-CSSDOMIntro">B.7.1 Introduction</a></li>
<li><a href="#svgdom-CSSDOMFeaturesNoCSSSupport">B.7.2 User agents that do not support styling with CSS</a></li>
<li><a href="#svgdom-CSSDOMFeaturesWithCSSSupport">B.7.3 User agents that support styling with CSS</a></li>
<li><a href="#svgdom-ExtendedInterfaces">B.7.4 Extended interfaces</a></li></ul></li>
<li><a href="#svgdom-ReadOnlyNodes">B.8 Read only nodes in the DOM</a></li>
<li><a href="#svgdom-InvalidValues">B.9 Invalid values</a></li></ul>

    <p class="normativity"><strong>This appendix is normative.</strong></p>

<h2 id="svgdom-SVGDOMOverview">B.1 SVG DOM overview</h2>

    <p>This appendix provides an introduction to the SVG DOM and
    discusses the relationship of the SVG DOM with the
    <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/"><cite>Document Object Model (DOM) Level 2 Core Specification</cite></a>
    [<a href="#refs-ref-DOM2">DOM2</a>]. The
    specific SVG DOM interfaces that correspond to particular
    sections of the SVG specification are defined at the end of
    corresponding chapters in this specification, as follows:</p>
    <ul><li><a href="#types-BasicDOMInterfaces">Basic DOM interfaces</a></li><li><a href="#styling-DOMInterfaces">Styling interfaces</a></li><li><a href="#struct-DOMInterfaces">Document Structure interfaces</a></li><li><a href="#coords-DOMInterfaces">Coordinate Systems, Transformations and Units interfaces</a></li><li><a href="#paths-DOMInterfaces">Paths interfaces</a></li><li><a href="#shapes-DOMInterfaces">Basic Shapes interfaces</a></li><li><a href="#text-DOMInterfaces">Text interfaces</a></li><li><a href="#painting-DOMInterfaces">Painting: Filling, Stroking and Marker Symbols interfaces</a></li><li><a href="#color-DOMInterfaces">Color interfaces</a></li><li><a href="#pservers-DOMInterfaces">Gradients and Patterns interfaces</a></li><li><a href="#masking-DOMInterfaces">Clipping, Masking and Compositing interfaces</a></li><li><a href="#filters-DOMInterfaces">Filter Effects interfaces</a></li><li><a href="#interact-DOMInterfaces">Interactivity interfaces</a></li><li><a href="#linking-DOMInterfaces">Linking interfaces</a></li><li><a href="#script-DOMInterfaces">Scripting interfaces</a></li><li><a href="#animate-DOMInterfaces">Animation interfaces</a></li><li><a href="#fonts-DOMInterfaces">Fonts interfaces</a></li><li><a href="#metadata-DOMInterfaces">Metadata interfaces</a></li><li><a href="#extend-DOMInterfaces">Extensibility interfaces</a></li></ul>
    <p>The SVG DOM builds upon and is compatible with 
    DOM Level 2.  In particular:</p>
    <ul><li>The SVG DOM requires complete support for
      <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/">DOM Level 2 Core</a>
      [<a href="#refs-ref-DOM2">DOM2</a>]</li><li>Wherever appropriate, the SVG DOM is modeled after and
      maintains consistency with the
      <a href="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-html.html">Document Object Model HTML</a>
      ([<a href="#refs-ref-DOM1">DOM1</a>], chapter 2).</li><li>The SVG DOM requires complete support for 
      <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Views-20001113/">DOM Level 2 Views</a>
      [<a href="#refs-ref-DOM2VIEWS">DOM2VIEWS</a>].</li><li>The SVG DOM requires support for relevant aspects of
      <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/">DOM Level 2 Events</a>
      [<a href="#refs-ref-DOM2EVENTS">DOM2EVENTS</a>].
      (For the specific features from DOM 2 Events that are required, see
      see <a href="#svgdom-RelationshipWithDOM2Events">Relationship with DOM Level 2 Events</a>.)</li><li>For implementations that support CSS, the SVG DOM requires complete
      support for
      <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/stylesheets.html">DOM Level 2 Style Sheets</a>
      ([<a href="#refs-ref-DOM2STYLE">DOM2STYLE</a>], chapter 1)
      and relevant aspects of
      <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html">DOM Level 2 CSS</a>
      ([<a href="#refs-ref-DOM2STYLE">DOM2STYLE</a>], chapter 2).
      (For the specific features from DOM 2 CSS that are required, see
      <a href="#svgdom-RelationshipWithCSSOM">Relationship with DOM Level 2 CSS</a>.)</li></ul>
    <p>A DOM application can use the <strong>hasFeature</strong> method of
    the <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490">DOMImplementation</a> interface to
    verify that the interfaces listed in this section are
    supported. The list of available interfaces is provided in
    section <a href="#svgdom-FeatureStrings">Feature strings
    for the <strong>hasFeature</strong> method call</a>.
    </p>
    <p>All SVG DOM objects that directly correspond to an attribute, e.g.
    the <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a class="idlattr" href="#shapes-__svg__SVGRectElement__ry">ry</a> in an
    <a class="idlinterface" href="#shapes-InterfaceSVGRectElement">SVGRectElement</a>, are live.
    This means that any changes made to the attribute are immediately
    reflected in the corresponding SVG DOM object.
    </p>    
    <h3 id="svgdom-SVGObjectInitialization">B.1.1 SVG DOM object initialization</h3>
    <p>
      The SVG DOM allows attributes to be accessed even though they haven't been
      specified explicitly in the document markup. When this happens an appropriate object 
      is created, initialized and returned. This newly constructed object does not affect rendering until
      it is modified for the first time. After the first modification the object
      becomes live, such that any modifications made to the corresponding
      attribute are immediately reflected in the object.
    </p>
    <p>
      For example, if <code>rectElement.x.baseVal</code> is accessed
      and the <a href="#shapes-RectElementXAttribute"><span class="attr-name">‘x’</span></a> attribute was not specified in the document, the
      returned SVG DOM object would represent the value <span class="attr-value">0 user units</span>.
    </p>
    <p>
      For cases where an attribute has a default value the returned SVG DOM object that must reflect that value, 
      and for all other cases the object is initialized as described below.
      If a particular SVG DOM interface is not listed below that means
      that the object initialization shall be done using the values for the 
      objects that the interface contains, e.g <span class="DOMInterfaceName">DOMString</span> in the
      case of <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a>, or four <span class="DOMInterfaceName">floats</span> in the case of <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a>.
    </p>
    <dl id="svgdom-SVGObjectInitValues"><dt class="DOMInterfaceName"><a href="#text-__svg__SVGTextContentElement__textLength">SVGTextContentElement.textLength</a></dt><dd>
        Initialized with the return-value of <a class="idlattr" href="#text-__svg__SVGTextContentElement__getComputedTextLength">getComputedTextLength</a> on the same element.
      </dd><dt class="DOMInterfaceName">DOMString</dt><dd>
        Initialized as the empty string (<span class="attr-value">""</span>).
      </dd><dt class="DOMInterfaceName">float</dt><dt class="DOMInterfaceName">long</dt><dt class="DOMInterfaceName">short</dt><dd>
        Initialized as <span class="attr-value">0</span>.
      </dd><dt class="DOMInterfaceName">boolean</dt><dd>
        Initialized as <span class="attr-value">false</span>.
      </dd><dt class="DOMInterfaceName"><a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a></dt><dd>
        Initialized as <span class="attr-value">0 user units</span> (<a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_NUMBER">SVG_LENGTHTYPE_NUMBER</a>).
      </dd><dt class="DOMInterfaceName"><a class="idlinterface" href="#types-InterfaceSVGLengthList">SVGLengthList</a></dt><dt class="DOMInterfaceName"><a class="idlinterface" href="#types-InterfaceSVGNumberList">SVGNumberList</a></dt><dt class="DOMInterfaceName"><a class="idlinterface" href="#coords-InterfaceSVGPointList">SVGPointList</a></dt><dt class="DOMInterfaceName"><a class="idlinterface" href="#types-InterfaceSVGStringList">SVGStringList</a></dt><dt class="DOMInterfaceName"><a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a></dt><dd>
        Initialized as the empty list.
      </dd><dt class="DOMInterfaceName"><a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a></dt><dd>
        Initialized as <span class="attr-value">0 in unspecified units</span> (<a href="#types-__svg__SVGAngle__SVG_ANGLETYPE_UNSPECIFIED">SVG_ANGLETYPE_UNSPECIFIED</a>).
      </dd><dt class="DOMInterfaceName"><a class="idlinterface" href="#types-InterfaceSVGZoomAndPan">SVGZoomAndPan</a></dt><dd>
        Initialized as <span class="attr-value">0</span> (<a href="#types-__svg__SVGZoomAndPan__SVG_ZOOMANDPAN_UNKNOWN">SVG_ZOOMANDPAN_UNKNOWN</a>).
      </dd><dt class="DOMInterfaceName"><a class="idlinterface" href="#coords-InterfaceSVGPreserveAspectRatio">SVGPreserveAspectRatio</a></dt><dd>
        Initialized as <span class="attr-value">'xMidYMid meet'</span>.
      </dd></dl>

<h2 id="svgdom-ElementsInTheSVGDOM">B.2 Elements in the SVG DOM</h2>

<p>Every <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-745549614">Element</a> object that corresponds to an SVG element (that is,
an element with namespace URI "http://www.w3.org/2000/svg" and a
local name that is one of the elements defined in this specification)
must also implement the DOM interface identified in element definition.
For example, in <a href="#shapes-RectElement">The <span class="element-name">‘rect’</span> element</a>,
the <a class="idlinterface" href="#shapes-InterfaceSVGRectElement">SVGRectElement</a> interface is identified.  This means that every
<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-745549614">Element</a> object whose namespace URI is "http://www.w3.org/2000/svg"
and whose local name is "rect" must also implement <a class="idlinterface" href="#shapes-InterfaceSVGRectElement">SVGRectElement</a>.</p>

<h2 id="svgdom-SVGDOMNamingConventions">B.3 Naming conventions</h2>

    <p>The SVG DOM follows similar naming conventions to the
    <a href="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-html.html">Document Object Model HTML</a>
    ([<a href="#refs-ref-DOM1">DOM1</a>], chapter 2).</p>
    <p>All names are defined as one or more English words
    concatenated together to form a single string. Property or
    method names start with the initial keyword in lowercase, and
    each subsequent word starts with a capital letter. For example,
    a property that returns document meta information such as the
    date the file was created might be named "fileDateCreated". In
    the ECMAScript binding, properties are exposed as properties of
    a given object. In Java, properties are exposed with get and
    set methods.</p>
    <p>For attributes with the CDATA data type, the case of the
    return value is that given in the source document.</p>

<h2 id="svgdom-ExceptionSVGException">B.4 Exception SVGException</h2>


 This exception is raised when a specific SVG operation is impossible to
 perform.
<pre class="idl">exception <b>SVGException</b> {
  unsigned short <a href="#svgdom-__svg__SVGException__code">code</a>;
};

// SVGException code
const unsigned short <a href="#svgdom-__svg__SVG_WRONG_TYPE_ERR">SVG_WRONG_TYPE_ERR</a> = 0;
const unsigned short <a href="#svgdom-__svg__SVG_INVALID_VALUE_ERR">SVG_INVALID_VALUE_ERR</a> = 1;
const unsigned short <a href="#svgdom-__svg__SVG_MATRIX_NOT_INVERTABLE">SVG_MATRIX_NOT_INVERTABLE</a> = 2;</pre><dl class="interface"><dt class="constants-header">Constants in group “SVGException code”:</dt><dd><dl class="constants">
<dt id="svgdom-__svg__SVG_WRONG_TYPE_ERR" class="constant first-child"><b>SVG_WRONG_TYPE_ERR</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 <p>Raised when an object of the wrong type is passed to an operation.</p>

 <p>Note that no operation is defined to raise an <a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a> with
 this code in SVG 1.1 Second Edition.  The constant remains defined here
 for consistency with SVG 1.1 First Edition.</p>

</div></dd>
<dt id="svgdom-__svg__SVG_INVALID_VALUE_ERR" class="constant"><b>SVG_INVALID_VALUE_ERR</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 Raised when an invalid value is passed to an operation or assigned to an
 attribute.

</div></dd>
<dt id="svgdom-__svg__SVG_MATRIX_NOT_INVERTABLE" class="constant"><b>SVG_MATRIX_NOT_INVERTABLE</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="constant"><div>
 <p>Raised when an attempt is made to invert a matrix that is not
 invertible.</p>
 
 <p>Note the unusual spelling of this constant, which is necessary for
 compatibility with existing content.</p>

</div></dd></dl></dd><dt class="exception-members-header">Exception members:</dt><dd><dl class="attributes">
<dt id="svgdom-__svg__SVGException__code" class="exception-member"><b>code</b><span class="idl-type-parenthetical"> (unsigned short)</span></dt><dd class="exception-member"><div>
 A code identifying the reason why the requested operation could not be
 performed.  The value of this member will be one of the constants
 in the <em>SVGException code</em> group.
</div></dd></dl></dd></dl>

<h2 id="svgdom-FeatureStrings">B.5 Feature strings for the <strong>hasFeature</strong> method call</h2>

    <p>The feature strings that are available for the
    <strong>hasFeature</strong> method call that is part of the SVG
    DOM's support for the <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490">DOMImplementation</a> interface
    defined in
    <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/">DOM Level 2 Core</a>
    [<a href="#refs-ref-DOM2">DOM2</a>]
    are the same features strings available for the <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a> attribute that is
    available for many SVG elements.</p>
    <p>For all features that correspond to the SVG language and are
    documented in this specification (see appendix <a href="#chapter-feature">Feature Strings</a> for a list of features
    in the SVG language), the <strong>version</strong> number for
    the <strong>hasFeature</strong> method call is "1.1". For
    features that correspond to other languages, refer to the
    relevant other specifications to determine the appropriate
    version number for the given feature.</p>

<h2 id="svgdom-RelationshipWithDOM2Events">B.6 Relationship with DOM Level 2 Events</h2>

<p>The SVG DOM supports all of the interfaces defined in, and
the following event types from,
<a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/">DOM Level 2 Events</a>
[<a href="#refs-ref-DOM2EVENTS">DOM2EVENTS</a>]:</p>

    <ul><li>
        These <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-eventgroupings-uievents">User Interface events</a>
        ([<a href="#refs-ref-DOM2EVENTS">DOM2EVENTS</a>], section 1.6.1):
        <ul><li><a href="#interact-FocusInEvent">DOMFocusIn</a></li><li><a href="#interact-FocusOutEvent">DOMFocusOut</a></li><li><a href="#interact-ActivateEvent">DOMActivate</a></li></ul>
      </li><li>
        These <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-eventgroupings-mouseevents">mouse events</a>
        ([<a href="#refs-ref-DOM2EVENTS">DOM2EVENTS</a>], section 1.6.2):
        <ul><li><a href="#interact-ClickEvent">click</a></li><li><a href="#interact-MouseDownEvent">mousedown</a></li><li><a href="#interact-MouseUpEvent">mouseup</a></li><li><a href="#interact-MouseOverEvent">mouseover</a></li><li><a href="#interact-MouseMoveEvent">mousemove</a></li><li><a href="#interact-MouseOutEvent">mouseout</a></li></ul>
        <em>clientX</em> and <em>clientY</em> parameters for mouse
        events represent the mouse coordinates at which the event
        occurred relative to the DOM Implementation's client area.
        <em>relatedTarget</em> is used to identify a secondary
        EventTarget related to a UI event. Currently this attribute
        is used with the mouseover event to indicate the
        EventTarget which the pointing device exited and with the
        mouseout event to indicate the EventTarget which the
        pointing device entered.
      </li><li>
        These <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-eventgroupings-mutationevents">mutation events</a>
        ([<a href="#refs-ref-DOM2EVENTS">DOM2EVENTS</a>], section 1.6.4):
        <ul><li><a href="#interact-DOMSubtreeModifiedEvent">DOMSubtreeModified</a></li><li><a href="#interact-DOMNodeInsertedEvent">DOMNodeInserted</a></li><li><a href="#interact-DOMNodeRemovedEvent">DOMNodeRemoved</a></li><li><a href="#interact-DOMNodeRemovedFromDocumentEvent">DOMNodeRemovedFromDocument</a></li><li><a href="#interact-DOMNodeInsertedIntoDocumentEvent">DOMNodeInsertedIntoDocument</a></li><li><a href="#interact-DOMAttrModifiedEvent">DOMAttrModified</a></li><li><a href="#interact-DOMCharacterDataModifiedEvent">DOMCharacterDataModified</a></li></ul>
      </li><li>
        The SVG DOM defines the following SVG-specific custom event
        interfaces. These event interfaces are mandatory for SVG
        user agents: 
        <ul><li><a href="#interact-LoadEvent">SVGLoad</a></li><li><a href="#interact-UnloadEvent">SVGUnload</a></li><li><a href="#interact-AbortEvent">SVGAbort</a></li><li><a href="#interact-ErrorEvent">SVGError</a></li><li><a href="#interact-ResizeEvent">SVGResize</a></li><li><a href="#interact-ScrollEvent">SVGScroll</a>
          (triggered by either scroll or pan user actions)</li></ul>
        Note that the SVGLoad event does not fire until the
        document is fully loaded and is therefore subject to the
        processing of any <a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a>
        attributes.
      </li><li>
        The SVG DOM defines an additional custom event interface: 
        <ul><li><a href="#interact-ZoomEvent">SVGZoom</a>
          (definition can be found in the description of the <a class="idlinterface" href="#script-InterfaceSVGZoomEvent">SVGZoomEvent</a> interface)</li></ul>
      </li><li>
        The following event types are triggered due to state
        changes in animations. (The definitions for these events
        can be found in the description of the <a class="idlinterface" href="#animate-InterfaceTimeEvent">TimeEvent</a> interface.)
        <ul><li><a href="#interact-BeginEvent">beginEvent</a></li><li><a href="#interact-EndEvent">endEvent</a></li><li><a href="#interact-RepeatEvent">repeatEvent</a></li></ul>
      </li></ul>

<p id="svgdom-EventListeners">While event listeners can be registered using an
<code>addEventListener</code> call on any element in the DOM,
the use of <a href="#script-EventAttributes">event attributes</a>
on elements where those attributes are disallowed will not result in their
being invoked if the relevant event is dispatched to the element.
For example, if the <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a> attribute were specified on
a <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> element, its contents would never be run in
response to a <span class="attr-value">click</span> event:</p>

<pre class="example">&lt;svg xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;title onclick="alert('Hello')"&gt;Invalid event attribute&lt;/title&gt;
  &lt;script&gt;
    // Find the 'title' element.
    var title = document.getElementsByTagNameNS("http://www.w3.org/2000/svg", "title")[0];

    // Create and initialize a 'click' event.
    var event = document.createEvent("MouseEvent");
    event.initMouseEvent("click", true, false, this, 1, 0, 0, 0, 0, false,
                         false, false, false, 0, null);

    // Dispatch the event to the 'title' element.  Since onclick="" is not
    // allowed on 'title', the alert will not show.
    title.dispatchEvent(event);
  &lt;/script&gt;
&lt;/svg&gt;</pre>

<p>See the <a href="#chapter-attindex">Attribute Index</a> for details on
which elements a given event attribute is allowed to be specified on.</p>

<p>Implementors may view the setting of event attributes as the
creation and registration of an <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventListener">EventListener</a> on the
<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget">EventTarget</a>.  Such event listeners are invoked only for
the "bubbling" and "at target" phases, as if false were specified
for the <code>useCapture</code> argument to <code>addEventListener</code>.
This <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventListener">EventListener</a> behaves in the same manner as any other
which may be registered on the <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget">EventTarget</a>.</p>

<p>If the attribute representing the event listener is changed,
this may be viewed as the removal of the previously registered
<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventListener">EventListener</a> and the registration of a new one. Futhermore, no
specification is made as to the order in which event attributes
will receive the event with regards to the other EventListeners
on the <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget">EventTarget</a>.</p>

<p>In Java, one way that event listeners can be established is
to define a class which implements the <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventListener">EventListener</a> interface,
such as:</p>

<pre>
class MyAction1 implements EventListener {
  public void handleEvent(Event evt) {
    // process the event
  }
}
// ... later ...
MyAction1 mc1 = new MyAction1();
myElement.addEventListener("DOMActivate", mc1, false);
</pre>

<p>In ECMAScript, one way to establish an event listener is to
define a function and pass that function to the <code>addEventListener</code> method:</p>

<pre>
function myAction1(evt) {
  // process the event
}
// ... later ...
myElement.addEventListener("DOMActivate", myAction1, false)
</pre>

<p>In ECMAScript, the character data content of an
<a href="#script-EventAttributes">event attribute</a> becomes
the definition of the ECMAScript function which gets invoked in
response to the event. As with all registered ECMAScript event
listener functions, this function receives an <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-Event">Event</a> object as a
parameter, and the name of the Event object is
<strong>evt</strong>. For example, it is possible to write:</p>

<pre>
&lt;rect onactivate="MyActivateHandler(evt)" .../&gt;
</pre>

<p>which will pass the <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-Event">Event</a> object <strong>evt</strong> into
function <code>MyActivateHandler</code>.</p>

<h2 id="svgdom-RelationshipWithCSSOM">B.7 Relationship with DOM Level 2 CSS</h2>

<h3 id="svgdom-CSSDOMIntro">B.7.1 Introduction</h3>

<p>The section describes the facilities from 
<a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html">DOM Level 2 CSS</a>
([<a href="#refs-ref-DOM2STYLE">DOM2STYLE</a>], chapter 2)
that are part of the SVG DOM.</p>

<h3 id="svgdom-CSSDOMFeaturesNoCSSSupport">B.7.2 User agents that do not support styling with CSS</h3>

<p>User agents that do not support <a href="#styling-StylingWithCSS">styling with CSS</a>
are only required to support the following interfaces from
<a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html">DOM Level 2 CSS</a>
([<a href="#refs-ref-DOM2STYLE">DOM2STYLE</a>], chapter 2), along with
any interfaces necessary to implement the interfaces, such as
<a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSPrimitiveValue">CSSPrimitiveValue</a> and <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValueList">CSSValueList</a>. These interfaces are used in
conjunction with the <a class="idlattr" href="#types-__svg__SVGStylable__getPresentationAttribute">getPresentationAttribute</a> method call
on interface <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>, which must be supported on all implementations
of the SVG DOM.</p>

<ul><li>Interface <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-RGBColor">RGBColor</a></li><li>Interface <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a></li></ul>

<h3 id="svgdom-CSSDOMFeaturesWithCSSSupport">B.7.3 User agents that support styling with CSS</h3>

<p>User agents that support <a href="#styling-StylingWithCSS">Styling with CSS</a>,
the SVG DOM, and <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/aural.html">aural styling</a>
([<a href="#refs-ref-CSS2">CSS2</a>], chapter 19)
must support all of the interfaces defined in
<a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html">DOM Level 2 CSS</a>
([<a href="#refs-ref-DOM2STYLE">DOM2STYLE</a>], chapter 2)
which apply to aural properties.</p>

<p>For <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">visual media</a>
([<a href="#refs-ref-CSS2">CSS2</a>], section 7.3.1),
user agents must support all of the required interfaces defined in
DOM Level 2 CSS.  All of the interfaces that are optional for DOM Level 2 CSS
are also optional for user agents implementing the SVG DOM.</p>
    
<h3 id="svgdom-ExtendedInterfaces">B.7.4 Extended interfaces</h3>

<p>Note: the <a class="idlattr" href="#types-__svg__SVGStylable__getPresentationAttribute">getPresentationAttribute</a> method and the interfaces that extend <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a> are deprecated, and may be dropped from future versions of the SVG specification.</p>

<p>Whether or not a user agent supports <a href="#styling-StylingWithCSS">styling with CSS</a>,
a user agent still must support interface <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a>, as this is the type
that is returned from the <a class="idlattr" href="#types-__svg__SVGStylable__getPresentationAttribute">getPresentationAttribute</a>
method call on interface <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>.</p>

<p>DOM Level 2 CSS defines a set of
<a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-extended">extended interfaces</a>
([<a href="#refs-ref-DOM2STYLE">DOM2STYLE</a>], section 2.3) for use in
conjunction with interface <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a>. The table below specifies the type
of <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a> used to represent each SVG property that applies to
<a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">visual media</a> 
([<a href="#refs-ref-CSS2">CSS2</a>], section 7.3.1).
The expectation is that the <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a> returned from the
<span class="dom-method-name">getPropertyCSSValue</span> method on the
<a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSStyleDeclaration">CSSStyleDeclaration</a> interface or the <a class="idlattr" href="#types-__svg__SVGStylable__getPresentationAttribute">getPresentationAttribute</a>
method on the <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> interface can be cast down, using
binding-specific casting methods, to the specific derived interface.</p>

<p>For properties that are represented by a custom interface
(the <span class="dom-attr-name">cssValueType</span> of the <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a> is CSS_CUSTOM),
the name of the derived interface is specified in the table. For these
properties, the table below indicates which extended interfaces
are mandatory and which are not.</p>

<p>For properties that consist of lists of values (the
<span class="dom-attr-name">cssValueType</span> of the <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a> is
CSS_VALUE_LIST), the derived interface is <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValueList">CSSValueList</a>. For all other
properties (the <span class="dom-attr-name">cssValueType</span> of the <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a>
is CSS_PRIMITIVE_VALUE), the derived interface is <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSPrimitiveValue">CSSPrimitiveValue</a>.</p>

<p>For shorthand properties, a <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a> always will have a value
of null. Shorthand property values can only be accessed and modified as
strings.</p>

<p>The SVG DOM defines the following SVG-specific custom property
interfaces, all of which are mandatory for SVG user agents:</p>

<ul><li><a class="idlinterface" href="#types-InterfaceSVGColor">SVGColor</a></li><li><a class="idlinterface" href="#types-InterfaceSVGICCColor">SVGICCColor</a></li><li><a class="idlinterface" href="#painting-InterfaceSVGPaint">SVGPaint</a></li></ul>

    <table class="vert property-table" summary="type representations for properties"><tr><th>Property Name</th><th>Representation</th><th>Mandatory?<br />(Extended interfaces only)</th></tr><tr><td><a href="#text-AlignmentBaselineProperty"><span class="prop-name">‘alignment-baseline’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#text-BaselineShiftProperty"><span class="prop-name">‘baseline-shift’</span></a></td><td>ident, length, percentage</td><td> </td></tr><tr><td><a href="#masking-ClipProperty"><span class="prop-name">‘clip’</span></a></td><td>rect, ident</td><td> </td></tr><tr><td><a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a></td><td>uri, ident</td><td> </td></tr><tr><td><a href="#masking-ClipRuleProperty"><span class="prop-name">‘clip-rule’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#color-ColorProperty"><span class="prop-name">‘color’</span></a></td><td>rgbcolor, ident</td><td> </td></tr><tr><td><a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#color-ColorProfileProperty"><span class="prop-name">‘color-profile’</span></a></td><td>list of strings, uri's and idents</td><td> </td></tr><tr><td><a href="#painting-ColorRenderingProperty"><span class="prop-name">‘color-rendering’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#interact-CursorProperty"><span class="prop-name">‘cursor’</span></a></td><td>uri, ident</td><td>no</td></tr><tr><td><a href="#text-DirectionProperty"><span class="prop-name">‘direction’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#text-DominantBaselineProperty"><span class="prop-name">‘dominant-baseline’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#filters-EnableBackgroundProperty"><span class="prop-name">‘enable-background’</span></a></td><td>list of idents and numbers</td><td> </td></tr><tr><td><a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a></td><td><a class="idlinterface" href="#painting-InterfaceSVGPaint">SVGPaint</a></td><td>yes</td></tr><tr><td><a href="#painting-FillOpacityProperty"><span class="prop-name">‘fill-opacity’</span></a></td><td>number</td><td> </td></tr><tr><td><a href="#painting-FillRuleProperty"><span class="prop-name">‘fill-rule’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#filters-FilterProperty"><span class="prop-name">‘filter’</span></a></td><td>uri, ident</td><td> </td></tr><tr><td><a href="#filters-FloodColorProperty"><span class="prop-name">‘flood-color’</span></a></td><td><a class="idlinterface" href="#types-InterfaceSVGColor">SVGColor</a></td><td>yes</td></tr><tr><td><a href="#filters-FloodOpacityProperty"><span class="prop-name">‘flood-opacity’</span></a></td><td>number</td><td> </td></tr><tr><td><a href="#text-FontProperty"><span class="prop-name">‘font’</span></a></td><td>null</td><td> </td></tr><tr><td><a href="#text-FontFamilyProperty"><span class="prop-name">‘font-family’</span></a></td><td>list of strings and idents</td><td> </td></tr><tr><td><a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a></td><td>ident, length, percentage</td><td> </td></tr><tr><td><a href="#text-FontSizeAdjustProperty"><span class="prop-name">‘font-size-adjust’</span></a></td><td>number, ident</td><td> </td></tr><tr><td><a href="#text-FontStretchProperty"><span class="prop-name">‘font-stretch’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#text-FontStyleProperty"><span class="prop-name">‘font-style’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#text-FontVariantProperty"><span class="prop-name">‘font-variant’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#text-FontWeightProperty"><span class="prop-name">‘font-weight’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#text-GlyphOrientationHorizontalProperty"><span class="prop-name">‘glyph-orientation-horizontal’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#text-GlyphOrientationVerticalProperty"><span class="prop-name">‘glyph-orientation-vertical’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#painting-ImageRenderingProperty"><span class="prop-name">‘image-rendering’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#text-KerningProperty"><span class="prop-name">‘kerning’</span></a></td><td>ident, length</td><td> </td></tr><tr><td><a href="#text-LetterSpacingProperty"><span class="prop-name">‘letter-spacing’</span></a></td><td>ident, length</td><td> </td></tr><tr><td><a href="#filters-LightingColorProperty"><span class="prop-name">‘lighting-color’</span></a></td><td><a class="idlinterface" href="#types-InterfaceSVGColor">SVGColor</a></td><td>yes</td></tr><tr><td><a href="#painting-MarkerProperty"><span class="prop-name">‘marker’</span></a></td><td>null</td><td> </td></tr><tr><td><a href="#painting-MarkerEndProperty"><span class="prop-name">‘marker-end’</span></a></td><td>uri, ident</td><td> </td></tr><tr><td><a href="#painting-MarkerMidProperty"><span class="prop-name">‘marker-mid’</span></a></td><td>uri, ident</td><td> </td></tr><tr><td><a href="#painting-MarkerStartProperty"><span class="prop-name">‘marker-start’</span></a></td><td>uri, ident</td><td> </td></tr><tr><td><a href="#masking-MaskProperty"><span class="prop-name">‘mask’</span></a></td><td>uri, ident</td><td> </td></tr><tr><td><a href="#masking-OpacityProperty"><span class="prop-name">‘opacity’</span></a></td><td>number</td><td> </td></tr><tr><td><a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#interact-PointerEventsProperty"><span class="prop-name">‘pointer-events’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#painting-ShapeRenderingProperty"><span class="prop-name">‘shape-rendering’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#pservers-StopColorProperty"><span class="prop-name">‘stop-color’</span></a></td><td><a class="idlinterface" href="#types-InterfaceSVGColor">SVGColor</a></td><td>yes</td></tr><tr><td><a href="#pservers-StopOpacityProperty"><span class="prop-name">‘stop-opacity’</span></a></td><td>number</td><td> </td></tr><tr><td><a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a></td><td><a class="idlinterface" href="#painting-InterfaceSVGPaint">SVGPaint</a></td><td>yes</td></tr><tr><td><a href="#painting-StrokeDasharrayProperty"><span class="prop-name">‘stroke-dasharray’</span></a></td><td>ident or list of lengths</td><td> </td></tr><tr><td><a href="#painting-StrokeDashoffsetProperty"><span class="prop-name">‘stroke-dashoffset’</span></a></td><td>length</td><td> </td></tr><tr><td><a href="#painting-StrokeLinecapProperty"><span class="prop-name">‘stroke-linecap’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#painting-StrokeLinejoinProperty"><span class="prop-name">‘stroke-linejoin’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#painting-StrokeMiterlimitProperty"><span class="prop-name">‘stroke-miterlimit’</span></a></td><td>length</td><td> </td></tr><tr><td><a href="#painting-StrokeOpacityProperty"><span class="prop-name">‘stroke-opacity’</span></a></td><td>number</td><td> </td></tr><tr><td><a href="#painting-StrokeWidthProperty"><span class="prop-name">‘stroke-width’</span></a></td><td>length</td><td> </td></tr><tr><td><a href="#text-TextAnchorProperty"><span class="prop-name">‘text-anchor’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#text-TextDecorationProperty"><span class="prop-name">‘text-decoration’</span></a></td><td>list of ident</td><td> </td></tr><tr><td><a href="#painting-TextRenderingProperty"><span class="prop-name">‘text-rendering’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#text-UnicodeBidiProperty"><span class="prop-name">‘unicode-bidi’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a></td><td>ident</td><td> </td></tr><tr><td><a href="#text-WordSpacingProperty"><span class="prop-name">‘word-spacing’</span></a></td><td>length, ident</td><td> </td></tr><tr><td><a href="#text-WritingModeProperty"><span class="prop-name">‘writing-mode’</span></a></td><td>ident</td><td> </td></tr></table>

<h2 id="svgdom-ReadOnlyNodes">B.8 Read only nodes in the DOM</h2>

<p>Some operations and attributes in the SVG DOM are defined to raise an
exception when an attempt is made to modify a node in the DOM that
is read only.  Such read only nodes are not related to attributes declared
in IDL with the <code>readonly</code> keyword.  Rather, they are nodes
that cannot be modified by virtue of being defined as
<a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/glossary.html#dt-readonly-node">readonly nodes</a>
by <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/">DOM Level 2 Core</a>
([<a href="#refs-ref-DOM2">DOM2</a>], Glossary appendix).
Specifically, <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-527DCFF2">Entity</a>
and <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-11C98490">EntityReference</a>
nodes and their descendants are read only ([<a href="#refs-ref-DOM2">DOM2</a>], section 1.3).</p>

    <h2 id="svgdom-InvalidValues">B.9 Invalid values</h2>
    <p>If a script sets a DOM attribute to an invalid value (e.g.,
    a negative number for an attribute that requires a non-negative
    number or an out-of-range value for an enumeration), unless
    this specification indicates otherwise, no exception shall be
    raised on setting, but the given document fragment shall become
    technically <span class="SVG-Term">in error</span> as described
    in <a href="#implnote-ErrorProcessing">Error
    processing</a>.</p>

</div><hr class="chapter-divider" />
<div id="chapter-idl">

<h1>Appendix C: IDL Definitions</h1>

<p class="normativity"><strong>This appendix is normative.</strong></p>

<p>This appendix contains the complete OMG IDL for the SVG Document Object
Model definitions. The IDL is also available at:</p>

<pre><a href="http://www.w3.org/TR/2011/REC-SVG11-20110816/svg.idl">http://www.w3.org/TR/2011/REC-SVG11-20110816/svg.idl</a></pre>

<p>The SVG IDL defines the model for the SVG DOM. Note that the SVG IDL is
defined such that some interfaces have more than one base class. The different
standard language bindings for the SVG DOM are responsible for defining how
to map all aspects of the SVG DOM into the given language, including how the
language should implement interfaces with more than one base class.</p>

<pre class="idl">module <b>smil</b> {

interface <b>ElementTimeControl</b> {
  void <a href="#animate-__smil__ElementTimeControl__beginElement">beginElement</a>();
  void <a href="#animate-__smil__ElementTimeControl__beginElementAt">beginElementAt</a>(in float offset);
  void <a href="#animate-__smil__ElementTimeControl__endElement">endElement</a>();
  void <a href="#animate-__smil__ElementTimeControl__endElementAt">endElementAt</a>(in float offset);
};

interface <b>TimeEvent</b> : <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-Event">Event</a> {

  readonly attribute <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Views/views.html#Views-AbstractView">AbstractView</a> <a href="#animate-__smil__TimeEvent__view">view</a>;
  readonly attribute long <a href="#animate-__smil__TimeEvent__detail">detail</a>;

  void <a href="#animate-__smil__TimeEvent__initTimeEvent">initTimeEvent</a>(in DOMString typeArg, in <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Views/views.html#Views-AbstractView">AbstractView</a> viewArg, in long detailArg);
};

};

module <b>svg</b> {

exception <b>SVGException</b> {
  unsigned short <a href="#svgdom-__svg__SVGException__code">code</a>;
};

// SVGException code
const unsigned short <a href="#svgdom-__svg__SVG_WRONG_TYPE_ERR">SVG_WRONG_TYPE_ERR</a> = 0;
const unsigned short <a href="#svgdom-__svg__SVG_INVALID_VALUE_ERR">SVG_INVALID_VALUE_ERR</a> = 1;
const unsigned short <a href="#svgdom-__svg__SVG_MATRIX_NOT_INVERTABLE">SVG_MATRIX_NOT_INVERTABLE</a> = 2;

interface <b>SVGElement</b> : <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-745549614">Element</a> {
           attribute DOMString <a href="#types-__svg__SVGElement__id">id</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
           attribute DOMString <a href="#types-__svg__SVGElement__xmlbase">xmlbase</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGSVGElement">SVGSVGElement</a> <a href="#types-__svg__SVGElement__ownerSVGElement">ownerSVGElement</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <a href="#types-__svg__SVGElement__viewportElement">viewportElement</a>;
};

interface <b>SVGAnimatedBoolean</b> {
           attribute boolean <a href="#types-__svg__SVGAnimatedBoolean__baseVal">baseVal</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  readonly attribute boolean <a href="#types-__svg__SVGAnimatedBoolean__animVal">animVal</a>;
};

interface <b>SVGAnimatedString</b> {
           attribute DOMString <a href="#types-__svg__SVGAnimatedString__baseVal">baseVal</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  readonly attribute DOMString <a href="#types-__svg__SVGAnimatedString__animVal">animVal</a>;
};

interface <b>SVGStringList</b> {

  readonly attribute unsigned long <a href="#types-__svg__SVGStringList__numberOfItems">numberOfItems</a>;

  void <a href="#types-__svg__SVGStringList__clear">clear</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  DOMString <a href="#types-__svg__SVGStringList__initialize">initialize</a>(in DOMString newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  DOMString <a href="#types-__svg__SVGStringList__getItem">getItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  DOMString <a href="#types-__svg__SVGStringList__insertItemBefore">insertItemBefore</a>(in DOMString newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  DOMString <a href="#types-__svg__SVGStringList__replaceItem">replaceItem</a>(in DOMString newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  DOMString <a href="#types-__svg__SVGStringList__removeItem">removeItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  DOMString <a href="#types-__svg__SVGStringList__appendItem">appendItem</a>(in DOMString newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGAnimatedEnumeration</b> {
           attribute unsigned short <a href="#types-__svg__SVGAnimatedEnumeration__baseVal">baseVal</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  readonly attribute unsigned short <a href="#types-__svg__SVGAnimatedEnumeration__animVal">animVal</a>;
};

interface <b>SVGAnimatedInteger</b> {
           attribute long <a href="#types-__svg__SVGAnimatedInteger__baseVal">baseVal</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  readonly attribute long <a href="#types-__svg__SVGAnimatedInteger__animVal">animVal</a>;
};

interface <b>SVGNumber</b> {
  attribute float <a href="#types-__svg__SVGNumber__value">value</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGAnimatedNumber</b> {
           attribute float <a href="#types-__svg__SVGAnimatedNumber__baseVal">baseVal</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  readonly attribute float <a href="#types-__svg__SVGAnimatedNumber__animVal">animVal</a>;
};

interface <b>SVGNumberList</b> {

  readonly attribute unsigned long <a href="#types-__svg__SVGNumberList__numberOfItems">numberOfItems</a>;

  void <a href="#types-__svg__SVGNumberList__clear">clear</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <a href="#types-__svg__SVGNumberList__initialize">initialize</a>(in <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <a href="#types-__svg__SVGNumberList__getItem">getItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <a href="#types-__svg__SVGNumberList__insertItemBefore">insertItemBefore</a>(in <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <a href="#types-__svg__SVGNumberList__replaceItem">replaceItem</a>(in <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <a href="#types-__svg__SVGNumberList__removeItem">removeItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <a href="#types-__svg__SVGNumberList__appendItem">appendItem</a>(in <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGAnimatedNumberList</b> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGNumberList">SVGNumberList</a> <a href="#types-__svg__SVGAnimatedNumberList__baseVal">baseVal</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGNumberList">SVGNumberList</a> <a href="#types-__svg__SVGAnimatedNumberList__animVal">animVal</a>;
};

interface <b>SVGLength</b> {

  // Length Unit Types
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_UNKNOWN">SVG_LENGTHTYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_NUMBER">SVG_LENGTHTYPE_NUMBER</a> = 1;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_PERCENTAGE">SVG_LENGTHTYPE_PERCENTAGE</a> = 2;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_EMS">SVG_LENGTHTYPE_EMS</a> = 3;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_EXS">SVG_LENGTHTYPE_EXS</a> = 4;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_PX">SVG_LENGTHTYPE_PX</a> = 5;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_CM">SVG_LENGTHTYPE_CM</a> = 6;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_MM">SVG_LENGTHTYPE_MM</a> = 7;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_IN">SVG_LENGTHTYPE_IN</a> = 8;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_PT">SVG_LENGTHTYPE_PT</a> = 9;
  const unsigned short <a href="#types-__svg__SVGLength__SVG_LENGTHTYPE_PC">SVG_LENGTHTYPE_PC</a> = 10;

  readonly attribute unsigned short <a href="#types-__svg__SVGLength__unitType">unitType</a>;
           attribute float <a href="#types-__svg__SVGLength__value">value</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
           attribute float <a href="#types-__svg__SVGLength__valueInSpecifiedUnits">valueInSpecifiedUnits</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
           attribute DOMString <a href="#types-__svg__SVGLength__valueAsString">valueAsString</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);

  void <a href="#types-__svg__SVGLength__newValueSpecifiedUnits">newValueSpecifiedUnits</a>(in unsigned short unitType, in float valueInSpecifiedUnits) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  void <a href="#types-__svg__SVGLength__convertToSpecifiedUnits">convertToSpecifiedUnits</a>(in unsigned short unitType) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGAnimatedLength</b> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#types-__svg__SVGAnimatedLength__baseVal">baseVal</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#types-__svg__SVGAnimatedLength__animVal">animVal</a>;
};

interface <b>SVGLengthList</b> {

  readonly attribute unsigned long <a href="#types-__svg__SVGLengthList__numberOfItems">numberOfItems</a>;

  void <a href="#types-__svg__SVGLengthList__clear">clear</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#types-__svg__SVGLengthList__initialize">initialize</a>(in <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#types-__svg__SVGLengthList__getItem">getItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#types-__svg__SVGLengthList__insertItemBefore">insertItemBefore</a>(in <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#types-__svg__SVGLengthList__replaceItem">replaceItem</a>(in <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#types-__svg__SVGLengthList__removeItem">removeItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#types-__svg__SVGLengthList__appendItem">appendItem</a>(in <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGAnimatedLengthList</b> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGLengthList">SVGLengthList</a> <a href="#types-__svg__SVGAnimatedLengthList__baseVal">baseVal</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGLengthList">SVGLengthList</a> <a href="#types-__svg__SVGAnimatedLengthList__animVal">animVal</a>;
};

interface <b>SVGAngle</b> {

  // Angle Unit Types
  const unsigned short <a href="#types-__svg__SVGAngle__SVG_ANGLETYPE_UNKNOWN">SVG_ANGLETYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#types-__svg__SVGAngle__SVG_ANGLETYPE_UNSPECIFIED">SVG_ANGLETYPE_UNSPECIFIED</a> = 1;
  const unsigned short <a href="#types-__svg__SVGAngle__SVG_ANGLETYPE_DEG">SVG_ANGLETYPE_DEG</a> = 2;
  const unsigned short <a href="#types-__svg__SVGAngle__SVG_ANGLETYPE_RAD">SVG_ANGLETYPE_RAD</a> = 3;
  const unsigned short <a href="#types-__svg__SVGAngle__SVG_ANGLETYPE_GRAD">SVG_ANGLETYPE_GRAD</a> = 4;

  readonly attribute unsigned short <a href="#types-__svg__SVGAngle__unitType">unitType</a>;
           attribute float <a href="#types-__svg__SVGAngle__value">value</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
           attribute float <a href="#types-__svg__SVGAngle__valueInSpecifiedUnits">valueInSpecifiedUnits</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
           attribute DOMString <a href="#types-__svg__SVGAngle__valueAsString">valueAsString</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);

  void <a href="#types-__svg__SVGAngle__newValueSpecifiedUnits">newValueSpecifiedUnits</a>(in unsigned short unitType, in float valueInSpecifiedUnits) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  void <a href="#types-__svg__SVGAngle__convertToSpecifiedUnits">convertToSpecifiedUnits</a>(in unsigned short unitType) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGAnimatedAngle</b> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> <a href="#types-__svg__SVGAnimatedAngle__baseVal">baseVal</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> <a href="#types-__svg__SVGAnimatedAngle__animVal">animVal</a>;
};

interface <b>SVGColor</b> : <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a> {

  // Color Types
  const unsigned short <a href="#types-__svg__SVGColor__SVG_COLORTYPE_UNKNOWN">SVG_COLORTYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#types-__svg__SVGColor__SVG_COLORTYPE_RGBCOLOR">SVG_COLORTYPE_RGBCOLOR</a> = 1;
  const unsigned short <a href="#types-__svg__SVGColor__SVG_COLORTYPE_RGBCOLOR_ICCCOLOR">SVG_COLORTYPE_RGBCOLOR_ICCCOLOR</a> = 2;
  const unsigned short <a href="#types-__svg__SVGColor__SVG_COLORTYPE_CURRENTCOLOR">SVG_COLORTYPE_CURRENTCOLOR</a> = 3;

  readonly attribute unsigned short <a href="#types-__svg__SVGColor__colorType">colorType</a>;
  readonly attribute <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-RGBColor">RGBColor</a> <a href="#types-__svg__SVGColor__rgbColor">rgbColor</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGICCColor">SVGICCColor</a> <a href="#types-__svg__SVGColor__iccColor">iccColor</a>;

  void <a href="#types-__svg__SVGColor__setRGBColor">setRGBColor</a>(in DOMString rgbColor) raises(<a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>);
  void <a href="#types-__svg__SVGColor__setRGBColorICCColor">setRGBColorICCColor</a>(in DOMString rgbColor, in DOMString iccColor) raises(<a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>);
  void <a href="#types-__svg__SVGColor__setColor">setColor</a>(in unsigned short colorType, in DOMString rgbColor, in DOMString iccColor) raises(<a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>);
};

interface <b>SVGICCColor</b> {
           attribute DOMString <a href="#types-__svg__SVGICCColor__colorProfile">colorProfile</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGNumberList">SVGNumberList</a> <a href="#types-__svg__SVGICCColor__colors">colors</a>;
};

interface <b>SVGRect</b> {
  attribute float <a href="#types-__svg__SVGRect__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#types-__svg__SVGRect__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#types-__svg__SVGRect__width">width</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#types-__svg__SVGRect__height">height</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGAnimatedRect</b> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <a href="#types-__svg__SVGAnimatedRect__baseVal">baseVal</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <a href="#types-__svg__SVGAnimatedRect__animVal">animVal</a>;
};

interface <b>SVGUnitTypes</b> {
  // Unit Types
  const unsigned short <a href="#types-__svg__SVGUnitTypes__SVG_UNIT_TYPE_UNKNOWN">SVG_UNIT_TYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#types-__svg__SVGUnitTypes__SVG_UNIT_TYPE_USERSPACEONUSE">SVG_UNIT_TYPE_USERSPACEONUSE</a> = 1;
  const unsigned short <a href="#types-__svg__SVGUnitTypes__SVG_UNIT_TYPE_OBJECTBOUNDINGBOX">SVG_UNIT_TYPE_OBJECTBOUNDINGBOX</a> = 2;
};

interface <b>SVGStylable</b> {

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#types-__svg__SVGStylable__className">className</a>;
  readonly attribute <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSStyleDeclaration">CSSStyleDeclaration</a> <a href="#types-__svg__SVGStylable__style">style</a>;

  <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSValue">CSSValue</a> <a href="#types-__svg__SVGStylable__getPresentationAttribute">getPresentationAttribute</a>(in DOMString name);
};

interface <b>SVGLocatable</b> {

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <a href="#types-__svg__SVGLocatable__nearestViewportElement">nearestViewportElement</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <a href="#types-__svg__SVGLocatable__farthestViewportElement">farthestViewportElement</a>;

  <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <a href="#types-__svg__SVGLocatable__getBBox">getBBox</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#types-__svg__SVGLocatable__getCTM">getCTM</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#types-__svg__SVGLocatable__getScreenCTM">getScreenCTM</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#types-__svg__SVGLocatable__getTransformToElement">getTransformToElement</a>(in <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> element) raises(<a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>);
};

interface <b>SVGTransformable</b> : <a class="idlinterface" href="#types-InterfaceSVGLocatable">SVGLocatable</a> {
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGAnimatedTransformList">SVGAnimatedTransformList</a> <a href="#types-__svg__SVGTransformable__transform">transform</a>;
};

interface <b>SVGTests</b> {

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGStringList">SVGStringList</a> <a href="#types-__svg__SVGTests__requiredFeatures">requiredFeatures</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGStringList">SVGStringList</a> <a href="#types-__svg__SVGTests__requiredExtensions">requiredExtensions</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGStringList">SVGStringList</a> <a href="#types-__svg__SVGTests__systemLanguage">systemLanguage</a>;

  boolean <a href="#types-__svg__SVGTests__hasExtension">hasExtension</a>(in DOMString extension);
};

interface <b>SVGLangSpace</b> {
  attribute DOMString <a href="#types-__svg__SVGLangSpace__xmllang">xmllang</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute DOMString <a href="#types-__svg__SVGLangSpace__xmlspace">xmlspace</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGExternalResourcesRequired</b> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedBoolean">SVGAnimatedBoolean</a> <a href="#types-__svg__SVGExternalResourcesRequired__externalResourcesRequired">externalResourcesRequired</a>;
};

interface <b>SVGFitToViewBox</b> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedRect">SVGAnimatedRect</a> <a href="#types-__svg__SVGFitToViewBox__viewBox">viewBox</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGAnimatedPreserveAspectRatio">SVGAnimatedPreserveAspectRatio</a> <a href="#types-__svg__SVGFitToViewBox__preserveAspectRatio">preserveAspectRatio</a>;
};

interface <b>SVGZoomAndPan</b> {

  // Zoom and Pan Types
  const unsigned short <a href="#types-__svg__SVGZoomAndPan__SVG_ZOOMANDPAN_UNKNOWN">SVG_ZOOMANDPAN_UNKNOWN</a> = 0;
  const unsigned short <a href="#types-__svg__SVGZoomAndPan__SVG_ZOOMANDPAN_DISABLE">SVG_ZOOMANDPAN_DISABLE</a> = 1;
  const unsigned short <a href="#types-__svg__SVGZoomAndPan__SVG_ZOOMANDPAN_MAGNIFY">SVG_ZOOMANDPAN_MAGNIFY</a> = 2;

  attribute unsigned short <a href="#types-__svg__SVGZoomAndPan__zoomAndPan">zoomAndPan</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGViewSpec</b> : <a class="idlinterface" href="#types-InterfaceSVGZoomAndPan">SVGZoomAndPan</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGFitToViewBox">SVGFitToViewBox</a> {
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a> <a href="#types-__svg__SVGViewSpec__transform">transform</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <a href="#types-__svg__SVGViewSpec__viewTarget">viewTarget</a>;
  readonly attribute DOMString <a href="#types-__svg__SVGViewSpec__viewBoxString">viewBoxString</a>;
  readonly attribute DOMString <a href="#types-__svg__SVGViewSpec__preserveAspectRatioString">preserveAspectRatioString</a>;
  readonly attribute DOMString <a href="#types-__svg__SVGViewSpec__transformString">transformString</a>;
  readonly attribute DOMString <a href="#types-__svg__SVGViewSpec__viewTargetString">viewTargetString</a>;
};

interface <b>SVGURIReference</b> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#types-__svg__SVGURIReference__href">href</a>;
};

interface <b>SVGCSSRule</b> : <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-CSSRule">CSSRule</a> {
  const unsigned short <a href="#types-__svg__SVGCSSRule__COLOR_PROFILE_RULE">COLOR_PROFILE_RULE</a> = 7;
};

interface <b>SVGRenderingIntent</b> {
  // Rendering Intent Types
  const unsigned short <a href="#types-__svg__SVGRenderingIntent__RENDERING_INTENT_UNKNOWN">RENDERING_INTENT_UNKNOWN</a> = 0;
  const unsigned short <a href="#types-__svg__SVGRenderingIntent__RENDERING_INTENT_AUTO">RENDERING_INTENT_AUTO</a> = 1;
  const unsigned short <a href="#types-__svg__SVGRenderingIntent__RENDERING_INTENT_PERCEPTUAL">RENDERING_INTENT_PERCEPTUAL</a> = 2;
  const unsigned short <a href="#types-__svg__SVGRenderingIntent__RENDERING_INTENT_RELATIVE_COLORIMETRIC">RENDERING_INTENT_RELATIVE_COLORIMETRIC</a> = 3;
  const unsigned short <a href="#types-__svg__SVGRenderingIntent__RENDERING_INTENT_SATURATION">RENDERING_INTENT_SATURATION</a> = 4;
  const unsigned short <a href="#types-__svg__SVGRenderingIntent__RENDERING_INTENT_ABSOLUTE_COLORIMETRIC">RENDERING_INTENT_ABSOLUTE_COLORIMETRIC</a> = 5;
};

interface <b>SVGDocument</b> : <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#i-Document">Document</a>,
                        <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-DocumentEvent">DocumentEvent</a> {
  readonly attribute DOMString <a href="#struct-__svg__SVGDocument__title">title</a>;
  readonly attribute DOMString <a href="#struct-__svg__SVGDocument__referrer">referrer</a>;
  readonly attribute DOMString <a href="#struct-__svg__SVGDocument__domain">domain</a>;
  readonly attribute DOMString <a href="#struct-__svg__SVGDocument__URL">URL</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGSVGElement">SVGSVGElement</a> <a href="#struct-__svg__SVGDocument__rootElement">rootElement</a>;
};

interface <b>SVGSVGElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGLocatable">SVGLocatable</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGFitToViewBox">SVGFitToViewBox</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGZoomAndPan">SVGZoomAndPan</a>,
                          <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-DocumentEvent">DocumentEvent</a>,
                          <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-ViewCSS">ViewCSS</a>,
                          <a class="idlinterface" href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.html#CSS-DocumentCSS">DocumentCSS</a> {

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGSVGElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGSVGElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGSVGElement__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGSVGElement__height">height</a>;
           attribute DOMString <a href="#struct-__svg__SVGSVGElement__contentScriptType">contentScriptType</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
           attribute DOMString <a href="#struct-__svg__SVGSVGElement__contentStyleType">contentStyleType</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <a href="#struct-__svg__SVGSVGElement__viewport">viewport</a>;
  readonly attribute float <a href="#struct-__svg__SVGSVGElement__pixelUnitToMillimeterX">pixelUnitToMillimeterX</a>;
  readonly attribute float <a href="#struct-__svg__SVGSVGElement__pixelUnitToMillimeterY">pixelUnitToMillimeterY</a>;
  readonly attribute float <a href="#struct-__svg__SVGSVGElement__screenPixelToMillimeterX">screenPixelToMillimeterX</a>;
  readonly attribute float <a href="#struct-__svg__SVGSVGElement__screenPixelToMillimeterY">screenPixelToMillimeterY</a>;
  readonly attribute boolean <a href="#struct-__svg__SVGSVGElement__useCurrentView">useCurrentView</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGViewSpec">SVGViewSpec</a> <a href="#struct-__svg__SVGSVGElement__currentView">currentView</a>;
           attribute float <a href="#struct-__svg__SVGSVGElement__currentScale">currentScale</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#struct-__svg__SVGSVGElement__currentTranslate">currentTranslate</a>;

  unsigned long <a href="#struct-__svg__SVGSVGElement__suspendRedraw">suspendRedraw</a>(in unsigned long maxWaitMilliseconds);
  void <a href="#struct-__svg__SVGSVGElement__unsuspendRedraw">unsuspendRedraw</a>(in unsigned long suspendHandleID);
  void <a href="#struct-__svg__SVGSVGElement__unsuspendRedrawAll">unsuspendRedrawAll</a>();
  void <a href="#struct-__svg__SVGSVGElement__forceRedraw">forceRedraw</a>();
  void <a href="#struct-__svg__SVGSVGElement__pauseAnimations">pauseAnimations</a>();
  void <a href="#struct-__svg__SVGSVGElement__unpauseAnimations">unpauseAnimations</a>();
  boolean <a href="#struct-__svg__SVGSVGElement__animationsPaused">animationsPaused</a>();
  float <a href="#struct-__svg__SVGSVGElement__getCurrentTime">getCurrentTime</a>();
  void <a href="#struct-__svg__SVGSVGElement__setCurrentTime">setCurrentTime</a>(in float seconds);
  <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-536297177">NodeList</a> <a href="#struct-__svg__SVGSVGElement__getIntersectionList">getIntersectionList</a>(in <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> rect, in <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> referenceElement);
  <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-536297177">NodeList</a> <a href="#struct-__svg__SVGSVGElement__getEnclosureList">getEnclosureList</a>(in <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> rect, in <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> referenceElement);
  boolean <a href="#struct-__svg__SVGSVGElement__checkIntersection">checkIntersection</a>(in <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> element, in <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> rect);
  boolean <a href="#struct-__svg__SVGSVGElement__checkEnclosure">checkEnclosure</a>(in <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> element, in <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> rect);
  void <a href="#struct-__svg__SVGSVGElement__deselectAll">deselectAll</a>();
  <a class="idlinterface" href="#types-InterfaceSVGNumber">SVGNumber</a> <a href="#struct-__svg__SVGSVGElement__createSVGNumber">createSVGNumber</a>();
  <a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> <a href="#struct-__svg__SVGSVGElement__createSVGLength">createSVGLength</a>();
  <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> <a href="#struct-__svg__SVGSVGElement__createSVGAngle">createSVGAngle</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#struct-__svg__SVGSVGElement__createSVGPoint">createSVGPoint</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#struct-__svg__SVGSVGElement__createSVGMatrix">createSVGMatrix</a>();
  <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <a href="#struct-__svg__SVGSVGElement__createSVGRect">createSVGRect</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#struct-__svg__SVGSVGElement__createSVGTransform">createSVGTransform</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#struct-__svg__SVGSVGElement__createSVGTransformFromMatrix">createSVGTransformFromMatrix</a>(in <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> matrix);
  <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-745549614">Element</a> <a href="#struct-__svg__SVGSVGElement__getElementById">getElementById</a>(in DOMString elementId);
};

interface <b>SVGGElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
};

interface <b>SVGDefsElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
};

interface <b>SVGDescElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
};

interface <b>SVGTitleElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
};

interface <b>SVGSymbolElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGFitToViewBox">SVGFitToViewBox</a> {
};

interface <b>SVGUseElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                          <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGUseElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGUseElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGUseElement__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGUseElement__height">height</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <a href="#struct-__svg__SVGUseElement__instanceRoot">instanceRoot</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <a href="#struct-__svg__SVGUseElement__animatedInstanceRoot">animatedInstanceRoot</a>;
};

interface <b>SVGElementInstance</b> : <a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget">EventTarget</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <a href="#struct-__svg__SVGElementInstance__correspondingElement">correspondingElement</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGUseElement">SVGUseElement</a> <a href="#struct-__svg__SVGElementInstance__correspondingUseElement">correspondingUseElement</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <a href="#struct-__svg__SVGElementInstance__parentNode">parentNode</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGElementInstanceList">SVGElementInstanceList</a> <a href="#struct-__svg__SVGElementInstance__childNodes">childNodes</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <a href="#struct-__svg__SVGElementInstance__firstChild">firstChild</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <a href="#struct-__svg__SVGElementInstance__lastChild">lastChild</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <a href="#struct-__svg__SVGElementInstance__previousSibling">previousSibling</a>;
  readonly attribute <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <a href="#struct-__svg__SVGElementInstance__nextSibling">nextSibling</a>;
};

interface <b>SVGElementInstanceList</b> {

  readonly attribute unsigned long <a href="#struct-__svg__SVGElementInstanceList__length">length</a>;

  <a class="idlinterface" href="#struct-InterfaceSVGElementInstance">SVGElementInstance</a> <a href="#struct-__svg__SVGElementInstanceList__item">item</a>(in unsigned long index);
};

interface <b>SVGImageElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGImageElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGImageElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGImageElement__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#struct-__svg__SVGImageElement__height">height</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGAnimatedPreserveAspectRatio">SVGAnimatedPreserveAspectRatio</a> <a href="#struct-__svg__SVGImageElement__preserveAspectRatio">preserveAspectRatio</a>;
};

interface <b>SVGSwitchElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
};

interface <b>GetSVGDocument</b> {
  <a class="idlinterface" href="#struct-InterfaceSVGDocument">SVGDocument</a> <a href="#struct-__svg__GetSVGDocument__getSVGDocument">getSVGDocument</a>();
};

interface <b>SVGStyleElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a> {
  attribute DOMString <a href="#styling-__svg__SVGStyleElement__type">type</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute DOMString <a href="#styling-__svg__SVGStyleElement__media">media</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute DOMString <a href="#styling-__svg__SVGStyleElement__title">title</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPoint</b> {

  attribute float <a href="#coords-__svg__SVGPoint__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#coords-__svg__SVGPoint__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);

  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#coords-__svg__SVGPoint__matrixTransform">matrixTransform</a>(in <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> matrix);
};

interface <b>SVGPointList</b> {

  readonly attribute unsigned long <a href="#coords-__svg__SVGPointList__numberOfItems">numberOfItems</a>;

  void <a href="#coords-__svg__SVGPointList__clear">clear</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#coords-__svg__SVGPointList__initialize">initialize</a>(in <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#coords-__svg__SVGPointList__getItem">getItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#coords-__svg__SVGPointList__insertItemBefore">insertItemBefore</a>(in <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#coords-__svg__SVGPointList__replaceItem">replaceItem</a>(in <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#coords-__svg__SVGPointList__removeItem">removeItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#coords-__svg__SVGPointList__appendItem">appendItem</a>(in <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGMatrix</b> {

  attribute float <a href="#coords-__svg__SVGMatrix__a">a</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#coords-__svg__SVGMatrix__b">b</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#coords-__svg__SVGMatrix__c">c</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#coords-__svg__SVGMatrix__d">d</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#coords-__svg__SVGMatrix__e">e</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#coords-__svg__SVGMatrix__f">f</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);

  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__multiply">multiply</a>(in <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> secondMatrix);
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__inverse">inverse</a>() raises(<a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__translate">translate</a>(in float x, in float y);
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__scale">scale</a>(in float scaleFactor);
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__scaleNonUniform">scaleNonUniform</a>(in float scaleFactorX, in float scaleFactorY);
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__rotate">rotate</a>(in float angle);
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__rotateFromVector">rotateFromVector</a>(in float x, in float y) raises(<a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__flipX">flipX</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__flipY">flipY</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__skewX">skewX</a>(in float angle);
  <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGMatrix__skewY">skewY</a>(in float angle);
};

interface <b>SVGTransform</b> {

  // Transform Types
  const unsigned short <a href="#coords-__svg__SVGTransform__SVG_TRANSFORM_UNKNOWN">SVG_TRANSFORM_UNKNOWN</a> = 0;
  const unsigned short <a href="#coords-__svg__SVGTransform__SVG_TRANSFORM_MATRIX">SVG_TRANSFORM_MATRIX</a> = 1;
  const unsigned short <a href="#coords-__svg__SVGTransform__SVG_TRANSFORM_TRANSLATE">SVG_TRANSFORM_TRANSLATE</a> = 2;
  const unsigned short <a href="#coords-__svg__SVGTransform__SVG_TRANSFORM_SCALE">SVG_TRANSFORM_SCALE</a> = 3;
  const unsigned short <a href="#coords-__svg__SVGTransform__SVG_TRANSFORM_ROTATE">SVG_TRANSFORM_ROTATE</a> = 4;
  const unsigned short <a href="#coords-__svg__SVGTransform__SVG_TRANSFORM_SKEWX">SVG_TRANSFORM_SKEWX</a> = 5;
  const unsigned short <a href="#coords-__svg__SVGTransform__SVG_TRANSFORM_SKEWY">SVG_TRANSFORM_SKEWY</a> = 6;

  readonly attribute unsigned short <a href="#coords-__svg__SVGTransform__type">type</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> <a href="#coords-__svg__SVGTransform__matrix">matrix</a>;
  readonly attribute float <a href="#coords-__svg__SVGTransform__angle">angle</a>;

  void <a href="#coords-__svg__SVGTransform__setMatrix">setMatrix</a>(in <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> matrix) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  void <a href="#coords-__svg__SVGTransform__setTranslate">setTranslate</a>(in float tx, in float ty) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  void <a href="#coords-__svg__SVGTransform__setScale">setScale</a>(in float sx, in float sy) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  void <a href="#coords-__svg__SVGTransform__setRotate">setRotate</a>(in float angle, in float cx, in float cy) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  void <a href="#coords-__svg__SVGTransform__setSkewX">setSkewX</a>(in float angle) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  void <a href="#coords-__svg__SVGTransform__setSkewY">setSkewY</a>(in float angle) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGTransformList</b> {

  readonly attribute unsigned long <a href="#coords-__svg__SVGTransformList__numberOfItems">numberOfItems</a>;

  void <a href="#coords-__svg__SVGTransformList__clear">clear</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#coords-__svg__SVGTransformList__initialize">initialize</a>(in <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#coords-__svg__SVGTransformList__getItem">getItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#coords-__svg__SVGTransformList__insertItemBefore">insertItemBefore</a>(in <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#coords-__svg__SVGTransformList__replaceItem">replaceItem</a>(in <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#coords-__svg__SVGTransformList__removeItem">removeItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#coords-__svg__SVGTransformList__appendItem">appendItem</a>(in <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#coords-__svg__SVGTransformList__createSVGTransformFromMatrix">createSVGTransformFromMatrix</a>(in <a class="idlinterface" href="#coords-InterfaceSVGMatrix">SVGMatrix</a> matrix);
  <a class="idlinterface" href="#coords-InterfaceSVGTransform">SVGTransform</a> <a href="#coords-__svg__SVGTransformList__consolidate">consolidate</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGAnimatedTransformList</b> {
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a> <a href="#coords-__svg__SVGAnimatedTransformList__baseVal">baseVal</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGTransformList">SVGTransformList</a> <a href="#coords-__svg__SVGAnimatedTransformList__animVal">animVal</a>;
};

interface <b>SVGPreserveAspectRatio</b> {

  // Alignment Types
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_UNKNOWN">SVG_PRESERVEASPECTRATIO_UNKNOWN</a> = 0;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_NONE">SVG_PRESERVEASPECTRATIO_NONE</a> = 1;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMINYMIN">SVG_PRESERVEASPECTRATIO_XMINYMIN</a> = 2;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMIDYMIN">SVG_PRESERVEASPECTRATIO_XMIDYMIN</a> = 3;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMAXYMIN">SVG_PRESERVEASPECTRATIO_XMAXYMIN</a> = 4;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMINYMID">SVG_PRESERVEASPECTRATIO_XMINYMID</a> = 5;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMIDYMID">SVG_PRESERVEASPECTRATIO_XMIDYMID</a> = 6;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMAXYMID">SVG_PRESERVEASPECTRATIO_XMAXYMID</a> = 7;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMINYMAX">SVG_PRESERVEASPECTRATIO_XMINYMAX</a> = 8;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMIDYMAX">SVG_PRESERVEASPECTRATIO_XMIDYMAX</a> = 9;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_XMAXYMAX">SVG_PRESERVEASPECTRATIO_XMAXYMAX</a> = 10;

  // Meet-or-slice Types
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_MEETORSLICE_UNKNOWN">SVG_MEETORSLICE_UNKNOWN</a> = 0;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_MEETORSLICE_MEET">SVG_MEETORSLICE_MEET</a> = 1;
  const unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__SVG_MEETORSLICE_SLICE">SVG_MEETORSLICE_SLICE</a> = 2;

  attribute unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__align">align</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute unsigned short <a href="#coords-__svg__SVGPreserveAspectRatio__meetOrSlice">meetOrSlice</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGAnimatedPreserveAspectRatio</b> {
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGPreserveAspectRatio">SVGPreserveAspectRatio</a> <a href="#coords-__svg__SVGAnimatedPreserveAspectRatio__baseVal">baseVal</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGPreserveAspectRatio">SVGPreserveAspectRatio</a> <a href="#coords-__svg__SVGAnimatedPreserveAspectRatio__animVal">animVal</a>;
};

interface <b>SVGPathSeg</b> {

  // Path Segment Types
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_UNKNOWN">PATHSEG_UNKNOWN</a> = 0;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CLOSEPATH">PATHSEG_CLOSEPATH</a> = 1;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_MOVETO_ABS">PATHSEG_MOVETO_ABS</a> = 2;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_MOVETO_REL">PATHSEG_MOVETO_REL</a> = 3;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_LINETO_ABS">PATHSEG_LINETO_ABS</a> = 4;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_LINETO_REL">PATHSEG_LINETO_REL</a> = 5;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CURVETO_CUBIC_ABS">PATHSEG_CURVETO_CUBIC_ABS</a> = 6;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CURVETO_CUBIC_REL">PATHSEG_CURVETO_CUBIC_REL</a> = 7;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CURVETO_QUADRATIC_ABS">PATHSEG_CURVETO_QUADRATIC_ABS</a> = 8;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CURVETO_QUADRATIC_REL">PATHSEG_CURVETO_QUADRATIC_REL</a> = 9;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_ARC_ABS">PATHSEG_ARC_ABS</a> = 10;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_ARC_REL">PATHSEG_ARC_REL</a> = 11;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_LINETO_HORIZONTAL_ABS">PATHSEG_LINETO_HORIZONTAL_ABS</a> = 12;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_LINETO_HORIZONTAL_REL">PATHSEG_LINETO_HORIZONTAL_REL</a> = 13;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_LINETO_VERTICAL_ABS">PATHSEG_LINETO_VERTICAL_ABS</a> = 14;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_LINETO_VERTICAL_REL">PATHSEG_LINETO_VERTICAL_REL</a> = 15;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CURVETO_CUBIC_SMOOTH_ABS">PATHSEG_CURVETO_CUBIC_SMOOTH_ABS</a> = 16;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CURVETO_CUBIC_SMOOTH_REL">PATHSEG_CURVETO_CUBIC_SMOOTH_REL</a> = 17;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS">PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS</a> = 18;
  const unsigned short <a href="#paths-__svg__SVGPathSeg__PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL">PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL</a> = 19;

  readonly attribute unsigned short <a href="#paths-__svg__SVGPathSeg__pathSegType">pathSegType</a>;
  readonly attribute DOMString <a href="#paths-__svg__SVGPathSeg__pathSegTypeAsLetter">pathSegTypeAsLetter</a>;
};

interface <b>SVGPathSegClosePath</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
};

interface <b>SVGPathSegMovetoAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegMovetoAbs__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegMovetoAbs__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegMovetoRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegMovetoRel__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegMovetoRel__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegLinetoAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegLinetoAbs__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegLinetoAbs__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegLinetoRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegLinetoRel__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegLinetoRel__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegCurvetoCubicAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicAbs__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicAbs__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicAbs__x1">x1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicAbs__y1">y1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicAbs__x2">x2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicAbs__y2">y2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegCurvetoCubicRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicRel__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicRel__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicRel__x1">x1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicRel__y1">y1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicRel__x2">x2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicRel__y2">y2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegCurvetoQuadraticAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticAbs__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticAbs__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticAbs__x1">x1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticAbs__y1">y1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegCurvetoQuadraticRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticRel__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticRel__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticRel__x1">x1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticRel__y1">y1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegArcAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegArcAbs__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegArcAbs__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegArcAbs__r1">r1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegArcAbs__r2">r2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegArcAbs__angle">angle</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute boolean <a href="#paths-__svg__SVGPathSegArcAbs__largeArcFlag">largeArcFlag</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute boolean <a href="#paths-__svg__SVGPathSegArcAbs__sweepFlag">sweepFlag</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegArcRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegArcRel__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegArcRel__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegArcRel__r1">r1</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegArcRel__r2">r2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegArcRel__angle">angle</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute boolean <a href="#paths-__svg__SVGPathSegArcRel__largeArcFlag">largeArcFlag</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute boolean <a href="#paths-__svg__SVGPathSegArcRel__sweepFlag">sweepFlag</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegLinetoHorizontalAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegLinetoHorizontalAbs__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegLinetoHorizontalRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegLinetoHorizontalRel__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegLinetoVerticalAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegLinetoVerticalAbs__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegLinetoVerticalRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegLinetoVerticalRel__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegCurvetoCubicSmoothAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicSmoothAbs__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicSmoothAbs__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicSmoothAbs__x2">x2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicSmoothAbs__y2">y2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegCurvetoCubicSmoothRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicSmoothRel__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicSmoothRel__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicSmoothRel__x2">x2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoCubicSmoothRel__y2">y2</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegCurvetoQuadraticSmoothAbs</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticSmoothAbs__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticSmoothAbs__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegCurvetoQuadraticSmoothRel</b> : <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> {
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticSmoothRel__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#paths-__svg__SVGPathSegCurvetoQuadraticSmoothRel__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPathSegList</b> {

  readonly attribute unsigned long <a href="#paths-__svg__SVGPathSegList__numberOfItems">numberOfItems</a>;

  void <a href="#paths-__svg__SVGPathSegList__clear">clear</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <a href="#paths-__svg__SVGPathSegList__initialize">initialize</a>(in <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <a href="#paths-__svg__SVGPathSegList__getItem">getItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <a href="#paths-__svg__SVGPathSegList__insertItemBefore">insertItemBefore</a>(in <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <a href="#paths-__svg__SVGPathSegList__replaceItem">replaceItem</a>(in <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> newItem, in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <a href="#paths-__svg__SVGPathSegList__removeItem">removeItem</a>(in unsigned long index) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> <a href="#paths-__svg__SVGPathSegList__appendItem">appendItem</a>(in <a class="idlinterface" href="#paths-InterfaceSVGPathSeg">SVGPathSeg</a> newItem) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGAnimatedPathData</b> {
  readonly attribute <a class="idlinterface" href="#paths-InterfaceSVGPathSegList">SVGPathSegList</a> <a href="#paths-__svg__SVGAnimatedPathData__pathSegList">pathSegList</a>;
  readonly attribute <a class="idlinterface" href="#paths-InterfaceSVGPathSegList">SVGPathSegList</a> <a href="#paths-__svg__SVGAnimatedPathData__normalizedPathSegList">normalizedPathSegList</a>;
  readonly attribute <a class="idlinterface" href="#paths-InterfaceSVGPathSegList">SVGPathSegList</a> <a href="#paths-__svg__SVGAnimatedPathData__animatedPathSegList">animatedPathSegList</a>;
  readonly attribute <a class="idlinterface" href="#paths-InterfaceSVGPathSegList">SVGPathSegList</a> <a href="#paths-__svg__SVGAnimatedPathData__animatedNormalizedPathSegList">animatedNormalizedPathSegList</a>;
};

interface <b>SVGPathElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a>,
                           <a class="idlinterface" href="#paths-InterfaceSVGAnimatedPathData">SVGAnimatedPathData</a> {

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#paths-__svg__SVGPathElement__pathLength">pathLength</a>;

  float <a href="#paths-__svg__SVGPathElement__getTotalLength">getTotalLength</a>();
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#paths-__svg__SVGPathElement__getPointAtLength">getPointAtLength</a>(in float distance);
  unsigned long <a href="#paths-__svg__SVGPathElement__getPathSegAtLength">getPathSegAtLength</a>(in float distance);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegClosePath">SVGPathSegClosePath</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegClosePath">createSVGPathSegClosePath</a>();
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegMovetoAbs">SVGPathSegMovetoAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegMovetoAbs">createSVGPathSegMovetoAbs</a>(in float x, in float y);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegMovetoRel">SVGPathSegMovetoRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegMovetoRel">createSVGPathSegMovetoRel</a>(in float x, in float y);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoAbs">SVGPathSegLinetoAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegLinetoAbs">createSVGPathSegLinetoAbs</a>(in float x, in float y);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoRel">SVGPathSegLinetoRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegLinetoRel">createSVGPathSegLinetoRel</a>(in float x, in float y);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicAbs">SVGPathSegCurvetoCubicAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegCurvetoCubicAbs">createSVGPathSegCurvetoCubicAbs</a>(in float x, in float y, in float x1, in float y1, in float x2, in float y2);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicRel">SVGPathSegCurvetoCubicRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegCurvetoCubicRel">createSVGPathSegCurvetoCubicRel</a>(in float x, in float y, in float x1, in float y1, in float x2, in float y2);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticAbs">SVGPathSegCurvetoQuadraticAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegCurvetoQuadraticAbs">createSVGPathSegCurvetoQuadraticAbs</a>(in float x, in float y, in float x1, in float y1);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticRel">SVGPathSegCurvetoQuadraticRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegCurvetoQuadraticRel">createSVGPathSegCurvetoQuadraticRel</a>(in float x, in float y, in float x1, in float y1);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegArcAbs">SVGPathSegArcAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegArcAbs">createSVGPathSegArcAbs</a>(in float x, in float y, in float r1, in float r2, in float angle, in boolean largeArcFlag, in boolean sweepFlag);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegArcRel">SVGPathSegArcRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegArcRel">createSVGPathSegArcRel</a>(in float x, in float y, in float r1, in float r2, in float angle, in boolean largeArcFlag, in boolean sweepFlag);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoHorizontalAbs">SVGPathSegLinetoHorizontalAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegLinetoHorizontalAbs">createSVGPathSegLinetoHorizontalAbs</a>(in float x);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoHorizontalRel">SVGPathSegLinetoHorizontalRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegLinetoHorizontalRel">createSVGPathSegLinetoHorizontalRel</a>(in float x);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoVerticalAbs">SVGPathSegLinetoVerticalAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegLinetoVerticalAbs">createSVGPathSegLinetoVerticalAbs</a>(in float y);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegLinetoVerticalRel">SVGPathSegLinetoVerticalRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegLinetoVerticalRel">createSVGPathSegLinetoVerticalRel</a>(in float y);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicSmoothAbs">SVGPathSegCurvetoCubicSmoothAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegCurvetoCubicSmoothAbs">createSVGPathSegCurvetoCubicSmoothAbs</a>(in float x, in float y, in float x2, in float y2);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoCubicSmoothRel">SVGPathSegCurvetoCubicSmoothRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegCurvetoCubicSmoothRel">createSVGPathSegCurvetoCubicSmoothRel</a>(in float x, in float y, in float x2, in float y2);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticSmoothAbs">SVGPathSegCurvetoQuadraticSmoothAbs</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegCurvetoQuadraticSmoothAbs">createSVGPathSegCurvetoQuadraticSmoothAbs</a>(in float x, in float y);
  <a class="idlinterface" href="#paths-InterfaceSVGPathSegCurvetoQuadraticSmoothRel">SVGPathSegCurvetoQuadraticSmoothRel</a> <a href="#paths-__svg__SVGPathElement__createSVGPathSegCurvetoQuadraticSmoothRel">createSVGPathSegCurvetoQuadraticSmoothRel</a>(in float x, in float y);
};

interface <b>SVGRectElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGRectElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGRectElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGRectElement__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGRectElement__height">height</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGRectElement__rx">rx</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGRectElement__ry">ry</a>;
};

interface <b>SVGCircleElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGCircleElement__cx">cx</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGCircleElement__cy">cy</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGCircleElement__r">r</a>;
};

interface <b>SVGEllipseElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGEllipseElement__cx">cx</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGEllipseElement__cy">cy</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGEllipseElement__rx">rx</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGEllipseElement__ry">ry</a>;
};

interface <b>SVGLineElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGLineElement__x1">x1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGLineElement__y1">y1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGLineElement__x2">x2</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#shapes-__svg__SVGLineElement__y2">y2</a>;
};

interface <b>SVGAnimatedPoints</b> {
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGPointList">SVGPointList</a> <a href="#shapes-__svg__SVGAnimatedPoints__points">points</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGPointList">SVGPointList</a> <a href="#shapes-__svg__SVGAnimatedPoints__animatedPoints">animatedPoints</a>;
};

interface <b>SVGPolylineElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a>,
                               <a class="idlinterface" href="#shapes-InterfaceSVGAnimatedPoints">SVGAnimatedPoints</a> {
};

interface <b>SVGPolygonElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a>,
                              <a class="idlinterface" href="#shapes-InterfaceSVGAnimatedPoints">SVGAnimatedPoints</a> {
};

interface <b>SVGTextContentElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                  <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                                  <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                                  <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                                  <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {

  // lengthAdjust Types
  const unsigned short <a href="#text-__svg__SVGTextContentElement__LENGTHADJUST_UNKNOWN">LENGTHADJUST_UNKNOWN</a> = 0;
  const unsigned short <a href="#text-__svg__SVGTextContentElement__LENGTHADJUST_SPACING">LENGTHADJUST_SPACING</a> = 1;
  const unsigned short <a href="#text-__svg__SVGTextContentElement__LENGTHADJUST_SPACINGANDGLYPHS">LENGTHADJUST_SPACINGANDGLYPHS</a> = 2;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#text-__svg__SVGTextContentElement__textLength">textLength</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#text-__svg__SVGTextContentElement__lengthAdjust">lengthAdjust</a>;

  long <a href="#text-__svg__SVGTextContentElement__getNumberOfChars">getNumberOfChars</a>();
  float <a href="#text-__svg__SVGTextContentElement__getComputedTextLength">getComputedTextLength</a>();
  float <a href="#text-__svg__SVGTextContentElement__getSubStringLength">getSubStringLength</a>(in unsigned long charnum, in unsigned long nchars) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#text-__svg__SVGTextContentElement__getStartPositionOfChar">getStartPositionOfChar</a>(in unsigned long charnum) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#text-__svg__SVGTextContentElement__getEndPositionOfChar">getEndPositionOfChar</a>(in unsigned long charnum) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <a href="#text-__svg__SVGTextContentElement__getExtentOfChar">getExtentOfChar</a>(in unsigned long charnum) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  float <a href="#text-__svg__SVGTextContentElement__getRotationOfChar">getRotationOfChar</a>(in unsigned long charnum) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  long <a href="#text-__svg__SVGTextContentElement__getCharNumAtPosition">getCharNumAtPosition</a>(in <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> point);
  void <a href="#text-__svg__SVGTextContentElement__selectSubString">selectSubString</a>(in unsigned long charnum, in unsigned long nchars) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGTextPositioningElement</b> : <a class="idlinterface" href="#text-InterfaceSVGTextContentElement">SVGTextContentElement</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLengthList">SVGAnimatedLengthList</a> <a href="#text-__svg__SVGTextPositioningElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLengthList">SVGAnimatedLengthList</a> <a href="#text-__svg__SVGTextPositioningElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLengthList">SVGAnimatedLengthList</a> <a href="#text-__svg__SVGTextPositioningElement__dx">dx</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLengthList">SVGAnimatedLengthList</a> <a href="#text-__svg__SVGTextPositioningElement__dy">dy</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumberList">SVGAnimatedNumberList</a> <a href="#text-__svg__SVGTextPositioningElement__rotate">rotate</a>;
};

interface <b>SVGTextElement</b> : <a class="idlinterface" href="#text-InterfaceSVGTextPositioningElement">SVGTextPositioningElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
};

interface <b>SVGTSpanElement</b> : <a class="idlinterface" href="#text-InterfaceSVGTextPositioningElement">SVGTextPositioningElement</a> {
};

interface <b>SVGTRefElement</b> : <a class="idlinterface" href="#text-InterfaceSVGTextPositioningElement">SVGTextPositioningElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a> {
};

interface <b>SVGTextPathElement</b> : <a class="idlinterface" href="#text-InterfaceSVGTextContentElement">SVGTextContentElement</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a> {

  // textPath Method Types
  const unsigned short <a href="#text-__svg__SVGTextPathElement__TEXTPATH_METHODTYPE_UNKNOWN">TEXTPATH_METHODTYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#text-__svg__SVGTextPathElement__TEXTPATH_METHODTYPE_ALIGN">TEXTPATH_METHODTYPE_ALIGN</a> = 1;
  const unsigned short <a href="#text-__svg__SVGTextPathElement__TEXTPATH_METHODTYPE_STRETCH">TEXTPATH_METHODTYPE_STRETCH</a> = 2;

  // textPath Spacing Types
  const unsigned short <a href="#text-__svg__SVGTextPathElement__TEXTPATH_SPACINGTYPE_UNKNOWN">TEXTPATH_SPACINGTYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#text-__svg__SVGTextPathElement__TEXTPATH_SPACINGTYPE_AUTO">TEXTPATH_SPACINGTYPE_AUTO</a> = 1;
  const unsigned short <a href="#text-__svg__SVGTextPathElement__TEXTPATH_SPACINGTYPE_EXACT">TEXTPATH_SPACINGTYPE_EXACT</a> = 2;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#text-__svg__SVGTextPathElement__startOffset">startOffset</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#text-__svg__SVGTextPathElement__method">method</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#text-__svg__SVGTextPathElement__spacing">spacing</a>;
};

interface <b>SVGAltGlyphElement</b> : <a class="idlinterface" href="#text-InterfaceSVGTextPositioningElement">SVGTextPositioningElement</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a> {
  attribute DOMString <a href="#text-__svg__SVGAltGlyphElement__glyphRef">glyphRef</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute DOMString <a href="#text-__svg__SVGAltGlyphElement__format">format</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGAltGlyphDefElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};

interface <b>SVGAltGlyphItemElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};

interface <b>SVGGlyphRefElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
  attribute DOMString <a href="#text-__svg__SVGGlyphRefElement__glyphRef">glyphRef</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute DOMString <a href="#text-__svg__SVGGlyphRefElement__format">format</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#text-__svg__SVGGlyphRefElement__x">x</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#text-__svg__SVGGlyphRefElement__y">y</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#text-__svg__SVGGlyphRefElement__dx">dx</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute float <a href="#text-__svg__SVGGlyphRefElement__dy">dy</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGPaint</b> : <a class="idlinterface" href="#types-InterfaceSVGColor">SVGColor</a> {

  // Paint Types
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_UNKNOWN">SVG_PAINTTYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_RGBCOLOR">SVG_PAINTTYPE_RGBCOLOR</a> = 1;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR">SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR</a> = 2;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_NONE">SVG_PAINTTYPE_NONE</a> = 101;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_CURRENTCOLOR">SVG_PAINTTYPE_CURRENTCOLOR</a> = 102;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_URI_NONE">SVG_PAINTTYPE_URI_NONE</a> = 103;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_URI_CURRENTCOLOR">SVG_PAINTTYPE_URI_CURRENTCOLOR</a> = 104;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_URI_RGBCOLOR">SVG_PAINTTYPE_URI_RGBCOLOR</a> = 105;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR">SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR</a> = 106;
  const unsigned short <a href="#painting-__svg__SVGPaint__SVG_PAINTTYPE_URI">SVG_PAINTTYPE_URI</a> = 107;

  readonly attribute unsigned short <a href="#painting-__svg__SVGPaint__paintType">paintType</a>;
  readonly attribute DOMString <a href="#painting-__svg__SVGPaint__uri">uri</a>;

  void <a href="#painting-__svg__SVGPaint__setUri">setUri</a>(in DOMString uri);
  void <a href="#painting-__svg__SVGPaint__setPaint">setPaint</a>(in unsigned short paintType, in DOMString uri, in DOMString rgbColor, in DOMString iccColor) raises(<a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>);
};

interface <b>SVGMarkerElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGFitToViewBox">SVGFitToViewBox</a> {

  // Marker Unit Types
  const unsigned short <a href="#painting-__svg__SVGMarkerElement__SVG_MARKERUNITS_UNKNOWN">SVG_MARKERUNITS_UNKNOWN</a> = 0;
  const unsigned short <a href="#painting-__svg__SVGMarkerElement__SVG_MARKERUNITS_USERSPACEONUSE">SVG_MARKERUNITS_USERSPACEONUSE</a> = 1;
  const unsigned short <a href="#painting-__svg__SVGMarkerElement__SVG_MARKERUNITS_STROKEWIDTH">SVG_MARKERUNITS_STROKEWIDTH</a> = 2;

  // Marker Orientation Types
  const unsigned short <a href="#painting-__svg__SVGMarkerElement__SVG_MARKER_ORIENT_UNKNOWN">SVG_MARKER_ORIENT_UNKNOWN</a> = 0;
  const unsigned short <a href="#painting-__svg__SVGMarkerElement__SVG_MARKER_ORIENT_AUTO">SVG_MARKER_ORIENT_AUTO</a> = 1;
  const unsigned short <a href="#painting-__svg__SVGMarkerElement__SVG_MARKER_ORIENT_ANGLE">SVG_MARKER_ORIENT_ANGLE</a> = 2;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#painting-__svg__SVGMarkerElement__refX">refX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#painting-__svg__SVGMarkerElement__refY">refY</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#painting-__svg__SVGMarkerElement__markerUnits">markerUnits</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#painting-__svg__SVGMarkerElement__markerWidth">markerWidth</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#painting-__svg__SVGMarkerElement__markerHeight">markerHeight</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#painting-__svg__SVGMarkerElement__orientType">orientType</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedAngle">SVGAnimatedAngle</a> <a href="#painting-__svg__SVGMarkerElement__orientAngle">orientAngle</a>;

  void <a href="#painting-__svg__SVGMarkerElement__setOrientToAuto">setOrientToAuto</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  void <a href="#painting-__svg__SVGMarkerElement__setOrientToAngle">setOrientToAngle</a>(in <a class="idlinterface" href="#types-InterfaceSVGAngle">SVGAngle</a> angle) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGColorProfileElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                   <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                                   <a class="idlinterface" href="#types-InterfaceSVGRenderingIntent">SVGRenderingIntent</a> {
  attribute DOMString <a href="#color-__svg__SVGColorProfileElement__local">local</a>;
  attribute DOMString <a href="#color-__svg__SVGColorProfileElement__name">name</a>;
  attribute unsigned short <a href="#color-__svg__SVGColorProfileElement__renderingIntent">renderingIntent</a>;
};

interface <b>SVGColorProfileRule</b> : <a class="idlinterface" href="#types-InterfaceSVGCSSRule">SVGCSSRule</a>,
                                <a class="idlinterface" href="#types-InterfaceSVGRenderingIntent">SVGRenderingIntent</a> {
  attribute DOMString <a href="#color-__svg__SVGColorProfileRule__src">src</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute DOMString <a href="#color-__svg__SVGColorProfileRule__name">name</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  attribute unsigned short <a href="#color-__svg__SVGColorProfileRule__renderingIntent">renderingIntent</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGGradientElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a> {

  // Spread Method Types
  const unsigned short <a href="#pservers-__svg__SVGGradientElement__SVG_SPREADMETHOD_UNKNOWN">SVG_SPREADMETHOD_UNKNOWN</a> = 0;
  const unsigned short <a href="#pservers-__svg__SVGGradientElement__SVG_SPREADMETHOD_PAD">SVG_SPREADMETHOD_PAD</a> = 1;
  const unsigned short <a href="#pservers-__svg__SVGGradientElement__SVG_SPREADMETHOD_REFLECT">SVG_SPREADMETHOD_REFLECT</a> = 2;
  const unsigned short <a href="#pservers-__svg__SVGGradientElement__SVG_SPREADMETHOD_REPEAT">SVG_SPREADMETHOD_REPEAT</a> = 3;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#pservers-__svg__SVGGradientElement__gradientUnits">gradientUnits</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGAnimatedTransformList">SVGAnimatedTransformList</a> <a href="#pservers-__svg__SVGGradientElement__gradientTransform">gradientTransform</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#pservers-__svg__SVGGradientElement__spreadMethod">spreadMethod</a>;
};

interface <b>SVGLinearGradientElement</b> : <a class="idlinterface" href="#pservers-InterfaceSVGGradientElement">SVGGradientElement</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGLinearGradientElement__x1">x1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGLinearGradientElement__y1">y1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGLinearGradientElement__x2">x2</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGLinearGradientElement__y2">y2</a>;
};

interface <b>SVGRadialGradientElement</b> : <a class="idlinterface" href="#pservers-InterfaceSVGGradientElement">SVGGradientElement</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGRadialGradientElement__cx">cx</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGRadialGradientElement__cy">cy</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGRadialGradientElement__r">r</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGRadialGradientElement__fx">fx</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGRadialGradientElement__fy">fy</a>;
};

interface <b>SVGStopElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#pservers-__svg__SVGStopElement__offset">offset</a>;
};

interface <b>SVGPatternElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGFitToViewBox">SVGFitToViewBox</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#pservers-__svg__SVGPatternElement__patternUnits">patternUnits</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#pservers-__svg__SVGPatternElement__patternContentUnits">patternContentUnits</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGAnimatedTransformList">SVGAnimatedTransformList</a> <a href="#pservers-__svg__SVGPatternElement__patternTransform">patternTransform</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGPatternElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGPatternElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGPatternElement__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#pservers-__svg__SVGPatternElement__height">height</a>;
};

interface <b>SVGClipPathElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a>,
                               <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#masking-__svg__SVGClipPathElement__clipPathUnits">clipPathUnits</a>;
};

interface <b>SVGMaskElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#masking-__svg__SVGMaskElement__maskUnits">maskUnits</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#masking-__svg__SVGMaskElement__maskContentUnits">maskContentUnits</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#masking-__svg__SVGMaskElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#masking-__svg__SVGMaskElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#masking-__svg__SVGMaskElement__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#masking-__svg__SVGMaskElement__height">height</a>;
};

interface <b>SVGFilterElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGUnitTypes">SVGUnitTypes</a> {

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFilterElement__filterUnits">filterUnits</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFilterElement__primitiveUnits">primitiveUnits</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#filters-__svg__SVGFilterElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#filters-__svg__SVGFilterElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#filters-__svg__SVGFilterElement__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#filters-__svg__SVGFilterElement__height">height</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a> <a href="#filters-__svg__SVGFilterElement__filterResX">filterResX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a> <a href="#filters-__svg__SVGFilterElement__filterResY">filterResY</a>;

  void <a href="#filters-__svg__SVGFilterElement__setFilterRes">setFilterRes</a>(in unsigned long filterResX, in unsigned long filterResY) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGFilterPrimitiveStandardAttributes</b> : <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#filters-__svg__SVGFilterPrimitiveStandardAttributes__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#filters-__svg__SVGFilterPrimitiveStandardAttributes__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#filters-__svg__SVGFilterPrimitiveStandardAttributes__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#filters-__svg__SVGFilterPrimitiveStandardAttributes__height">height</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFilterPrimitiveStandardAttributes__result">result</a>;
};

interface <b>SVGFEBlendElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                              <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {

  // Blend Mode Types
  const unsigned short <a href="#filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_UNKNOWN">SVG_FEBLEND_MODE_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_NORMAL">SVG_FEBLEND_MODE_NORMAL</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_MULTIPLY">SVG_FEBLEND_MODE_MULTIPLY</a> = 2;
  const unsigned short <a href="#filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_SCREEN">SVG_FEBLEND_MODE_SCREEN</a> = 3;
  const unsigned short <a href="#filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_DARKEN">SVG_FEBLEND_MODE_DARKEN</a> = 4;
  const unsigned short <a href="#filters-__svg__SVGFEBlendElement__SVG_FEBLEND_MODE_LIGHTEN">SVG_FEBLEND_MODE_LIGHTEN</a> = 5;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEBlendElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEBlendElement__in2">in2</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFEBlendElement__mode">mode</a>;
};

interface <b>SVGFEColorMatrixElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                    <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {

  // Color Matrix Types
  const unsigned short <a href="#filters-__svg__SVGFEColorMatrixElement__SVG_FECOLORMATRIX_TYPE_UNKNOWN">SVG_FECOLORMATRIX_TYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGFEColorMatrixElement__SVG_FECOLORMATRIX_TYPE_MATRIX">SVG_FECOLORMATRIX_TYPE_MATRIX</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGFEColorMatrixElement__SVG_FECOLORMATRIX_TYPE_SATURATE">SVG_FECOLORMATRIX_TYPE_SATURATE</a> = 2;
  const unsigned short <a href="#filters-__svg__SVGFEColorMatrixElement__SVG_FECOLORMATRIX_TYPE_HUEROTATE">SVG_FECOLORMATRIX_TYPE_HUEROTATE</a> = 3;
  const unsigned short <a href="#filters-__svg__SVGFEColorMatrixElement__SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA">SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA</a> = 4;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEColorMatrixElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFEColorMatrixElement__type">type</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumberList">SVGAnimatedNumberList</a> <a href="#filters-__svg__SVGFEColorMatrixElement__values">values</a>;
};

interface <b>SVGFEComponentTransferElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                          <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEComponentTransferElement__in1">in1</a>;
};

interface <b>SVGComponentTransferFunctionElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {

  // Component Transfer Types
  const unsigned short <a href="#filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN">SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY">SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_TABLE">SVG_FECOMPONENTTRANSFER_TYPE_TABLE</a> = 2;
  const unsigned short <a href="#filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE">SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE</a> = 3;
  const unsigned short <a href="#filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_LINEAR">SVG_FECOMPONENTTRANSFER_TYPE_LINEAR</a> = 4;
  const unsigned short <a href="#filters-__svg__SVGComponentTransferFunctionElement__SVG_FECOMPONENTTRANSFER_TYPE_GAMMA">SVG_FECOMPONENTTRANSFER_TYPE_GAMMA</a> = 5;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGComponentTransferFunctionElement__type">type</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumberList">SVGAnimatedNumberList</a> <a href="#filters-__svg__SVGComponentTransferFunctionElement__tableValues">tableValues</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGComponentTransferFunctionElement__slope">slope</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGComponentTransferFunctionElement__intercept">intercept</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGComponentTransferFunctionElement__amplitude">amplitude</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGComponentTransferFunctionElement__exponent">exponent</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGComponentTransferFunctionElement__offset">offset</a>;
};

interface <b>SVGFEFuncRElement</b> : <a class="idlinterface" href="#filters-InterfaceSVGComponentTransferFunctionElement">SVGComponentTransferFunctionElement</a> {
};

interface <b>SVGFEFuncGElement</b> : <a class="idlinterface" href="#filters-InterfaceSVGComponentTransferFunctionElement">SVGComponentTransferFunctionElement</a> {
};

interface <b>SVGFEFuncBElement</b> : <a class="idlinterface" href="#filters-InterfaceSVGComponentTransferFunctionElement">SVGComponentTransferFunctionElement</a> {
};

interface <b>SVGFEFuncAElement</b> : <a class="idlinterface" href="#filters-InterfaceSVGComponentTransferFunctionElement">SVGComponentTransferFunctionElement</a> {
};

interface <b>SVGFECompositeElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                  <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {

  // Composite Operators
  const unsigned short <a href="#filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_UNKNOWN">SVG_FECOMPOSITE_OPERATOR_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_OVER">SVG_FECOMPOSITE_OPERATOR_OVER</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_IN">SVG_FECOMPOSITE_OPERATOR_IN</a> = 2;
  const unsigned short <a href="#filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_OUT">SVG_FECOMPOSITE_OPERATOR_OUT</a> = 3;
  const unsigned short <a href="#filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_ATOP">SVG_FECOMPOSITE_OPERATOR_ATOP</a> = 4;
  const unsigned short <a href="#filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_XOR">SVG_FECOMPOSITE_OPERATOR_XOR</a> = 5;
  const unsigned short <a href="#filters-__svg__SVGFECompositeElement__SVG_FECOMPOSITE_OPERATOR_ARITHMETIC">SVG_FECOMPOSITE_OPERATOR_ARITHMETIC</a> = 6;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFECompositeElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFECompositeElement__in2">in2</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFECompositeElement__operator">operator</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFECompositeElement__k1">k1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFECompositeElement__k2">k2</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFECompositeElement__k3">k3</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFECompositeElement__k4">k4</a>;
};

interface <b>SVGFEConvolveMatrixElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                       <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {

  // Edge Mode Values
  const unsigned short <a href="#filters-__svg__SVGFEConvolveMatrixElement__SVG_EDGEMODE_UNKNOWN">SVG_EDGEMODE_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGFEConvolveMatrixElement__SVG_EDGEMODE_DUPLICATE">SVG_EDGEMODE_DUPLICATE</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGFEConvolveMatrixElement__SVG_EDGEMODE_WRAP">SVG_EDGEMODE_WRAP</a> = 2;
  const unsigned short <a href="#filters-__svg__SVGFEConvolveMatrixElement__SVG_EDGEMODE_NONE">SVG_EDGEMODE_NONE</a> = 3;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__orderX">orderX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__orderY">orderY</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumberList">SVGAnimatedNumberList</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__kernelMatrix">kernelMatrix</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__divisor">divisor</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__bias">bias</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__targetX">targetX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__targetY">targetY</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__edgeMode">edgeMode</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__kernelUnitLengthX">kernelUnitLengthX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__kernelUnitLengthY">kernelUnitLengthY</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedBoolean">SVGAnimatedBoolean</a> <a href="#filters-__svg__SVGFEConvolveMatrixElement__preserveAlpha">preserveAlpha</a>;
};

interface <b>SVGFEDiffuseLightingElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                        <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEDiffuseLightingElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEDiffuseLightingElement__surfaceScale">surfaceScale</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEDiffuseLightingElement__diffuseConstant">diffuseConstant</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEDiffuseLightingElement__kernelUnitLengthX">kernelUnitLengthX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEDiffuseLightingElement__kernelUnitLengthY">kernelUnitLengthY</a>;
};

interface <b>SVGFEDistantLightElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEDistantLightElement__azimuth">azimuth</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEDistantLightElement__elevation">elevation</a>;
};

interface <b>SVGFEPointLightElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEPointLightElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEPointLightElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEPointLightElement__z">z</a>;
};

interface <b>SVGFESpotLightElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpotLightElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpotLightElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpotLightElement__z">z</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpotLightElement__pointsAtX">pointsAtX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpotLightElement__pointsAtY">pointsAtY</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpotLightElement__pointsAtZ">pointsAtZ</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpotLightElement__specularExponent">specularExponent</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpotLightElement__limitingConeAngle">limitingConeAngle</a>;
};

interface <b>SVGFEDisplacementMapElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                        <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {

  // Channel Selectors
  const unsigned short <a href="#filters-__svg__SVGFEDisplacementMapElement__SVG_CHANNEL_UNKNOWN">SVG_CHANNEL_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGFEDisplacementMapElement__SVG_CHANNEL_R">SVG_CHANNEL_R</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGFEDisplacementMapElement__SVG_CHANNEL_G">SVG_CHANNEL_G</a> = 2;
  const unsigned short <a href="#filters-__svg__SVGFEDisplacementMapElement__SVG_CHANNEL_B">SVG_CHANNEL_B</a> = 3;
  const unsigned short <a href="#filters-__svg__SVGFEDisplacementMapElement__SVG_CHANNEL_A">SVG_CHANNEL_A</a> = 4;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEDisplacementMapElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEDisplacementMapElement__in2">in2</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEDisplacementMapElement__scale">scale</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFEDisplacementMapElement__xChannelSelector">xChannelSelector</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFEDisplacementMapElement__yChannelSelector">yChannelSelector</a>;
};

interface <b>SVGFEFloodElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                              <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {
};

interface <b>SVGFEGaussianBlurElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                     <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEGaussianBlurElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEGaussianBlurElement__stdDeviationX">stdDeviationX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEGaussianBlurElement__stdDeviationY">stdDeviationY</a>;

  void <a href="#filters-__svg__SVGFEGaussianBlurElement__setStdDeviation">setStdDeviation</a>(in float stdDeviationX, in float stdDeviationY) raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGFEImageElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                              <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGAnimatedPreserveAspectRatio">SVGAnimatedPreserveAspectRatio</a> <a href="#filters-__svg__SVGFEImageElement__preserveAspectRatio">preserveAspectRatio</a>;
};

interface <b>SVGFEMergeElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                              <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {
};

interface <b>SVGFEMergeNodeElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEMergeNodeElement__in1">in1</a>;
};

interface <b>SVGFEMorphologyElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                   <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {

  // Morphology Operators
  const unsigned short <a href="#filters-__svg__SVGFEMorphologyElement__SVG_MORPHOLOGY_OPERATOR_UNKNOWN">SVG_MORPHOLOGY_OPERATOR_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGFEMorphologyElement__SVG_MORPHOLOGY_OPERATOR_ERODE">SVG_MORPHOLOGY_OPERATOR_ERODE</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGFEMorphologyElement__SVG_MORPHOLOGY_OPERATOR_DILATE">SVG_MORPHOLOGY_OPERATOR_DILATE</a> = 2;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEMorphologyElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFEMorphologyElement__operator">operator</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEMorphologyElement__radiusX">radiusX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEMorphologyElement__radiusY">radiusY</a>;
};

interface <b>SVGFEOffsetElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                               <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFEOffsetElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEOffsetElement__dx">dx</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFEOffsetElement__dy">dy</a>;
};

interface <b>SVGFESpecularLightingElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                         <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFESpecularLightingElement__in1">in1</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpecularLightingElement__surfaceScale">surfaceScale</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpecularLightingElement__specularConstant">specularConstant</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpecularLightingElement__specularExponent">specularExponent</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpecularLightingElement__kernelUnitLengthX">kernelUnitLengthX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFESpecularLightingElement__kernelUnitLengthY">kernelUnitLengthY</a>;
};

interface <b>SVGFETileElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                             <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#filters-__svg__SVGFETileElement__in1">in1</a>;
};

interface <b>SVGFETurbulenceElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                   <a class="idlinterface" href="#filters-InterfaceSVGFilterPrimitiveStandardAttributes">SVGFilterPrimitiveStandardAttributes</a> {

  // Turbulence Types
  const unsigned short <a href="#filters-__svg__SVGFETurbulenceElement__SVG_TURBULENCE_TYPE_UNKNOWN">SVG_TURBULENCE_TYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGFETurbulenceElement__SVG_TURBULENCE_TYPE_FRACTALNOISE">SVG_TURBULENCE_TYPE_FRACTALNOISE</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGFETurbulenceElement__SVG_TURBULENCE_TYPE_TURBULENCE">SVG_TURBULENCE_TYPE_TURBULENCE</a> = 2;

  // Stitch Options
  const unsigned short <a href="#filters-__svg__SVGFETurbulenceElement__SVG_STITCHTYPE_UNKNOWN">SVG_STITCHTYPE_UNKNOWN</a> = 0;
  const unsigned short <a href="#filters-__svg__SVGFETurbulenceElement__SVG_STITCHTYPE_STITCH">SVG_STITCHTYPE_STITCH</a> = 1;
  const unsigned short <a href="#filters-__svg__SVGFETurbulenceElement__SVG_STITCHTYPE_NOSTITCH">SVG_STITCHTYPE_NOSTITCH</a> = 2;

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFETurbulenceElement__baseFrequencyX">baseFrequencyX</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFETurbulenceElement__baseFrequencyY">baseFrequencyY</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedInteger">SVGAnimatedInteger</a> <a href="#filters-__svg__SVGFETurbulenceElement__numOctaves">numOctaves</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedNumber">SVGAnimatedNumber</a> <a href="#filters-__svg__SVGFETurbulenceElement__seed">seed</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFETurbulenceElement__stitchTiles">stitchTiles</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedEnumeration">SVGAnimatedEnumeration</a> <a href="#filters-__svg__SVGFETurbulenceElement__type">type</a>;
};

interface <b>SVGCursorElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#interact-__svg__SVGCursorElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#interact-__svg__SVGCursorElement__y">y</a>;
};

interface <b>SVGAElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                        <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedString">SVGAnimatedString</a> <a href="#linking-__svg__SVGAElement__target">target</a>;
};

interface <b>SVGViewElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGFitToViewBox">SVGFitToViewBox</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGZoomAndPan">SVGZoomAndPan</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGStringList">SVGStringList</a> <a href="#linking-__svg__SVGViewElement__viewTarget">viewTarget</a>;
};

interface <b>SVGScriptElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                             <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a> {
  attribute DOMString <a href="#script-__svg__SVGScriptElement__type">type</a> setraises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGZoomEvent</b> : UIEvent {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGRect">SVGRect</a> <a href="#script-__svg__SVGZoomEvent__zoomRectScreen">zoomRectScreen</a>;
  readonly attribute float <a href="#script-__svg__SVGZoomEvent__previousScale">previousScale</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#script-__svg__SVGZoomEvent__previousTranslate">previousTranslate</a>;
  readonly attribute float <a href="#script-__svg__SVGZoomEvent__newScale">newScale</a>;
  readonly attribute <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> <a href="#script-__svg__SVGZoomEvent__newTranslate">newTranslate</a>;
};

interface <b>SVGAnimationElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                                <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                                <a class="idlinterface" href="#animate-InterfaceElementTimeControl">ElementTimeControl</a> {

  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> <a href="#animate-__svg__SVGAnimationElement__targetElement">targetElement</a>;

  float <a href="#animate-__svg__SVGAnimationElement__getStartTime">getStartTime</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
  float <a href="#animate-__svg__SVGAnimationElement__getCurrentTime">getCurrentTime</a>();
  float <a href="#animate-__svg__SVGAnimationElement__getSimpleDuration">getSimpleDuration</a>() raises(<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187">DOMException</a>);
};

interface <b>SVGAnimateElement</b> : <a class="idlinterface" href="#animate-InterfaceSVGAnimationElement">SVGAnimationElement</a>,
                              <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
};

interface <b>SVGSetElement</b> : <a class="idlinterface" href="#animate-InterfaceSVGAnimationElement">SVGAnimationElement</a> {
};

interface <b>SVGAnimateMotionElement</b> : <a class="idlinterface" href="#animate-InterfaceSVGAnimationElement">SVGAnimationElement</a> {
};

interface <b>SVGMPathElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGURIReference">SVGURIReference</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a> {
};

interface <b>SVGAnimateColorElement</b> : <a class="idlinterface" href="#animate-InterfaceSVGAnimationElement">SVGAnimationElement</a>,
                                   <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
};

interface <b>SVGAnimateTransformElement</b> : <a class="idlinterface" href="#animate-InterfaceSVGAnimationElement">SVGAnimationElement</a> {
};

interface <b>SVGFontElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                           <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
};

interface <b>SVGGlyphElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                            <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
};

interface <b>SVGMissingGlyphElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                   <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a> {
};

interface <b>SVGHKernElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};

interface <b>SVGVKernElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};

interface <b>SVGFontFaceElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};

interface <b>SVGFontFaceSrcElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};

interface <b>SVGFontFaceUriElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};

interface <b>SVGFontFaceFormatElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};

interface <b>SVGFontFaceNameElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};

interface <b>SVGMetadataElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a> {
};

interface <b>SVGForeignObjectElement</b> : <a class="idlinterface" href="#types-InterfaceSVGElement">SVGElement</a>,
                                    <a class="idlinterface" href="#types-InterfaceSVGTests">SVGTests</a>,
                                    <a class="idlinterface" href="#types-InterfaceSVGLangSpace">SVGLangSpace</a>,
                                    <a class="idlinterface" href="#types-InterfaceSVGExternalResourcesRequired">SVGExternalResourcesRequired</a>,
                                    <a class="idlinterface" href="#types-InterfaceSVGStylable">SVGStylable</a>,
                                    <a class="idlinterface" href="#types-InterfaceSVGTransformable">SVGTransformable</a> {
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#extend-__svg__SVGForeignObjectElement__x">x</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#extend-__svg__SVGForeignObjectElement__y">y</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#extend-__svg__SVGForeignObjectElement__width">width</a>;
  readonly attribute <a class="idlinterface" href="#types-InterfaceSVGAnimatedLength">SVGAnimatedLength</a> <a href="#extend-__svg__SVGForeignObjectElement__height">height</a>;
};

};</pre>

</div><hr class="chapter-divider" />
<div id="chapter-java">

<h1>Appendix D: Java Language Binding</h1><h2 id="java-toc">Contents</h2><ul class="toc">
<li><a href="#java-JavaBinding">D.1 The Java language binding</a></li>
<li><a href="#java-UsingSVGWithJava">D.2 Using SVG with the Java language</a></li></ul>

<p class="normativity"><em>This appendix is informative, not normative.</em></p>

<h2 id="java-JavaBinding">D.1 The Java language binding</h2>

<p>The Java language binding for the SVG Document Object Model definitions
is available at:</p>

<pre><a href="http://www.w3.org/TR/2011/REC-SVG11-20110816/java-binding.zip">http://www.w3.org/TR/2011/REC-SVG11-20110816/java-binding.zip</a></pre>

<p>Note that this language binding is not normative. The IDL Definitions are
the normative parts of the SVG DOM.</p>

<h2 id="java-UsingSVGWithJava">D.2 Using SVG with the Java language</h2>

<p>When scripting SVG with a language such as ECMAScript, it is
possible to embed script code directly in the SVG content using
the <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a> element and the event attributes (e.g., <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a>
or <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>). For programming languages with a binary delivery
format, such as the Java language, it is not possible to embed
the code into the <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a> element or within the event
attributes. Therefore there is a need to specify how such
languages can bind to and handle events in the SVG document.
The following technique describes how this should be done when
using the Java language and what is expected of the User Agent
that supports dynamic SVG content through the Java language.</p>

<ul><li>The <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a> element should reference a jar file containing
  the compiled code to handle the events fired by the document. For
  example:
<pre>
&lt;script type="application/java-archive" xlink:href="myJavaHandlers.jar"/&gt;
</pre>
  </li><li>The manifest in the referenced jar file contains an entry,
  SVG-Handler-Class, defining the class responsible for initializing
  the event listeners on the SVG document. The entry should be a fully
  qualified class name. For example:
<pre>
Manifest-Version: 1.1
SVG-Handler-Class: org.example.svg.SVGHandler
</pre>
  </li><li>The class referenced by SVG-Handler-Class implements the
  EventListenerInitializer interface defined as:
<pre>
public interface EventListenerInitializer {
  void initializeEventListeners(SVGDocument doc);
}
</pre>
  </li><li>The method initializeEventListeners() will be called by
  the User Agent before the onload event is triggered.</li></ul>

<p>The event binding of other binary programming languages is not specified.</p>

</div><hr class="chapter-divider" />
<div id="chapter-escript">

<h1>Appendix E: ECMAScript Language Binding</h1><h2 id="escript-toc">Contents</h2><ul class="toc">
<li><a href="#escript-Exceptions">E.1 Exceptions</a></li>
<li><a href="#escript-Constants">E.2 Constants</a></li>
<li><a href="#escript-Types">E.3 Types</a></li>
<li><a href="#escript-Objects">E.4 Objects</a></li></ul>

<p class="normativity"><strong>This appendix is normative.</strong></p>

<p>This appendix describes how to expose the SVG DOM to an ECMAScript language
environment [<a href="#refs-ref-ECMA-262">ECMA-262</a>].</p>

<p>For descriptions of how interfaces and exceptions defined in other
specifications are to be exposed to an ECMAScript language environment,
consult the relevant specification:</p>

<ul><li>For DOM Level 2 Core interfaces and exceptions, see
  <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html">the DOM Level 2 Core ECMAScript Language Binding appendix</a>
  ([<a href="#refs-ref-DOM2">DOM2</a>], appendix E).</li><li>For DOM Level 2 Events interfaces, see
  <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/ecma-script-binding.html">the DOM Level 2 Events ECMAScript Language Binding appendix</a>
  ([<a href="#refs-ref-DOM2EVENTS">DOM2EVENTS</a>], appendix C).</li><li>For DOM Level 2 Views interfaces, see
  <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Views-20001113/ecma-script-binding.html">the DOM Level 2 Views ECMAScript Language Binding appendix</a>
  ([<a href="#refs-ref-DOM2VIEWS">DOM2VIEWS</a>], appendix C).</li><li>For DOM Level 2 Style interfaces, see
  <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/ecma-script-binding.html">the DOM Level 2 Style ECMAScript Language Binding appendix</a>
  ([<a href="#refs-ref-DOM2STYLE">DOM2STYLE</a>], appendix C).</li></ul>

<h2 id="escript-Exceptions">E.1 Exceptions</h2>

<p>The SVG DOM defines a single exception, <a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>, which is
exposed to an ECMAScript language environment as follows.</p>

<p>The ECMAScript global object has a property named <code>"SVGException"</code>
whose value is an object with the following properties:</p>

<ul><li>A read only property named <code>"SVG_WRONG_TYPE_ERR"</code>, whose value is the <span class="dom-attr-type">Number</span> value 1.</li><li>A read only property named <code>"SVG_INVALID_VALUE_ERR"</code>, whose value is the <span class="dom-attr-type">Number</span> value 2.</li><li>A read only property named <code>"SVG_MATRIX_NOT_INVERTABLE"</code>, whose value is the <span class="dom-attr-type">Number</span> value 3.</li></ul>

<p>A host object that is an <a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a> also has these three
properties on itself, or somewhere in its prototype chain.  Every such host
object also has a read only property named <code>"code"</code> whose value is a
<span class="dom-attr-type">Number</span>, corresponding to the
<a class="idlattr" href="#svgdom-__svg__SVGException__code">code</a> exception member on <a class="idlinterface" href="#svgdom-ExceptionSVGException">SVGException</a>.</p>

<h2 id="escript-Constants">E.2 Constants</h2>

<p>For every interface defined in the SVG DOM that has one or more constants
defined on it, there exists a property on the ECMAScript global object whose
name is the name of the interface, and whose value is an object with a read
only property for each of the constants.  The name of each of these read only
properties is the name of the corresponding constant, and the value is
a <span class="dom-attr-type">Number</span> with the same value as that of
the constant.</p>

<p>A host object that implements an interface with constants defined on it
has, on itself or somewhere in its prototype chain, these properties that
correspond to the constants.</p>

<h2 id="escript-Types">E.3 Types</h2>

<p>The following table gives the corresponding ECMAScript type for the IDL
primitive types used in the SVG DOM.</p>

<table class="vert" summary="Map of IDL types to ECMAScript types"><tr><th>IDL type</th><th>ECMAScript type</th></tr><tr><td>boolean</td><td><span class="dom-attr-type">Boolean</span></td></tr><tr><td>float</td><td><span class="dom-attr-type">Number</span></td></tr><tr><td>long</td><td><span class="dom-attr-type">Number</span></td></tr><tr><td>unsigned short</td><td><span class="dom-attr-type">Number</span></td></tr><tr><td>unsigned long</td><td><span class="dom-attr-type">Number</span></td></tr><tr><td>DOMString</td><td><span class="dom-attr-type">String</span></td></tr></table>

<p>When an ECMAScript <span class="dom-attr-type">Number</span> is assigned to
a property that corresponds to an attribute of an IDL integer type (long,
unsigned short or unsigned long), or it is passed as an argument passed to an
operation for which the argument type is an IDL integer type, then behavior is
undefined if the <span class="dom-attr-type">Number</span> value is not an
integer within the range of that type.</p>

<p>For an interface type, a host object that implements the given interface is
used.</p>

<h2 id="escript-Objects">E.4 Objects</h2>

<p>A host object that implements a given interface has properties on itself,
or in its prototype chain, that correspond to the operations and attributes
defined on that interface and all its superinterfaces.</p>

<p>A property that corresponds to an attribute is read only if the attribute
is read only, and has a name that is the same as the name of the attribute.
When getting the property, a value of a type according to the <a href="#escript-Types">Types</a>
section above is returned.  When setting the property, if it is not read only,
then behavior is defined only if a value of a type according to the
<a href="#escript-Types">Types</a> section is assigned to it.</p>

<p>For example, if <var>a</var> is a host object that implements the
<a class="idlinterface" href="#types-InterfaceSVGLength">SVGLength</a> interface, then evaluating the statement:</p>

<pre>a.valueAsString = "10";</pre>

<p>has defined behavior, but evaluating the statement:</p>

<pre>a.valueAsString = 10;</pre>

<p>does not.</p>

<p>A property that corresponds to an operation has a name that is the same
as the name of the operation, and has a value that is a
<span class="dom-attr-type">Function</span> object.  The value returned
from the <span class="dom-attr-type">Function</span> is of a type according
to the table in the <a href="#escript-Types">Types</a> section above.  When calling
the <span class="dom-attr-type">Function</span>, behavior is only defined
if the correct number of arguments is passed, and the type of each argument
is the type according to the <a href="#escript-Types">Types</a> table.  Also,
behavior is only defined for invoking the <span class="dom-attr-type">Function</span>
with a <span class="dom-attr-type">this</span> value that is equal to
the object from which the <span class="dom-attr-type">Function</span>
was obtained.</p>

<p>For example, if <var>L1</var> and <var>L2</var> are two distinct host objects that
implement the <a class="idlinterface" href="#coords-InterfaceSVGPointList">SVGPointList</a> interface and <var>p</var> is a host object
that implements the <a class="idlinterface" href="#coords-InterfaceSVGPoint">SVGPoint</a> interface, then evaluating the following
statement has defined behavior:</p>

<pre>L1.insertItemBefore(p, 0);</pre>

<p>Evaluating any of the following statements, however, does not:</p>

<pre>L1.insertItemBefore(p, '0');
L1.insertItemBefore(p, -1);
L1.insertItemBefore(p, 0.5);
L1.insertItemBefore(p);
L1.insertItemBefore(p, 0, 0);
L1.insertItemBefore({ x: 10, y: 20 }, 0);
L1.insertItemBefore.call([], p, 0);
L1.insertItemBefore.call(L2, p, 0);</pre>

</div><hr class="chapter-divider" />
<div id="chapter-implnote">

<h1>Appendix F: Implementation Requirements</h1><h2 id="implnote-toc">Contents</h2><ul class="toc">
<li><a href="#implnote-Introduction">F.1 Introduction</a></li>
<li><a href="#implnote-ErrorProcessing">F.2 Error processing</a></li>
<li><a href="#implnote-VersionControl">F.3 Version control</a></li>
<li><a href="#implnote-RangeClamping">F.4 Clamping values which are restricted to a particular range</a></li>
<li><a href="#implnote-PathElementImplementationNotes">F.5 <span class="element-name">‘path’</span> element implementation notes</a></li>
<li><a href="#implnote-ArcImplementationNotes">F.6 Elliptical arc implementation notes</a><ul class="toc">
<li><a href="#implnote-ArcSyntax">F.6.1 Elliptical arc syntax</a></li>
<li><a href="#implnote-ArcOutOfRangeParameters">F.6.2 Out-of-range parameters</a></li>
<li><a href="#implnote-ArcParameterizationAlternatives">F.6.3 Parameterization alternatives</a></li>
<li><a href="#implnote-ArcConversionCenterToEndpoint">F.6.4 Conversion from center to endpoint parameterization</a></li>
<li><a href="#implnote-ArcConversionEndpointToCenter">F.6.5 Conversion from endpoint to center parameterization</a></li>
<li><a href="#implnote-ArcCorrectionOutOfRangeRadii">F.6.6 Correction of out-of-range radii</a></li></ul></li>
<li><a href="#implnote-TextSelectionImplementationNotes">F.7 Text selection implementation notes</a></li>
<li><a href="#implnote-PrintingImplementationNotes">F.8 Printing implementation notes</a></li></ul>

    <p class="normativity"><strong>This appendix is normative.</strong></p>
    <h2 id="implnote-Introduction">F.1 Introduction</h2>
    <p>The following are notes about implementation requirements
    corresponding to various features in the SVG language.</p>

<h2 id="implnote-ErrorProcessing">F.2 Error processing</h2>

    <p>There are various scenarios where an SVG document fragment
    is technically <span class="SVG-Term">in error</span>:</p>
    <ul><li>When the content does not conform to the <a href="http://www.w3.org/TR/2008/REC-xml-20081126/">XML 1.0
      specification</a> [<a href="#refs-ref-XML10">XML10</a>], such as the
      use of incorrect XML syntax</li><li>When an element or attribute is encountered in the
      document which is not part of the <a href="#chapter-svgdtd">SVG
      DTD</a> and which is not properly identified as being part of
      another namespace (see <a href="http://www.w3.org/TR/2006/REC-xml-names-20060816/"><cite>Namespaces in XML</cite></a>
      [<a href="#refs-ref-XML-NS">XML-NS</a>])</li><li>When an element has an attribute or property value which
      is not permissible according to this specification</li><li>Other situations that are described as being <em>in
      error</em> in this specification</li></ul>
    <p>A document can go in and out of error over time. For
    example, document changes from the <a href="#chapter-svgdom">SVG
    DOM</a> or from <a href="#chapter-animate">animation</a> can cause
    a document to become <em>in error</em> and a further change can
    cause the document to become correct again.</p>
    <p>The following error processing shall occur when a document
    is in error:</p>
    <ul><li>
        The document shall be rendered up to, but not including,
        the first element which has an error. Exceptions: 
        <ul><li>If a <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element is the
          first element which has an error and the only errors are
          in the <a href="#paths-PathData">path data</a>
          specification, then render the <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> up to the point of the
          path data error. For related information, see <a href="#implnote-PathElementImplementationNotes"><span class="element-name">‘path’</span> element implementation
          notes</a>.</li><li>If a <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> or <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a> element is the
          first element which has an error and the only errors are
          within the <a href="#shapes-PolylineElementPointsAttribute"><span class="attr-name">‘points’</span></a> attribute, then render
          the <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> or <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a> up to the segment
          with the error.</li></ul>
        This approach will provide a visual clue to the user or
        developer about where the error might be in the document.
      </li><li>If the document has animations, the animations shall stop
      at the point at which an error is encountered and the visual
      presentation of the document shall reflect the animated
      status of the document at the point the error was
      encountered.</li><li>A highly perceivable indication of error shall occur. For
      visual rendering situations, an example of an indication of
      error would be to render a translucent colored pattern such
      as a checkerboard on top of the area where the SVG content is
      rendered.</li><li>If the user agent has access to an error reporting
      capability such as status bar, it is recommended that the
      user agent provide whatever additional detail it can to
      enable the user or developer to quickly find the source of
      the error. For example, the user agent might provide an error
      message along with a line number and character number at
      which the error was encountered.</li></ul>
    <p>Because of situations where a block of scripting changes
    might cause a given SVG document fragment to go into and out of
    error, error processing shall occur only at times when document
    presentation (e.g., rendering to the display device) is
    updated. In particular, error processing shall be disabled
    whenever redraw has been suspended via DOM calls to
    <a class="idlattr" href="#struct-__svg__SVGSVGElement__suspendRedraw">suspendRedraw</a>.</p>

<h2 id="implnote-VersionControl">F.3 Version control</h2>

    <p>The SVG user agent must verify the reference to the PUBLIC
    identifier in the <code>&lt;!DOCTYPE&gt;</code> statement or
    the namespace reference in the <span class="attr-name">‘xmlns’</span> attribute on
    the <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element to ensure that
    the given document (or document fragment) identifies a version
    of the SVG language which the SVG user agent supports. If the
    version information is missing or the version information
    indicates a version of the SVG language which the SVG user
    agent does not support, then the SVG user agent is not required
    to render that document or fragment. In particular, it is not
    required that an SVG user agent attempt to render future
    versions of the SVG language. If the user environment provides
    such an option, the user agent should alert or otherwise notify
    the user that the version of the file is not supported and
    suggest an alternate processing option (e.g., installing an
    updated version of the user agent) if such an option
    exists.</p>
    <p>An SVG user agent which supports the SVG Recommendation
    should alert or otherwise notify the user whenever it
    encounters an SVG document (or document fragment) whose
    <code>&lt;!DOCTYPE&gt;</code> statement or corresponding
    <span class="attr-name">‘xmlns’</span> attribute corresponds to a working draft
    version of the SVG specification. All content based on working
    drafts of this specification should be updated to the SVG
    Recommendation.</p>

<h2 id="implnote-RangeClamping">F.4 Clamping values which are restricted to a particular range</h2>

    <p>Some numeric attribute and property values have restricted
    ranges, such as color component values. When out-of-range
    values are provided, the user agent shall defer any error
    checking until after presentation time, as composited actions
    might produce intermediate values which are out-of-range but
    final values which are within range.</p>
    <p>Color values are not in error if they are out-of-range, even
    if final computations produce an out-of-range color value at
    presentation time. It is recommended that user agents clamp
    color values to the nearest color value (possibly determined by
    simple clipping) which the system can process as late as
    possible (e.g., presentation time), although it is acceptable
    for user agents to clamp color values as early as parse time.
    Thus, implementation dependencies might preclude consistent
    behavior across different systems when out-of-range color
    values are used.</p>
    <p>Opacity values out-of-range are not in error and should be
    clamped to the range 0 to 1 at the time which opacity values
    have to be processed (e.g., at presentation time or when it is
    necessary to perform intermediate filter effect
    calculations).</p>

<h2 id="implnote-PathElementImplementationNotes">F.5 <span class="element-name">‘path’</span> element implementation notes</h2>

    <p>A conforming SVG user agent must implement path rendering as
    follows:</p>
    <ul><li>
        Error handling: 
        <ul><li>The general rule for error handling in path data is
          that the SVG user agent shall render a <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> element up
          to (but not including) the path command containing the
          first error in the path data specification. This will
          provide a visual clue to the user or developer about
          where the error might be in the path data specification.
          This rule will greatly discourage generation of invalid
          SVG path data.</li><li>If a path data command contains an incorrect set of
          parameters, then the given path data command is rendered
          up to and including the last correctly defined path
          segment, even if that path segment is a sub-component of
          a compound path data command, such as a "lineto" with
          several pairs of coordinates. For example, for the path
          data string <span class="attr-value">'M 10,10 L 20,20,30'</span>,
          there is an odd number of parameters for the "L" command, which requires an even
          number of parameters. The user agent is required to draw
          the line from (10,10) to (20,20) and then perform error
          reporting since <span class="attr-value">'L 20 20'</span>
          is the last correctly defined segment of the path data specification.</li><li>Wherever possible, all SVG user agents shall report
          all errors to the user.</li></ul>
      </li><li>
        Markers, directionality and zero-length path segments: 
        <ul><li>If markers are specified, then a marker is drawn on
          every applicable vertex, even if the given vertex is the
          end point of a zero-length path segment and even if
          "moveto" commands follow each other.</li><li>Certain line-capping and line-joining situations and
          markers require that a path segment have directionality
          at its start and end points. Zero-length path segments
          have no directionality. In these cases, the following
          algorithm is used to establish directionality: to
          determine the directionality of the start point of a
          zero-length path segment, go backwards in the path data
          specification within the current subpath until you find a
          segment which has directionality at its end point (e.g.,
          a path segment with non-zero length) and use its ending
          direction; otherwise, temporarily consider the start
          point to lack directionality. Similarly, to determine the
          directionality of the end point of a zero-length path
          segment, go forwards in the path data specification
          within the current subpath until you find a segment which
          has directionality at its start point (e.g., a path
          segment with non-zero length) and use its starting
          direction; otherwise, temporarily consider the end point
          to lack directionality. If the start point has
          directionality but the end point doesn't, then the end
          point uses the start point's directionality. If the end
          point has directionality but the start point doesn't,
          then the start point uses the end point's directionality.
          Otherwise, set the directionality for the path segment's
          start and end points to align with the positive x-axis in
          user space.</li><li>As mentioned in <a href="#painting-StrokeProperties">Stroke Properties</a>,
          linecaps must be painted for zero length subpaths when
          <a href="#painting-StrokeLinecapProperty"><span class="prop-name">‘stroke-linecap’</span></a> has a value of
          <span class="prop-value">round</span> or
          <span class="prop-value">square</span>.</li></ul>
      </li><li>
        The S/s commands indicate that the first control point of
        the given cubic Bézier segment is calculated by
        reflecting the previous path segments second control point
        relative to the current point. The exact math is as
        follows. If the current point is (<var>curx</var>, <var>cury</var>) and the
        second control point of the previous path segment is
        (<var>oldx2</var>, <var>oldy2</var>), then the reflected point (i.e., (<var>newx1</var>,
        <var>newy1</var>), the first control point of the current path
        segment) is: 
<pre>
(newx1, newy1) = (curx - (oldx2 - curx), cury - (oldy2 - cury))
               = (2*curx - oldx2, 2*cury - oldy2)
</pre>
      </li><li>A non-positive radius value is an error.</li><li>Unrecognized contents within a path data stream (i.e.,
      contents that are not part of the path data grammar) is an
      error.</li></ul>

<h2 id="implnote-ArcImplementationNotes">F.6 Elliptical arc implementation notes</h2>

<div class="math">

<h3 id="implnote-ArcSyntax">F.6.1 Elliptical arc syntax</h3>

    <p>An elliptical arc is a particular path command. As
    such, it is described by the following parameters in order:</p>
    <p>(<var>x</var><sub>1</sub>, <var>y</var><sub>1</sub>) are the absolute coordinates of the
    current point on the path, obtained from the last two
    parameters of the previous path command.</p>
    <p><var>r<sub>x</sub></var>
    and <var>r<sub>y</sub></var>
    are the radii of the ellipse (also known as its semi-major and
    semi-minor axes).</p>
    <p><var>φ</var> is the angle from the x-axis of the current coordinate
    system to the x-axis of the ellipse.</p>
    <p><var>f<sub>A</sub></var> is
    the large arc flag, and is 0
    if an arc spanning less than or equal to 180 degrees is chosen, or 1
    if an arc spanning greater than 180 degrees is chosen.</p>
    <p><var>f<sub>S</sub></var> is
    the sweep flag, and is 0 if
    the line joining center to arc sweeps through decreasing
    angles, or 1 if it sweeps
    through increasing angles.</p>
    <p>(<var>x</var><sub>2</sub>, <var>y</var><sub>2</sub>) are the absolute coordinates of the
    final point of the arc.</p>
    <p>This parameterization of elliptical arcs will be referred to
    as <em>endpoint parameterization</em>. One of the
    advantages of endpoint parameterization is that it permits a
    consistent path syntax in which all path commands end in the
    coordinates of the new "current point". The following
    notes give rules and formulas to help implementers deal with
    endpoint parameterization.</p>

<h3 id="implnote-ArcOutOfRangeParameters">F.6.2 Out-of-range parameters</h3>

    <p>Arbitrary numerical values are permitted for all elliptical
    arc parameters, but where these values are invalid or
    out-of-range, an implementation must make sense of them as
    follows:</p>
    <p>If the endpoints (<var>x</var><sub>1</sub>, <var>y</var><sub>1</sub>)
    and (<var>x</var><sub>2</sub>, <var>y</var><sub>2</sub>) are identical, then this is
    equivalent to omitting the elliptical arc segment entirely.</p>
    <p>If <var>r<sub>x</sub></var> = 0 or
    <var>r<sub>y</sub></var> = 0
    then this arc is treated as a straight line segment
    (a "lineto") joining the endpoints.</p>
    <p>If <var>r<sub>x</sub></var> or <var>r<sub>y</sub></var>
    have negative signs, these are dropped; the absolute value is
    used instead.</p>
    <p>If <var>r<sub>x</sub></var>, <var>r<sub>y</sub></var>
    and <var>φ</var> are such that there is no solution
    (basically, the ellipse is not big enough to reach
    from (<var>x</var><sub>1</sub>, <var>y</var><sub>1</sub>)
    to (<var>x</var><sub>2</sub>, <var>y</var><sub>2</sub>))
    then the ellipse is scaled up
    uniformly until there is exactly one solution (until the
    ellipse is just big enough).</p>
    <p><var>φ</var> is taken mod 360 degrees.</p>
    <p>Any nonzero value for either of the flags <var>f<sub>A</sub></var>
    or <var>f<sub>S</sub></var> is taken to mean the value 1.</p>
    <p>This forgiving yet consistent treatment of out-of-range
    values ensures that:</p>
    <ul><li>The inevitable approximations arising from computer
      arithmetic cannot cause a valid set of values written by one
      SVG implementation to be treated as invalid when read by
      another SVG implementation. This would otherwise be a
      problem for common boundary cases such as a semicircular
      arc.</li><li>Continuous animations that cause parameters to pass
      through invalid values are not a problem. The motion
      remains continuous.</li></ul>

<h3 id="implnote-ArcParameterizationAlternatives">F.6.3 Parameterization alternatives</h3>

    <p>An arbitrary point (<var>x</var>, <var>y</var>) on the elliptical
    arc can be described by the 2-dimensional matrix equation</p>
    <table summary="equation F.6.3.1" width="90%" border="0" cellspacing="0" cellpadding="0"><tr><td valign="top"><img alt="equation F.6.3.1" src="images/implnote/arcs/image002.png" /></td><td align="right">(F.6.3.1)</td></tr></table>
    <p>(<var>c<sub>x</sub></var>, <var>c<sub>y</sub></var>) are
    the coordinates of the center of the ellipse.</p>
    <p><var>r<sub>x</sub></var> and <var>r<sub>y</sub></var>
    are the radii of the ellipse (also known as its semi-major and
    semi-minor axes).</p>
    <p><var>θ</var> is the angle from the
    x-axis of the current coordinate system to the x-axis of the
    ellipse.</p>
    <p><var>θ</var> ranges from:</p>
    <ul><li><var>θ</var><sub>1</sub> which is
      the start angle of the elliptical arc prior to the stretch and
      rotate operations.</li><li><var>θ</var><sub>2</sub> which is
      the end angle of the elliptical arc prior to the stretch and
      rotate operations.</li><li>Δ<var>θ</var> which is the difference between these
      two angles.</li></ul>
    <p>If one thinks of an ellipse as a circle that has been
    stretched and then rotated, then <var>θ</var><sub>1</sub>,
    <var>θ</var><sub>2</sub> and Δ<var>θ</var>
    are the start angle, end angle and sweep angle, respectively
    of the arc prior to the stretch and rotate operations.
    This leads to an alternate parameterization which is common
    among graphics APIs, which will be referred to as <em>center
    parameterization</em>. In the next sections, formulas are
    given for mapping in both directions between center
    parameterization and endpoint parameterization.</p>

<h3 id="implnote-ArcConversionCenterToEndpoint">F.6.4 Conversion from center to endpoint parameterization</h3>

<p>Given the following variables:</p>

<p class="indented separated">
  <var>c<sub>x</sub></var>
  <var>c<sub>y</sub></var>
  <var>r<sub>x</sub></var>
  <var>r<sub>y</sub></var>
  <var>φ</var>
  <var>θ</var><sub>1</sub>
  Δ<var>θ</var>
</p>

<p>the task is to find:</p>

<p class="indented separated">
  <var>x</var><sub>1</sub>
  <var>y</var><sub>1</sub>
  <var>x</var><sub>2</sub>
  <var>y</var><sub>2</sub>
  <var>f<sub>A</sub></var>
  <var>f<sub>S</sub></var>
</p>

<p>This can be achieved using the following formulas:</p>

    <table summary="elliptical arc formulas" width="90%" border="0" cellspacing="8" cellpadding="0"><tr><td valign="top"><img alt="Equation F.6.4.1" src="images/implnote/arcs/image004.png" /></td><td align="right">(F.6.4.1)</td></tr><tr><td valign="top"><img alt="Equation F.6.4.2" src="images/implnote/arcs/image006.png" /></td><td align="right">(F.6.4.2)</td></tr><tr><td valign="top"><img alt="Equation F.6.4.3" src="images/implnote/arcs/image008.png" /></td><td align="right">(F.6.4.3)</td></tr><tr><td valign="top"><img alt="Equation F.6.4.4" src="images/implnote/arcs/image010.png" /></td><td align="right">(F.6.4.4)</td></tr></table>

<h3 id="implnote-ArcConversionEndpointToCenter">F.6.5 Conversion from endpoint to center parameterization</h3>

<p>Given the following variables:</p>

<p class="indented separated">
  <var>x</var><sub>1</sub>
  <var>y</var><sub>1</sub>
  <var>x</var><sub>2</sub>
  <var>y</var><sub>2</sub>
  <var>f<sub>A</sub></var>
  <var>f<sub>S</sub></var>
  <var>r<sub>x</sub></var>
  <var>r<sub>y</sub></var>
  <var>φ</var>
</p>

<p>the task is to find:</p>

<p class="indented separated">
  <var>c<sub>x</sub></var>
  <var>c<sub>y</sub></var>
  <var>θ</var><sub>1</sub>
  Δ<var>θ</var>
</p>


<p>The equations simplify after a translation which
places the origin at the midpoint of the line joining
(<var>x</var><sub>1</sub>, <var>y</var><sub>1</sub>) to
(<var>x</var><sub>2</sub>, <var>y</var><sub>2</sub>), followed by
a rotation to line up the coordinate axes with the axes of the ellipse.
All transformed coordinates will be written with primes. They are
computed as intermediate values on the way toward finding the required
center parameterization variables. This procedure consists of the
following steps:</p>

<ul><li>
    <p><em>Step 1: Compute</em> (<var>x</var><sub>1</sub>′, <var>y</var><sub>1</sub>′)</p>
    <table summary="elliptical arc formulas" width="90%" border="0" cellspacing="0" cellpadding="0"><tr><td valign="top"><img alt="Equation F.6.5.1" src="images/implnote/arcs/image012.png" /></td><td align="right">(F.6.5.1)</td></tr></table>
  </li><li>
    <p><em>Step 2: Compute</em> (<var>c<sub>x</sub></var>′, <var>c<sub>y</sub></var>′)</p>
    <table summary="elliptical arc formulas" width="90%" border="0" cellspacing="0" cellpadding="0"><tr><td valign="top"><img alt="Equation F.6.5.2" src="images/implnote/arcs/image014.png" /></td><td align="right">(F.6.5.2)</td></tr></table>
    <p>where the + sign is chosen if <var>f<sub>A</sub></var> ≠ <var>f<sub>S</sub></var>, and
    the − sign is chosen if <var>f<sub>A</sub></var> = <var>f<sub>S</sub></var>.</p>
  </li><li>
    <p><em>Step 3: Compute</em> (<var>c<sub>x</sub></var>, <var>c<sub>y</sub></var>)
    <em>from</em> (<var>c<sub>x</sub></var>′, <var>c<sub>y</sub></var>′)</p>
    <table summary="elliptical arc formulas" width="90%" border="0" cellspacing="0" cellpadding="0"><tr><td valign="top"><img alt="Equation F.6.5.3" src="images/implnote/arcs/image016.png" /></td><td align="right">(F.6.5.3)</td></tr></table>
  </li><li>
    <p><em>Step 4: Compute</em> <var>θ</var><sub>1</sub> and Δ<var>θ</var></p>
    <p>In general, the angle between two vectors
    (<var>u<sub>x</sub></var>, <var>u<sub>y</sub></var>)
    and (<var>v<sub>x</sub></var>, <var>v<sub>y</sub></var>) can be computed as</p>
    <table summary="elliptical arc formulas" width="90%" border="0" cellspacing="0" cellpadding="0"><tr><td valign="top"><img alt="Equation F.6.5.4" src="images/implnote/arcs/image018.png" /></td><td align="right">(F.6.5.4)</td></tr></table>

    <p>where the ± sign appearing here is the sign of
    <var>u<sub>x</sub></var> <var>v<sub>y</sub></var> − <var>u<sub>y</sub></var> <var>v<sub>x</sub></var>.</p>

    <p>This angle function can be used to express <var>θ</var><sub>1</sub> and
    Δ<var>θ</var> as follows:</p>

    <table summary="elliptical arc formulas" width="90%" border="0" cellspacing="0" cellpadding="0"><tr><td valign="top"><img alt="Equation F.6.5.5" src="images/implnote/arcs/image020.png" /></td><td align="right">(F.6.5.5)</td></tr><tr><td valign="top"><img alt="Equation F.6.5.6" src="images/implnote/arcs/image022.png" /></td><td align="right">(F.6.5.6)</td></tr></table>
     
    <p>where <var>θ</var><sub>1</sub> is fixed in the range
    −360° &lt; Δ<var>θ</var> &lt; 360° such that:</p>

    <p class="indented">if <var>f<sub>S</sub></var> = 0, then Δ<var>θ</var> &lt; 0,</p>
    <p class="indented">else if <var>f<sub>S</sub></var> = 1, then Δ<var>θ</var> &gt; 0.</p>

    <p>In other words, if <var>f<sub>S</sub></var> = 0 and the
    right side of (F.6.5.6) is greater than 0, then subtract 360°,
    whereas if <var>f<sub>S</sub></var> = 1 and the right
    side of (F.6.5.6) is less than 0, then add 360°. In all other cases
    leave it as is.</p>
  </li></ul>

<h3 id="implnote-ArcCorrectionOutOfRangeRadii">F.6.6 Correction of out-of-range radii</h3>

<p>This section formalizes the adjustments to out-of-range
<var>r<sub>x</sub></var> and <var>r<sub>y</sub></var> mentioned in
F.6.2. Algorithmically these adjustments consist of the following
steps:</p>

<ul><li>
    <p><em>Step 1: Ensure radii are non-zero</em></p>
    <p>If <var>r<sub>x</sub></var> = 0 or
    <var>r<sub>y</sub></var> = 0, then treat
    this as a straight line from (<var>x</var><sub>1</sub>, <var>y</var><sub>1</sub>)
    to (<var>x</var><sub>2</sub>, <var>y</var><sub>2</sub>) and stop. Otherwise,</p>
  </li><li>
    <p><em>Step 2: Ensure radii are positive</em></p>
    <p>Take the absolute value of <var>r<sub>x</sub></var> and
    <var>r<sub>y</sub></var>:</p>
    <table summary="elliptical arc formulas" width="90%" border="0" cellspacing="0" cellpadding="0"><tr><td valign="top"><img alt="Equation F.6.6.1" src="images/implnote/arcs/image024.png" /></td><td align="right">(F.6.6.1)</td></tr></table>
  </li><li>
    <p><em>Step 3: Ensure radii are large enough</em></p>
    <p>Using the primed coordinate values of equation (F.6.5.1),
    compute</p>
    <table summary="elliptical arc formulas" width="90%" border="0" cellspacing="0" cellpadding="0"><tr><td valign="top"><img alt="Equation F.6.6.2" src="images/implnote/arcs/image026.png" /></td><td align="right">(F.6.6.2)</td></tr></table>
    <p>If the result of the above equation is less than or equal to
    1, then no further change need be made to <var>r<sub>x</sub></var>
    and <var>r<sub>y</sub></var>. If
    the result of the above equation is greater than 1, then make
    the replacements</p>
    <table summary="elliptical arc formulas" width="90%" border="0" cellspacing="0" cellpadding="0"><tr><td valign="top"><img alt="Equation F.6.6.3" src="images/implnote/arcs/image028.png" /></td><td align="right">(F.6.6.3)</td></tr></table>
  </li><li>
    <p><em>Step 4: Proceed with computations</em></p>
    <p>Proceed with the remaining elliptical arc computations, such
    as those in section F.6.5.  Note: As a consequence of the
    radii corrections in this section, equation (F.6.5.2) for the
    center of the ellipse always has at least one solution (i.e.
    the radicand is never negative).  In the case that the
    radii are scaled up using equation (F.6.6.3), the radicand of
    (F.6.5.2) is zero and there is exactly one solution for the
    center of the ellipse.</p>
  </li></ul>

</div>

<h2 id="implnote-TextSelectionImplementationNotes">F.7 Text selection implementation notes</h2>

    <p>The following implementation notes describe the algorithm
    for deciding which characters are selected during a <a href="#text-TextSelection">text selection</a>
    operation.</p>
    <p>As the text selection operation occurs (e.g., while the user
    clicks and drags the mouse to identify the selection), the user
    agent determines a <em>start selection position</em> and an
    <em>end selection position</em>, each of which represents a
    position in the text string between two characters. After
    determining start selection position and end selection
    position, the user agent selects the appropriate characters,
    where the resulting text selection consists of either:</p>
    <ul><li>no selection or</li><li>a <em>start character</em>, an <em>end character</em>
      (possibly the same character), and all of the characters
      within the same <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element whose position
      in the DOM is logically between the start character and end
      character.</li></ul>
    <p>On systems with pointer devices, to determine the <em>start
    selection position</em>, the SVG user agent determines which
    boundary between characters corresponding to rendered glyphs is
    the best target (e.g., closest) based on the current pointer
    location at the time of the event that initiates the selection
    operation (e.g., the mouse down event). The user agent then
    tracks the completion of the selection operation (e.g., the
    mouse drag, followed ultimately by the mouse up). At the end of
    the selection operation, the user agent determines which
    boundary between characters is the best target (e.g., closest)
    for the <em>end selection position</em>.</p>
    <p>If no character reordering has occurred due to <a href="#text-RelationshipWithBiDirectionality">bidirectionality</a>,
    then the selection consists of all characters between the
    <em>start selection position</em> and <em>end selection
    position</em>. For example, if a <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element contains the
    string "abcdef" and the start selection position and end
    selection positions are 0 and 3 respectively (assuming the left
    side of the "a" is position zero), then the selection will
    consist of "abc".</p>
    <p>When the user agent is implementing selection of
    bidirectional text, and when the selection starts (or ends)
    between characters which are not contiguous in logical order,
    then there might be multiple potential combinations of
    characters that can be considered part of the selection. The
    algorithms to choose among the combinations of potential
    selection options shall choose the selection option which most
    closely matches the text string's visual rendering order.</p>
    <p>When multiple characters map inseparably to a given set of
    one or more glyphs, the user agent can either disallow the
    selection to start in the middle of the glyph set or can
    attempt to allocate portions of the area taken up by the glyph
    set to the characters that correspond to the glyph.</p>
    <p>For systems which support pointer devices such as a mouse,
    the user agent is required to provide a mechanism for selecting
    text even when the given text has associated event handlers or
    links, which might block text selection due to event processing
    precedence rules (see <a href="#interact-PointerEvents">Pointer events</a>). One
    implementation option: For platforms which support a pointer
    device such as a mouse, the user agent may provide for a small
    additional region around character cells which initiates text
    selection operations but does not initiate event handlers or
    links.</p>

<h2 id="implnote-PrintingImplementationNotes">F.8 Printing implementation notes</h2>

    <p>For user agents which support both zooming on display
    devices and printing, it is recommended that the default
    printing option produce printed output that reflects the
    display device's current view of the current SVG document
    fragment (assuming there is no media-specific styling), taking
    into account any zooming and panning done by the user, the
    current state of animation, and any document changes due to DOM
    and scripting. Thus, if the user zooms into a particular area
    of a map on the display device and then requests a hardcopy,
    the hardcopy should show the same view of the map as appears on
    the display device. If a user pauses an animation and prints,
    the hardcopy should show the same graphics as the currently
    paused picture on the display device. If scripting has added or
    removed elements from the document, then the hardcopy should
    reflect the same changes that would be reflected on the
    display.</p>
    <p>When an SVG document is rendered on a static-only device
    such as a printer which does not support SVG's animation and
    scripting and facilities, then the user agent shall ignore any
    animation and scripting elements in the document and render the
    remaining graphics elements according to the rules in this
    specification.</p>

</div><hr class="chapter-divider" />
<div id="chapter-conform">

<h1>Appendix G: Conformance Criteria</h1><h2 id="conform-toc">Contents</h2><ul class="toc">
<li><a href="#conform-Introduction">G.1 Introduction</a></li>
<li><a href="#conform-ConformingSVGDocuments">G.2 Conforming SVG Document Fragments</a></li>
<li><a href="#conform-ConformingSVGStandAloneFiles">G.3 Conforming SVG Stand-Alone Files</a></li>
<li><a href="#conform-ConformingSVGGenerators">G.4 Conforming SVG Generators</a></li>
<li><a href="#conform-ConformingSVGServers">G.5 Conforming SVG Servers</a></li>
<li><a href="#conform-ConformingSVGDOMSubtree">G.6 Conforming SVG DOM Subtree</a></li>
<li><a href="#conform-ConformingSVGInterpreters">G.7 Conforming SVG Interpreters</a></li>
<li><a href="#conform-ConformingSVGViewers">G.8 Conforming SVG Viewers</a></li></ul>

<p class="normativity"><strong>This appendix is normative.</strong></p>

<h2 id="conform-Introduction">G.1 Introduction</h2>
     
<p>In order to ensure that SVG-family documents are maximally portable
among SVG-family user agents, this specification rigidly defines
conformance requirements for both, as well as for SVG-family document
types. While the conformance definitions can be found in this appendix,
they necessarily reference normative text within this document and
within other related specifications. It is only possible to fully
comprehend the conformance requirements of SVG through a complete
reading of all normative references.</p>

<h2 id="conform-ConformingSVGDocuments">G.2 Conforming SVG Document Fragments</h2>

<p>An SVG document fragment is a <em>Conforming SVG Document Fragment</em> if
it adheres to the specification described in this document
(<a href="Overview.html">Scalable Vector Graphics (SVG) Specification</a>) and also:</p>

<ul><li>is <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#sec-well-formed">XML well-formed</a>
  ([<a href="#refs-ref-XML10">XML10</a>], section 2.1),</li><li>conforms to the <a href="http://www.w3.org/TR/2006/REC-xml-names-20060816/"><cite>Namespaces in XML</cite></a>
  specification [<a href="#refs-ref-XML-NS">XML-NS</a>],</li><li>any CSS stylesheets conform to the core grammar of
  <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/"><cite>Cascading Style Sheets, level 2</cite></a>
  [<a href="#refs-ref-CSS2">CSS2</a>],</li><li>any <code>&lt;?xml-stylesheet?&gt;</code> processing instruction conforms to
  <a href="http://www.w3.org/1999/06/REC-xml-stylesheet-19990629/"><cite>Associating stylesheets with XML documents</cite></a>
  [<a href="#refs-ref-XML-SS">XML-SS</a>],</li><li>and the document fragment is determined to be valid as follows:
    <ol><li>Let <var>E</var> be the encoding of the XML document in which the SVG document fragment resides.</li><li>Let <var>V</var> be the XML version of the document in which the SVG document fragment resides.</li><li>Let <var>D</var> be an XML document constructed by concatenating:
        <ul><li>an XML declaration identifying version <var>V</var> and encoding <var>E</var> (that is, <code>&lt;?xml version="<var>V</var>" encoding="<var>E</var>"?&gt;</code>),</li><li>the DOCTYPE declaration <code>&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" SYSTEM "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;</code>, and</li><li>the SVG document fragment with any entities expanded.</li></ul>
      </li><li>Remove from <var>D</var> any subtree rooted by an element that is not in the SVG namespace.</li><li>Remove from <var>D</var> any attribute that is in a namespace that is not the XLink namespace or the Namespaces in XML namespace.</li><li>Remove the prefix from the name of any element in <var>D</var> that uses one.</li><li>Let <var>A</var> be the set of all attributes in <var>D</var> that are in the XLink namespace.</li><li>Set the attributes <span class="attr-value">xmlns="http://www.w3.org/2000/svg"</span> and <span class="attr-value">xmlns:xlink="http://www.w3.org/1999/xlink"</span> on <var>D</var>'s document element and remove any other attributes in the Namespaces in XML namespace from <var>D</var>.</li><li>Change the prefix of every attribute <var>A</var> to be <code>xlink</code>.</li><li>The document fragment is valid if <var>D</var> is a <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#dt-valid">valid XML document</a> ([<a href="#refs-ref-XML10">XML10</a>], section 2.8).</li></ol>
  </li></ul>

<p>SVG document fragments can be included within parent XML documents using
the XML namespace facilities described in
<a href="http://www.w3.org/TR/2006/REC-xml-names-20060816/">Namespaces in XML</a> [<a href="#refs-ref-XML-NS">XML-XS</a>].
Note, however, that since a Conforming SVG Document Fragment must have an
<a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element as its root, the use of an individual non-<a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>
element from the SVG namespace is disallowed.  Thus, the SVG part of the
following document is <em>not</em> conforming:</p>

<pre>&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE SomeParentXMLGrammar PUBLIC "-//SomeParent" "http://SomeParentXMLGrammar.dtd"&gt;
&lt;ParentXML&gt;
  &lt;!-- Elements from ParentXML go here --&gt;
  &lt;!-- The following is <strong>not</strong> conforming --&gt;
  &lt;z:rect xmlns:z="http://www.w3.org/2000/svg"
          x="0" y="0" width="10" height="10" /&gt;
  &lt;!-- More elements from ParentXML go here --&gt;
&lt;/ParentXML&gt;</pre>

<p>Instead, for the SVG part to become a Conforming SVG Document Fragment,
the file could be modified as follows:</p>

<pre>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE SomeParentXMLGrammar PUBLIC "-//SomeParent" "http://SomeParentXMLGrammar.dtd"&gt;
&lt;ParentXML&gt;
  &lt;!-- Elements from ParentXML go here --&gt;
  &lt;!-- The following is conforming --&gt;
  &lt;z:svg xmlns:z="http://www.w3.org/2000/svg"
         width="100px" height="100px"&gt;
    &lt;z:rect x="0" y="0" width="10" height="10"/&gt;
  &lt;/z:svg&gt;
  &lt;!-- More elements from ParentXML go here --&gt;
&lt;/ParentXML&gt;
</pre>

<p>The SVG language or these conformance criteria provide no designated
size limits on any aspect of SVG content. There are no maximum values on
the number of elements, the amount of character data, or the number of
characters in attribute values.</p>

<h2 id="conform-ConformingSVGStandAloneFiles">G.3 Conforming SVG Stand-Alone Files</h2>

<p>A file is a <em>Conforming SVG Stand-Alone File</em> if:</p>

<ul><li>it is an XML document,</li><li>its root element is an <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a> element, and</li><li>the SVG document fragment rooted at the document element is a <a href="#conform-ConformingSVGDocuments">Conforming SVG Document Fragment</a>.</li></ul>

<h2 id="conform-ConformingSVGGenerators">G.4 Conforming SVG Generators</h2>

    <p>A <em>Conforming SVG Generator</em> is a program which:</p>
    <ul><li>always creates <a href="#conform-ConformingSVGDocuments">Conforming SVG Document
      Fragments</a> and/or <a href="#conform-ConformingSVGStandAloneFiles">Conforming SVG
      Stand-Alone Files</a>.</li><li>does not create non-conforming SVG document fragments of
      the above types.</li></ul>
    <p>Additionally, an authoring tool which is a Conforming SVG
    Generator conforms to all of the Priority 1 accessibility
    guidelines from the document <a href="http://www.w3.org/TR/2000/REC-ATAG10-20000203/"><cite>Authoring Tool Accessibility
    Guidelines 1.0</cite></a> [<a href="#refs-ref-ATAG">ATAG</a>] that are relevant
    to generators of SVG content. (Priorities 2 and 3 are
    encouraged but not required for conformance.)</p>
    <p>SVG generators are encouraged to follow <a href="http://www.w3.org/International/">W3C developments in the
    area of internationalization</a>. Of particular interest is the
    <em>W3C Character Model</em> and the concept of <em>Webwide
    Early Uniform Normalization</em>, which promises to enhance the
    interchangability of Unicode character data across users and
    applications. Future versions of the SVG specification are
    likely to require support of the <em>W3C Character Model</em>
    in Conforming SVG Generators.</p>
    
    <h2 id="conform-ConformingSVGServers">G.5 Conforming SVG Servers</h2>
    <p>
    Conforming SVG Servers must meet all the requirements of a Conforming SVG Generator. In addition, Conforming SVG Servers using
    HTTP or other protocols that use Internet Media types must serve SVG stand-alone files with the media type <code>"image/svg+xml"</code>. 
    </p>
     <p>
     Also, if the SVG file is compressed with gzip or deflate, Conforming SVG Servers must indicate this with the appropriate header, according
     to what the protocol supports.  Specifically, for content compressed by the server immediately prior to transfer, the server must use the 
     "Transfer-Encoding: gzip" or "Transfer-Encoding: deflate" headers as appropriate, and for content stored in a compressed 
     format on the server (e.g. with the file extension "svgz"), the server must use the "Content-Encoding: gzip" or 
     "Content-Encoding: deflate" headers as appropriate.
    </p>

    <p><em>Note:</em> Compression of stored <em>content</em> (the "entity," in HTTP terms) is distinct from automatic compression of the 
    <em>message body</em>, as defined in HTTP/1.1 
    <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.39">TE</a>/
    <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.41">Transfer Encoding</a>
    ([<a href="#refs-ref-RFC2616">RFC2616</a>], sections 14.39 and 14.41).</p>

<h2 id="conform-ConformingSVGDOMSubtree">G.6 Conforming SVG DOM Subtree</h2>

<p>A DOM subtree rooted at a given element is a <em>Conforming SVG DOM Subtree</em>
if, once serialized to XML, is a <a href="#conform-ConformingSVGDocuments">Conforming SVG Document Fragment</a>.
If the DOM subtree cannot be serialized to XML, such as when a
<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1728279322">Comment</a> node's data contains the substring "--", then the subtree is not
a Conforming SVG DOM Subtree.</p>

<h2 id="conform-ConformingSVGInterpreters">G.7 Conforming SVG Interpreters</h2>

    <p>An SVG interpreter is a program which can parse and process
    SVG document fragments. Examples of SVG interpreters are
    server-side transcoding tools (e.g., a tool which converts SVG
    content into modified SVG content) or analysis tools (e.g., a
    tool which extracts the text content from SVG content). An <a href="#conform-ConformingSVGViewers">SVG viewer</a> also
    satisfies the requirements of an SVG interpreter in that it can
    parse and process SVG document fragments, where processing
    consists of rendering the SVG content to the target medium.</p>
    <p>In a <em>Conforming SVG Interpreter</em>, the XML parser
    must be able to parse and process all XML constructs defined
    within <a href="http://www.w3.org/TR/2008/REC-xml-20081126/">XML 1.0</a>
    [<a href="#refs-ref-XML10">XML10</a>] and
    <a href="http://www.w3.org/TR/2006/REC-xml-names-20060816/"><cite>Namespaces in XML</cite></a>
    [<a href="#refs-ref-XML-NS">XML-NS</a>].</p>
    <p>There are two sub-categories of <em>Conforming SVG
    Interpreters</em>:</p>
    <ul><li><em>Conforming Static SVG Interpreters</em> must be able
      to parse and process the static language features of SVG that
      correspond to the feature string "http://www.w3.org/TR/SVG11/feature#SVG-static" (see <a href="#svgdom-FeatureStrings">Feature strings</a>).</li><li>In addition to the requirements for the static category,
      <em>Conforming Dynamic SVG Interpreters</em> must be able to
      parse and process the language features of SVG that
      correspond to the feature string "http://www.w3.org/TR/SVG11/feature#SVG-dynamic" (see
      <a href="#svgdom-FeatureStrings">Feature strings</a>) and
      which support all of the required features in the <a href="#chapter-svgdom">SVG DOM</a> described in this
      specification.</li></ul>
    <p>A Conforming SVG Interpreter must parse any SVG document
    correctly. It is not required to interpret the semantics of all
    features correctly.</p>
    <p>Note: A transcoder from SVG into another graphics
    representation, such as an SVG-to-raster transcoder, represents
    a viewer, and thus viewer conformance criteria apply. (See <a href="#conform-ConformingSVGViewers">Conforming SVG
    Viewers</a>.)</p>

<h2 id="conform-ConformingSVGViewers">G.8 Conforming SVG Viewers</h2>

    <p>An SVG viewer is a program which can parse and process an
    SVG document fragment and render the contents of the document
    onto some sort of output medium such as a display or printer;
    thus, an <em>SVG Viewer</em> is also an <em>SVG
    Interpreter</em>.</p>
    <p>There are two sub-categories of <em>Conforming SVG
    Viewers</em>:</p>
    <ul><li><em>Conforming Static SVG Viewers</em> support the static
      language features of SVG that correspond to the feature
      string "http://www.w3.org/TR/SVG11/feature#SVG-static" (see <a href="#svgdom-FeatureStrings">Feature strings</a>). This
      category often corresponds to platforms and environments
      which only render static documents, such as printers.</li><li><em>Conforming Dynamic SVG Viewers</em> support the
      language features of SVG that correspond to the feature
      string "http://www.w3.org/TR/SVG11/feature#SVG-dynamic" (see <a href="#svgdom-FeatureStrings">Feature strings</a>). This
      category often applies to platforms and environments such as
      common Web browsers which support user interaction and
      dynamic document content (i.e., documents whose content can
      change over time). (User interaction includes support for
      hyperlinking, events [e.g., mouse clicks], text selection,
      zooming and panning [see <a href="#chapter-interact">Interactivity</a>]. Dynamic document
      content can be achieved via <a href="#chapter-animate">declarative animation</a> or by scripts
      modifying the <a href="#chapter-svgdom">SVG DOM</a>.)</li></ul>
    <p>Specific criteria that apply to both <em>Conforming Static
    SVG Viewers</em> and <em>Conforming Dynamic SVG
    Viewers</em>:</p>
    <ul><li>The program must also be a <a href="#conform-ConformingSVGInterpreters">Conforming SVG
      Interpreter</a>,</li><li>For interactive user environments, facilities must exist
      for zooming and panning of stand-alone SVG documents or SVG
      document fragments embedded within parent XML documents.</li><li>In environments that have appropriate user interaction
      facilities, the viewer must support the ability to activate
      hyperlinks.</li><li>If printing devices are supported, SVG content must be
      printable at printer resolutions with the same graphics
      features available as required for display (e.g., the
      specified colors must be rendered on color printers).</li><li>On systems where this information is available, the
      parent environment must provide the viewer with information
      about physical device resolution. In situations where this
      information is impossible to determine, the parent
      environment shall pass a reasonable value for device
      resolution which tends to approximate most common target
      devices.</li><li>The viewer must support JPEG and PNG
      image formats [<a href="#refs-ref-JPEG">JPEG</a>] [<a href="#refs-ref-PNG">PNG</a>].</li><li>Resampling of image data must be consistent with the
      specification of property <a href="#painting-ImageRenderingProperty"><span class="prop-name">‘image-rendering’</span></a>.</li><li>The viewer must support alpha channel blending of the
      image of the SVG content onto the target canvas.</li><li>SVG implementations must correctly support <a href="http://www.ietf.org/rfc/rfc1952.txt">gzip-encoded</a>
      [<a href="#refs-ref-RFC1952">RFC1952</a>] and <a href="http://www.ietf.org/rfc/rfc1951.txt">deflate-encoded</a>
      [<a href="#refs-ref-RFC1951">RFC1951</a>] data streams,
      for any content type (including SVG, script files, images).
      SVG implementations that support HTTP must support these
      encodings according to the <a href="http://www.ietf.org/rfc/rfc2616.txt">HTTP 1.1</a>
      specification [<a href="#refs-ref-RFC2616">RFC2616</a>];
      in particular, the client must specify with an "Accept-Encoding:"
      request header [<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3">HTTP-ACCEPT-ENCODING</a>]
      those encodings that it accepts, including at minimum gzip
      and deflate, and then decompress any <a href="http://www.ietf.org/rfc/rfc1952.txt">gzip-encoded</a> and
      <a href="http://www.ietf.org/rfc/rfc1951.txt">deflate-encoded</a>
      data streams that are downloaded from the server. When an SVG
      viewer retrieves compressed content (e.g., an .svgz file) over
      HTTP, if the "Content-Encoding" and "Transfer-Encoding" response
      headers are missing or specify a value that does not match the
      compression method that has been applied to the content, then
      the SVG viewer must not render the content and must treat the
      document as being <a href="#implnote-ErrorProcessing">in error</a>.</li><li>The viewer must support base64 encoded content using the
      <a href="http://www.ietf.org/rfc/rfc2397.txt">"data:" URL scheme</a>
      [<a href="#refs-ref-RFC2397">RFC2397</a>]
      wherever URI referencing of whole documents (such as raster images,
      SVG documents, fonts and color profiles) is permitted within
      SVG content. (Note: fragments of SVG content which do not
      constitute an entire SVG document are not available using the
      "data:" URL scheme.)</li><li>
        The viewer must support the following W3C Recommendations
        with regard to SVG content: 
        <ul><li>complete support for the <a href="http://www.w3.org/TR/2008/REC-xml-20081126/">XML 1.0 specification</a>
	  [<a href="#refs-ref-XML10">XML10</a>].</li><li>complete support for inclusion of non-SVG namespaces
          within SVG content as defined in <a href="http://www.w3.org/TR/2006/REC-xml-names-20060816/"><cite>Namespaces in XML</cite></a>
          [<a href="#refs-ref-XML-NS">XML-NS</a>].
          (Note that data from non-SVG namespaces are included in
          the DOM but are otherwise ignored.)</li></ul>
      </li><li>All visual rendering must be accurate to within one
      device pixel (px unit) to the mathematically correct result
      at the initial 1:1 zoom ratio. It is suggested that viewers
      attempt to keep a high degree of accuracy when zooming.</li><li>On systems which support accurate sRGB
      [<a href="#refs-ref-SRGB">SRGB</a>] color, all
      sRGB color computations and all resulting color values must
      be accurate to within one sRGB color component value, where
      sRGB color component values range from 0 to 255.</li></ul>
    <p>Although anti-aliasing support is not a strict requirement
    for a Conforming SVG Viewer, it is highly recommended for
    display devices. Lack of anti-aliasing support will generally
    result in poor results on display devices.</p>
    <p>Specific criteria that apply to only <em>Conforming Dynamic
    SVG Viewers</em>:</p>
    <ul><li>In Web browser environments, the viewer must have the
      ability to search and select text strings within SVG
      content.</li><li>If display devices are supported, the viewer must have
      the ability to select and copy text from SVG content to the
      system clipboard.</li><li>The viewer must have complete support for an
      ECMAScript binding of the <a href="#chapter-svgdom">SVG Document Object
      Model</a> [<a href="#refs-ref-ECMA-262">ECMA-262</a>].</li></ul>
    <p>The <a href="http://www.w3.org/WAI/">Web Accessibility Initiative</a>
    is defining <a href="http://www.w3.org/TR/2002/REC-UAAG10-20021217/"><cite>User Agent Accessibility Guidelines 1.0</cite></a>
    [<a href="#refs-ref-UAAG">UAAG</a>]. Viewers are
    encouraged to conform to the Priority 1 accessibility
    guidelines defined in this document, and preferably also
    Priorities 2 and 3. Once the guidelines are completed, a future
    version of this specification is likely to require conformance
    to the Priority 1 guidelines in Conforming SVG Viewers.</p>

    <p id="conform-ConformingHighQualitySVGViewers">A higher order concept is that of a <em>Conforming
    High-Quality SVG Viewer</em>, with sub-categories
    <em>Conforming High-Quality Static SVG Viewer</em> and
    <em>Conforming High-Quality Dynamic SVG Viewer</em>.</p>
    <p>Both a <em>Conforming High-Quality Static SVG Viewer</em>
    and a <em>Conforming High-Quality Dynamic SVG Viewer</em> must
    support the following additional features:</p>
    <ul><li>Professional-quality results with good processing and
      rendering performance and smooth, flicker-free
      animations.</li><li>On low-resolution devices such as display devices at
      150dpi or less, support for smooth edges on lines, curves and
      text. (Smoothing is often accomplished using anti-aliasing
      techniques.)</li><li>Color management via ICC profile support (i.e., the
      ability to support colors defined using ICC profiles).</li><li>Resampling of image data must conform to the requirements
      for Conforming High-Quality SVG Viewers as specified in the
      description of property <a href="#painting-ImageRenderingProperty"><span class="prop-name">‘image-rendering’</span></a>.</li><li>At least double-precision floating point computation on
      coordinate system transformation numerical calculations.</li></ul>
    <p>A <em>Conforming High-Quality Dynamic SVG Viewer</em> must
    support the following additional features:</p>
    <ul><li>Progressive rendering and animation effects (i.e., the
      start of the document will start appearing and animations
      will start running in parallel with downloading the rest of
      the document).</li><li>Restricted screen updates (i.e., only required areas of
      the display are updated in response to redraw events).</li><li>Background downloading of images and fonts retrieved from
      a Web server, with updating of the display once the downloads
      are complete.</li></ul>
    <p>A <em>Conforming SVG Viewer</em> must be able to apply
    styling properties to SVG content using <a href="#styling-AlternativesForStyling">presentation
    attributes</a>.</p>
    <p>If the user agent supports <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/"><cite>Cascading Style Sheets, level 2</cite></a>
    [<a href="#refs-ref-CSS2">CSS2</a>], a
    <em>Conforming SVG Viewer</em> must support CSS styling of SVG
    content and must support all features from
    CSS2 that are described in this specification as applying to SVG (see
    <a href="#styling-PropertiesFromCSS2">properties shared with CSS and XSL</a>,
    <a href="#styling-StylingWithCSS">Styling with CSS</a> and
    <a href="#styling-SVGUseOfCSS">Facilities from CSS and XSL used by SVG</a>).
    The supported features from CSS2 must be implemented in accordance with
    the <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/conform.html#conformance">conformance
    definitions from the CSS2 specification</a>
    ([<a href="#refs-ref-CSS2">CSS2</a>], section 3.2).</p>
    <p>If the user agent includes an HTML or XHTML viewing
    capability or can apply CSS/XSL styling properties to XML
    documents, then a <em>Conforming SVG Viewer</em> must support
    resources of MIME type "image/svg+xml" wherever raster image
    external resources can be used, such as in the HTML or XHTML
    <span class="element-name">‘img’</span> element and in CSS/XSL
    properties that can refer to raster image resources (e.g.,
    <span class="prop-name">‘background-image’</span>).</p>

</div><hr class="chapter-divider" />
<div id="chapter-access">

<h1>Appendix H: Accessibility Support</h1><h2 id="access-toc">Contents</h2><ul class="toc">
<li><a href="#access-AccessibilityAndSVG">H.1 WAI Accessibility Guidelines</a></li>
<li><a href="#access-SVGAccessibilityGuidelines">H.2 SVG Content Accessibility Guidelines</a></li></ul>

<p class="normativity"><em>This appendix is informative, not normative.</em></p>

<h2 id="access-AccessibilityAndSVG">H.1 WAI Accessibility Guidelines</h2>

    <p>This appendix explains how accessibility guidelines
    published by W3C's Web Accessibility Initiative (WAI) apply to
    SVG.</p>
    <ol><li>The <a href="http://www.w3.org/TR/2008/REC-WCAG20-20081211/"><cite>Web Content Accessibility Guidelines (WCAG) 2.0</cite></a>
      [<a href="#refs-ref-WCAG2">WCAG2</a>]
      explains how authors can create Web content that is
      accessible to people with disabilities.</li><li>The <a href="http://www.w3.org/TR/2000/REC-ATAG10-20000203/"><cite>Authoring Tool Accessibility Guidelines 1.0</cite></a>
      [<a href="#refs-ref-ATAG">ATAG</a>] explains how
      developers can design accessible authoring tools such as SVG
      authoring tools. <a href="#conform-ConformingSVGGenerators">To conform to the
      SVG specification</a>, an SVG authoring tool must conform to
      ATAG (priority 1). SVG support for element <a href="#struct-Groups">grouping</a> and <a href="#struct-UseElement">reuse</a> is relevant to
      designing accessible SVG authoring tools.</li><li>The <a href="http://www.w3.org/TR/2002/REC-UAAG10-20021217/"><cite>User Agent Accessibility Guidelines 1.0</cite></a>
      [<a href="#refs-ref-UAAG">UAAG</a>] explains how
      developers can design accessible user agents such as
      SVG-enabled browsers. To conform to the SVG specification, an
      SVG user agent should conform to UAAG. SVG support for
      scaling, style sheets, the DOM, and metadata are all relevant
      to designing accessible SVG user agents.</li></ol>
    <p>The W3C Note <a href="http://www.w3.org/TR/2000/NOTE-SVG-access-20000807/"><cite>Accessibility Features of SVG</cite></a>
    [<a href="#refs-ref-SVG-ACCESS">SVG-ACCESS</a>]
    explains in detail how the requirements of the three guidelines
    apply to SVG.</p>

<h2 id="access-SVGAccessibilityGuidelines">H.2 SVG Content Accessibility Guidelines</h2>

    <p>This section explains briefly how authors can create
    accessible SVG documents; it summarizes <a href="http://www.w3.org/TR/2000/NOTE-SVG-access-20000807/"><cite>Accessibility Features of SVG</cite></a> 
    [<a href="#refs-ref-SVG-ACCESS">SVG-ACCESS</a>].</p>
    <dl><dt><span class="gl">Provide text equivalents for
      graphics.</span></dt><dd>
        <ul><li>When the text content of a graphic (e.g., in a
          <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element) explains its function, no text
          equivalent is required. Use the <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> child element
          to explain the function of <a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements whose meaning
          is not clear from their text content.</li><li>When a graphic does not include explanatory text
          content, it requires a text equivalent. If the equivalent
          is complex, use the <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a> element, otherwise
          use the <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a> child element.</li><li>If a graphic is built from meaningful parts, build
          the description from meaningful parts.</li></ul>
      </dd><dt><span class="gl">Do not rely on color alone.</span></dt><dd>
        <ul><li>Do not use color alone to convey information.</li><li>Ensure adequate color contrast. Use style sheets so
          that users who require certain color combinations may
          apply them through user style sheets.</li></ul>
      </dd><dt><span class="gl">Use markup and style sheets and do so
      properly.</span></dt><dd>
        <ul><li>Represent text as character data, not as images or
          curves. Style text with fonts. Authors may describe their
          own fonts in SVG.</li><li>Separate structure from presentation.</li><li>Use the <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element and rich
          descriptions to structure SVG documents. Reuse named
          objects.</li><li>Publish highly-structured documents, not just
          graphical representations. Documents that are rich in
          structure may be rendered graphically, as speech, or as
          braille. For example, express mathematical relationships
          in <a href="http://www.w3.org/TR/2001/REC-MathML2-20010221/">MathML</a>
          [<a href="#refs-ref-MATHML">MATHML</a>] and use
          SVG for explanatory graphics.</li><li>Author documents that validate to the SVG
          grammar.</li><li>Use style sheets to specify graphical and aural
          presentation.</li><li>Use relative units in style sheets.</li></ul>
      </dd><dt><span class="gl">Clarify natural language
      usage.</span></dt><dd>
        <ul><li>Use <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a> to identify the
          natural language of content and changes in natural
          language.</li></ul>
      </dd><dt><span class="gl">Ensure that dynamic content is
      accessible.</span></dt><dd>
        <ul><li>Ensure that text equivalents for dynamic content are
          updated when the dynamic content changes.</li><li>Ensure that SVG documents are usable when scripts or
          other programmatic objects are turned off or not
          supported.</li></ul>
      </dd></dl>

</div><hr class="chapter-divider" />
<div id="chapter-i18n">

<h1>Appendix I: Internationalization Support</h1><h2 id="i18n-toc">Contents</h2><ul class="toc">
<li><a href="#i18n-Intro">I.1 Introduction</a></li>
<li><a href="#i18n-InternationalizationAndSVG">I.2 Internationalization and SVG</a></li>
<li><a href="#i18n-SVGInternationalizationGuidelines">I.3 SVG Internationalization Guidelines</a></li></ul>

<p class="normativity"><em>This appendix is informative, not normative.</em></p>

<h2 id="i18n-Intro">I.1 Introduction</h2>

<p>This appendix provides a brief summary of SVG's support for
internationalization. The appendix is hyperlinked to the sections of the
specification which elaborate on particular topics.</p>

<h2 id="i18n-InternationalizationAndSVG">I.2 Internationalization and SVG</h2>

<p>SVG is an application of XML
[<a href="#refs-ref-XML10">XML10</a>]
and thus supports Unicode
[<a href="#refs-ref-UNICODE">UNICODE</a>],
which defines a standard universal character set.</p>

<p>Additionally, SVG provides a mechanism for precise control of
the glyphs used to draw text strings, which is described in <a href="#text-AlternateGlyphs">Alternate glyphs</a>. This facility
provides:</p>

<ul><li>the ability to specify the rendering of particular glyphs
  which might not be accessible when defining character data using
  Unicode</li><li>the ability to override the user agent's character-to-glyph
  algorithms</li><li>the ability to follow the guidelines for normalizing character
  data for the purposes of enhanced interoperability (see
  <a href="http://www.w3.org/TR/2005/REC-charmod-20050215/"><cite>Character Model for the World Wide Web 1.0: Fundamentals</cite></a>
  [<a href="#refs-ref-CHARMOD">CHARMOD</a>]), while still
  having precise control over the glyphs that are drawn.</li></ul>

<p>SVG supports:</p>

<ul><li>Horizontal, left-to-right text found in Roman scripts (see the
  <a href="#text-WritingModeProperty"><span class="prop-name">‘writing-mode’</span></a> property)</li><li>Vertical and vertical-ideographic text (see the <a href="#text-WritingModeProperty"><span class="prop-name">‘writing-mode’</span></a>
  property)</li><li>Bidirectional text (for languages such as Arabic and Hebrew - see
  the <a href="#text-DirectionProperty"><span class="prop-name">‘direction’</span></a> and <a href="#text-UnicodeBidiProperty"><span class="prop-name">‘unicode-bidi’</span></a> properties)</li></ul>

<p><a href="#fonts-SVGFonts">SVG fonts</a>
support contextual glyph selection for
<a href="#fonts-GlyphElementArabicFormAttribute">Arabic</a> and
<a href="#fonts-GlyphElementLangAttribute">Han</a> text.</p>

<p id="i18n-I18nTextSubstitution">Multi-language SVG documents are possible
by utilizing the <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a> attribute to have different
text strings appear based on the client machine's language setting.</p>

<h2 id="i18n-SVGInternationalizationGuidelines">I.3 SVG Internationalization Guidelines</h2>

<p>SVG generators should follow W3C guidelines for normalizing character
data [<a href="#refs-ref-CHARMOD">CHARMOD</a>]. When precise
control over glyph selection is required, use the facilities for
<a href="#text-AlternateGlyphs">Alternate glyphs</a> to override the
user agent's character-to-glyph mapping algorithms.</p>

</div><hr class="chapter-divider" />
<div id="chapter-minimize">

<h1>Appendix J: Minimizing SVG File Sizes</h1>

<p class="normativity"><em>This appendix is informative, not normative.</em></p>

    <p>Considerable effort has been made to make SVG file sizes as
    small as possible while still retaining the benefits of XML and
    achieving compatibility and leverage with other W3C
    specifications.</p>
    <p>Here are some of the features in SVG that promote small file
    sizes:</p>
    <ul><li>SVG's path data definition was defined to produce a
      compact data stream for vector graphics data: all commands
      are one character in length; relative coordinates are
      available; separator characters do not have to be supplied
      when tokens can be identified implicitly; smooth curve
      formulations are available (cubic Béziers, quadratic
      Béziers and elliptical arcs) to prevent the need to
      tesselate into polylines; and shortcut formulations exist for
      common forms of cubic Bézier segments, quadratic
      Bézier segments, and horizontal and vertical straight
      line segments so that the minimum number of coordinates need
      to be specified.</li><li>Text can be specified using XML character data — no need
      to convert to outlines.</li><li>SVG contains a facility for defining symbols once and
      referencing them multiple times using different visual
      attributes and different sizing, positioning, clipping and
      client-side filter effects</li><li>User agents that support <a href="#styling-StylingWithCSS">styling with CSS</a> can
      use CSS selectors and property inheritance to define commonly
      used sets of attributes once as named styles.</li><li>Filter effects allow for compelling visual results and
      effects typically found only in image-authoring tools using
      small amounts of vector and/or raster data</li></ul>
    <p>Additionally, HTTP/1.1 allows for compressed data to be
    passed from server to client, which can result in significant
    file size reduction. Here are some sample compression results
    using <a href="http://www.ietf.org/rfc/rfc1952.txt">gzip
    compression</a> on SVG documents [<a href="#refs-ref-RFC1952">RFC1952</a>]:</p>
    <table class="vert" summary="gzip compression results on SVG file sizes"><tr style="text-align: center"><th>Uncompressed
         SVG</th><th>With gzip
         compression</th><th>Compression
         ratio</th></tr><tr style="text-align: right"><td>12,912</td><td>2,463</td><td>81%</td></tr><tr style="text-align: right"><td>12,164</td><td>2,553</td><td>79%</td></tr><tr style="text-align: right"><td>11,613</td><td>2,617</td><td>77%</td></tr><tr style="text-align: right"><td>18,689</td><td>4,077</td><td>78%</td></tr><tr style="text-align: right"><td>13,024</td><td>2,041</td><td>84%</td></tr></table>
    <p>A related issue is progressive rendering. Some SVG viewers
    will support:</p>
    <ul><li>the ability to display the first parts of an SVG document
      fragments as the remainder of the document is downloaded from
      the server; thus, the user will see part of the SVG drawing
      right away and interact with it, even if the SVG file size is
      large.</li><li>delayed downloading of images and fonts. Just like some
      HTML browsers, some SVG viewers will download images and
      <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#q1">WebFonts</a>
      ([<a href="#refs-ref-CSS2">CSS2</a>], section 15.1)
      last, substituting a temporary image and system fonts,
      respectively, until the given image and/or font is
      available.</li></ul>
    <p>Here are techniques for minimizing SVG file sizes and
    minimizing the time before the user is able to start
    interacting with the SVG document fragments:</p>
    <ul><li>Construct the SVG file such that any links which the user
      might want to click on are included at the beginning of the
      SVG file</li><li>Use default values whenever possible rather than defining
      all attributes and properties explicitly.</li><li>Take advantage of the <a href="#paths-PathData">path
      data</a> data compaction facilities: use relative
      coordinates; use <em>h</em> and <em>v</em> for horizontal and
      vertical lines; use <em>s</em> or <em>t</em> for cubic and
      quadratic Bézier segments whenever possible; eliminate
      extraneous white space and separators.</li><li>Utilize symbols if the same graphic appears multiple
      times in the document</li><li>For user agents that support <a href="#styling-StylingWithCSS">styling with CSS</a>,
      utilize CSS property inheritance and selectors to consolidate
      commonly used properties into named styles or to assign the
      properties to a parent <a href="#struct-GElement"><span class="element-name">‘g’</span></a> element.</li><li>Utilize filter effects to help construct graphics via
      client-side graphics operations.</li></ul>

</div><hr class="chapter-divider" />
<div id="chapter-refs">

<h1>Appendix K: References</h1><h2 id="refs-toc">Contents</h2><ul class="toc">
<li><a href="#refs-NormativeReferences">K.1 Normative references</a></li>
<li><a href="#refs-InformativeReferences">K.2 Informative references</a></li></ul>

<h2 id="refs-NormativeReferences">K.1 Normative references</h2>

<dl class="references"><dt id="refs-ref-ATAG"><strong class="normref">[ATAG]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2000/REC-ATAG10-20000203/">Authoring Tool Accessibility Guidelines 1.0</a></cite>,
    J.  Treviranus, J. Richards, I. Jacobs, C. McCathieNevile, eds.
    World Wide Web Consortium, 03 February 2000.
    <br />This edition of ATAG 1.0 is http://www.w3.org/TR/2000/REC-ATAG10-20000203/.
    <br />The <a href="http://www.w3.org/TR/ATAG10/">latest edition of ATAG 1.0</a> is available at
    http://www.w3.org/TR/ATAG10/.
  </dd><dt id="refs-ref-BCP47"><strong class="normref">[BCP47]</strong></dt><dd>
    <cite><a href="http://www.ietf.org/rfc/bcp/bcp47.txt">IETF BCP 47</a></cite>
    Tags for Identifying Languages, A. Phillips and M. Davis, Editors, September 2009. 
    <br />Available at http://www.rfc-editor.org/rfc/bcp/bcp47.txt.
  </dd><dt id="refs-ref-COLORIMETRY"><strong class="normref">[COLORIMETRY]</strong></dt><dd>
    <cite><a href="http://www.cie.co.at/publ/abst/15-2004.html">Colorimetry, Third Edition</a></cite>,
    Commission Internationale de l'Eclairage, CIE Publication 15:2004,
    ISBN 3-901-906-33-9.
    <br />Available at http://www.cie.co.at/publ/abst/15-2004.html.
  </dd><dt id="refs-ref-CSS2"><strong class="normref">[CSS2]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/">Cascading Style Sheets, level 2</a></cite>,
    B. Bos, H. W. Lie, C.  Lilley, I. Jacobs, eds.
    World Wide Web Consortium, 11 April 2008.
    <br />This edition of CSS2 is http://www.w3.org/TR/2008/REC-CSS2-20080411/ and is no longer maintained.
    <br />The <a href="http://www.w3.org/TR/CSS2/">latest edition of CSS2</a> is available at
    http://www.w3.org/TR/CSS2/. The CSS Working Group encourages authors and
implementors to reference <a href="http://www.w3.org/TR/CSS21/">CSS 2.1</a> (or its <a href="http://www.w3.org/TR/CSS/">successor</a>) instead of this
document and,
when features common to CSS2 and CSS 2.1 are defined differently
to follow the definitions in CSS 2.1. A list of <a href="http://www.w3.org/TR/CSS21/changes.html">changes between CSS2 and CSS 2.1</a> may be helpful.
In particular, future editions of SVG are expected to reference CSS 2.1 and CSS 3 Fonts.
  </dd><dt id="refs-ref-DOM1"><strong class="normref">[DOM1]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/">Document Object Model (DOM) Level 1 Specification</a></cite>,
    V.  Apparao, S. Byrne, M. Champion, S. Isaacs, I. Jacobs, A. Le Hors, G. Nicol, J. Robie, R. Sutor, C. Wilson, L. Wood, eds.
    World Wide Web Consortium, 01 October 1998.
    <br />This edition of DOM Level 1 is http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/.
    <br />The <a href="http://www.w3.org/TR/REC-DOM-Level-1/">latest edition of DOM Level 1</a> is available at
    http://www.w3.org/TR/REC-DOM-Level-1/.
  </dd><dt id="refs-ref-DOM2"><strong class="normref">[DOM2]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/">Document Object Model (DOM) Level 2 Core Specification</a></cite>,
    A. Le Hors, P. Le Hégaret, L. Wood, G. Nicol, J.  Robie, M. Champion, S. Byrne, eds.
    World Wide Web Consortium, 13 November 2000.
    <br />This edition of DOM Level 2 Core is http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/.
    <br />The <a href="http://www.w3.org/TR/DOM-Level-2-Core/">latest edition of DOM Level 2 Core</a> is available at
    http://www.w3.org/TR/DOM-Level-2-Core/.
  </dd><dt id="refs-ref-DOM2EVENTS"><strong class="normref">[DOM2EVENTS]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/">Document Object Model (DOM) Level 2 Events Specification</a></cite>,
    T. Pixley, ed.
    World Wide Web Consortium, 13 November 2000.
    <br />This edition of DOM 2 Events is http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/.
    <br />The <a href="http://www.w3.org/TR/DOM-Level-2-Events/">latest edition of DOM 2 Events</a> is available at
    http://www.w3.org/TR/DOM-Level-2-Events/.
  </dd><dt id="refs-ref-DOM2STYLE"><strong class="normref">[DOM2STYLE]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/">Document Object Model (DOM) Level 2 Style Specification</a></cite>,
    C. Wilson, P. Le Hégaret, V. Apparao, eds.
    World Wide Web Consortium, 13 November 2000.
    <br />This edition of DOM Level 2 Style is http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/.
    <br />The <a href="http://www.w3.org/TR/DOM-Level-2-Style/">latest edition of DOM Level 2 Style</a> is available at
    http://www.w3.org/TR/DOM-Level-2-Style/.
  </dd><dt id="refs-ref-DOM2VIEWS"><strong class="normref">[DOM2VIEWS]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Views-20001113/">Document Object Model (DOM) Level 2 Views Specification</a></cite>,
    A. Le Hors, L. Cable, eds.
    World Wide Web Consortium, 13 November 2000.
    <br />This edition of DOM 2 Views is http://www.w3.org/TR/2000/REC-DOM-Level-2-Views-20001113/.
    <br />The <a href="http://www.w3.org/TR/DOM-Level-2-Views/">latest edition of DOM 2 Views</a> is available at
    http://www.w3.org/TR/DOM-Level-2-Views/.
  </dd><dt id="refs-ref-ECMA-262"><strong class="normref">[ECMA-262]</strong></dt><dd>
    <cite><a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAScript Language Specification, 5th Edition</a></cite>,
    M. Cowlishaw, ed.
    Ecma International, December 2009.
    <br />Available at http://www.ecma-international.org/publications/standards/Ecma-262.htm.
  </dd><dt id="refs-ref-ICC42"><strong class="normref">[ICC42]</strong></dt><dd>
    <cite><a href="http://www.color.org/ICC1v42_2006-05.pdf">Specification ICC.1:2004-10, File Format for Color Profiles, Profile Version 4.2.0.0</a>
    with errata incorporated, 5/22/20006</cite>,
    International Color Consortium, 2006.<br />
    Available at http://www.color.org/ICC1v42_2006-05.pdf.<br />
    This specification is substantially identical to ISO 15076-1:2005.<br />
    The ICC list some <a href="http://www.color.org/icc_specs2.xalter">approved revisions to ICC.1:2004-10</a>.
  </dd><dt id="refs-ref-ISO8601"><strong class="normref">[ISO8601]</strong></dt><dd>
    <cite><a href="http://www.iso.org/iso/catalogue_detail?csnumber=40874">Data elements and interchange formats - Information interchange - Representation of dates and times</a></cite>,
    International Organization for Standardization, 2004.
    Available at http://www.iso.org/iso/catalogue_detail?csnumber=40874.
  </dd><dt id="refs-ref-JPEG"><strong class="normref">[JPEG]</strong></dt><dd>
    <cite><a href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=18902">ISO/IEC 10918-1:1994/Cor 1:2005: Information Technology — Digital Compression And Coding Of Continuous-tone Still Images</a></cite>,
    International Organization for Standardization, September 2005.
    <br />Available at http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=18902.
    <br />An older version is available at <a href="http://www.w3.org/Graphics/JPEG/itu-t81.pdf">http://www.w3.org/Graphics/JPEG/itu-t81.pdf</a>.
  </dd><dt id="refs-ref-GML"><strong class="normref">[GML]</strong></dt><dd>
    <cite><a href="http://portal.opengeospatial.org/files/?artifact_id=20509">OpenGIS Geography Markup Language (GML) Encoding Standard, version 3.2.1</a></cite>,
    C. Portele, ed.
    Open GIS Consortium, 27 August 2007.
    <br />Available at http://portal.opengeospatial.org/files/?artifact_id=20509.
  </dd><dt id="refs-ref-PNG"><strong class="normref">[PNG]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2003/REC-PNG-20031110/">Portable Network Graphics (PNG) Specification (Second Edition)</a>:
    Information technology — Computer graphics and image processing — Portable Network Graphics (PNG): Functional specification, ISO/IEC 15948:2003 (E)</cite>,
    D. Duce, ed.  World Wide Web Consortium, 10 November 2003.
    <br />This edition of PNG is http://www.w3.org/TR/2003/REC-PNG-20031110/.
    <br />The <a href="http://www.w3.org/TR/PNG/">latest edition of PNG</a> is available at
    http://www.w3.org/TR/PNG/.
  </dd><dt id="refs-ref-PORTERDUFF"><strong class="normref">[PORTERDUFF]</strong></dt><dd>
    <cite>Compositing Digital Images</cite>,
    T. Porter and T. Duff.
    SIGGRAPH '84 Conference Proceedings, Association for Computing Machinery, Volume 18, Number 3, July 1984.
  </dd><dt id="refs-ref-RFC1951"><strong class="normref">[RFC1951]</strong></dt><dd>
    <cite><a href="http://www.ietf.org/rfc/rfc1951.txt">DEFLATE Compressed Data Format Specification version 1.3</a></cite>,
    P. Deutsch, May 1996.<br />
    Available at http://www.ietf.org/rfc/rfc1951.txt.
  </dd><dt id="refs-ref-RFC1952"><strong class="normref">[RFC1952]</strong></dt><dd>
    <cite><a href="http://www.ietf.org/rfc/rfc1952.txt">GZIP file format specification version 4.3</a></cite>,
    P. Deutsch, May 1996.<br />
    Available at http://www.ietf.org/rfc/rfc1952.txt.
  </dd><dt id="refs-ref-RFC2046"><strong class="normref">[RFC2046]</strong></dt><dd>
    <cite><a href="http://www.ietf.org/rfc/rfc2046.txt">Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types</a></cite>,
    N. Freed and N. Borenstein, November 1996.
    (Note that this RFC obsoletes RFC 1521, RFC 1522 and RFC 1590.)
    <br />Available at http://www.ietf.org/rfc/rfc2046.txt.
  </dd><dt id="refs-ref-RFC2119"><strong class="normref">[RFC2119]</strong></dt><dd>
    <cite><a href="http://www.ietf.org/rfc/rfc2119.txt">Key words for use in RFCs to Indicate Requirement Levels</a></cite>,
    S. Bradner, March 1997.
    <br />Available at http://www.ietf.org/rfc/rfc2119.txt.
  </dd><dt id="refs-ref-RFC2318"><strong class="normref">[RFC2318]</strong></dt><dd>
    <cite><a href="http://www.ietf.org/rfc/rfc2318.txt">The text/css Media Type</a></cite>,
    H. Lie, B. Bos, C. Lilley, March 1998.<br />
    Available at http://www.ietf.org/rfc/rfc2318.txt.
  </dd><dt id="refs-ref-RFC2397"><strong class="normref">[RFC2397]</strong></dt><dd>
    <cite><a href="http://www.ietf.org/rfc/rfc2397">The "data" URL scheme</a></cite>,
    L. Masinter, August 1998.
    <br />Available at http://www.ietf.org/rfc/rfc2397.
  </dd><dt id="refs-ref-RFC2616"><strong class="normref">[RFC2616]</strong></dt><dd>
    <cite><a href="http://www.ietf.org/rfc/rfc2616">Hypertext Transfer Protocol -- HTTP/1.1</a></cite>,
    R. Fielding, J. Gettys, J. Mogul, H. Frystyk Nielsen, L. Masinter, P.  Leach and T. Berners-Lee, June 1999.
    (Note that this RFC obsoletes RFC 2068.)
    <br />Available at http://www.ietf.org/rfc/rfc2616.
  </dd><dt id="refs-ref-RFC2732"><strong class="normref">[RFC2732]</strong></dt><dd>
    <cite><a href="http://www.ietf.org/rfc/rfc2732.txt">Format for Literal IPv6 Addresses in URL's</a></cite>,
    R. Hinden, B. Carpenter, L.  Masinter, December 1999.<br />
    Available at http://www.ietf.org/rfc/rfc2732.txt.
  </dd><dt id="refs-ref-RFC3023"><strong class="normref">[RFC3023]</strong></dt><dd>
    <cite><a href="http://www.ietf.org/rfc/rfc3023.txt">XML Media Types</a></cite>,
    M. Murata, S. St. Laurent, D. Kohn, January 2001.
    <br />Available at http://www.ietf.org/rfc/rfc3023.
  </dd><dt id="refs-ref-RFC3629"><strong class="normref">[RFC3629]</strong></dt><dd>
    <cite><a href="http://www.ietf.org/rfc/rfc3629.txt">UTF-8, a transformation format of ISO 10646</a></cite>,
    F. Yergeau, November 2003.
    (Note that this RFC obsoletes RFC 2044 and RFC 2279.)
    <br />Available at http://www.ietf.org/rfc/rfc3629.txt.
  </dd><dt id="refs-ref-RFC3986"><strong class="normref">[RFC3986]</strong></dt><dd>
    <cite><a href="http://www.ietf.org/rfc/rfc3986">Uniform Resource Identifiers (URI): Generic Syntax</a></cite>,
    T. Berners-Lee, R. Fielding, L. Masinter, January 2005.
    (Note that RFC 3986 updates RFC 1738 and obsoletes RFC 2732, RFC 2396 and RFC 1808.)
    <br />Available at http://tools.ietf.org/html/rfc3986.
  </dd><dt id="refs-ref-RFC3987"><strong class="normref">[RFC3987]</strong></dt><dd>
      <cite><a href="http://tools.ietf.org/html/rfc3987">Internationalized Resource Identifiers (IRIs)</a></cite>,
      M. Dürst, M. Suignard, January 2005.
      <br />Available at http://tools.ietf.org/html/rfc3987.
    </dd><dt id="refs-ref-RFC4329"><strong class="normref">[RFC4329]</strong></dt><dd>
    <cite><a href="http://www.ietf.org/rfc/rfc4329.txt">Scripting Media Types</a></cite>,
    B. Höhrmann, April 2006.
    <br />Available at http://www.ietf.org/rfc/rfc4329.txt.
  </dd><dt id="refs-ref-SMILANIM"><strong class="normref">[SMILANIM]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/">SMIL Animation</a></cite>,
    P. Schmitz, A. Cohen.
    World Wide Web Consortium, 04 September 2001.
    <br />This edition of SMIL Animation is http://www.w3.org/TR/2001/REC-smil-animation-20010904/.
    <br />The <a href="http://www.w3.org/TR/smil-animation/">latest edition of SMIL Animation</a> is available at
    http://www.w3.org/TR/smil-animation/.
  </dd><dt id="refs-ref-SRGB"><strong class="normref">[SRGB]</strong></dt><dd>
    <cite><a href="http://www.colour.org/tc8-05/Docs/colorspace/61966-2-1.pdf">IEC 61966-2-1/Amd 1:2003
      : Multimedia systems and equipment — Colour measurement and management — Part 2-1: Colour management — Default RGB colour space — sRGB</a></cite>,
    International Electrotechnical Commission, 2003.
    <br />Available at <a href="http://webstore.iec.ch/webstore/webstore.nsf/artnum/025408">http://webstore.iec.ch/webstore/webstore.nsf/artnum/025408</a>
    and at <a href="http://www.colour.org/tc8-05/Docs/colorspace/61966-2-1.pdf">http://www.colour.org/tc8-05/Docs/colorspace/61966-2-1.pdf</a>.<br />
    See also <a href="http://www.color.org/chardata/rgb/srgb.xalter">http://www.color.org/chardata/rgb/srgb.xalter</a>
    for technical data and color profiles.
  </dd><dt id="refs-ref-UAX9"><strong class="normref">[UAX9]</strong></dt><dd>
    <cite><a href="http://www.unicode.org/reports/tr9/">Unicode Bidirectional Algorithm</a></cite>,
    The Unicode Standard Annex #9.  The Unicode Consortium, 2010.
    <br />Available at http://www.unicode.org/reports/tr9/.
  </dd><dt id="refs-ref-UNICODE"><strong class="normref">[UNICODE]</strong></dt><dd>
    <cite><a href="http://www.unicode.org/versions/Unicode6.0.0/">The Unicode Standard, Version 6.0.0</a></cite>,
    The Unicode Consortium, Mountain View, CA, 2011. ISBN 978-1-936213-01-6.
    <br />Available at http://www.unicode.org/versions/Unicode6.0.0.
  </dd><dt id="refs-ref-XLINK"><strong class="normref">[XLINK]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2010/REC-xlink11-20100506/">XML Linking Language (XLink) Version 1.1</a></cite>,
    S. DeRose, E. Maler, D.  Orchard, N. Walsh, eds.
    World Wide Web Consortium, 06 May 2010.
    <br />This edition of XLink 1.1 is http://www.w3.org/TR/2010/REC-xlink11-20100506/.
    <br />The <a href="http://www.w3.org/TR/xlink11/">latest edition of XLink 1.1</a> is available at
    http://www.w3.org/TR/xlink11/.
  </dd><dt id="refs-ref-XML10"><strong class="normref">[XML10]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2008/REC-xml-20081126/">Extensible Markup Language (XML) 1.0 (Fifth Edition)</a></cite>,
    T. Bray, J. Paoli, C. M. Sperberg-McQueen, E. Maler, F. Yergeau, eds.
    World Wide Web Consortium, 26 November 2008.
    <br />This edition of XML 1.0 is http://www.w3.org/TR/2008/REC-xml-20081126/.
    <br />The <a href="http://www.w3.org/TR/xml/">latest edition of XML 1.0</a> is available at
    http://www.w3.org/TR/xml/.
  </dd><dt id="refs-ref-XML-BASE"><strong class="normref">[XML-BASE]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2009/REC-xmlbase-20090128/">XML Base</a> (Second Edition)</cite>,
    J. Marsh, R. Tobin, eds.
    World Wide Web Consortium, 28 January 2009.
    <br />This edition of XML Base is http://www.w3.org/TR/2009/REC-xmlbase-20090128/.
    <br />The <a href="http://www.w3.org/TR/xmlbase/">latest edition of XML Base</a> is available at
    http://www.w3.org/TR/xmlbase/.
  </dd><dt id="refs-ref-XML-NS"><strong class="normref">[XML-NS]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2009/REC-xml-names-20091208/">Namespaces in XML 1.0 (Third Edition)</a></cite>,
    T. Bray, D. Hollander, A. Layman, R. Tobin, H. Thompson, eds.
    World Wide Web Consortium, 8 December 2009.
    <br />This edition of Namespaces in XML is http://www.w3.org/TR/2009/REC-xml-names-20091208/.
    <br />The <a href="http://www.w3.org/TR/xml-names/">latest edition of Namespaces in XML</a> is available at
    http://www.w3.org/TR/xml-names/.
  </dd><dt id="refs-ref-XML-SS"><strong class="normref">[XML-SS]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/1999/06/REC-xml-stylesheet-19990629/">Associating Style Sheets with XML documents, Version 1.0</a></cite>,
    J. Clark, ed.
    World Wide Web Consortium, 29 June 1999.
    <br />This edition of XML Stylsheet is http://www.w3.org/1999/06/REC-xml-stylesheet-19990629/.
    <br />The <a href="http://www.w3.org/TR/xml-stylesheet/">latest edition of XML Stylesheet</a> is available at
    http://www.w3.org/TR/xml-stylesheet/.
  </dd><dt id="refs-ref-XSL"><strong class="normref">[XSL]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2006/REC-xsl11-20061205/">Extensible Stylesheet Language (XSL) Version 1.1</a></cite>,
    A. Berglund, ed.
    World Wide Web Consortium, 05 December 2006.
    <br />This edition of XSL is http://www.w3.org/TR/2006/REC-xsl11-20061205/.
    <br />The <a href="http://www.w3.org/TR/xsl/">latest edition of XSL</a> is available at
    http://www.w3.org/TR/xsl/.
  </dd></dl>

<h2 id="refs-InformativeReferences">K.2 Informative references</h2>

<dl class="references"><dt id="refs-ref-CHARMOD"><strong class="informref">[CHARMOD]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2005/REC-charmod-20050215/">Character Model for the World Wide Web 1.0: Fundametnals</a></cite>,
    M. Dürst, F. Yergeau, R. Ishida, M. Wolf, T.  Texin, eds.
    World Wide Web Consortium, 15 February 2005.
    <br />This edition of Charmod Fundamentals is http://www.w3.org/TR/2005/REC-charmod-20050215/.
    <br />The <a href="http://www.w3.org/TR/charmod/">latest edition of Charmod Fundamentals</a> is available at
    http://www.w3.org/TR/charmod/.
  </dd><dt id="refs-ref-DCORE"><strong class="informref">[DCORE]</strong></dt><dd>
    <cite><a href="http://dublincore.org/">Dublin Core Metadata Initiative</a></cite>.
    <br />Available at http://dublincore.org/.
  </dd><dt id="refs-ref-DOM3"><strong class="informref">[DOM3]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/">Document Object Model (DOM) Level 3 Core Specification</a></cite>,
    A. Le Hors, P. Le Hégaret, L. Wood, G. Nicol, J.  Robie, M. Champion, S. Byrne, eds.
    World Wide Web Consortium, 07 April 2004.
    <br />This edition of DOM 3 Core is http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/.
    <br />The <a href="http://www.w3.org/TR/DOM-Level-3-Core/">latest edition of DOM 3 Core</a> is available at
    http://www.w3.org/TR/DOM-Level-3-Core/.
  </dd><dt id="refs-ref-FOLEY-VANDAM"><strong class="informref">[FOLEY-VANDAM]</strong></dt><dd>
    <cite>Computer Graphics: Principles and Practice</cite>, Second Edition,
    J. D. Foley, A. van Dam, S. K. Feiner, J. F. Hughes, R. L. Phillips.
    Addison-Wesley, 1995.
  </dd><dt id="refs-ref-HTML4"><strong class="informref">[HTML4]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/1999/REC-html401-19991224/">HTML 4.01 Specification</a></cite>,
    D. Raggett, A. Le Hors, I. Jacobs.
    World Wide Web Consortium, 24 December 1999.
    <br />This edition of HTML 4 is http://www.w3.org/TR/1999/REC-html401-19991224/.
    <br />The <a href="http://www.w3.org/TR/html4/">latest edition of HTML 4</a> is available at
    http://www.w3.org/TR/html4/.
  </dd><dt id="refs-ref-MATHML"><strong class="informref">[MATHML]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2010/REC-MathML3-20101021/">Mathematical Markup Language (MathML) Version 3.0</a></cite>,
    D. Carlisle, P. Ion, R. Miner, eds.
    World Wide Web Consortium, 21 October 2010.
    <br />This edition of MathML 3 is http://www.w3.org/TR/2010/REC-MathML3-20101021/.
    <br />The <a href="http://www.w3.org/TR/MathML3/">latest edition of MathML 3</a> is available at
    http://www.w3.org/TR/MathML3/.
  </dd><dt id="refs-ref-MIMETYPES"><strong class="informref">[MIMETYPES]</strong></dt><dd>
    <cite><a href="http://www.iana.org/assignments/media-types/">MIME Media Types</a></cite>,
    Internet Assigned Numbers Authority.
    <br />Available at http://www.iana.org/assignments/media-types/.
  </dd><dt id="refs-ref-NVDL"><strong class="informref">[NVDL]</strong></dt><dd>
    <cite><a href="http://standards.iso.org/ittf/PubliclyAvailableStandards/c038615_ISO_IEC_19757-4_2006(E).zip">Information Technology — Document Schema Definition Languages (DSDL) — Part 4: Namespace-based Validation Dispatching Language: ISO/IEC 19757-4:2006/Cor 1:2008</a></cite>,
    International Organization for Standardization, December 2005.
    <br />Available at http://standards.iso.org/ittf/PubliclyAvailableStandards/c038615_ISO_IEC_19757-4_2006(E).zip.<br />
    See also <a href="http://nvdl.org/">http://nvdl.org/</a>.
  </dd><dt id="refs-ref-OPENTYPE"><strong class="informref">[OPENTYPE]</strong></dt><dd>
    <cite><a href="http://www.microsoft.com/typography/otspec160/">OpenType Specification Version 1.6</a></cite>.
    July 2009.
    <br />Available at http://www.microsoft.com/typography/otspec160/.<br />
    (Note that this is technically equivalent to ISO/IEC 14496-22:2009 (Second Edition) "Open Font Format",
    available at <a href="http://standards.iso.org/ittf/PubliclyAvailableStandards/c052136_ISO_IEC_14496-22_2009(E).zip">http://standards.iso.org/ittf/PubliclyAvailableStandards/c052136_ISO_IEC_14496-22_2009(E).zip</a>.)
  </dd><dt id="refs-ref-RDF-PRIMER"><strong class="informref">[RDF-PRIMER]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2004/REC-rdf-primer-20040210/">RDF Primer</a></cite>,
    F. Manolas, E. Miller, eds.
    World Wide Web Consortium, 10 February 2004.
    <br />This edition of RDF Primer is http://www.w3.org/TR/2004/REC-rdf-primer-20040210/.
    <br />The <a href="http://www.w3.org/TR/rdf-primer/">latest edition of RDF Primer</a> is available at
    http://www.w3.org/TR/rdf-primer/.
  </dd><dt id="refs-ref-SCHEMA2"><strong class="informref">[SCHEMA2]</strong></dt><dd>
      <cite class="w3crec"><a href="http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/">XML Schema Part 2: Datatypes Second Edition</a></cite>.
      P. Biron, A. Malhotra, eds.
      World Wide Web Consortium, 28 October 2004.
      (See also <a href="http://www.w3.org/TR/2005/NOTE-xml11schema10-20050511/"><cite>Processing XML 1.1 documents with XML Schema 1.0 processors</cite></a>.)
      <br />This edition of XML Schema Part 2 is http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/.
      <br />The <a href="http://www.w3.org/TR/xmlschema-2/">latest edition of XML Schema Part 2</a> is available at
      http://www.w3.org/TR/xmlschema-2/.
    </dd><dt id="refs-ref-SELECTORS"><strong class="informref">[SELECTORS]</strong></dt><dd>
     <cite class="w3cpr"><a href="http://www.w3.org/TR/2009/PR-css3-selectors-20091215/">Selectors Level 3</a></cite>,
         T. Çelik, E. Etemad, D. Glazman, I. Hickson, P. Linss, J. Williams, eds.
         World Wide Web Consortium, 15 December 2009.
         <br />This edition of Selectors Level 3 is http://www.w3.org/TR/2009/PR-css3-selectors-20091215/.
         <br />The <a href="http://www.w3.org/TR/css3-selectors/">latest edition of Selectors Level 3</a> is available at
         http://www.w3.org/TR/css3-selectors/.
    </dd><dt id="refs-ref-SVG-ACCESS"><strong class="informref">[SVG-ACCESS]</strong></dt><dd>
    <cite class="w3cnote"><a href="http://www.w3.org/TR/2000/NOTE-SVG-access-20000807/">Accessibility Features of SVG</a></cite>,
    C. McCathieNevile, M.  Koivunen, eds.
    World Wide Web Consortium, 07 August 2000.
    <br />This edition of Accessibility Features of SVG is http://www.w3.org/TR/2000/NOTE-SVG-access-20000807/.
    <br />The <a href="http://www.w3.org/TR/SVG-access/">latest edition of Accessibility Features of SVG</a> is available at
    http://www.w3.org/TR/SVG-access/.
  </dd><dt id="refs-ref-SVG-COMPOSITING"><strong class="informref">[SVG-COMPOSITING]</strong></dt><dd>
    <cite class="w3cwd"><a href="http://www.w3.org/TR/2009/WD-SVGCompositing-20090430/">SVG Compositing Specification</a></cite>,
    A. Grasso, ed.
    World Wide Web Consortium, 30 April 2009.
    <br />This edition of SVG Compositing is http://www.w3.org/TR/2009/WD-SVGCompositing-20090430/.
    <br />The <a href="http://www.w3.org/TR/SVGCompositing/">latest edition of SVG Compositing</a> is available at
    http://www.w3.org/TR/SVGCompositing/.
  </dd><dt id="refs-ref-SMIL"><strong class="informref">[SMIL]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2008/REC-SMIL3-20081201/">Synchronized Multimedia Integration Language (SMIL 3.0)</a></cite>,
    D. Bulterman <em>et al.</em>, eds.  01 December 2008.
    <br />This edition of SMIL is http://www.w3.org/TR/2008/REC-SMIL3-20081201/.
    <br />The <a href="http://www.w3.org/TR/smil/">latest edition of SMIL</a> is available at http://www.w3.org/TR/smil/.
  </dd><dt id="refs-ref-SVG10"><strong class="informref">[SVG10]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2001/REC-SVG-20010904/">Scalable Vector Graphics (SVG) 1.0</a></cite>,
    J. Ferraiolo, ed. 04 September 2001.
    <br />This edition of SVG 1.0 is http://www.w3.org/TR/2003/REC-SVG11-20030114/.
    <br />The <a href="http://www.w3.org/TR/SVG10/">latest edition of SVG 1.0</a> is available at
    http://www.w3.org/TR/SVG10/.
  </dd><dt id="refs-ref-UAAG"><strong class="informref">[UAAG]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2002/REC-UAAG10-20021217/">User Agent Accessibility Guidelines 1.0</a></cite>,
    I. Jacobs, J. Gunderson, E. Hansen, eds. 17 December 2002.
    <br />This edition of UAAG is http://www.w3.org/TR/2002/REC-UAAG10-20021217/.
    <br />The <a href="http://www.w3.org/TR/UAAG10/">latest edition of UAAG</a> is available at
    http://www.w3.org/TR/UAAG10/.
  </dd><dt id="refs-ref-WCAG2"><strong class="informref">[WCAG2]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2008/REC-WCAG20-20081211/">Web Content Accessibility Guidelines (WCAG) 2.0</a></cite>,
    B. Caldwell, M. Cooper, L. Reid, G. Vanderheiden, eds.
    World Wide Web Consortium, 11 December 2008.
    <br />This edition of WCAG 2.0 is http://www.w3.org/TR/2008/REC-WCAG20-20081211/.
    <br />The <a href="http://www.w3.org/TR/WCAG20/">latest edition of WCAG 2.0</a> is available at
    http://www.w3.org/TR/WCAG20/.
  </dd><dt id="refs-ref-WINDOW"><strong class="informref">[WINDOW]</strong></dt><dd>
    <cite class="w3cwd"><a href="http://www.w3.org/TR/2006/WD-Window-20060407/">Window Object 1.0</a></cite>,
    I. Davis, M. Stachowiak, eds.
    World Wide Web Consortium, work in progress, 07 April 2006.
    <br />This edition of Window Object 1.0 is http://www.w3.org/TR/2006/WD-Window-20060407/.
    <br />The <a href="http://www.w3.org/TR/Window/">latest edition of Window Object 1.0</a> is available at
    http://www.w3.org/TR/Window/.
  </dd><dt id="refs-ref-XHTML"><strong class="informref">[XHTML]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2002/REC-xhtml1-20020801/">XHTML™ 1.0: The Extensible HyperText Markup Language (Second Edition)</a></cite>,
    S. Pemberton, ed.
    World Wide Web Consortium, 1 August 2002.
    <br />This edition of XHTML 1 is http://www.w3.org/TR/2002/REC-xhtml1-20020801/.
    <br />The <a href="http://www.w3.org/TR/xhtml1/">latest edition of XHTML 1</a> is available at
    http://www.w3.org/TR/xhtml1/.
  </dd><dt id="refs-ref-XHTMLplusMathMLplusSVG"><strong class="informref">[XHTMLplusMathMLplusSVG]</strong></dt><dd>
    <cite class="w3cwd"><a href="http://www.w3.org/TR/2002/WD-XHTMLplusMathMLplusSVG-20020809/">An XHTML + MathML + SVG Profile</a></cite>,
    <span lang="ja" xml:lang="ja">石川 雅康</span> (<span class="familyname">Ishikawa</span> Masayasu), ed.
    World Wide Web Consortium, <span class="wip">work in progress</span>, 09 August 2002.
    <br />This edition of XHTML + MathML + SVG is http://www.w3.org/TR/2002/WD-XHTMLplusMathMLplusSVG-20020809/.
    <br />The <a href="http://www.w3.org/TR/XHTMLplusMathMLplusSVG/">latest edition of XHTML + MathML + SVG</a> is available at
    http://www.w3.org/TR/XHTMLplusMathMLplusSVG/.
  </dd><dt id="refs-ref-XSLT"><strong class="informref">[XSLT]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/1999/REC-xslt-19991116">XSL Transformations (XSLT) Version 1.0</a></cite>,
    J. Clark, ed.
    World Wide Web Consortium, 16 November 1999.
    <br />This edition of XSLT 1.0 is http://www.w3.org/TR/1999/REC-xslt-19991116.
    <br />The <a href="http://www.w3.org/TR/xslt">latest edition of XSLT 1.0</a> is available at
    http://www.w3.org/TR/xslt.
  </dd><dt id="refs-ref-XSLT2"><strong class="informref">[XSLT2]</strong></dt><dd>
    <cite class="w3crec"><a href="http://www.w3.org/TR/2007/REC-xslt20-20070123/">XSL Transformations (XSLT) Version 2.0</a></cite>,
    M. Kay, ed.
    World Wide Web Consortium, 23 January 2007.
    <br />This edition of XSLT 2.0 is http://www.w3.org/TR/2007/REC-xslt20-20070123/.
    <br />The <a href="http://www.w3.org/TR/xslt20/">latest edition of XSLT 2.0</a> is available at
    http://www.w3.org/TR/xslt20/.
  </dd></dl>

</div><hr class="chapter-divider" />
<div id="chapter-eltindex">

<h1>Appendix L: Element Index</h1>

<p class="normativity"><em>This appendix is informative, not normative.</em></p>

<p>The following are the elements in the SVG language:</p>

<ul><li><a href="#linking-AElement"><span class="element-name">‘a’</span></a></li><li><a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a></li><li><a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a></li><li><a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a></li><li><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a></li><li><a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a></li><li><a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a></li><li><a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a></li><li><a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a></li><li><a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a></li><li><a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a></li><li><a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a></li><li><a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a></li><li><a href="#struct-DescElement"><span class="element-name">‘desc’</span></a></li><li><a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a></li><li><a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a></li><li><a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a></li><li><a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a></li><li><a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a></li><li><a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a></li><li><a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a></li><li><a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a></li><li><a href="#filters-feDistantLightElement"><span class="element-name">‘feDistantLight’</span></a></li><li><a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a></li><li><a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a></li><li><a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a></li><li><a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a></li><li><a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a></li><li><a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a></li><li><a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a></li><li><a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a></li><li><a href="#filters-feMergeNodeElement"><span class="element-name">‘feMergeNode’</span></a></li><li><a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a></li><li><a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a></li><li><a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a></li><li><a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a></li><li><a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a></li><li><a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a></li><li><a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a></li><li><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></li><li><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></li><li><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></li><li><a href="#fonts-FontFaceFormatElement"><span class="element-name">‘font-face-format’</span></a></li><li><a href="#fonts-FontFaceNameElement"><span class="element-name">‘font-face-name’</span></a></li><li><a href="#fonts-FontFaceSrcElement"><span class="element-name">‘font-face-src’</span></a></li><li><a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a></li><li><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></li><li><a href="#struct-GElement"><span class="element-name">‘g’</span></a></li><li><a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a></li><li><a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a></li><li><a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a></li><li><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></li><li><a href="#shapes-LineElement"><span class="element-name">‘line’</span></a></li><li><a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a></li><li><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></li><li><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></li><li><a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a></li><li><a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a></li><li><a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a></li><li><a href="#paths-PathElement"><span class="element-name">‘path’</span></a></li><li><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></li><li><a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a></li><li><a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a></li><li><a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></li><li><a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></li><li><a href="#script-ScriptElement"><span class="element-name">‘script’</span></a></li><li><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></li><li><a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a></li><li><a href="#styling-StyleElement"><span class="element-name">‘style’</span></a></li><li><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></li><li><a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a></li><li><a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a></li><li><a href="#text-TextElement"><span class="element-name">‘text’</span></a></li><li><a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a></li><li><a href="#struct-TitleElement"><span class="element-name">‘title’</span></a></li><li><a href="#text-TRefElement"><span class="element-name">‘tref’</span></a></li><li><a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a></li><li><a href="#struct-UseElement"><span class="element-name">‘use’</span></a></li><li><a href="#linking-ViewElement"><span class="element-name">‘view’</span></a></li><li><a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a></li></ul>

</div><hr class="chapter-divider" />
<div id="chapter-attindex">

<h1>Appendix M: Attribute Index</h1><h2 id="attindex-toc">Contents</h2><ul class="toc">
<li><a href="#attindex-RegularAttributes">M.1 Regular attributes</a></li>
<li><a href="#attindex-PresentationAttributes">M.2 Presentation attributes</a></li></ul>

<p class="normativity"><em>This appendix is informative, not normative.</em></p>

<h2 id="attindex-RegularAttributes">M.1 Regular attributes</h2>

<p>The following table lists all of the attributes defined in the SVG
language, except for the <a href="#intro-TermPresentationAttribute"><span class="svg-term">presentation attributes</span></a>, which are treated
in the <a href="#attindex-PresentationAttributes">Presentation attributes</a>
section below.  For each attribute, the elements on which the attribute
may be specified is also given.</p>

<table class="vert property-table" summary="Alphabetic list of attributes"><tr><th>Attribute</th><th>Elements on which the attribute may be specified</th><th title="Animatable"><a href="#animate-Animatable">Anim.</a></th></tr><tr><td><a href="#fonts-FontFaceElementAccentHeightAttribute"><span class="attr-name">‘accent-height’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#animate-AccumulateAttribute"><span class="attr-name">‘accumulate’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a></td><td></td></tr><tr><td><a href="#animate-AdditiveAttribute"><span class="attr-name">‘additive’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementAlphabeticAttribute"><span class="attr-name">‘alphabetic’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#filters-feComponentTransferAmplitudeAttribute"><span class="attr-name">‘amplitude’</span></a></td><td><a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a>, <a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a>, <a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a>, <a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a></td><td>✓</td></tr><tr><td><a href="#fonts-GlyphElementArabicFormAttribute"><span class="attr-name">‘arabic-form’</span></a></td><td><a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementAscentAttribute"><span class="attr-name">‘ascent’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#animate-AttributeNameAttribute"><span class="attr-name">‘attributeName’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#animate-AttributeTypeAttribute"><span class="attr-name">‘attributeType’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#filters-feDistantLightAzimuthAttribute"><span class="attr-name">‘azimuth’</span></a></td><td><a href="#filters-feDistantLightElement"><span class="element-name">‘feDistantLight’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feTurbulenceBaseFrequencyAttribute"><span class="attr-name">‘baseFrequency’</span></a></td><td><a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a></td><td>✓</td></tr><tr><td><a href="#struct-SVGElementBaseProfileAttribute"><span class="attr-name">‘baseProfile’</span></a></td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementBboxAttribute"><span class="attr-name">‘bbox’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#animate-BeginAttribute"><span class="attr-name">‘begin’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#filters-feConvolveMatrixElementBiasAttribute"><span class="attr-name">‘bias’</span></a></td><td><a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a></td><td>✓</td></tr><tr><td><a href="#animate-ByAttribute"><span class="attr-name">‘by’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a></td><td></td></tr><tr><td><a href="#animate-CalcModeAttribute"><span class="attr-name">‘calcMode’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementCapHeightAttribute"><span class="attr-name">‘cap-height’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#styling-ClassAttribute"><span class="attr-name">‘class’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a>, <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>, <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a>, <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a>, <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>, <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>, <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td>✓</td></tr><tr><td><a href="#masking-ClipPathElementClipPathUnitsAttribute"><span class="attr-name">‘clipPathUnits’</span></a></td><td><a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a></td><td>✓</td></tr><tr><td><a href="#script-ContentScriptTypeAttribute"><span class="attr-name">‘contentScriptType’</span></a></td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></td><td></td></tr><tr><td><a href="#styling-ContentStyleTypeAttribute"><span class="attr-name">‘contentStyleType’</span></a></td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></td><td></td></tr><tr><td><a href="#shapes-CircleElementCXAttribute"><span class="attr-name">‘cx’</span></a></td><td><a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-EllipseElementCXAttribute"><span class="attr-name">‘cx’</span></a></td><td><a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-RadialGradientElementCXAttribute"><span class="attr-name">‘cx’</span></a></td><td><a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-CircleElementCYAttribute"><span class="attr-name">‘cy’</span></a></td><td><a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-EllipseElementCYAttribute"><span class="attr-name">‘cy’</span></a></td><td><a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-RadialGradientElementCYAttribute"><span class="attr-name">‘cy’</span></a></td><td><a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#paths-DAttribute"><span class="attr-name">‘d’</span></a></td><td><a href="#paths-PathElement"><span class="element-name">‘path’</span></a></td><td>✓</td></tr><tr><td><a href="#fonts-GlyphElementDAttribute"><span class="attr-name">‘d’</span></a></td><td><a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementDescentAttribute"><span class="attr-name">‘descent’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#filters-feDiffuseLightingDiffuseConstantAttribute"><span class="attr-name">‘diffuseConstant’</span></a></td><td><a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feConvolveMatrixElementDivisorAttribute"><span class="attr-name">‘divisor’</span></a></td><td><a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a></td><td>✓</td></tr><tr><td><a href="#animate-DurAttribute"><span class="attr-name">‘dur’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#text-AltGlyphElementDXAttribute"><span class="attr-name">‘dx’</span></a></td><td><a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feOffsetDxAttribute"><span class="attr-name">‘dx’</span></a></td><td><a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a></td><td>✓</td></tr><tr><td><a href="#text-GlyphRefElementDXAttribute"><span class="attr-name">‘dx’</span></a></td><td><a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a></td><td></td></tr><tr><td><a href="#text-TextElementDXAttribute"><span class="attr-name">‘dx’</span></a></td><td><a href="#text-TextElement"><span class="element-name">‘text’</span></a></td><td>✓</td></tr><tr><td><a href="#text-TSpanElementDXAttribute"><span class="attr-name">‘dx’</span></a></td><td><a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a></td><td>✓</td></tr><tr><td><a href="#text-AltGlyphElementDYAttribute"><span class="attr-name">‘dy’</span></a></td><td><a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feOffsetDyAttribute"><span class="attr-name">‘dy’</span></a></td><td><a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a></td><td>✓</td></tr><tr><td><a href="#text-GlyphRefElementDYAttribute"><span class="attr-name">‘dy’</span></a></td><td><a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a></td><td></td></tr><tr><td><a href="#text-TextElementDYAttribute"><span class="attr-name">‘dy’</span></a></td><td><a href="#text-TextElement"><span class="element-name">‘text’</span></a></td><td>✓</td></tr><tr><td><a href="#text-TSpanElementDYAttribute"><span class="attr-name">‘dy’</span></a></td><td><a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feConvolveMatrixElementEdgeModeAttribute"><span class="attr-name">‘edgeMode’</span></a></td><td><a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feDistantLightElevationAttribute"><span class="attr-name">‘elevation’</span></a></td><td><a href="#filters-feDistantLightElement"><span class="element-name">‘feDistantLight’</span></a></td><td>✓</td></tr><tr><td><a href="#animate-EndAttribute"><span class="attr-name">‘end’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#filters-feComponentTransferExponentAttribute"><span class="attr-name">‘exponent’</span></a></td><td><a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a>, <a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a>, <a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a>, <a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a></td><td>✓</td></tr><tr><td><a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>, <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>, <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>, <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>, <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a></td><td></td></tr><tr><td><a href="#animate-FillAttribute"><span class="attr-name">‘fill’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#filters-FilterElementFilterResAttribute"><span class="attr-name">‘filterRes’</span></a></td><td><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-FilterElementFilterUnitsAttribute"><span class="attr-name">‘filterUnits’</span></a></td><td><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></td><td>✓</td></tr><tr><td><a href="#fonts-FontFaceElementFontFamilyAttribute"><span class="attr-name">‘font-family’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementFontSizeAttribute"><span class="attr-name">‘font-size’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementFontStretchAttribute"><span class="attr-name">‘font-stretch’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementFontStyleAttribute"><span class="attr-name">‘font-style’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementFontVariantAttribute"><span class="attr-name">‘font-variant’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementFontWeightAttribute"><span class="attr-name">‘font-weight’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#text-AltGlyphElementFormatAttribute"><span class="attr-name">‘format’</span></a></td><td><a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a></td><td></td></tr><tr><td><a href="#text-GlyphRefElementFormatAttribute"><span class="attr-name">‘format’</span></a></td><td><a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a></td><td></td></tr><tr><td><a href="#animate-FromAttribute"><span class="attr-name">‘from’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a></td><td></td></tr><tr><td><a href="#pservers-RadialGradientElementFXAttribute"><span class="attr-name">‘fx’</span></a></td><td><a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-RadialGradientElementFYAttribute"><span class="attr-name">‘fy’</span></a></td><td><a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#fonts-HKernElementG1Attribute"><span class="attr-name">‘g1’</span></a></td><td><a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a>, <a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a></td><td></td></tr><tr><td><a href="#fonts-HKernElementG2Attribute"><span class="attr-name">‘g2’</span></a></td><td><a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a>, <a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a></td><td></td></tr><tr><td><a href="#fonts-GlyphElementGlyphNameAttribute"><span class="attr-name">‘glyph-name’</span></a></td><td><a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a></td><td></td></tr><tr><td><a href="#text-AltGlyphElementGlyphRefAttribute"><span class="attr-name">‘glyphRef’</span></a></td><td><a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a></td><td></td></tr><tr><td><a href="#text-GlyphRefElementGlyphRefAttribute"><span class="attr-name">‘glyphRef’</span></a></td><td><a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a></td><td></td></tr><tr><td><a href="#pservers-LinearGradientElementGradientTransformAttribute"><span class="attr-name">‘gradientTransform’</span></a></td><td><a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-RadialGradientElementGradientTransformAttribute"><span class="attr-name">‘gradientTransform’</span></a></td><td><a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-LinearGradientElementGradientUnitsAttribute"><span class="attr-name">‘gradientUnits’</span></a></td><td><a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-RadialGradientElementGradientUnitsAttribute"><span class="attr-name">‘gradientUnits’</span></a></td><td><a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#fonts-FontFaceElementHangingAttribute"><span class="attr-name">‘hanging’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#filters-FilterElementHeightAttribute"><span class="attr-name">‘height’</span></a></td><td><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></td><td>✓</td></tr><tr><td><a href="#extend-ForeignObjectElementHeightAttribute"><span class="attr-name">‘height’</span></a></td><td><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></td><td>✓</td></tr><tr><td><a href="#struct-ImageElementHeightAttribute"><span class="attr-name">‘height’</span></a></td><td><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-PatternElementHeightAttribute"><span class="attr-name">‘height’</span></a></td><td><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-RectElementHeightAttribute"><span class="attr-name">‘height’</span></a></td><td><a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></td><td>✓</td></tr><tr><td><a href="#struct-SVGElementHeightAttribute"><span class="attr-name">‘height’</span></a></td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></td><td>✓</td></tr><tr><td><a href="#struct-UseElementHeightAttribute"><span class="attr-name">‘height’</span></a></td><td><a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-FilterPrimitiveHeightAttribute"><span class="attr-name">‘height’</span></a></td><td><a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a>, <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>, <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a>, <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a></td><td>✓</td></tr><tr><td><a href="#masking-MaskElementHeightAttribute"><span class="attr-name">‘height’</span></a></td><td><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></td><td>✓</td></tr><tr><td><a href="#fonts-FontElementHorizAdvXAttribute"><span class="attr-name">‘horiz-adv-x’</span></a></td><td><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></td><td></td></tr><tr><td><a href="#fonts-GlyphElementHorizAdvXAttribute"><span class="attr-name">‘horiz-adv-x’</span></a></td><td><a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontElementHorizOriginXAttribute"><span class="attr-name">‘horiz-origin-x’</span></a></td><td><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontElementHorizOriginYAttribute"><span class="attr-name">‘horiz-origin-y’</span></a></td><td><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></td><td></td></tr><tr><td><a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a>, <a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>, <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a>, <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a>, <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>, <a href="#filters-feDistantLightElement"><span class="element-name">‘feDistantLight’</span></a>, <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>, <a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a>, <a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a>, <a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a>, <a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a>, <a href="#filters-feMergeNodeElement"><span class="element-name">‘feMergeNode’</span></a>, <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a>, <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a>, <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a>, <a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a>, <a href="#fonts-FontFaceFormatElement"><span class="element-name">‘font-face-format’</span></a>, <a href="#fonts-FontFaceNameElement"><span class="element-name">‘font-face-name’</span></a>, <a href="#fonts-FontFaceSrcElement"><span class="element-name">‘font-face-src’</span></a>, <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a>, <a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>, <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a>, <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>, <a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a>, <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>, <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a>, <a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementIdeographicAttribute"><span class="attr-name">‘ideographic’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#filters-FilterPrimitiveInAttribute"><span class="attr-name">‘in’</span></a></td><td><a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a>, <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feBlendIn2Attribute"><span class="attr-name">‘in2’</span></a></td><td><a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feCompositeIn2Attribute"><span class="attr-name">‘in2’</span></a></td><td><a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feDisplacementMapIn2Attribute"><span class="attr-name">‘in2’</span></a></td><td><a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feComponentTransferInterceptAttribute"><span class="attr-name">‘intercept’</span></a></td><td><a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a>, <a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a>, <a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a>, <a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a></td><td>✓</td></tr><tr><td><a href="#fonts-HKernElementKAttribute"><span class="attr-name">‘k’</span></a></td><td><a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a>, <a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a></td><td></td></tr><tr><td><a href="#filters-feCompositeK1Attribute"><span class="attr-name">‘k1’</span></a></td><td><a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feCompositeK2Attribute"><span class="attr-name">‘k2’</span></a></td><td><a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feCompositeK3Attribute"><span class="attr-name">‘k3’</span></a></td><td><a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feCompositeK4Attribute"><span class="attr-name">‘k4’</span></a></td><td><a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feConvolveMatrixElementKernelMatrixAttribute"><span class="attr-name">‘kernelMatrix’</span></a></td><td><a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feConvolveMatrixElementKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a></td><td><a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feDiffuseLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a></td><td><a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feSpecularLightingKernelUnitLengthAttribute"><span class="attr-name">‘kernelUnitLength’</span></a></td><td><a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a></td><td>✓</td></tr><tr><td><a href="#animate-KeyPointsAttribute"><span class="attr-name">‘keyPoints’</span></a></td><td><a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a></td><td></td></tr><tr><td><a href="#animate-KeySplinesAttribute"><span class="attr-name">‘keySplines’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a></td><td></td></tr><tr><td><a href="#animate-KeyTimesAttribute"><span class="attr-name">‘keyTimes’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a></td><td></td></tr><tr><td><a href="#fonts-GlyphElementLangAttribute"><span class="attr-name">‘lang’</span></a></td><td><a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a></td><td></td></tr><tr><td><a href="#text-TextElementLengthAdjustAttribute"><span class="attr-name">‘lengthAdjust’</span></a></td><td><a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feSpotLightLimitingConeAngleAttribute"><span class="attr-name">‘limitingConeAngle’</span></a></td><td><a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a></td><td>✓</td></tr><tr><td><a href="#color-ColorProfileElementLocalAttribute"><span class="attr-name">‘local’</span></a></td><td><a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a></td><td></td></tr><tr><td><a href="#painting-MarkerHeightAttribute"><span class="attr-name">‘markerHeight’</span></a></td><td><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></td><td>✓</td></tr><tr><td><a href="#painting-MarkerUnitsAttribute"><span class="attr-name">‘markerUnits’</span></a></td><td><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></td><td>✓</td></tr><tr><td><a href="#painting-MarkerWidthAttribute"><span class="attr-name">‘markerWidth’</span></a></td><td><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></td><td>✓</td></tr><tr><td><a href="#masking-MaskElementMaskContentUnitsAttribute"><span class="attr-name">‘maskContentUnits’</span></a></td><td><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></td><td>✓</td></tr><tr><td><a href="#masking-MaskElementMaskUnitsAttribute"><span class="attr-name">‘maskUnits’</span></a></td><td><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></td><td>✓</td></tr><tr><td><a href="#fonts-FontFaceElementMathematicalAttribute"><span class="attr-name">‘mathematical’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#animate-MaxAttribute"><span class="attr-name">‘max’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#styling-StyleElementMediaAttribute"><span class="attr-name">‘media’</span></a></td><td><a href="#styling-StyleElement"><span class="element-name">‘style’</span></a></td><td></td></tr><tr><td><a href="#text-TextPathElementMethodAttribute"><span class="attr-name">‘method’</span></a></td><td><a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a></td><td>✓</td></tr><tr><td><a href="#animate-MinAttribute"><span class="attr-name">‘min’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#filters-feBlendModeAttribute"><span class="attr-name">‘mode’</span></a></td><td><a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a></td><td>✓</td></tr><tr><td><a href="#color-ColorProfileElementNameAttribute"><span class="attr-name">‘name’</span></a></td><td><a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceNameElementNameAttribute"><span class="attr-name">‘name’</span></a></td><td><a href="#fonts-FontFaceNameElement"><span class="element-name">‘font-face-name’</span></a></td><td></td></tr><tr><td><a href="#filters-feTurbulenceNumOctavesAttribute"><span class="attr-name">‘numOctaves’</span></a></td><td><a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-StopElementOffsetAttribute"><span class="attr-name">‘offset’</span></a></td><td><a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feComponentTransferOffsetAttribute"><span class="attr-name">‘offset’</span></a></td><td><a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a>, <a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a>, <a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a>, <a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a></td><td>✓</td></tr><tr><td><a href="#script-OnAbortEventAttribute"><span class="attr-name">‘onabort’</span></a></td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></td><td></td></tr><tr><td><a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#script-OnBeginEventAttribute"><span class="attr-name">‘onbegin’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#script-OnEndEventAttribute"><span class="attr-name">‘onend’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#script-OnErrorEventAttribute"><span class="attr-name">‘onerror’</span></a></td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></td><td></td></tr><tr><td><a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#script-OnRepeatEventAttribute"><span class="attr-name">‘onrepeat’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#script-OnResizeEventAttribute"><span class="attr-name">‘onresize’</span></a></td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></td><td></td></tr><tr><td><a href="#script-OnScrollEventAttribute"><span class="attr-name">‘onscroll’</span></a></td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></td><td></td></tr><tr><td><a href="#script-OnUnloadEventAttribute"><span class="attr-name">‘onunload’</span></a></td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></td><td></td></tr><tr><td><a href="#script-OnZoomEventAttribute"><span class="attr-name">‘onzoom’</span></a></td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></td><td></td></tr><tr><td><a href="#filters-feCompositeOperatorAttribute"><span class="attr-name">‘operator’</span></a></td><td><a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feMorphologyOperatorAttribute"><span class="attr-name">‘operator’</span></a></td><td><a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feConvolveMatrixElementOrderAttribute"><span class="attr-name">‘order’</span></a></td><td><a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a></td><td>✓</td></tr><tr><td><a href="#painting-OrientAttribute"><span class="attr-name">‘orient’</span></a></td><td><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></td><td>✓</td></tr><tr><td><a href="#fonts-GlyphElementOrientationAttribute"><span class="attr-name">‘orientation’</span></a></td><td><a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a></td><td></td></tr><tr><td><a href="#animate-OriginAttribute"><span class="attr-name">‘origin’</span></a></td><td><a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementOverlinePositionAttribute"><span class="attr-name">‘overline-position’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementOverlineThicknessAttribute"><span class="attr-name">‘overline-thickness’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementPanose1Attribute"><span class="attr-name">‘panose-1’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#animate-PathAttribute"><span class="attr-name">‘path’</span></a></td><td><a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a></td><td></td></tr><tr><td><a href="#paths-PathLengthAttribute"><span class="attr-name">‘pathLength’</span></a></td><td><a href="#paths-PathElement"><span class="element-name">‘path’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-PatternElementPatternContentUnitsAttribute"><span class="attr-name">‘patternContentUnits’</span></a></td><td><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-PatternElementPatternTransformAttribute"><span class="attr-name">‘patternTransform’</span></a></td><td><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-PatternElementPatternUnitsAttribute"><span class="attr-name">‘patternUnits’</span></a></td><td><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-PolygonElementPointsAttribute"><span class="attr-name">‘points’</span></a></td><td><a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-PolylineElementPointsAttribute"><span class="attr-name">‘points’</span></a></td><td><a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feSpotLightPointsAtXAttribute"><span class="attr-name">‘pointsAtX’</span></a></td><td><a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feSpotLightPointsAtYAttribute"><span class="attr-name">‘pointsAtY’</span></a></td><td><a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feSpotLightPointsAtZAttribute"><span class="attr-name">‘pointsAtZ’</span></a></td><td><a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feConvolveMatrixElementPreserveAlphaAttribute"><span class="attr-name">‘preserveAlpha’</span></a></td><td><a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a></td><td>✓</td></tr><tr><td><a href="#coords-PreserveAspectRatioAttribute"><span class="attr-name">‘preserveAspectRatio’</span></a></td><td><a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-FilterElementPrimitiveUnitsAttribute"><span class="attr-name">‘primitiveUnits’</span></a></td><td><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-CircleElementRAttribute"><span class="attr-name">‘r’</span></a></td><td><a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-RadialGradientElementRAttribute"><span class="attr-name">‘r’</span></a></td><td><a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feMorphologyRadiusAttribute"><span class="attr-name">‘radius’</span></a></td><td><a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a></td><td>✓</td></tr><tr><td><a href="#painting-MarkerElementRefXAttribute"><span class="attr-name">‘refX’</span></a></td><td><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></td><td>✓</td></tr><tr><td><a href="#painting-MarkerElementRefYAttribute"><span class="attr-name">‘refY’</span></a></td><td><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a></td><td>✓</td></tr><tr><td><a href="#color-ColorProfileElementRenderingIntentAttribute"><span class="attr-name">‘rendering-intent’</span></a></td><td><a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a></td><td></td></tr><tr><td><a href="#animate-RepeatCountAttribute"><span class="attr-name">‘repeatCount’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#animate-RepeatDurAttribute"><span class="attr-name">‘repeatDur’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>, <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>, <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#animate-RestartAttribute"><span class="attr-name">‘restart’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#filters-FilterPrimitiveResultAttribute"><span class="attr-name">‘result’</span></a></td><td><a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a>, <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>, <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a>, <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a></td><td>✓</td></tr><tr><td><a href="#text-AltGlyphElementRotateAttribute"><span class="attr-name">‘rotate’</span></a></td><td><a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a></td><td>✓</td></tr><tr><td><a href="#animate-RotateAttribute"><span class="attr-name">‘rotate’</span></a></td><td><a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a></td><td></td></tr><tr><td><a href="#text-TextElementRotateAttribute"><span class="attr-name">‘rotate’</span></a></td><td><a href="#text-TextElement"><span class="element-name">‘text’</span></a></td><td>✓</td></tr><tr><td><a href="#text-TSpanElementRotateAttribute"><span class="attr-name">‘rotate’</span></a></td><td><a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-EllipseElementRXAttribute"><span class="attr-name">‘rx’</span></a></td><td><a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-RectElementRXAttribute"><span class="attr-name">‘rx’</span></a></td><td><a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-EllipseElementRYAttribute"><span class="attr-name">‘ry’</span></a></td><td><a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-RectElementRYAttribute"><span class="attr-name">‘ry’</span></a></td><td><a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feDisplacementMapScaleAttribute"><span class="attr-name">‘scale’</span></a></td><td><a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feTurbulenceSeedAttribute"><span class="attr-name">‘seed’</span></a></td><td><a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a></td><td>✓</td></tr><tr><td><a href="#fonts-FontFaceElementSlopeAttribute"><span class="attr-name">‘slope’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#filters-feComponentTransferSlopeAttribute"><span class="attr-name">‘slope’</span></a></td><td><a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a>, <a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a>, <a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a>, <a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a></td><td>✓</td></tr><tr><td><a href="#text-TextPathElementSpacingAttribute"><span class="attr-name">‘spacing’</span></a></td><td><a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feSpecularLightingSpecularConstantAttribute"><span class="attr-name">‘specularConstant’</span></a></td><td><a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feSpecularLightingSpecularExponentAttribute"><span class="attr-name">‘specularExponent’</span></a></td><td><a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feSpotLightSpecularExponentAttribute"><span class="attr-name">‘specularExponent’</span></a></td><td><a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-LinearGradientElementSpreadMethodAttribute"><span class="attr-name">‘spreadMethod’</span></a></td><td><a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-RadialGradientElementSpreadMethodAttribute"><span class="attr-name">‘spreadMethod’</span></a></td><td><a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#text-TextPathElementStartOffsetAttribute"><span class="attr-name">‘startOffset’</span></a></td><td><a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feGaussianBlurStdDeviationAttribute"><span class="attr-name">‘stdDeviation’</span></a></td><td><a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a></td><td>✓</td></tr><tr><td><a href="#fonts-FontFaceElementStemhAttribute"><span class="attr-name">‘stemh’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementStemvAttribute"><span class="attr-name">‘stemv’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#filters-feTurbulenceStitchTilesAttribute"><span class="attr-name">‘stitchTiles’</span></a></td><td><a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a></td><td>✓</td></tr><tr><td><a href="#fonts-FontFaceElementStrikeThroughPositionAttribute"><span class="attr-name">‘strikethrough-position’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementStrikeThroughThicknessAttribute"><span class="attr-name">‘strikethrough-thickness’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceFormatElementStringAttribute"><span class="attr-name">‘string’</span></a></td><td><a href="#fonts-FontFaceFormatElement"><span class="element-name">‘font-face-format’</span></a></td><td></td></tr><tr><td><a href="#styling-StyleAttribute"><span class="attr-name">‘style’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a>, <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>, <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a>, <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a>, <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>, <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>, <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#filters-feDiffuseLightingSurfaceScaleAttribute"><span class="attr-name">‘surfaceScale’</span></a></td><td><a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feSpecularLightingSurfaceScaleAttribute"><span class="attr-name">‘surfaceScale’</span></a></td><td><a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a></td><td>✓</td></tr><tr><td><a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>, <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#filters-feComponentTransferTableValuesAttribute"><span class="attr-name">‘tableValues’</span></a></td><td><a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a>, <a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a>, <a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a>, <a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a></td><td>✓</td></tr><tr><td><a href="#linking-AElementTargetAttribute"><span class="attr-name">‘target’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feConvolveMatrixElementTargetXAttribute"><span class="attr-name">‘targetX’</span></a></td><td><a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feConvolveMatrixElementTargetYAttribute"><span class="attr-name">‘targetY’</span></a></td><td><a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a></td><td>✓</td></tr><tr><td><a href="#text-TextElementTextLengthAttribute"><span class="attr-name">‘textLength’</span></a></td><td><a href="#text-TextElement"><span class="element-name">‘text’</span></a></td><td>✓</td></tr><tr><td><a href="#text-TSpanElementTextLengthAttribute"><span class="attr-name">‘textLength’</span></a></td><td><a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a></td><td>✓</td></tr><tr><td><a href="#styling-StyleElementTitleAttribute"><span class="attr-name">‘title’</span></a></td><td><a href="#styling-StyleElement"><span class="element-name">‘style’</span></a></td><td></td></tr><tr><td><a href="#animate-SetElementToAttribute"><span class="attr-name">‘to’</span></a></td><td><a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#animate-ToAttribute"><span class="attr-name">‘to’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a></td><td></td></tr><tr><td><a href="#coords-TransformAttribute"><span class="attr-name">‘transform’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td>✓</td></tr><tr><td><a href="#animate-AnimateTransformElementTypeAttribute"><span class="attr-name">‘type’</span></a></td><td><a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a></td><td></td></tr><tr><td><a href="#filters-feColorMatrixTypeAttribute"><span class="attr-name">‘type’</span></a></td><td><a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feTurbulenceTypeAttribute"><span class="attr-name">‘type’</span></a></td><td><a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a></td><td>✓</td></tr><tr><td><a href="#script-ScriptElementTypeAttribute"><span class="attr-name">‘type’</span></a></td><td><a href="#script-ScriptElement"><span class="element-name">‘script’</span></a></td><td></td></tr><tr><td><a href="#styling-StyleElementTypeAttribute"><span class="attr-name">‘type’</span></a></td><td><a href="#styling-StyleElement"><span class="element-name">‘style’</span></a></td><td></td></tr><tr><td><a href="#filters-feComponentTransferTypeAttribute"><span class="attr-name">‘type’</span></a></td><td><a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a>, <a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a>, <a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a>, <a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a></td><td>✓</td></tr><tr><td><a href="#fonts-HKernElementU1Attribute"><span class="attr-name">‘u1’</span></a></td><td><a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a>, <a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a></td><td></td></tr><tr><td><a href="#fonts-HKernElementU2Attribute"><span class="attr-name">‘u2’</span></a></td><td><a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a>, <a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementUnderlinePositionAttribute"><span class="attr-name">‘underline-position’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementUnderlineThicknessAttribute"><span class="attr-name">‘underline-thickness’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-GlyphElementUnicodeAttribute"><span class="attr-name">‘unicode’</span></a></td><td><a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementUnicodeRangeAttribute"><span class="attr-name">‘unicode-range’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementUnitsPerEmAttribute"><span class="attr-name">‘units-per-em’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementVertAlphabeticAttribute"><span class="attr-name">‘v-alphabetic’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementVertHangingAttribute"><span class="attr-name">‘v-hanging’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementVertIdeographicAttribute"><span class="attr-name">‘v-ideographic’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontFaceElementVertMathematicalAttribute"><span class="attr-name">‘v-mathematical’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#filters-feColorMatrixValuesAttribute"><span class="attr-name">‘values’</span></a></td><td><a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a></td><td>✓</td></tr><tr><td><a href="#animate-ValuesAttribute"><span class="attr-name">‘values’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a></td><td></td></tr><tr><td><a href="#struct-SVGElementVersionAttribute"><span class="attr-name">‘version’</span></a></td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontElementVertAdvYAttribute"><span class="attr-name">‘vert-adv-y’</span></a></td><td><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></td><td></td></tr><tr><td><a href="#fonts-GlyphElementVertAdvYAttribute"><span class="attr-name">‘vert-adv-y’</span></a></td><td><a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontElementVertOriginXAttribute"><span class="attr-name">‘vert-origin-x’</span></a></td><td><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></td><td></td></tr><tr><td><a href="#fonts-GlyphElementVertOriginXAttribute"><span class="attr-name">‘vert-origin-x’</span></a></td><td><a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a></td><td></td></tr><tr><td><a href="#fonts-FontElementVertOriginYAttribute"><span class="attr-name">‘vert-origin-y’</span></a></td><td><a href="#fonts-FontElement"><span class="element-name">‘font’</span></a></td><td></td></tr><tr><td><a href="#fonts-GlyphElementVertOriginYAttribute"><span class="attr-name">‘vert-origin-y’</span></a></td><td><a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a></td><td></td></tr><tr><td><a href="#coords-ViewBoxAttribute"><span class="attr-name">‘viewBox’</span></a></td><td><a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a></td><td>✓</td></tr><tr><td><a href="#linking-ViewElementViewTargetAttribute"><span class="attr-name">‘viewTarget’</span></a></td><td><a href="#linking-ViewElement"><span class="element-name">‘view’</span></a></td><td></td></tr><tr><td><a href="#filters-FilterElementWidthAttribute"><span class="attr-name">‘width’</span></a></td><td><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></td><td>✓</td></tr><tr><td><a href="#extend-ForeignObjectElementWidthAttribute"><span class="attr-name">‘width’</span></a></td><td><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></td><td>✓</td></tr><tr><td><a href="#struct-ImageElementWidthAttribute"><span class="attr-name">‘width’</span></a></td><td><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-PatternElementWidthAttribute"><span class="attr-name">‘width’</span></a></td><td><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-RectElementWidthAttribute"><span class="attr-name">‘width’</span></a></td><td><a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></td><td>✓</td></tr><tr><td><a href="#struct-SVGElementWidthAttribute"><span class="attr-name">‘width’</span></a></td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></td><td>✓</td></tr><tr><td><a href="#struct-UseElementWidthAttribute"><span class="attr-name">‘width’</span></a></td><td><a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-FilterPrimitiveWidthAttribute"><span class="attr-name">‘width’</span></a></td><td><a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a>, <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>, <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a>, <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a></td><td>✓</td></tr><tr><td><a href="#masking-MaskElementWidthAttribute"><span class="attr-name">‘width’</span></a></td><td><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></td><td>✓</td></tr><tr><td><a href="#fonts-FontFaceElementWidthsAttribute"><span class="attr-name">‘widths’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#text-AltGlyphElementXAttribute"><span class="attr-name">‘x’</span></a></td><td><a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a></td><td>✓</td></tr><tr><td><a href="#interact-CursorElementXAttribute"><span class="attr-name">‘x’</span></a></td><td><a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-fePointLightXAttribute"><span class="attr-name">‘x’</span></a></td><td><a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feSpotLightXAttribute"><span class="attr-name">‘x’</span></a></td><td><a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-FilterElementXAttribute"><span class="attr-name">‘x’</span></a></td><td><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></td><td>✓</td></tr><tr><td><a href="#extend-ForeignObjectElementXAttribute"><span class="attr-name">‘x’</span></a></td><td><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></td><td>✓</td></tr><tr><td><a href="#text-GlyphRefElementXAttribute"><span class="attr-name">‘x’</span></a></td><td><a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a></td><td></td></tr><tr><td><a href="#struct-ImageElementXAttribute"><span class="attr-name">‘x’</span></a></td><td><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-PatternElementXAttribute"><span class="attr-name">‘x’</span></a></td><td><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-RectElementXAttribute"><span class="attr-name">‘x’</span></a></td><td><a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></td><td>✓</td></tr><tr><td><a href="#struct-SVGElementXAttribute"><span class="attr-name">‘x’</span></a></td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></td><td>✓</td></tr><tr><td><a href="#text-TextElementXAttribute"><span class="attr-name">‘x’</span></a></td><td><a href="#text-TextElement"><span class="element-name">‘text’</span></a></td><td>✓</td></tr><tr><td><a href="#struct-UseElementXAttribute"><span class="attr-name">‘x’</span></a></td><td><a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-FilterPrimitiveXAttribute"><span class="attr-name">‘x’</span></a></td><td><a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a>, <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>, <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a>, <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a></td><td>✓</td></tr><tr><td><a href="#masking-MaskElementXAttribute"><span class="attr-name">‘x’</span></a></td><td><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></td><td>✓</td></tr><tr><td><a href="#text-TSpanElementXAttribute"><span class="attr-name">‘x’</span></a></td><td><a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a></td><td>✓</td></tr><tr><td><a href="#fonts-FontFaceElementXHeightAttribute"><span class="attr-name">‘x-height’</span></a></td><td><a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a></td><td></td></tr><tr><td><a href="#shapes-LineElementX1Attribute"><span class="attr-name">‘x1’</span></a></td><td><a href="#shapes-LineElement"><span class="element-name">‘line’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-LinearGradientElementX1Attribute"><span class="attr-name">‘x1’</span></a></td><td><a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-LineElementX2Attribute"><span class="attr-name">‘x2’</span></a></td><td><a href="#shapes-LineElement"><span class="element-name">‘line’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-LinearGradientElementX2Attribute"><span class="attr-name">‘x2’</span></a></td><td><a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feDisplacementMapXChannelSelectorAttribute"><span class="attr-name">‘xChannelSelector’</span></a></td><td><a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a></td><td>✓</td></tr><tr><td><a href="#linking-AElementXLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a></td><td></td></tr><tr><td><a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a></td><td><a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a>, <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a>, <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a>, <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a>, <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a>, <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#linking-AElementXLinkHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a></td><td>✓</td></tr><tr><td><a href="#text-AltGlyphElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a></td><td></td></tr><tr><td><a href="#color-ColorProfileElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a></td><td></td></tr><tr><td><a href="#interact-CursorElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feImageElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-FilterElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></td><td>✓</td></tr><tr><td><a href="#fonts-FontFaceUriElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a></td><td></td></tr><tr><td><a href="#text-GlyphRefElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a></td><td></td></tr><tr><td><a href="#struct-ImageElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-LinearGradientElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#animate-MPathElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a></td><td></td></tr><tr><td><a href="#pservers-PatternElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-RadialGradientElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#script-ScriptElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#script-ScriptElement"><span class="element-name">‘script’</span></a></td><td></td></tr><tr><td><a href="#text-TextPathElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a></td><td>✓</td></tr><tr><td><a href="#struct-UseElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td>✓</td></tr><tr><td><a href="#animate-HrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a></td><td></td></tr><tr><td><a href="#text-TRefElementHrefAttribute"><span class="attr-name">‘xlink:href’</span></a></td><td><a href="#text-TRefElement"><span class="element-name">‘tref’</span></a></td><td>✓</td></tr><tr><td><a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a>, <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a>, <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a>, <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a></td><td></td></tr><tr><td><a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a></td><td><a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a>, <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a>, <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a>, <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a>, <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a>, <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a>, <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a>, <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a>, <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td></td></tr><tr><td><a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a>, <a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>, <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a>, <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a>, <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>, <a href="#filters-feDistantLightElement"><span class="element-name">‘feDistantLight’</span></a>, <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>, <a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a>, <a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a>, <a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a>, <a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a>, <a href="#filters-feMergeNodeElement"><span class="element-name">‘feMergeNode’</span></a>, <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a>, <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a>, <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a>, <a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a>, <a href="#fonts-FontFaceFormatElement"><span class="element-name">‘font-face-format’</span></a>, <a href="#fonts-FontFaceNameElement"><span class="element-name">‘font-face-name’</span></a>, <a href="#fonts-FontFaceSrcElement"><span class="element-name">‘font-face-src’</span></a>, <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a>, <a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>, <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a>, <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>, <a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a>, <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>, <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a>, <a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a></td><td></td></tr><tr><td><a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a>, <a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>, <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a>, <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a>, <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>, <a href="#filters-feDistantLightElement"><span class="element-name">‘feDistantLight’</span></a>, <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>, <a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a>, <a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a>, <a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a>, <a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a>, <a href="#filters-feMergeNodeElement"><span class="element-name">‘feMergeNode’</span></a>, <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a>, <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a>, <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a>, <a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a>, <a href="#fonts-FontFaceFormatElement"><span class="element-name">‘font-face-format’</span></a>, <a href="#fonts-FontFaceNameElement"><span class="element-name">‘font-face-name’</span></a>, <a href="#fonts-FontFaceSrcElement"><span class="element-name">‘font-face-src’</span></a>, <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a>, <a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>, <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a>, <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>, <a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a>, <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>, <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a>, <a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a></td><td></td></tr><tr><td><a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a></td><td><a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a>, <a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>, <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a>, <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a>, <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>, <a href="#filters-feDistantLightElement"><span class="element-name">‘feDistantLight’</span></a>, <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>, <a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a>, <a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a>, <a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a>, <a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a>, <a href="#filters-feMergeNodeElement"><span class="element-name">‘feMergeNode’</span></a>, <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a>, <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a>, <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a>, <a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a>, <a href="#fonts-FontFaceFormatElement"><span class="element-name">‘font-face-format’</span></a>, <a href="#fonts-FontFaceNameElement"><span class="element-name">‘font-face-name’</span></a>, <a href="#fonts-FontFaceSrcElement"><span class="element-name">‘font-face-src’</span></a>, <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a>, <a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>, <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a>, <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>, <a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a>, <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>, <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a>, <a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a></td><td></td></tr><tr><td><a href="#text-AltGlyphElementYAttribute"><span class="attr-name">‘y’</span></a></td><td><a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a></td><td>✓</td></tr><tr><td><a href="#interact-CursorElementYAttribute"><span class="attr-name">‘y’</span></a></td><td><a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-fePointLightYAttribute"><span class="attr-name">‘y’</span></a></td><td><a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feSpotLightYAttribute"><span class="attr-name">‘y’</span></a></td><td><a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-FilterElementYAttribute"><span class="attr-name">‘y’</span></a></td><td><a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a></td><td>✓</td></tr><tr><td><a href="#extend-ForeignObjectElementYAttribute"><span class="attr-name">‘y’</span></a></td><td><a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a></td><td>✓</td></tr><tr><td><a href="#text-GlyphRefElementYAttribute"><span class="attr-name">‘y’</span></a></td><td><a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a></td><td></td></tr><tr><td><a href="#struct-ImageElementYAttribute"><span class="attr-name">‘y’</span></a></td><td><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-PatternElementYAttribute"><span class="attr-name">‘y’</span></a></td><td><a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-RectElementYAttribute"><span class="attr-name">‘y’</span></a></td><td><a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a></td><td>✓</td></tr><tr><td><a href="#struct-SVGElementYAttribute"><span class="attr-name">‘y’</span></a></td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a></td><td>✓</td></tr><tr><td><a href="#text-TextElementYAttribute"><span class="attr-name">‘y’</span></a></td><td><a href="#text-TextElement"><span class="element-name">‘text’</span></a></td><td>✓</td></tr><tr><td><a href="#struct-UseElementYAttribute"><span class="attr-name">‘y’</span></a></td><td><a href="#struct-UseElement"><span class="element-name">‘use’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-FilterPrimitiveYAttribute"><span class="attr-name">‘y’</span></a></td><td><a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a>, <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>, <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a>, <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a></td><td>✓</td></tr><tr><td><a href="#masking-MaskElementYAttribute"><span class="attr-name">‘y’</span></a></td><td><a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a></td><td>✓</td></tr><tr><td><a href="#text-TSpanElementYAttribute"><span class="attr-name">‘y’</span></a></td><td><a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-LineElementY1Attribute"><span class="attr-name">‘y1’</span></a></td><td><a href="#shapes-LineElement"><span class="element-name">‘line’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-LinearGradientElementY1Attribute"><span class="attr-name">‘y1’</span></a></td><td><a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#shapes-LineElementY2Attribute"><span class="attr-name">‘y2’</span></a></td><td><a href="#shapes-LineElement"><span class="element-name">‘line’</span></a></td><td>✓</td></tr><tr><td><a href="#pservers-LinearGradientElementY2Attribute"><span class="attr-name">‘y2’</span></a></td><td><a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feDisplacementMapYChannelSelectorAttribute"><span class="attr-name">‘yChannelSelector’</span></a></td><td><a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-fePointLightZAttribute"><span class="attr-name">‘z’</span></a></td><td><a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a></td><td>✓</td></tr><tr><td><a href="#filters-feSpotLightZAttribute"><span class="attr-name">‘z’</span></a></td><td><a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a></td><td>✓</td></tr><tr><td><a href="#interact-ZoomAndPanAttribute"><span class="attr-name">‘zoomAndPan’</span></a></td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a></td><td></td></tr></table>

<h2 id="attindex-PresentationAttributes">M.2 Presentation attributes</h2>

<p>As described in the <a href="#chapter-styling">Styling</a> chapter, for each
<a href="#intro-TermProperty"><span class="svg-term">property</span></a> there exists a corresponding <a href="#intro-TermPresentationAttribute"><span class="svg-term">presentation attribute</span></a>.
The table below lists the presentation attributes and the elements on which
they may be specified.</p>

<table class="vert property-table" summary="List of presentation attributes and the elements on which they may be specified"><tr><th>Presentation attributes</th><th>Elements on which the attributes may be specified</th></tr><tr><td>
      <a href="#text-AlignmentBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘alignment-baseline’">‘alignment-baseline’</span></a>, <a href="#text-BaselineShiftProperty"><span class="attr-name" title="Presentation attribute for property ‘baseline-shift’">‘baseline-shift’</span></a>, <a href="#masking-ClipPathProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-path’">‘clip-path’</span></a>, <a href="#masking-ClipRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘clip-rule’">‘clip-rule’</span></a>, <a href="#masking-ClipProperty"><span class="attr-name" title="Presentation attribute for property ‘clip’">‘clip’</span></a>, <a href="#painting-ColorInterpolationFiltersProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation-filters’">‘color-interpolation-filters’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="attr-name" title="Presentation attribute for property ‘color-interpolation’">‘color-interpolation’</span></a>, <a href="#color-ColorProfileProperty"><span class="attr-name" title="Presentation attribute for property ‘color-profile’">‘color-profile’</span></a>, <a href="#painting-ColorRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘color-rendering’">‘color-rendering’</span></a>, <a href="#color-ColorProperty"><span class="attr-name" title="Presentation attribute for property ‘color’">‘color’</span></a>, <a href="#interact-CursorProperty"><span class="attr-name" title="Presentation attribute for property ‘cursor’">‘cursor’</span></a>, <a href="#text-DirectionProperty"><span class="attr-name" title="Presentation attribute for property ‘direction’">‘direction’</span></a>, <a href="#painting-DisplayProperty"><span class="attr-name" title="Presentation attribute for property ‘display’">‘display’</span></a>, <a href="#text-DominantBaselineProperty"><span class="attr-name" title="Presentation attribute for property ‘dominant-baseline’">‘dominant-baseline’</span></a>, <a href="#filters-EnableBackgroundProperty"><span class="attr-name" title="Presentation attribute for property ‘enable-background’">‘enable-background’</span></a>, <a href="#painting-FillOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-opacity’">‘fill-opacity’</span></a>, <a href="#painting-FillRuleProperty"><span class="attr-name" title="Presentation attribute for property ‘fill-rule’">‘fill-rule’</span></a>, <a href="#painting-FillProperty"><span class="attr-name" title="Presentation attribute for property ‘fill’">‘fill’</span></a>, <a href="#filters-FilterProperty"><span class="attr-name" title="Presentation attribute for property ‘filter’">‘filter’</span></a>, <a href="#filters-FloodColorProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-color’">‘flood-color’</span></a>, <a href="#filters-FloodOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘flood-opacity’">‘flood-opacity’</span></a>, <a href="#text-FontFamilyProperty"><span class="attr-name" title="Presentation attribute for property ‘font-family’">‘font-family’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size-adjust’">‘font-size-adjust’</span></a>, <a href="#text-FontSizeProperty"><span class="attr-name" title="Presentation attribute for property ‘font-size’">‘font-size’</span></a>, <a href="#text-FontStretchProperty"><span class="attr-name" title="Presentation attribute for property ‘font-stretch’">‘font-stretch’</span></a>, <a href="#text-FontStyleProperty"><span class="attr-name" title="Presentation attribute for property ‘font-style’">‘font-style’</span></a>, <a href="#text-FontVariantProperty"><span class="attr-name" title="Presentation attribute for property ‘font-variant’">‘font-variant’</span></a>, <a href="#text-FontWeightProperty"><span class="attr-name" title="Presentation attribute for property ‘font-weight’">‘font-weight’</span></a>, <a href="#text-GlyphOrientationHorizontalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-horizontal’">‘glyph-orientation-horizontal’</span></a>, <a href="#text-GlyphOrientationVerticalProperty"><span class="attr-name" title="Presentation attribute for property ‘glyph-orientation-vertical’">‘glyph-orientation-vertical’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘image-rendering’">‘image-rendering’</span></a>, <a href="#text-KerningProperty"><span class="attr-name" title="Presentation attribute for property ‘kerning’">‘kerning’</span></a>, <a href="#text-LetterSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘letter-spacing’">‘letter-spacing’</span></a>, <a href="#filters-LightingColorProperty"><span class="attr-name" title="Presentation attribute for property ‘lighting-color’">‘lighting-color’</span></a>, <a href="#painting-MarkerEndProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-end’">‘marker-end’</span></a>, <a href="#painting-MarkerMidProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-mid’">‘marker-mid’</span></a>, <a href="#painting-MarkerStartProperty"><span class="attr-name" title="Presentation attribute for property ‘marker-start’">‘marker-start’</span></a>, <a href="#masking-MaskProperty"><span class="attr-name" title="Presentation attribute for property ‘mask’">‘mask’</span></a>, <a href="#masking-OpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘opacity’">‘opacity’</span></a>, <a href="#masking-OverflowProperty"><span class="attr-name" title="Presentation attribute for property ‘overflow’">‘overflow’</span></a>, <a href="#interact-PointerEventsProperty"><span class="attr-name" title="Presentation attribute for property ‘pointer-events’">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘shape-rendering’">‘shape-rendering’</span></a>, <a href="#pservers-StopColorProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-color’">‘stop-color’</span></a>, <a href="#pservers-StopOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stop-opacity’">‘stop-opacity’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dasharray’">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-dashoffset’">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linecap’">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-linejoin’">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-miterlimit’">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-opacity’">‘stroke-opacity’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke-width’">‘stroke-width’</span></a>, <a href="#painting-StrokeProperty"><span class="attr-name" title="Presentation attribute for property ‘stroke’">‘stroke’</span></a>, <a href="#text-TextAnchorProperty"><span class="attr-name" title="Presentation attribute for property ‘text-anchor’">‘text-anchor’</span></a>, <a href="#text-TextDecorationProperty"><span class="attr-name" title="Presentation attribute for property ‘text-decoration’">‘text-decoration’</span></a>, <a href="#painting-TextRenderingProperty"><span class="attr-name" title="Presentation attribute for property ‘text-rendering’">‘text-rendering’</span></a>, <a href="#text-UnicodeBidiProperty"><span class="attr-name" title="Presentation attribute for property ‘unicode-bidi’">‘unicode-bidi’</span></a>, <a href="#painting-VisibilityProperty"><span class="attr-name" title="Presentation attribute for property ‘visibility’">‘visibility’</span></a>, <a href="#text-WordSpacingProperty"><span class="attr-name" title="Presentation attribute for property ‘word-spacing’">‘word-spacing’</span></a> and <a href="#text-WritingModeProperty"><span class="attr-name" title="Presentation attribute for property ‘writing-mode’">‘writing-mode’</span></a>
    </td><td>
      <a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a>, <a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a>, <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>, <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a>, <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, <a href="#filters-feTurbulenceElement"><span class="element-name">‘feTurbulence’</span></a>, <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a>, <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a>, <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a>, <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a>, <a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a>, <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a>, <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a>, <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a> and <a href="#struct-UseElement"><span class="element-name">‘use’</span></a>
    </td></tr></table>

</div><hr class="chapter-divider" />
<div id="chapter-propidx">

<h1>Appendix N: Property Index</h1>

<p class="normativity"><em>This appendix is informative, not normative.</em></p>

    <table class="vert property-table" summary="list of all properties"><thead><tr><th>Name</th><th>Values</th><th>Initial value</th><th>Applies to</th><th title="Inherited">Inh.</th><th>Percentages</th><th>Media</th><th title="Animatable"><a href="#animate-Animatable">Anim.</a></th></tr></thead><tbody><tr><td><a href="#text-AlignmentBaselineProperty"><span class="prop-name">‘alignment-baseline’</span></a></td><td>auto | baseline | before-edge | text-before-edge |
          middle | central | after-edge | text-after-edge |
          ideographic | alphabetic | hanging | mathematical | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>see property description</td><td><a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> elements</td><td>no</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#text-BaselineShiftProperty"><span class="prop-name">‘baseline-shift’</span></a></td><td>baseline | sub | super | <a href="#types-DataTypePercentage">&lt;percentage&gt;</a>
          | <a href="#types-DataTypeLength">&lt;length&gt;</a>
          | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>baseline</td><td><a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> elements</td><td>no</td><td>refer to the "line height" of the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element, which in
          the case of SVG is defined to be equal to the font size</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#masking-ClipProperty"><span class="prop-name">‘clip’</span></a></td><td><a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/visufx.html#value-def-shape">
          <span class="value-inst-shape noxref">&lt;shape&gt;</span></a>
          | auto | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>auto</td><td><a href="#coords-ElementsThatEstablishViewports">elements
          which establish a new viewport</a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> elements and <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> elements</td><td>no</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a></td><td><a href="#types-DataTypeFuncIRI">&lt;funciri&gt;</a> |
          none | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>none</td><td><a href="#intro-TermContainerElement">container
          elements</a> and <a href="#intro-TermGraphicsElement">graphics
          elements</a></td><td>no</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#masking-ClipRuleProperty"><span class="prop-name">‘clip-rule’</span></a></td><td>nonzero | evenodd | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>nonzero</td><td>graphics elements within a <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element</td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#color-ColorProperty"><span class="prop-name">‘color’</span></a></td><td><a href="#types-DataTypeColor">&lt;color&gt;</a>
          | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>depends on user agent</td><td>elements to which properties <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>, <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>, <a href="#pservers-StopColorProperty"><span class="prop-name">‘stop-color’</span></a>, <a href="#filters-FloodColorProperty"><span class="prop-name">‘flood-color’</span></a>, <a href="#filters-LightingColorProperty"><span class="prop-name">‘lighting-color’</span></a> apply</td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a></td><td>auto | sRGB | linearRGB | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>sRGB</td><td><a href="#intro-TermContainerElement">container
          elements</a>, <a href="#intro-TermGraphicsElement">graphics
          elements</a> and <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#painting-ColorInterpolationFiltersProperty"><span class="prop-name">‘color-interpolation-filters’</span></a></td><td>auto | sRGB | linearRGB | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>linearRGB</td><td><a href="#filters-TermFilterPrimitive">filter
          primitives</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#color-ColorProfileProperty"><span class="prop-name">‘color-profile’</span></a></td><td>auto | sRGB | &lt;name&gt; | <a href="#types-DataTypeFuncIRI">&lt;funciri&gt;</a> | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>auto</td><td><a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> elements that
          refer to raster images</td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#painting-ColorRenderingProperty"><span class="prop-name">‘color-rendering’</span></a></td><td>auto | optimizeSpeed | optimizeQuality | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>auto</td><td><a href="#intro-TermContainerElement">container
          elements</a>, <a href="#intro-TermGraphicsElement">graphics
          elements</a> and <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#interact-CursorProperty"><span class="prop-name">‘cursor’</span></a></td><td>[ [<a href="#types-DataTypeFuncIRI">&lt;funciri&gt;</a>
          ,]* [ auto | crosshair | default | pointer | move |
          e-resize | ne-resize | nw-resize | n-resize | se-resize |
          sw-resize | s-resize | w-resize| text | wait | help ] ] |
          <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>auto</td><td><a href="#intro-TermContainerElement">container
          elements</a> and <a href="#intro-TermGraphicsElement">graphics
          elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a>, <a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#interactive-media-group">
          interactive</a></td><td>yes</td></tr><tr><td><a href="#text-DirectionProperty"><span class="prop-name">‘direction’</span></a></td><td>ltr | rtl | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>ltr</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>no</td></tr><tr><td><a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a></td><td>inline | block | list-item | run-in | compact |
          marker | table | inline-table | table-row-group |
          table-header-group | table-footer-group | table-row |
          table-column-group | table-column | table-cell |
          table-caption | none | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>inline</td><td><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a>, <a href="#linking-AElement"><span class="element-name">‘a’</span></a>, <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a>, graphics
          elements (including the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element) and text
          sub-elements (i.e., <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>)</td><td>no</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#all-media-group">
          all</a></td><td>yes</td></tr><tr><td><a href="#text-DominantBaselineProperty"><span class="prop-name">‘dominant-baseline’</span></a></td><td>auto | use-script | no-change | reset-size |
          ideographic | alphabetic | hanging | mathematical |
          central | middle | text-after-edge | text-before-edge |
          <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>auto</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>no</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#filters-EnableBackgroundProperty"><span class="prop-name">‘enable-background’</span></a></td><td>accumulate | new [ &lt;x&gt; &lt;y&gt; &lt;width&gt;
          &lt;height&gt; ] | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>accumulate</td><td><a href="#intro-TermContainerElement">container
          elements</a></td><td>no</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>no</td></tr><tr><td><a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a></td><td>&lt;paint&gt; (See <a href="#painting-SpecifyingPaint">Specifying
          paint</a>)</td><td>black</td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
          elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#painting-FillOpacityProperty"><span class="prop-name">‘fill-opacity’</span></a></td><td>&lt;opacity-value&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>1</td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
          elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#painting-FillRuleProperty"><span class="prop-name">‘fill-rule’</span></a></td><td>nonzero | evenodd | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>nonzero</td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
          elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#filters-FilterProperty"><span class="prop-name">‘filter’</span></a></td><td><a href="#types-DataTypeFuncIRI">&lt;funciri&gt;</a> | none | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>none</td><td><a href="#intro-TermContainerElement">container
          elements</a> and <a href="#intro-TermGraphicsElement">graphics
          elements</a></td><td>no</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#filters-FloodColorProperty"><span class="prop-name">‘flood-color’</span></a></td><td>currentColor |<br />
           <a href="#types-DataTypeColor">&lt;color&gt;</a>
           [<a href="#types-DataTypeICCColor">&lt;icccolor&gt;</a>]
          |<br />
           <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>black</td><td><a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a> elements</td><td>no</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#filters-FloodOpacityProperty"><span class="prop-name">‘flood-opacity’</span></a></td><td>&lt;opacity-value&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>1</td><td><a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a> elements</td><td>no</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#text-FontProperty"><span class="prop-name">‘font’</span></a></td><td>[ [ <a href="#text-FontStyleProperty"><span class="prop-name">‘font-style’</span></a>
          || <a href="#text-FontVariantProperty"><span class="prop-name">‘font-variant’</span></a>
          || <a href="#text-FontWeightProperty"><span class="prop-name">‘font-weight’</span></a>
          ]? <a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a>
          [ / <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/visudet.html#propdef-line-height">
          <span class="propinst-line-height noxref">'line-height'</span></a>
          ]? <a href="#text-FontFamilyProperty"><span class="prop-name">‘font-family’</span></a>
          ] | caption | icon | menu | message-box | small-caption |
          status-bar | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>see individual properties</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>yes</td><td>see individual properties</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes <sup><a href="#propidx-note1">[1]</a></sup></td></tr><tr><td><a href="#text-FontFamilyProperty"><span class="prop-name">‘font-family’</span></a></td><td>[[ <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#value-def-family-name">
          <span class="value-inst-family-name noxref">&lt;family-name&gt;</span></a>
          | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#value-def-generic-family">
          <span class="value-inst-generic-family noxref">&lt;generic-family&gt;</span></a>
          ],]* [ <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#value-def-family-name">
          <span class="value-inst-family-name noxref">&lt;family-name&gt;</span></a>
          | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#value-def-generic-family">
          <span class="value-inst-generic-family noxref">&lt;generic-family&gt;</span></a>]
          | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>depends on user agent</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#text-FontSizeProperty"><span class="prop-name">‘font-size’</span></a></td><td><a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#value-def-absolute-size">
          <span class="value-inst-absolute-size noxref">&lt;absolute-size&gt;</span></a>
          | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#value-def-relative-size">
          <span class="value-inst-relative-size noxref">&lt;relative-size&gt;</span></a>
          | <a href="#types-DataTypeLength">&lt;length&gt;</a>
          | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#value-def-percentage">
          <span class="value-inst-percentage noxref">&lt;percentage&gt;</span></a>
          | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>medium</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>yes, the computed value is inherited</td><td>refer to parent element's font size</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#text-FontSizeAdjustProperty"><span class="prop-name">‘font-size-adjust’</span></a></td><td><a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/syndata.html#value-def-number">
          <span class="value-inst-number noxref">&lt;number&gt;</span></a>
          | none | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>none</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes <sup><a href="#propidx-note1">[1]</a></sup></td></tr><tr><td><a href="#text-FontStretchProperty"><span class="prop-name">‘font-stretch’</span></a></td><td>normal | wider | narrower | ultra-condensed |
          extra-condensed | condensed | semi-condensed |
          semi-expanded | expanded | extra-expanded |
          ultra-expanded | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>normal</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#text-FontStyleProperty"><span class="prop-name">‘font-style’</span></a></td><td>normal | italic | oblique | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>normal</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#text-FontVariantProperty"><span class="prop-name">‘font-variant’</span></a></td><td>normal | small-caps | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>normal</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#text-FontWeightProperty"><span class="prop-name">‘font-weight’</span></a></td><td>normal | bold | bolder | lighter | 100 | 200 | 300 |
          400 | 500 | 600 | 700 | 800 | 900 | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>normal</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#text-GlyphOrientationHorizontalProperty"><span class="prop-name">‘glyph-orientation-horizontal’</span></a></td><td><a href="#types-DataTypeAngle">&lt;angle&gt;</a> | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>0deg</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>no</td></tr><tr><td><a href="#text-GlyphOrientationVerticalProperty"><span class="prop-name">‘glyph-orientation-vertical’</span></a></td><td>auto | <a href="#types-DataTypeAngle">&lt;angle&gt;</a> | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>auto</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>no</td></tr><tr><td><a href="#painting-ImageRenderingProperty"><span class="prop-name">‘image-rendering’</span></a></td><td>auto | optimizeSpeed | optimizeQuality | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>auto</td><td>images</td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#text-KerningProperty"><span class="prop-name">‘kerning’</span></a></td><td>auto | <a href="#types-DataTypeLength">&lt;length&gt;</a> | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>auto</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#text-LetterSpacingProperty"><span class="prop-name">‘letter-spacing’</span></a></td><td>normal | <a href="#types-DataTypeLength">&lt;length&gt;</a> | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>normal</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#filters-LightingColorProperty"><span class="prop-name">‘lighting-color’</span></a></td><td>currentColor |<br />
           <a href="#types-DataTypeColor">&lt;color&gt;</a>
           [<a href="#types-DataTypeICCColor">&lt;icccolor&gt;</a>]
          |<br />
           <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>white</td><td><a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a> and
          <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>
          elements</td><td>no</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#painting-MarkerProperty"><span class="prop-name">‘marker’</span></a></td><td>see individual properties</td><td>see individual properties</td><td><a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> and <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a> elements</td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#painting-MarkerEndProperty"><span class="prop-name">‘marker-end’</span></a><br />
           <a href="#painting-MarkerMidProperty"><span class="prop-name">‘marker-mid’</span></a><br />
           <a href="#painting-MarkerStartProperty"><span class="prop-name">‘marker-start’</span></a></td><td>none |<br />
           <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a>
          |<br />
            <a href="#types-DataTypeFuncIRI">&lt;funciri&gt;</a></td><td>none</td><td><a href="#paths-PathElement"><span class="element-name">‘path’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a> and <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a> elements</td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#masking-MaskProperty"><span class="prop-name">‘mask’</span></a></td><td><a href="#types-DataTypeFuncIRI">&lt;funciri&gt;</a> | none | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>none</td><td><a href="#intro-TermContainerElement">container
          elements</a> and <a href="#intro-TermGraphicsElement">graphics
          elements</a></td><td>no</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#masking-OpacityProperty"><span class="prop-name">‘opacity’</span></a></td><td>&lt;opacity-value&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>1</td><td><a href="#intro-TermContainerElement">container
          elements</a> and <a href="#intro-TermGraphicsElement">graphics
          elements</a></td><td>no</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a></td><td>visible | hidden | scroll | auto | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>see prose</td><td><a href="#coords-ElementsThatEstablishViewports">elements
          which establish a new viewport</a>, <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> elements and <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> elements</td><td>no</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#interact-PointerEventsProperty"><span class="prop-name">‘pointer-events’</span></a></td><td>visiblePainted | visibleFill | visibleStroke |
          visible |<br />
           painted | fill | stroke | all | none | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>visiblePainted</td><td><a href="#intro-TermGraphicsElement">graphics
          elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#painting-ShapeRenderingProperty"><span class="prop-name">‘shape-rendering’</span></a></td><td>auto | optimizeSpeed | crispEdges |<br />
           geometricPrecision | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>auto</td><td><a href="#intro-TermShape">shapes</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#pservers-StopColorProperty"><span class="prop-name">‘stop-color’</span></a></td><td>currentColor |<br />
           <a href="#types-DataTypeColor">&lt;color&gt;</a>
           [<a href="#types-DataTypeICCColor">&lt;icccolor&gt;</a>]
          |<br />
           <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>black</td><td><a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a> elements</td><td>no</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#pservers-StopOpacityProperty"><span class="prop-name">‘stop-opacity’</span></a></td><td>&lt;opacity-value&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>1</td><td><a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a> elements</td><td>no</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a></td><td>&lt;paint&gt; (See <a href="#painting-SpecifyingPaint">Specifying
          paint</a>)</td><td>none</td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
          elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#painting-StrokeDasharrayProperty"><span class="prop-name">‘stroke-dasharray’</span></a></td><td>none | &lt;dasharray&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>none</td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
          elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes <sup><a href="#propidx-note1">[1]</a></sup></td></tr><tr><td><a href="#painting-StrokeDashoffsetProperty"><span class="prop-name">‘stroke-dashoffset’</span></a></td><td><a href="#types-DataTypePercentage">&lt;percentage&gt;</a> | <a href="#types-DataTypeLength">&lt;length&gt;</a> | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>0</td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
          elements</a></td><td>yes</td><td>see prose</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#painting-StrokeLinecapProperty"><span class="prop-name">‘stroke-linecap’</span></a></td><td>butt | round | square | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>butt</td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
          elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#painting-StrokeLinejoinProperty"><span class="prop-name">‘stroke-linejoin’</span></a></td><td>miter | round | bevel | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>miter</td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
          elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#painting-StrokeMiterlimitProperty"><span class="prop-name">‘stroke-miterlimit’</span></a></td><td>&lt;miterlimit&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>4</td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
          elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#painting-StrokeOpacityProperty"><span class="prop-name">‘stroke-opacity’</span></a></td><td>&lt;opacity-value&gt; | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>1</td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
          elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#painting-StrokeWidthProperty"><span class="prop-name">‘stroke-width’</span></a></td><td><a href="#types-DataTypePercentage">&lt;percentage&gt;</a> | <a href="#types-DataTypeLength">&lt;length&gt;</a> | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>1</td><td><a href="#intro-TermShape">shapes</a> and <a href="#intro-TermTextContentElement">text content
          elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#text-TextAnchorProperty"><span class="prop-name">‘text-anchor’</span></a></td><td>start | middle | end | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>start</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#text-TextDecorationProperty"><span class="prop-name">‘text-decoration’</span></a></td><td>none | [ underline || overline || line-through ||
          blink ] | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>none</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>no (see prose)</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#painting-TextRenderingProperty"><span class="prop-name">‘text-rendering’</span></a></td><td>auto | optimizeSpeed | optimizeLegibility |<br />
           geometricPrecision | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>auto</td><td><a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements</td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#text-UnicodeBidiProperty"><span class="prop-name">‘unicode-bidi’</span></a></td><td>normal | embed | bidi-override | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>normal</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>no</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>no</td></tr><tr><td><a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a></td><td>visible | hidden | collapse | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>visible</td><td>graphics elements (including the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element) and text
          sub-elements (i.e., <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a> and <a href="#linking-AElement"><span class="element-name">‘a’</span></a>)</td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#text-WordSpacingProperty"><span class="prop-name">‘word-spacing’</span></a></td><td>normal | <a href="#types-DataTypeLength">&lt;length&gt;</a> | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>normal</td><td><a href="#intro-TermTextContentElement">text
          content elements</a></td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>yes</td></tr><tr><td><a href="#text-WritingModeProperty"><span class="prop-name">‘writing-mode’</span></a></td><td>lr-tb | rl-tb | tb-rl | lr | rl | tb | <a class="noxref" href="http://www.w3.org/TR/2008/REC-CSS2-20080411/cascade.html#value-def-inherit">
          <span class="value-inst-inherit noxref">inherit</span></a></td><td>lr-tb</td><td><a href="#text-TextElement"><span class="element-name">‘text’</span></a> elements</td><td>yes</td><td>N/A</td><td><a href="http://www.w3.org/TR/2008/REC-CSS2-20080411/media.html#visual-media-group">
          visual</a></td><td>no</td></tr></tbody></table>

<ol class="notes"><li id="propidx-note1"><sup>[1]</sup> The <a href="#text-FontProperty"><span class="prop-name">‘font’</span></a>, <a href="#text-FontSizeAdjustProperty"><span class="prop-name">‘font-size-adjust’</span></a> and <a href="#painting-StrokeDasharrayProperty"><span class="prop-name">‘stroke-dasharray’</span></a>
  properties are animatable but do not support additive animation.</li></ol>

</div><hr class="chapter-divider" />
<div id="chapter-feature">

<h1>Appendix O: Feature Strings</h1><h2 id="feature-toc">Contents</h2><ul class="toc">
<li><a href="#feature-Introducation">O.1 Introduction</a></li>
<li><a href="#feature-SVG11FeatureStrings">O.2 SVG 1.1 feature strings</a></li>
<li><a href="#feature-SVG10FeatureStrings">O.3 SVG 1.0 feature strings</a></li></ul>

<p class="normativity"><strong>This appendix is normative.</strong></p>

<h2 id="feature-Introducation">O.1 Introduction</h2>

<p>The following are the feature strings for the <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>
attribute. These same feature strings apply to the
<span class="dom-method-name">hasFeature</span> method call that is part
of the <a href="#chapter-svgdom">SVG DOM</a>'s support for the
<a class="idlinterface" href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490">DOMImplementation</a> interface defined in
<a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/">DOM Level 2 Core</a>
[<a href="#refs-ref-DOM2">DOM2</a>] (see
<a href="#svgdom-FeatureStrings">Feature strings for the <strong>hasFeature</strong> method call</a>).
In some cases the feature strings map directly to a set of attributes,
properties or elements, in others they represent some functionality of the
user agent (that it is a dynamic viewer for example). Note that the format and
naming for feature strings changed from
<a href="http://www.w3.org/TR/2001/REC-SVG-20010904/">SVG 1.0</a>
[<a href="#refs-ref-SVG10">SVG10</a>] to SVG 1.1. The SVG 1.0 feature
strings are listed below after the SVG 1.1 feature strings and User Agents
should support all listed feature strings for compatibility reasons. However,
the SVG 1.0 feature strings can be considered deprecated.</p>

<h2 id="feature-SVG11FeatureStrings">O.2 SVG 1.1 feature strings</h2>

<dl id="feature-SVG"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#SVG</dd><dt>User Agent Supports:</dt><dd>At least one of the following (all of which are described
  subsequently):
  "http://www.w3.org/TR/SVG11/feature#SVG-static",
  "http://www.w3.org/TR/SVG11/feature#SVG-animation",
  "http://www.w3.org/TR/SVG11/feature#SVG-dynamic" or
  "http://www.w3.org/TR/SVG11/feature#SVGDOM". (Because the
  feature string "http://www.w3.org/TR/SVG11/feature#SVG" can
  be ambiguous in some circumstances, it is recommended that
  more specific feature strings be used.)</dd></dl>
<dl id="feature-SVGDOM"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#SVGDOM</dd><dt>User Agent Supports:</dt><dd>At least one of the following (all of which are described
  subsequently):
  "http://www.w3.org/TR/SVG11/feature#SVGDOM-static",
  "http://www.w3.org/TR/SVG11/feature#SVGDOM-animation" or
  "http://www.w3.org/TR/SVG11/feature#SVGDOM-dynamic". (Because
  the feature string
  "http://www.w3.org/TR/SVG11/feature#SVGDOM" can be ambiguous
  in some circumstances, it is recommended that more specific
  feature strings be used.)</dd></dl>
<dl id="feature-SVG-static"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#SVG-static</dd><dt>User Agent Supports:</dt><dd>
    The following features (described below) 
    <ul><li>http://www.w3.org/TR/SVG11/feature#CoreAttribute</li><li>http://www.w3.org/TR/SVG11/feature#Structure</li><li>
      http://www.w3.org/TR/SVG11/feature#ContainerAttribute</li><li>
      http://www.w3.org/TR/SVG11/feature#ConditionalProcessing</li><li>http://www.w3.org/TR/SVG11/feature#Image</li><li>http://www.w3.org/TR/SVG11/feature#Style</li><li>
      http://www.w3.org/TR/SVG11/feature#ViewportAttribute</li><li>http://www.w3.org/TR/SVG11/feature#Shape</li><li>http://www.w3.org/TR/SVG11/feature#Text</li><li>
      http://www.w3.org/TR/SVG11/feature#PaintAttribute</li><li>
      http://www.w3.org/TR/SVG11/feature#OpacityAttribute</li><li>
      http://www.w3.org/TR/SVG11/feature#GraphicsAttribute</li><li>http://www.w3.org/TR/SVG11/feature#Marker</li><li>http://www.w3.org/TR/SVG11/feature#ColorProfile</li><li>http://www.w3.org/TR/SVG11/feature#Gradient</li><li>http://www.w3.org/TR/SVG11/feature#Pattern</li><li>http://www.w3.org/TR/SVG11/feature#Clip</li><li>http://www.w3.org/TR/SVG11/feature#Mask</li><li>http://www.w3.org/TR/SVG11/feature#Filter</li><li>
      http://www.w3.org/TR/SVG11/feature#XlinkAttribute</li><li>http://www.w3.org/TR/SVG11/feature#Font</li><li>http://www.w3.org/TR/SVG11/feature#Extensibility</li></ul>
    For SVG viewers,
    "http://www.w3.org/TR/SVG11/feature#SVG-static" indicates
    that the viewer can process and render successfully all of
    the language features corresponding to the feature strings
    listed above.
  </dd></dl>
<dl id="feature-SVGDOM-static"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#SVGDOM-static</dd><dt>User Agent Supports:</dt><dd>All of the DOM interfaces and methods that correspond to
  the language features for
  "http://www.w3.org/TR/SVG11/feature#SVG-static".</dd></dl>
<dl id="feature-SVG-animation"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#SVG-animation</dd><dt>User Agent Supports:</dt><dd>All of the language features from
  "http://www.w3.org/TR/SVG11/feature#SVG-static" plus the
  feature "http://www.w3.org/TR/SVG11/feature#Animation". For
  SVG viewers running on media capable of rendering time-based
  material, such as displays,
  "http://www.w3.org/TR/SVG11/feature#SVG-animation" indicates
  that the viewer can process and render successfully all of
  the corresponding language features.</dd></dl>
<dl id="feature-SVGDOM-animation"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#SVGDOM-animation</dd><dt>User Agent Supports:</dt><dd>All of the DOM interfaces and methods that correspond to
  the language features for
  "http://www.w3.org/TR/SVG11/feature#SVG-animation".</dd></dl>
<dl id="feature-SVG-dynamic"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#SVG-dynamic</dd><dt>User Agent Supports:</dt><dd>
    All of the language features from
    "http://www.w3.org/TR/SVG11/feature#SVG-animation" plus the
    following features: 
    <ul><li>http://www.w3.org/TR/SVG11/feature#Hyperlinking</li><li>http://www.w3.org/TR/SVG11/feature#Scripting</li><li>http://www.w3.org/TR/SVG11/feature#View</li><li>http://www.w3.org/TR/SVG11/feature#Cursor</li><li>
      http://www.w3.org/TR/SVG11/feature#GraphicalEventsAttribute</li><li>
      http://www.w3.org/TR/SVG11/feature#DocumentEventsAttribute</li><li>
      http://www.w3.org/TR/SVG11/feature#AnimationEventsAttribute</li></ul>
    For SVG viewers running on media capable of rendering
    time-based material, such as displays,
    "http://www.w3.org/TR/SVG11/feature#SVG-dynamic" indicates
    that the viewer can process and render successfully all of
    the corresponding language features.
  </dd></dl>
<dl id="feature-SVGDOM-dynamic"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#SVGDOM-dynamic</dd><dt>User Agent Supports:</dt><dd>All of the DOM interfaces and methods that correspond to
  the language features for
  "http://www.w3.org/TR/SVG11/feature#SVG-dynamic".</dd></dl>
<dl id="feature-CoreAttribute"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#CoreAttribute</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#struct-IDAttribute"><span class="attr-name">‘id’</span></a>, <a href="#struct-XMLBaseAttribute"><span class="attr-name">‘xml:base’</span></a>, <a href="#struct-XMLLangAttribute"><span class="attr-name">‘xml:lang’</span></a> and <a href="#struct-XMLSpaceAttribute"><span class="attr-name">‘xml:space’</span></a>
    attributes
  </dd></dl>
<dl id="feature-Structure"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Structure</dd><dt>User Agent Supports:</dt><dd><a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a>, <a href="#struct-SymbolElement"><span class="element-name">‘symbol’</span></a> and <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> elements</dd></dl>
<dl id="feature-BasicStructure"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#BasicStructure</dd><dt>User Agent Supports:</dt><dd>
    <a href="#struct-SVGElement"><span class="element-name">‘svg’</span></a>, <a href="#struct-GElement"><span class="element-name">‘g’</span></a>, <a href="#struct-DefsElement"><span class="element-name">‘defs’</span></a>, <a href="#struct-DescElement"><span class="element-name">‘desc’</span></a>, <a href="#struct-TitleElement"><span class="element-name">‘title’</span></a>, <a href="#metadata-MetadataElement"><span class="element-name">‘metadata’</span></a> and <a href="#struct-UseElement"><span class="element-name">‘use’</span></a> elements</dd></dl>
<dl id="feature-ContainerAttribute"><dt>Feature String:</dt><dd>
  http://www.w3.org/TR/SVG11/feature#ContainerAttribute</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#filters-EnableBackgroundProperty"><span class="prop-name">‘enable-background’</span></a> property</dd></dl>
<dl id="feature-ConditionalProcessing"><dt>Feature String:</dt><dd>
  http://www.w3.org/TR/SVG11/feature#ConditionalProcessing</dd><dt>User Agent Supports:</dt><dd>the <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> element, and the <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a>, <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a> and <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a> attributes</dd></dl>
<dl id="feature-Image"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Image</dd><dt>User Agent Supports:</dt><dd>the <a href="#struct-ImageElement"><span class="element-name">‘image’</span></a> element</dd></dl>
<dl id="feature-Style"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Style</dd><dt>User Agent Supports:</dt><dd>the <a href="#styling-StyleElement"><span class="element-name">‘style’</span></a> element</dd></dl>
<dl id="feature-ViewportAttribute"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#ViewportAttribute</dd><dt>User Agent Supports:</dt><dd>the <a href="#masking-ClipProperty"><span class="prop-name">‘clip’</span></a> and <a href="#masking-OverflowProperty"><span class="prop-name">‘overflow’</span></a> properties</dd></dl>
<dl id="feature-Shape"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Shape</dd><dt>User Agent Supports:</dt><dd>the <a href="#shapes-RectElement"><span class="element-name">‘rect’</span></a>, <a href="#shapes-CircleElement"><span class="element-name">‘circle’</span></a>, <a href="#shapes-LineElement"><span class="element-name">‘line’</span></a>, <a href="#shapes-PolylineElement"><span class="element-name">‘polyline’</span></a>, <a href="#shapes-PolygonElement"><span class="element-name">‘polygon’</span></a>, <a href="#shapes-EllipseElement"><span class="element-name">‘ellipse’</span></a> and <a href="#paths-PathElement"><span class="element-name">‘path’</span></a> elements</dd></dl>
<dl id="feature-Text"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Text</dd><dt>User Agent Supports:</dt><dd>the <a href="#text-TextElement"><span class="element-name">‘text’</span></a>, <a href="#text-TSpanElement"><span class="element-name">‘tspan’</span></a>, <a href="#text-TRefElement"><span class="element-name">‘tref’</span></a>, <a href="#text-TextPathElement"><span class="element-name">‘textPath’</span></a>, <a href="#text-AltGlyphElement"><span class="element-name">‘altGlyph’</span></a>, <a href="#text-AltGlyphDefElement"><span class="element-name">‘altGlyphDef’</span></a>, <a href="#text-AltGlyphItemElement"><span class="element-name">‘altGlyphItem’</span></a> and <a href="#text-GlyphRefElement"><span class="element-name">‘glyphRef’</span></a> elements</dd></dl>
<dl id="feature-BasicText"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#BasicText</dd><dt>User Agent Supports:</dt><dd>the <a href="#text-TextElement"><span class="element-name">‘text’</span></a> element</dd></dl>
<dl id="feature-PaintAttribute"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#PaintAttribute</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#color-ColorProperty"><span class="prop-name">‘color’</span></a>, <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>, <a href="#painting-FillRuleProperty"><span class="prop-name">‘fill-rule’</span></a>, <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="prop-name">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="prop-name">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="prop-name">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="prop-name">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="prop-name">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="prop-name">‘stroke-width’</span></a>, <a href="#painting-ColorInterpolationProperty"><span class="prop-name">‘color-interpolation’</span></a> and <a href="#painting-ColorRenderingProperty"><span class="prop-name">‘color-rendering’</span></a> properties</dd></dl>
<dl id="feature-BasicPaintAttribute"><dt>Feature String:</dt><dd>
  http://www.w3.org/TR/SVG11/feature#BasicPaintAttribute</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#color-ColorProperty"><span class="prop-name">‘color’</span></a>, <a href="#painting-FillProperty"><span class="prop-name">‘fill’</span></a>, <a href="#painting-FillRuleProperty"><span class="prop-name">‘fill-rule’</span></a>, <a href="#painting-StrokeProperty"><span class="prop-name">‘stroke’</span></a>, <a href="#painting-StrokeDasharrayProperty"><span class="prop-name">‘stroke-dasharray’</span></a>, <a href="#painting-StrokeDashoffsetProperty"><span class="prop-name">‘stroke-dashoffset’</span></a>, <a href="#painting-StrokeLinecapProperty"><span class="prop-name">‘stroke-linecap’</span></a>, <a href="#painting-StrokeLinejoinProperty"><span class="prop-name">‘stroke-linejoin’</span></a>, <a href="#painting-StrokeMiterlimitProperty"><span class="prop-name">‘stroke-miterlimit’</span></a>, <a href="#painting-StrokeWidthProperty"><span class="prop-name">‘stroke-width’</span></a> and <a href="#painting-ColorRenderingProperty"><span class="prop-name">‘color-rendering’</span></a> properties</dd></dl>
<dl id="feature-OpacityAttribute"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#OpacityAttribute</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#masking-OpacityProperty"><span class="prop-name">‘opacity’</span></a>, <a href="#painting-StrokeOpacityProperty"><span class="prop-name">‘stroke-opacity’</span></a> and <a href="#painting-FillOpacityProperty"><span class="prop-name">‘fill-opacity’</span></a> properties</dd></dl>
<dl id="feature-GraphicsAttribute"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#GraphicsAttribute</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a>, <a href="#painting-ImageRenderingProperty"><span class="prop-name">‘image-rendering’</span></a>, <a href="#interact-PointerEventsProperty"><span class="prop-name">‘pointer-events’</span></a>, <a href="#painting-ShapeRenderingProperty"><span class="prop-name">‘shape-rendering’</span></a>, <a href="#painting-TextRenderingProperty"><span class="prop-name">‘text-rendering’</span></a> and <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> properties</dd></dl>
<dl id="feature-BasicGraphicsAttribute"><dt>Feature String:</dt><dd>
  http://www.w3.org/TR/SVG11/feature#BasicGraphicsAttribute</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#painting-DisplayProperty"><span class="prop-name">‘display’</span></a> and <a href="#painting-VisibilityProperty"><span class="prop-name">‘visibility’</span></a> properties</dd></dl>
<dl id="feature-Marker"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Marker</dd><dt>User Agent Supports:</dt><dd>the <a href="#painting-MarkerElement"><span class="element-name">‘marker’</span></a> element</dd></dl>
<dl id="feature-ColorProfile"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#ColorProfile</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#color-ColorProfileElement"><span class="element-name">‘color-profile’</span></a> element</dd></dl>
<dl id="feature-Gradient"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Gradient</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#pservers-LinearGradientElement"><span class="element-name">‘linearGradient’</span></a>, <a href="#pservers-RadialGradientElement"><span class="element-name">‘radialGradient’</span></a> and <a href="#pservers-StopElement"><span class="element-name">‘stop’</span></a> elements</dd></dl>
<dl id="feature-Pattern"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Pattern</dd><dt>User Agent Supports:</dt><dd>the <a href="#pservers-PatternElement"><span class="element-name">‘pattern’</span></a> element</dd></dl>
<dl id="feature-Clip"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Clip</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element and the <a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a> and <a href="#masking-ClipRuleProperty"><span class="prop-name">‘clip-rule’</span></a> properties</dd></dl>
<dl id="feature-BasicClip"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#BasicClip</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#masking-ClipPathElement"><span class="element-name">‘clipPath’</span></a> element and the <a href="#masking-ClipPathProperty"><span class="prop-name">‘clip-path’</span></a> property</dd></dl>
<dl id="feature-Mask"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Mask</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#masking-MaskElement"><span class="element-name">‘mask’</span></a> element</dd></dl>
<dl id="feature-Filter"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Filter</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feConvolveMatrixElement"><span class="element-name">‘feConvolveMatrix’</span></a>, <a href="#filters-feDiffuseLightingElement"><span class="element-name">‘feDiffuseLighting’</span></a>, <a href="#filters-feDisplacementMapElement"><span class="element-name">‘feDisplacementMap’</span></a>, <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a>, <a href="#filters-feMergeNodeElement"><span class="element-name">‘feMergeNode’</span></a>, <a href="#filters-feMorphologyElement"><span class="element-name">‘feMorphology’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-feSpecularLightingElement"><span class="element-name">‘feSpecularLighting’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, <a href="#filters-feDistantLightElement"><span class="element-name">‘feDistantLight’</span></a>, <a href="#filters-fePointLightElement"><span class="element-name">‘fePointLight’</span></a>, <a href="#filters-feSpotLightElement"><span class="element-name">‘feSpotLight’</span></a>, <a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a>, <a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a>, <a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a> and <a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a> elements</dd></dl>
<dl id="feature-BasicFilter"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#BasicFilter</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#filters-FilterElement"><span class="element-name">‘filter’</span></a>, <a href="#filters-feBlendElement"><span class="element-name">‘feBlend’</span></a>, <a href="#filters-feColorMatrixElement"><span class="element-name">‘feColorMatrix’</span></a>, <a href="#filters-feComponentTransferElement"><span class="element-name">‘feComponentTransfer’</span></a>, <a href="#filters-feCompositeElement"><span class="element-name">‘feComposite’</span></a>, <a href="#filters-feFloodElement"><span class="element-name">‘feFlood’</span></a>, <a href="#filters-feGaussianBlurElement"><span class="element-name">‘feGaussianBlur’</span></a>, <a href="#filters-feImageElement"><span class="element-name">‘feImage’</span></a>, <a href="#filters-feMergeElement"><span class="element-name">‘feMerge’</span></a>, <a href="#filters-feMergeNodeElement"><span class="element-name">‘feMergeNode’</span></a>, <a href="#filters-feOffsetElement"><span class="element-name">‘feOffset’</span></a>, <a href="#filters-feTileElement"><span class="element-name">‘feTile’</span></a>, <a href="#filters-feFuncRElement"><span class="element-name">‘feFuncR’</span></a>, <a href="#filters-feFuncGElement"><span class="element-name">‘feFuncG’</span></a>, <a href="#filters-feFuncBElement"><span class="element-name">‘feFuncB’</span></a> and <a href="#filters-feFuncAElement"><span class="element-name">‘feFuncA’</span></a> elements</dd></dl>
<dl id="feature-DocumentEventsAttribute"><dt>Feature String:</dt><dd>
  http://www.w3.org/TR/SVG11/feature#DocumentEventsAttribute</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#script-OnUnloadEventAttribute"><span class="attr-name">‘onunload’</span></a>, <a href="#script-OnAbortEventAttribute"><span class="attr-name">‘onabort’</span></a>, <a href="#script-OnErrorEventAttribute"><span class="attr-name">‘onerror’</span></a>, <a href="#script-OnResizeEventAttribute"><span class="attr-name">‘onresize’</span></a>, <a href="#script-OnScrollEventAttribute"><span class="attr-name">‘onscroll’</span></a> and <a href="#script-OnZoomEventAttribute"><span class="attr-name">‘onzoom’</span></a> attributes</dd></dl>
<dl id="feature-GraphicalEventsAttribute"><dt>Feature String:</dt><dd>
  http://www.w3.org/TR/SVG11/feature#GraphicalEventsAttribute</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#script-OnFocusInEventAttribute"><span class="attr-name">‘onfocusin’</span></a>, <a href="#script-OnFocusOutEventAttribute"><span class="attr-name">‘onfocusout’</span></a>, <a href="#script-OnActivateEventAttribute"><span class="attr-name">‘onactivate’</span></a>, <a href="#script-OnClickEventAttribute"><span class="attr-name">‘onclick’</span></a>, <a href="#script-OnMouseDownEventAttribute"><span class="attr-name">‘onmousedown’</span></a>, <a href="#script-OnMouseUpEventAttribute"><span class="attr-name">‘onmouseup’</span></a>, <a href="#script-OnMouseOverEventAttribute"><span class="attr-name">‘onmouseover’</span></a>, <a href="#script-OnMouseMoveEventAttribute"><span class="attr-name">‘onmousemove’</span></a>, <a href="#script-OnMouseOutEventAttribute"><span class="attr-name">‘onmouseout’</span></a> and <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a> attributes</dd></dl>
<dl id="feature-AnimationEventsAttribute"><dt>Feature String:</dt><dd>
  http://www.w3.org/TR/SVG11/feature#AnimationEventsAttribute</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#script-OnBeginEventAttribute"><span class="attr-name">‘onbegin’</span></a>, <a href="#script-OnEndEventAttribute"><span class="attr-name">‘onend’</span></a>, <a href="#script-OnRepeatEventAttribute"><span class="attr-name">‘onrepeat’</span></a> and <a href="#script-OnLoadEventAttribute"><span class="attr-name">‘onload’</span></a> attributes</dd></dl>
<dl id="feature-Cursor"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Cursor</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#interact-CursorElement"><span class="element-name">‘cursor’</span></a> element</dd></dl>
<dl id="feature-Hyperlinking"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Hyperlinking</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#linking-AElement"><span class="element-name">‘a’</span></a> element</dd></dl>
<dl id="feature-XlinkAttribute"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#XlinkAttribute</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#linking-XLinkTypeAttribute"><span class="attr-name">‘xlink:type’</span></a>, <a href="#animate-HrefAttribute"><span class="attr-name">‘xlink:href’</span></a>, <a href="#linking-XLinkRoleAttribute"><span class="attr-name">‘xlink:role’</span></a>, <a href="#linking-XLinkArcRoleAttribute"><span class="attr-name">‘xlink:arcrole’</span></a>, <a href="#linking-XLinkTitleAttribute"><span class="attr-name">‘xlink:title’</span></a>, <a href="#linking-XLinkShowAttribute"><span class="attr-name">‘xlink:show’</span></a> and <a href="#linking-XLinkActuateAttribute"><span class="attr-name">‘xlink:actuate’</span></a> attributes</dd></dl>
<dl id="feature-ExternalResourcesRequired"><dt>Feature String:</dt><dd>
  http://www.w3.org/TR/SVG11/feature#ExternalResourcesRequired</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#struct-ExternalResourcesRequiredAttribute"><span class="attr-name">‘externalResourcesRequired’</span></a> attribute</dd></dl>
<dl id="feature-View"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#View</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#linking-ViewElement"><span class="element-name">‘view’</span></a> element</dd></dl>
<dl id="feature-Script"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Script</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#script-ScriptElement"><span class="element-name">‘script’</span></a> element</dd></dl>
<dl id="feature-Animation"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Animation</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#animate-AnimateElement"><span class="element-name">‘animate’</span></a>, <a href="#animate-SetElement"><span class="element-name">‘set’</span></a>, <a href="#animate-AnimateMotionElement"><span class="element-name">‘animateMotion’</span></a>, <a href="#animate-AnimateTransformElement"><span class="element-name">‘animateTransform’</span></a>, <a href="#animate-AnimateColorElement"><span class="element-name">‘animateColor’</span></a> and <a href="#animate-MPathElement"><span class="element-name">‘mpath’</span></a> elements</dd></dl>
<dl id="feature-Font"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Font</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a>, <a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a>, <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a>, <a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a>, <a href="#fonts-VKernElement"><span class="element-name">‘vkern’</span></a>, <a href="#fonts-FontFaceSrcElement"><span class="element-name">‘font-face-src’</span></a>, <a href="#fonts-FontFaceURIElement"><span class="element-name">‘font-face-uri’</span></a>, <a href="#fonts-FontFaceFormatElement"><span class="element-name">‘font-face-format’</span></a> and <a href="#fonts-FontFaceNameElement"><span class="element-name">‘font-face-name’</span></a>  elements</dd></dl>
<dl id="feature-BasicFont"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#BasicFont</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#fonts-FontElement"><span class="element-name">‘font’</span></a>, <a href="#fonts-FontFaceElement"><span class="element-name">‘font-face’</span></a>, <a href="#fonts-GlyphElement"><span class="element-name">‘glyph’</span></a>, <a href="#fonts-MissingGlyphElement"><span class="element-name">‘missing-glyph’</span></a>, <a href="#fonts-HKernElement"><span class="element-name">‘hkern’</span></a>, <a href="#fonts-FontFaceSrcElement"><span class="element-name">‘font-face-src’</span></a> and <a href="#fonts-FontFaceNameElement"><span class="element-name">‘font-face-name’</span></a>  elements</dd></dl>
<dl id="feature-Extensibility"><dt>Feature String:</dt><dd>http://www.w3.org/TR/SVG11/feature#Extensibility</dd><dt>User Agent Supports:</dt><dd>
    the <a href="#extend-ForeignObjectElement"><span class="element-name">‘foreignObject’</span></a> element</dd></dl>

<h2 id="feature-SVG10FeatureStrings">O.3 SVG 1.0 feature strings</h2>

    <p>All <a href="http://www.w3.org/TR/2001/REC-SVG-20010904/">SVG 1.0</a> [<a href="#refs-ref-SVG10">SVG10</a>]
    feature strings referring to language
    capabilities begin with <strong>"org.w3c.svg"</strong>. All SVG
    1.0 feature strings referring to <a href="#chapter-svgdom">SVG
    DOM</a> capabilities begin with
    <strong>"org.w3c.dom.svg"</strong>.</p>
    <ul><li>The feature string <strong>"org.w3c.svg"</strong>
      indicates that the user agent supports at least one of the
      following (all of which are described subsequently):
      <strong>"org.w3c.svg.static"</strong>,
      <strong>"org.w3c.svg.animation"</strong>,
      <strong>"org.w3c.svg.dynamic"</strong> or
      <strong>"org.w3c.dom.svg"</strong>. (Because the feature
      string <strong>"org.w3c.svg"</strong> can be ambiguous in
      some circumstances, it is recommended that more specific
      feature strings be used.)</li><li>The feature string <strong>"org.w3c.dom.svg"</strong>
      indicates that the user agent supports at least one of the
      following (all of which are described subsequently):
      <strong>"org.w3c.dom.svg.static"</strong>,
      <strong>"org.w3c.dom.svg.animation"</strong> or
      <strong>"org.w3c.dom.svg.dynamic"</strong>. (Because the
      feature string <strong>"org.w3c.dom.svg"</strong> can be
      ambiguous in some circumstances, it is recommended that more
      specific feature strings be used.)</li><li>
        The feature string <strong>"org.w3c.svg.static"</strong>
        indicates the availability of all of the language
        capabilities defined in: 
        <ul><li><a href="#chapter-types">Basic Data Types and
          Interfaces</a></li><li><a href="#chapter-struct">Document Structure</a></li><li><a href="#chapter-styling">Styling</a></li><li><a href="#chapter-coords">Coordinate Systems,
          Transformations and Units</a></li><li><a href="#chapter-paths">Paths</a></li><li><a href="#chapter-shapes">Basic Shapes</a></li><li><a href="#chapter-text">Text</a></li><li><a href="#chapter-painting">Painting: Filling, Stroking
          and Marker Symbols</a></li><li><a href="#chapter-color">Color</a></li><li><a href="#chapter-pservers">Gradients and
          Patterns</a></li><li><a href="#chapter-masking">Clipping, Masking and
          Compositing</a></li><li><a href="#chapter-filters">Filter Effects</a></li><li><a href="#chapter-fonts">Fonts</a></li><li>The <a href="#struct-SwitchElement"><span class="element-name">‘switch’</span></a> element</li><li>The <a href="#struct-RequiredFeaturesAttribute"><span class="attr-name">‘requiredFeatures’</span></a> attribute</li><li>The <a href="#struct-RequiredExtensionsAttribute"><span class="attr-name">‘requiredExtensions’</span></a> attribute</li><li>The <a href="#struct-SystemLanguageAttribute"><span class="attr-name">‘systemLanguage’</span></a> attribute</li></ul>
        <p>For SVG viewers, <strong>"org.w3c.svg.static"</strong>
        indicates that the viewer can process and render
        successfully all of the language features listed above.</p>
      </li><li>The feature string
      <strong>"org.w3c.dom.svg.static"</strong> indicates the
      availability of all of the DOM interfaces and methods that
      correspond to the language features for
      <strong>"org.w3c.svg.static"</strong>.</li><li>The feature string
      <strong>"org.w3c.svg.animation"</strong> includes all of the
      language capabilities defined for
      <strong>"org.w3c.svg.static"</strong> plus the availability
      of all of the language capabilities defined in <a href="#chapter-animate">Animation</a>. For SVG viewers running on
      media capable of rendering time-based material, such as
      displays, <strong>"org.w3c.svg.animation"</strong> indicates
      that the viewer can process and render successfully all of
      the corresponding language features.</li><li>The feature string
      <strong>"org.w3c.dom.svg.animation"</strong> corresponds to
      the availability of DOM interfaces and methods that
      correspond to the language features for
      <strong>"org.w3c.svg.animation"</strong>.</li><li>The feature string <strong>"org.w3c.svg.dynamic"</strong>
      includes all of the language capabilities defined for
      <strong>"org.w3c.svg.animation"</strong> plus the
      availability of all of the language capabilities defined in
      <a href="#svgdom-RelationshipWithDOM2Events">Relationship
      with DOM2 events</a>, <a href="#chapter-linking">Linking</a> and
      <a href="#chapter-interact">Interactivity</a> and <a href="#chapter-script">Scripting</a>. For SVG viewers running on
      media capable of rendering time-based material, such as
      displays, <strong>"org.w3c.svg.dynamic"</strong> indicates
      that the viewer can process and render successfully all of
      the corresponding language features.</li><li>The feature string
      <strong>"org.w3c.dom.svg.dynamic"</strong> corresponds to the
      availability of DOM interfaces and methods that correspond to
      the language features for
      <strong>"org.w3c.svg.dynamic"</strong>.</li><li>The feature string <strong>"org.w3c.svg.all"</strong>
      corresponds to the availability of all of the language
      capabilities defined in this specification.</li><li>The feature string <strong>"org.w3c.dom.svg.all"</strong>
      corresponds to the availability of all of the DOM interfaces
      defined in this specification.</li></ul>

</div><hr class="chapter-divider" />
<div id="chapter-mimereg">
<h1 id="mimereg-mimereg">Appendix P: Media Type Registration for image/svg+xml</h1><h2 id="mimereg-toc">Contents</h2><ul class="toc">
<li><a href="#mimereg-mime-intro">P.1 
Introduction
</a></li>
<li><a href="#mimereg-mime-registration">P.2 
Registration of media type image/svg+xml
</a></li></ul>

<p class="normativity"><strong>This appendix is normative.</strong></p>

<h2 id="mimereg-mime-intro">P.1 
Introduction
</h2>

<p>
This appendix registers a new MIME media type, "image/svg+xml" in conformance with <a href="http://www.ietf.org/rfc/rfc4288.txt">BCP 13</a> and <a href="http://www.w3.org/2002/06/registering-mediatype.html">W3CRegMedia</a>.
</p>

<h2 id="mimereg-mime-registration">P.2 
Registration of media type image/svg+xml
</h2>

<dl><dt>
Type name:</dt><dd>
<p>
image
</p>

</dd><dt>
Subtype name:</dt><dd>
<p>
svg+xml
</p>

</dd><dt>
Required parameters:</dt><dd>
<p>
None.
</p>

</dd><dt>
Optional parameters:</dt><dd>
<p>
charset
</p>

<p>
Same as application/xml media type, as specified in [<a href="#refs-ref-RFC3023">RFC3023</a>] or its successors.
</p>

</dd><dt>
Encoding considerations:</dt><dd>
<p>
Same as for application/xml. See [<a href="#refs-ref-RFC3023">RFC3023</a>], section 3.2 or its successors.
</p>

</dd><dt>
Security considerations:</dt><dd>
<p>
As with other XML types and as noted in [<a href="#refs-ref-RFC3023">RFC3023</a>] section 10, repeated expansion of maliciously constructed XML entities can be used to consume large amounts of memory, which may cause XML processors in constrained environments to fail.
</p>


<p>
Several SVG elements may cause arbitrary URIs to be referenced. In this case, the security issues of [<a href="#refs-ref-RFC3986">RFC3986</a>], section 7, should be considered.
</p>

<p>
In common with HTML, SVG documents may reference external media such as images, audio, video, style sheets, and scripting languages. Scripting languages are executable content. In this case, the security considerations in the Media Type registrations for those formats shall apply.
</p>

<p>
In addition, because of the extensibility features for SVG and of XML in general, it is possible that "image/svg+xml" may describe content that has security implications beyond those described here. However, if the processor follows only the normative semantics of the published specification, this content will be outside the SVG namespace and shall be ignored. Only in the case where the processor recognizes and processes the additional content, or where further processing of that content is dispatched to other processors, would security issues potentially arise. And in that case, they would fall outside the domain of this registration document.
</p>

</dd><dt>
Interoperability considerations:</dt><dd>
<p>
The published specification describes processing semantics that dictate behavior that must be followed when dealing with, among other things, unrecognized elements and attributes, both in the SVG namespace and in other namespaces.
</p>

<p>
Because SVG is extensible, conformant "image/svg+xml" processors must expect that content received is well-formed XML, but it cannot be guaranteed that the content is valid to a particular DTD or Schema or that the processor will recognize all of the elements and attributes in the document.
</p>

<p>
SVG has a published Test Suite and associated implementation report showing which implementations passed which tests at the time of the report. This information is periodically updated as new tests are added or as implementations improve.
</p>

</dd><dt>
Published specification:</dt><dd>
<p>
This media type registration is extracted from Appendix P of the <a href="http://www.w3.org/TR/SVG11">SVG 1.1 specification</a>.
</p>

</dd><dt>
Applications that use this media type:</dt><dd>
<p>
SVG is used by Web browsers, often in conjunction with HTML; by mobile phones and digital cameras, as a format for interchange of graphical assets in desk top publishing, for industrial process visualization, display signage, and many other applications which require scalable static or interactive graphical capability.
</p>

</dd><dt>
Additional information:</dt><dd><dl><dt>Magic number(s):</dt><dd></dd><dt>File extension(s):</dt><dd>svg
     <p>Note that the extension 'svgz' is used as an alias for 'svg.gz'
       <cite>[<a href="#refs-ref-RFC1952">RFC1952</a>]</cite>, 
		<em>i.e.</em> octet streams of type image/svg+xml, subsequently
        compressed with gzip.</p></dd><dt>Macintosh file type code(s):</dt><dd>"svg "  (all lowercase, with a space character as the 
     fourth letter).
     <p>Note that the Macintosh file type code 'svgz' (all lowercase) is used as an alias for GZIP
        <cite>[<a href="#refs-ref-RFC1952">RFC1952</a>]</cite> compressed "svg ", <em>i.e.</em>
         octet streams of type image/svg+xml, subsequently compressed with gzip.</p></dd><dt>Macintosh Universal Type Identifier code:  </dt><dd><tt>org.w3c.svg</tt> conforms to <tt>public.image</tt>   and to <tt>public.xml</tt></dd><dt>Windows Clipboard Name:</dt><dd>"SVG Image"</dd><dt>Fragment Identifiers</dt><dd>For documents labeled as application/svg+xml, the fragment identifier
  notation is either Shorthand Pointers (formerly called barenames) or
  the SVG-specific <a href="#linking-LinksIntoSVG">SVG Views</a> syntax; 
  both described in the <a href="#linking-SVGFragmentIdentifiers">fragment
  identifiers section of the SVG specification</a>.</dd></dl>
</dd><dt>
Person &amp; email address to contact for further information:</dt><dd>
<p>
Chris Lilley, Doug Schepers (member-svg-media-type@w3.org).
</p>

</dd><dt>
Intended usage:</dt><dd>
<p>
COMMON
</p>

</dd><dt>
Restrictions on usage:</dt><dd>
<p>
None
</p>

</dd><dt>
Author:</dt><dd>
<p>
The SVG specification is a work product of the World Wide Web Consortium's SVG Working Group. 
</p>

</dd><dt>
Change controller:</dt><dd>
<p>
The W3C has change control over this specification.
</p>

</dd></dl>
</div><hr class="chapter-divider" />
<div id="chapter-changes">

<h1>Appendix Q: Changes</h1>
     
<p class="normativity"><em>This appendix is informative, not normative.</em></p>

<p>The only changes made to the document since the
  <a href="http://www.w3.org/TR/2011/PR-SVG11-20110609/">SVG 1.1 Second Edition Proposed Recommendation</a> were the following:</p>

<ul><li>Some additional wording in the CSS 2.0 reference in the <a href="#chapter-refs">References Appendix</a> to
  indicate that future versions of the SVG specification will reference CSS 2.1 and CSS Fonts Module Level 3.</li><li>An update to the informative MathML reference from MathML 2.0 to MathML 3.0.</li></ul>

</div><script src="style/expanders.js" type="text/javascript"> </script></body></html>
